<?php

App::uses('AppController', 'Controller');

class ReqsController extends AppController {

    var $name = 'Reqs';
    var $modelName = 'Req';
    public $paginate = array('limit' => 50);
    public $moneyFields = array('Req.price', 'Req.amount', 'Req.foreign_price', 'Req.foreign_amount');
    var $components = array(
        'Yourls.Yourls',
    );
    public $helpers = array(
        'ContractHtml',
        'CommonHtml',
    );

    public function beforeFilter() {
        parent::beforeFilter();
        if (in_array($this->request->params['action'], array('pub_view_req_attachments', 'syncEbsStage', 'setMfBomReq', 'setSemiBomReq', 'AutoRemindBomTask', 'pub_download_shipping_mark',
                    'SetInvOrders', 'SetCloseOrders', 'pop_view_common_label', 'AutoConfirmBomToEbs', 'AutoCancelStockOrders', 'SyncSalesOrderDataToEbs', 'set_undelivered_qty', 'pop_print_reqs',
                    'pub_download_lastest_cfm', 'sync_urgent_order', 'notice_warn_order_json', 'pdf_print_reqs', 'print_contract_pdf', 'auto_set_order_stock_json', 'sync_product_available_qty',
                    'sync_risk_mtl_count', 'sync_mf_promise_dates_json'))) {
            $this->Auth->allowedActions = array('*');
            $title_for_layout = '查看订单附件';
        }
    }

    public function notice_warn_order_json() {
        set_time_limit(1800);
        global $g_Commons;
        $this->autoRender = false;
        $result = array(
            'success' => 0,
            'message' => 'notice_warn_order_json'
        );

        //check is the first time to warn today in produce
        if (false === strpos($_SERVER['HTTP_HOST'], 'ocstest')) {
            $is_ocstest_system = 0;
        } else {
            $is_ocstest_system = 1;
        }
        $today_warn_times = $this->Req->getTodayWarnOrderTimes();
        if (!$is_ocstest_system && $today_warn_times > 0) {
            $result['message'] = 'today had warned';
            echo json_encode($result);
            return;
        }

        //get all warn orders
        $warn_orders = $this->Req->getAllWarnOrder();
        App::import('Vendor', 'view/CommonView');
        $common_view = new CommonView();
        $format_rows = $common_view->reduce_array_v($warn_orders);

        //split by owneruser
        $user_rows = array();
        foreach ($format_rows as $format_row) {
            if (!isset($user_rows[$format_row['owneruser.email']])) {
                $user_rows[$format_row['owneruser.email']] = array();
            }
            $user_rows[$format_row['owneruser.email']][] = $format_row;
        }

        //add more config info
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $warn_tips = $g_ObjRelObj->getRelObjData(Req, null, null, 'main_recommend_order_warn_email_tips');
        $warn_copyers = $g_ObjRelObj->getRelObjData(Req, null, null, 'main_recommend_order_warn_emails');
        if (isset($warn_tips[0]) && isset($warn_tips[0]['ObjRelObj']['meta_value'])) {
            $warn_tips = $warn_tips[0]['ObjRelObj']['meta_value'];
        } else {
            $warn_tips = '';
        }
        if (isset($warn_copyers[0]) && isset($warn_copyers[0]['ObjRelObj']['meta_value'])) {
            $warn_copyers = explode(';', $warn_copyers[0]['ObjRelObj']['meta_value']);
        } else {
            $warn_copyers = array();
        }

        //get table_view_emails
        $table_view_emails = array();
        $table_data = array();
        $table_data['fields'] = $this->Req->getWarnOrderFields();
        foreach ($user_rows as $key => $user_row) {
            $table_data['rows'] = $user_row;
            $table_view_emails[$key] = $common_view->get_table_email($table_data);
            $table_view_emails[$key] = $warn_tips . $table_view_emails[$key];
        }

        //send emails
        $g_email_sends = $g_Commons->GlobalController('EmailSends');
        $g_xxar_common_log = $g_Commons->GlobalModel('XxarCommonLog');
        if ($is_ocstest_system) {
            $g_email_sends->subject = '[测试请忽略]风险订单预警[' . date('Y-m-d H:i:s') . ']';
        } else {
            $g_email_sends->subject = '风险订单预警[' . date('Y-m-d H:i:s') . ']';
        }
        $g_email_sends->contentSubject = '尊敬的用户，请查阅：';
        foreach ($table_view_emails as $key => $table_view_email) {
            $g_email_sends->body = $table_view_email;
            $to_user_emails = array($key);
            $g_email_sends->toUsers = $to_user_emails;
            $g_email_sends->ccUsers = $warn_copyers;
            $send_email_result = $g_email_sends->sendEmail();

            //add common log
            $log_row = array(
                'created_by' => $g_xxar_common_log->get_username(),
                'action' => 'Reqs.notice_warn_order_json',
                'string_fields' => '1收件人_2邮件正文',
                'string1' => substr(json_encode($to_user_emails), 0, 230),
                'string2' => substr(json_encode($user_rows[$key]), 0, 230),
                'remark' => $g_xxar_common_log->get_client_ip(),
            );
            $write_log_result = $g_xxar_common_log->insert($log_row);
        }

        $result['success'] = 1;
        echo json_encode($result);
        return;
    }

    public function index($model_name = 'Contract') {
        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_Commons;
        global $g_UserId;
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Attachment = $g_Commons->GlobalModel('Attachment');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_ModelDef = $g_Commons->GlobalModel('ModelDef');
        $g_Task = $g_Commons->GlobalModel('Task');
        $g_Type = $g_Commons->GlobalModel('Type');
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_UserPrefColumn = $g_Commons->GlobalModel('UserPrefColumn');
        $g_EbsXxocsStock = $g_Commons->GlobalModel('EbsXxocsStock');

        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_Searches = $g_Commons->GlobalController('Searches');
        $g_Searches->Search->recursive = -1;
        $g_UserPrefSearches = $g_Commons->GlobalController('UserPrefSearches');
        $this->Req->recursive = 0;
        $g_OrderLine = $g_Commons->GlobalModel('OrderLine');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Logs->Log->recursive = -1;

        $params = $this->params->params['named'];
        $range = 'my';
        $list_type = null;
        if (isset($params['range'])) {
            $range = $params['range'];
        }
        if (isset($params['list_type'])) {
            $list_type = $params['list_type'];
        }
        $this->set('list_type', $list_type);
        $this->set('range', $range);
        $EbsStage = -1;
        if (isset($params['ebs_stage'])) {
            $EbsStage = $params['ebs_stage'];
        }

        $this->set('EbsStage', $EbsStage);
        //允许访问的模块，默认为订单需求req
        $allow_sort_array = array('Req');

        // 获取状态页签 add by GUOCAI
        $close_status = isset($params['close_status']) ? $params['close_status'] : 0;
        $close_status_items = $g_Enum->getEnumByDictName('Req.close_status');
        $close_status_tab = array('on' => $close_status, 'items' => $close_status_items,);
        $this->set('close_status_tab', $close_status_tab);
        // 获取合同确认书页签
        $attach_status = isset($params['attach_status']) ? $params['attach_status'] : '';
        $attach_status_tab = array();
        $attach_status_tab['on'] = $attach_status;

        switch ($g_BizId) {
            case OCS_BIZ_TYPE_TAD:
            case OCS_BIZ_TYPE_TV:
            case OCS_BIZ_TYPE_SCS:
                $attach_status_tab['items'][] = array('value' => 'no.confirmation', 'label' => '待上传确认书');
                $attach_status_tab['items'][] = array('value' => 'no.contract', 'label' => '未传合同');
                break;
            case OCS_BIZ_TYPE_MID:
            case OCS_BIZ_TYPE_STB:
            case OCS_BIZ_TYPE_ISH:
            case OCS_BIZ_TYPE_CE:
            case OCS_BIZ_TYPE_AE:
                $attach_status_tab['items'][] = array('value' => 'no.confirmation', 'label' => '待上传确认书');
                $attach_status_tab['items'][] = array('value' => 'no.contract', 'label' => '未传合同/PI');
                $attach_status_tab['items'][] = array('value' => 'no.PO', 'label' => '未传PO');
            case OCS_BIZ_TYPE_PS:
                $attach_status_tab['items'][] = array('value' => 'no.contract', 'label' => '未传合同');
                break;
            default:
                $attach_status_tab['items'][] = array('value' => 'no.confirmation', 'label' => '待上传确认书');
                $attach_status_tab['items'][] = array('value' => 'no.contract', 'label' => '未传合同/PI');
                $attach_status_tab['items'][] = array('value' => 'no.PO', 'label' => '未传PO');
            break;
        }
        $this->set('attach_status_tab', $attach_status_tab);

        $req_model_def = $g_ModelDef->findByModelName($model_name);
        $this->set('req_rel_model_name', $model_name);
        $this->set('req_rel_model_id', $req_model_def['ModelDef']['id']);
        $this->set('title_for_layout', __($range) . __($model_name));

        // ---- 高级搜索 ----
        $SearchId = 0;
        if (isset($params['SearchId'])) {
            $SearchId = $params['SearchId'];
        }
        if (0 == $SearchId) {
            $SearchId = $g_UserPrefSearches->getDefaultSearch($this->name, $req_model_def['ModelDef']['id']);
        }
        //加入默认排序 2014 - 11.6 从数据库表ocs_user_pref_columns中读取sort_field字段排序
        $userPrefColId = 0;
        if (isset($params['userPrefColId'])) {
            $userPrefColId = $params['userPrefColId'];
        }
        $filterArray = '';
        if (isset($params['filterArray'])) {
            $filterArray = $params['filterArray'];
        }

        $InheritParams = array(array('key' => 'range', 'value' => $range)); // 需要继承的参数
        $stage_conds = '';
        if ('Contract' == $model_name) {
            //获取订单阶段
            $ContractStages = $g_Enum->getEnumListByDictName('Contract.crm_stage');
            $this->set('ContractStages', $ContractStages);
            $EbsStages = $g_Enum->getEnumListByDictName('Contract.ebs_stage');
            $this->set('EbsStages', $EbsStages);
            //获取订单状态
            $ContractStatus = $g_Enum->getEnumListByDictName('Contract.status');
            $this->set('ContractStatus', $ContractStatus);
            if (isset($params['ebs_stage'])) {
                $page_stage_title = $EbsStages[$params['ebs_stage']];
                $this->set('ebs_stage', $params['ebs_stage']);
                $this->set('stage_title', $page_stage_title);
                $InheritParams[] = array('key' => 'ebs_stage', 'value' => $params['ebs_stage']);
                if (0 == $params['ebs_stage']) {
                    $stage_conds .= " AND (Contract.ebs_stage IS NULL OR Contract.ebs_stage ='' OR Contract.ebs_stage = 0)";
                } else {
                    $stage_conds .= ' AND (Contract.ebs_stage=' . $params['ebs_stage'] . ')';
                }
            }
            if (isset($params['status'])) {
                $page_stage_title = $ContractStatus[$params['status']];
                $this->set('status', $params['status']);
                $this->set('stage_title', $page_stage_title);
                $stage_conds .= ' AND (Contract.status=' . $params['status'] . ')';
                $InheritParams[] = array('key' => 'status', 'value' => $params['status']);
            }
        }

        if ('SampleOrder' == $model_name) {
            $SampleOrderStatus = $g_Enum->getEnumListByDictName('SampleOrder.status');
            $this->set('SampleOrderStatus', $SampleOrderStatus);
        }

        $this->set('InheritParams', $InheritParams);

        // 提交按id跳转
        if ($this->request->is('post') && !empty($this->request->data['sample_order_task_id'])) {
            $id_temp = $this->request->data['sample_order_task_id'];
            $id_temp = ltrim($id_temp, '#');
            $id = $id_temp;
            $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Tasks', 'action' => 'view/range:' . $range . '/' . $id . '/model_name:Reqs/model_params:SampleOrder'));
        }

        $this->paginate['conditions'] = '(Req.model_def_id = ' . $req_model_def['ModelDef']['id'] . ') AND (Req.parent_id = 0) AND (Req.biz_id = ' . $g_BizId . ')' . $stage_conds;
        $this->paginate['fields'] = 'Req.*';

        // 获取虚拟字段并加追到查询的字段中
        $user_pref_columns = $g_UserPrefColumn->find('first',array(
            'conditions' =>array(
                'model_name' => 'Req',
                'user_id' => $g_UserId,
                'biz_id' => $g_BizId,
                'is_default' => 1,
                'rel_obj_model_id' => $req_model_def['ModelDef']['id']
            ),
            'fields' =>'UserPrefColumn.field_names'
        ));

        $not_sel_virtual_fields = array(
            'Req.risk_mtl_count'
        );
        if (!empty($user_pref_columns['UserPrefColumn']['field_names'])) {
            $field_name_array = explode(',', $user_pref_columns['UserPrefColumn']['field_names']);
            $field_name_array = array_diff($field_name_array, $not_sel_virtual_fields); //获取差集
            foreach ($field_name_array as $field_name_index => $field_name) {
                $temp_field_name =  explode(".",$field_name);
                if (2 != count($temp_field_name)) {
                    unset($field_name_array[$field_name_index]);
                    continue;
                }
            }
            $field_array = $g_AttrDics->AttrDic->find('list',array(
                'conditions' => array(
                    'AttrDic.name' => $field_name_array,
                    'AttrDic.input_type' => OCS_ATTR_INPUT_TYPE_VIRTUAL_FIELD,
                ),
                'fields' => array('AttrDic.id', 'AttrDic.name'),
            ));
        }
        // 虚拟字段追加到field
        if (!empty($field_array)) {
            $this->paginate['fields'] .= ',' . implode(',', $field_array);
        }

        switch ($model_name) {
            case 'SampleOrder':
                $this->paginate['joins'][] = array(
                    'table' => 'sample_orders',
                    'alias' => 'SampleOrder',
                    'type' => 'LEFT',
                    'conditions' => 'Req.rel_obj_id = SampleOrder.id'
                );
                $this->paginate['joins'][] = array(
                    'table' => 'tasks',
                    'alias' => 'Task',
                    'type' => 'LEFT',
                    'conditions' => 'Task.rel_obj_id = Req.id AND Task.model_def_id = ' . Req
                );
                $this->paginate['joins'][] = array(
                    'table' => 'user_rel_tasks',
                    'alias' => 'UserRelTask',
                    'type' => 'LEFT',
                    'conditions' => "UserRelTask.task_id = Task.id AND UserRelTask.user_id = $g_UserId"
                );
                //允许SampleOrder字段访问
                $allow_sort_array[] = 'SampleOrder';
                break;
            case 'Contract':
                $this->paginate['joins'][] = array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'LEFT',
                    'conditions' => 'Req.rel_obj_id = Contract.id'
                );
                // 只查看EBS订单 add by GUOCAI 2014-06-03
                $this->paginate['conditions'] .= " AND Req.dest_type = 'EBS' ";
                //允许Contract字段访问
                $allow_sort_array[] = 'Contract';

                //add to get order more info 2015-4-15 14:54:19
                $this->paginate['joins'][] = array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'LEFT',
                    'conditions' => 'Req.id = RelReq.req_id'
                );
                $this->paginate['joins'][] = array(
                    'table' => 'order_cancels',
                    'alias' => 'OrderCancel',
                    'type' => 'LEFT',
                    'conditions' => 'Req.id = OrderCancel.req_id'
                );
                $allow_sort_array[] = 'RelReq';

                break;
        }
        $this->set('allow_sort_array',$allow_sort_array);

        $rang_condition = '';
        if ('task_notice' == $list_type) {
            $this->paginate['joins'][] = array(
                'table' => 'tasks',
                'alias' => 'Task',
                'type' => 'left',
                'conditions' => 'Req.id = Task.rel_obj_id'
            );
            $rang_condition .= ' and Task.id is null and Contract.ebs_stage >= ' . OCS_CONTRACT_EBS_STAGE_TO_PURCHASE;
            $rang_condition .= ' and Contract.is_has_stock = 0';
        }
        switch ($range) {
            case 'my':
                if ('SampleOrder' == $model_name) {
                    $rang_condition .= ' AND (Req.owner_user_id = \'' . $g_UserId . '\' OR Req.sales_user_id = \'' . $g_UserId . '\' OR SampleOrder.fae_user_id = \'' . $g_UserId . '\')';
                } else {
                    if ('task_notice' == $list_type) {
                        $rang_condition .= ' AND RelReq.pre_sw_user_id = ' . $g_UserId;
                    } else {
                        $rang_condition .= ' AND (Req.owner_user_id = \'' . $g_UserId . '\' OR Req.sales_user_id = \'' . $g_UserId . '\')';
                    }
                }
                break;
            case 'dept':
                if ('Contract' == $model_name) {
                    global $g_Privs;
                    $g_Dept = $g_Commons->GlobalModel('Dept');
                    $ChargeRdDeptIds = $g_Dept->getChargeRdDeptIds($g_UserId);
                    $MyDeptIds = explode(',', $g_Privs['UserDepts']['DeptIds']);
                    $MyDeptIds = array_merge($MyDeptIds, explode(',', $g_Privs['UserDepts']['ChildDeptIds']));
                    if (!empty($ChargeRdDeptIds)) {
                        $MyDeptIds = array_merge($MyDeptIds, $ChargeRdDeptIds);
                    }
                    $MyDeptIds = array_filter($MyDeptIds);
                    $MyDeptIds = array_unique($MyDeptIds);

                    if (!empty($MyDeptIds)) {
                        $rang_condition .= 'AND (Req.rd_dept_id IN (' . implode(",", $MyDeptIds) . ') OR Req.com_dept_id IN (' . implode(",", $MyDeptIds) . '))';
                    }

                }
                break;
            case 'Accounts':
                if ('Contract' == $model_name) {
                    $g_AccountRelUser = $g_Commons->GlobalModel('AccountRelUser');
                    $account_ids = $g_AccountRelUser->getMyChargeAccountIds(array(OCS_ACCOUNT_REL_USER_TYPE_OWNER, OCS_ACCOUNT_REL_USER_TYPE_SALES));
                    $account_ids_str = !empty($account_ids) ? implode(',', $account_ids) : 0;
                    $rang_condition .= ' AND Req.account_id IN(' . $account_ids_str . ') ';
                }
                break;
            case 'all':
                if ('Contract' == $model_name && OCS_BIZ_TYPE_TV == $g_BizId) {
                    // 全部订单 只能查看负责的对应订单类型
                    $g_Dept = $g_Commons->GlobalModel('Dept');
                    $ChargeRdDeptIds = $g_Dept->getChargeRdDeptIds($g_UserId);
                    $MyDeptIds = $g_Dept->getBelongDeptIdsByUserId($g_UserId);
                    if (!empty($ChargeRdDeptIds)) {
                        $MyDeptIds = array_merge($MyDeptIds, $ChargeRdDeptIds);
                    }
                    $MyDeptIds = array_filter($MyDeptIds);
                    $MyDeptIds = array_unique($MyDeptIds);

                    $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
                    $dept_rel_order_types = $g_ObjRelObj->find('list', array(
                        'conditions' => array(
                            'ObjRelObj.model_def_id' => Dept,
                            'ObjRelObj.rel_obj_id' => $MyDeptIds,
                            'ObjRelObj.meta_type' => OCS_OBJ_REL_OBJ_TYPE_DEPT_REL_TYPE,
                            'ObjRelObj.meta_key' => 'Dept.rel_order_typs',
                            'ObjRelObj.meta_value !=' => '',
                        ),
                        'fields' => 'ObjRelObj.rel_obj_id, ObjRelObj.meta_value'
                    ));

                    $rel_order_typs = array();
                    if (!empty($dept_rel_order_types)) {
                        foreach ($dept_rel_order_types as $type_ids) {
                            $rel_order_typs = array_merge($rel_order_typs, explode(',', $type_ids));
                        }
                    }

                    $g_AccountRelUser = $g_Commons->GlobalModel('AccountRelUser');
                    $rel_account_ids = $g_AccountRelUser->find('list', array(
                        'conditions' => array(
                            'AccountRelUser.biz_id' => $g_BizId,
                            'AccountRelUser.user_id' => $g_UserId,
                        ),
                        'fields' => 'AccountRelUser.account_id'
                    ));
                    $all_range_condition = array();
                    if (!empty($rel_order_typs)) {
                        $all_range_condition[] = 'Contract.type_id IN (' . implode(',', $rel_order_typs) . ')';
                    }

                    if (!empty($rel_account_ids)) {
                        $all_range_condition[] = 'Req.account_id IN (' . implode(',', $rel_account_ids) . ')';
                    }

                    if (empty($all_range_condition)) {
                        $rang_condition .= ' AND 1=0';
                    } else {
                        $rang_condition .= ' AND (' . implode(' OR ', $all_range_condition) . ')';
                    }
                }
                break;
        }

        // $this->paginate['group'] = array('Req.id'); hidden by GUOCAI 2015.02.11 批次搜索优化
        $this->paginate['conditions'] .= $rang_condition;

        // 根据页签显示不同内容
        if ('' !== $close_status && !isset($params['valid_order'])) {
            $this->paginate['conditions'] .= ' AND Req.close_status = ' . $close_status;
        } else {
            if (empty($close_status) && (!isset($params['valid_order']) || 1 != $params['valid_order'])) {
                $this->paginate['conditions'] .= ' AND Req.close_status != ' . OCS_ORDER_CLOSE_STATUS_PM_AUDIT;
            }
        }
        if (!empty($attach_status)) {
            $attach_type = null;
            if ('no.contract' == $attach_status) {
                // 未传合同不显示已作废订单 by wuhuashan
                $this->paginate['conditions'] .= " AND ((Req.attach_contract_status is null OR Req.attach_contract_status = 0) OR RelReq.is_has_account_signature = 'N') AND Req.close_status NOT IN(" . OCS_ORDER_CLOSE_STATUS_CANCEL . ")";
            } elseif ('no.confirmation' == $attach_status) {
                //$this->paginate['conditions'] .= ' AND (Req.attach_confirmation_status is null OR Req.attach_confirmation_status = 0) AND Req.close_status NOT IN(' . OCS_ORDER_CLOSE_STATUS_CLOSE . ',' . OCS_ORDER_CLOSE_STATUS_CANCEL .')';
                //过滤出进行中的订单 add by ziying
                $this->paginate['conditions'] .= ' AND (Req.attach_confirmation_status is null OR Req.attach_confirmation_status = 0) AND Req.close_status = 0';
                $this->paginate['conditions'] .= " AND Req.parent_id = 0 AND Req.dest_type = 'EBS' AND Req.model_def_id = " . Contract;

                // CPS回签 待处理 BEGIN
                // $this->paginate['conditions'] .= ' AND Attachment.model_def_id=' . CpsContract . ' AND Attachment.is_delete = 0  AND Attachment.is_lock = 0 AND Attachment.attach_type=' . OCS_ATTACH_TYPE_CPS_CONFIRMATION;
                // $this->paginate['conditions'] .= ' AND Req.close_status NOT IN(' . OCS_ORDER_CLOSE_STATUS_CANCEL .')';
                // $this->paginate['joins'][] = array(
                //     'table' => 'cps_contracts',
                //     'alias' => 'CpsContract',
                //     'type' => 'inner',
                //     'conditions' => 'CpsContract.contract_id = Req.rel_obj_id'
                // );
                // $this->paginate['joins'][] = array(
                //     'table' => 'attachments',
                //     'alias' => 'Attachment',
                //     'type' => 'inner',
                //     'conditions' => 'Attachment.obj_id = CpsContract.id'
                // );
                // CPS回签 待处理 END
            } elseif ('no.PO' == $attach_status) {
                // MID订单加入未传PO：未上传客户PO文件的美金订单
                $this->paginate['conditions'] .= ' AND Req.attach_custom_po_status = 0 AND Req.currency_id=' . OCS_CURRENCY_USD;
            }
        }

        //显示全部订单（进行中+已关闭）
        if (isset($params['valid_order']) && 1 == $params['valid_order']) {
            $this->paginate['conditions'] .= " AND Req.close_status NOT IN (" . OCS_ORDER_CLOSE_STATUS_CANCEL . "," . OCS_ORDER_CLOSE_STATUS_CANCELLING. ")"; //除已作废
        }

        //风险订单，3.1-提前下采购，且持续时间大于等于3天(OCS_RECOMMEND_MAIN_ORDER_WARN_TIME)
        if (isset($params['warn_order']) && 1 == $params['warn_order']) {
            $this->paginate['conditions'] .= ' and Contract.ebs_stage = ' . OCS_CONTRACT_EBS_STAGE_ADVANCE_PURCHASE;
            $this->paginate['conditions'] .= ' and Contract.is_has_stock = 0';
            $this->paginate['conditions'] .= ' and unix_timestamp(now()) - unix_timestamp(Contract.stock_start_date) >= ' . OCS_RECOMMEND_MAIN_ORDER_WARN_TIME;
            $can_view_all_warn_order = $g_RolePrivs->get_priv_level($this->name, 'view_all_warn_order');
            if (!$can_view_all_warn_order) {
                $this->paginate['conditions'] .= ' and Req.owner_user_id = ' . $g_UserId;
            }
        }

        if (isset($params['todo_ids'])) {
            $this->paginate['conditions'] .= ' AND Req.id IN(' . $params['todo_ids'] . ')';
        }

        $this->set('SearchId', $SearchId);
        $SearchCondition = '';
        if (!empty($SearchId) && 0 != $SearchId) {
            $SearchCond = $g_Searches->Search->findById($SearchId);
            if (!empty($SearchCond)) {
                $SearchCondition = $SearchCond['Search']['search_condition'];
                $SearchField = $g_Commons->objectToArray(json_decode($SearchCond['Search']['raw_data_json']));
                $SearchCond = json_decode($SearchCond['Search']['cond_json']);
            }
            $SearchCond = $g_Commons->objectToArray($SearchCond);
            if ('' != $SearchCond['conditions']) {
                $this->paginate['conditions'] .= ' AND (' . $SearchCond['conditions'] . ')';
            }
            foreach ($SearchCond['joins'] as $join) {
                $this->paginate['joins'][] = $join;
            }
            $is_has_mf_plan = false;
            foreach ($SearchField as $search_field) {
                if (false !== strpos($search_field['search_field_name'], 'MfPlanBill.')) {
                    $is_has_mf_plan = true;
                    break;
                }
            }
            $is_join_mf_plan = false;
            foreach ($this->paginate['joins'] as $join) {
                if ('MfPlanBill' == $join['alias']) {
                    $is_join_mf_plan = true;
                    break;
                }
            }
            // 仅当存在搜索MF表的时候才join
            if (false == $is_join_mf_plan && true == $is_has_mf_plan) {
                $mf_join = array(
                    'table' => 'mf_plan_bills',
                    'alias' => 'MfPlanBill',
                    'type' => 'LEFT',
                    //'conditions' => 'Req.id = MfPlanBill.req_id AND MfPlanBill.rel_idx = 0' // AND MfPlanBill.status !=' . OCS_MF_PLAN_BILL_STATUS_CLOSED // 不带出已关闭的下计划信息 add by GUOCAI
                    'conditions' => array('Req.id = MfPlanBill.req_id', 'MfPlanBill.status !=' => OCS_MF_PLAN_BILL_STATUS_CLOSED, 'MfPlanBill.erp_status_type !=' => 7) // add by GUOCAI 2015.02.11 批次搜索优化
                );
                $this->paginate['group'] = array('Req.id');
                array_unshift($this->paginate['joins'], $mf_join);
            }

            //搜索关联工单表
            foreach ($SearchField as $search_field) {
                if (substr_count($search_field['search_field_name'], 'ErpMfInfo.')) {
                    $erp_join = array(
                        'table' => 'erp_mf_infos',
                        'alias' => 'ErpMfInfo',
                        'type' => 'LEFT',
                        'conditions' => 'ErpMfInfo.req_id = Req.id'
                    );
                    array_unshift($this->paginate['joins'], $erp_join);
                    $this->paginate['group'] = array('Req.id');
                    break;
                }
            }
        }
        $SearchField = $g_AttrDics->getAllFldNameByTblName($this->modelName, array(), array('Req' => $model_name));
        $SearchField = $g_Searches->ProcessSearchField($SearchField, $SearchId);
        $this->set('SearchField', $SearchField);
        $this->set('SearchCondition', $SearchCondition);
        $this->paginate['order'] = array('Req.update_time DESC');
        // $this->paginate['limit'] = 20;
        if (isset($params['rows'])) {
            $this->paginate['limit'] = $params['rows'];
        }

        // 暂时只在样品单加入对应任务ID
        global $g_SCondition;
        $this->set('SCondition', $g_SCondition);
        $PageReqIds = array();
        $EbsOrderStages = array();
        if ('SampleOrder' == $model_name) {
            $g_DeliveryInfo = $g_Commons->GlobalModel('DeliveryInfo');
            $g_UserRelFlags = $g_Commons->GlobalController('UserRelFlags');
            $g_Enums = $g_Commons->GlobalController('Enums');

            $this->paginate['conditions'] .= ' AND SampleOrder.close_reason = 0'; // 获取没关闭的样品单
            $this->paginate['fields'] = 'Req.*, SampleOrder.status, SampleOrder.id, Task.status';
            // 虚拟字段追加到field
            if (!empty($field_array)) {
                $this->paginate['fields'] .= ',' . implode(',', $field_array);
            }

            //OCS-511 样品单列表提供镖旗标识 add by ziying 2015-11-4
            $TaskFlagLabels = $g_Enums->getEnumListByDictName('UserRelTask.flag');
            $this->set('TaskFlagLabels', $TaskFlagLabels);
            $UserRelFlags = $g_UserRelFlags->GetFlagAliasByModelDefId(Task);
            $this->set('UserRelFlags', $UserRelFlags);

            $TaskFlag = 0;
            if (isset($params['TaskFlag'])) {
                $TaskFlag = $params['TaskFlag'];
            }
            $this->set('TaskFlag', $TaskFlag);
            $TaskFlagSort = 0;
            if (isset($params['TaskFlagSort'])) {
                $TaskFlagSort = $params['TaskFlagSort'];
            }

            if (0 != $TaskFlag) {
                if (-1 == $TaskFlag) {
                    // 未标旗的任务
                    if ('' == $this->paginate['conditions']) {
                        $this->paginate['conditions'] = 'UserRelTask.flag IS NULL';
                    } else {
                        $this->paginate['conditions'] .= ' AND UserRelTask.flag IS NULL';
                    }
                } else {
                    if ('' == $this->paginate['conditions']) {
                        $this->paginate['conditions'] = 'UserRelTask.flag =' . $TaskFlag;
                    } else {
                        $this->paginate['conditions'] .= ' AND UserRelTask.flag =' . $TaskFlag;
                    }
                }
            }
            $this->paginate['order'] = array('Req.update_time DESC');

            if (1 == $TaskFlagSort) {
                $this->paginate['order'] = array( 'UserRelTask.flag DESC');
            }
            $reqs = $this->paginate(); // 针对不同的单以不同的条件获取数据
            $req_ids = array();
            foreach ($reqs as $key => $val) {
                $req_ids[] = $val['Req']['id'];
                if (OCS_SAMPLE_ORDER_NEED_ADD == $val['SampleOrder']['status']) {
                    $total = $g_DeliveryInfo->find('all', array(
                        'conditions' => array('DeliveryInfo.model_def_id' => SampleOrder, 'DeliveryInfo.rel_obj_id' => $val['SampleOrder']['id']),
                        'fields' => 'SUM(DeliveryInfo.quantity) AS total'
                    ));
                    $total = $total[0][0]['total'];
                    $reqs[$key]['Req']['delivery_quantity'] = $total;
                }
            }
            $PageReqIds = $req_ids;
            $task_temp = $g_Task->find('list', array(
                'conditions' => array('Task.model_def_id' => Req, 'Task.rel_obj_id' => $req_ids),
                'fields' => 'Task.rel_obj_id, Task.id'
            ));
            $g_UserRelTask = $g_Commons->GlobalModel('UserRelTask');
            $g_UserRelTask->recursive = -1;

            $apply_for_tech_files = $this->Req->getApplyForTechFilesInfo($req_ids);//获取TV技术资料相关信息
            foreach ($reqs as $key => $val) {
                $reqs[$key]['Req']['task_id'] = $task_temp[$val['Req']['id']];

                $user_rel_task = $g_UserRelTask->find('first', array(
                    'conditions' => array(
                        'UserRelTask.task_id' => $reqs[$key]['Req']['task_id'],
                        'UserRelTask.user_id' => $g_UserId
                    ),
                    'fields' => 'UserRelTask.task_id, UserRelTask.flag'
                ));
                if (!empty($user_rel_task)) {
                    $reqs[$key]['UserRelTask']['flag'] = $user_rel_task['UserRelTask']['flag'];
                } else {
                    $reqs[$key]['UserRelTask']['flag'] = '';
                }

                //添加界面展示附件 add by ziying OCS-45 2016-1-4
                $attachments = array();
                if (!empty($reqs[$key]['Req']['task_id'])) {
                    $attachments = $g_Attachment->find('all', array(
                        'conditions' => array(
                            'Attachment.model_def_id' => Task,
                            'Attachment.obj_id' => $reqs[$key]['Req']['task_id'],
                            'Attachment.is_delete' => 0,
                            'Attachment.is_lock' => 0,
                            'Attachment.attach_type' => OCS_ATTACH_TYPE_SOFTWARE,
                        ),
                        'fields' => 'Attachment.id, Attachment.file_name, Attachment.path'
                    ));
                }
                $reqs[$key]['Attachment'] = $attachments;

                //添加TV技术资料相关信息
                $apply_for_tech_file = isset($apply_for_tech_files[$val['Req']['id']]) ? $apply_for_tech_files[$val['Req']['id']] : array();
                unset($apply_for_tech_file['Req']);
                $reqs[$key] = array_merge($reqs[$key], $apply_for_tech_file);
            }
            $close_reason = $g_Enum->getEnumListByDictName('SampleOrder.close_reason');
            $this->set('close_reason', $close_reason);

            // 将当前搜索条件保存，以便在界面导出所有符合当前条件的数据
            $this->set('export_condition', array('conditions' => $this->paginate['conditions'], 'joins' => $this->paginate['joins']));
            ////////////获取快捷搜索字段  --  此为样品单的快捷搜索，样品单的搜索使用的是req的字段
            $search_fields = $g_Searches->getQuickSearchFields($this->name);
            $this->set('search_fields', $search_fields);
            ///////////// 根据用户的自定义字段设置相关数据//////////////
            $UserPrefData = $g_AttrDics->setUserPrefData($reqs, $this->modelName, array('Req' => $model_name), 3, 0);
            foreach ($UserPrefData->modelData as $counter => $data) {
                if (OCS_SAMPLE_ORDER_NEED_ADD == $data['SampleOrder']['status']) {
                    $data['SampleOrder']['status'] .= '--' . ($data['Req']['quantity'] - $data['Req']['delivery_quantity']) . 'pcs';
                }

                // CVTE-SA-OCS 申请样品页面增加电源背光选项判断_V1.1 add by GUOCAI
                if (isset($data['SampleOrder']['Req.rel_obj_id']['power_backlight_remark'])) {
                    $power_backlight_remark = $data['SampleOrder']['Req.rel_obj_id']['power_backlight_remark'];
                    $power_backlight_remark_array = json_decode($power_backlight_remark, true);
                    if (!empty($power_backlight_remark_array)) {
                        $UserPrefData->modelData[$counter]['SampleOrder']['Req.rel_obj_id']['power_backlight_remark'] = $g_Task->getPowerBacklightRemarkStr($power_backlight_remark_array);
                    }
                }

                // 样品单增加同代码理论库存和同代码即时库存 add by linfangjie ocs-2616
                if (array_key_exists('sc_theory_stock', $data['Req']) || array_key_exists('sc_instant_stock', $data['Req'])){
                    $product_code = empty($data['Product']['code']) ? $g_Product->get_by_id($data['Req']['product_id'], 'code') : $data['Product']['code'];
                    $sc_theory_stock = 0;
                    $sc_instant_stock = 0;
                    if (!empty($product_code)) {
                        $stocks = array();
                        $stocks = $g_EbsXxocsStock->find('all', array(
                            'conditions' => array(
                                'EbsXxocsStock.PRODUCT_CODE' => $product_code,
                            ),
                            'fields' => array(
                                'EbsXxocsStock.AVAILABLE_QUANTYTY,EbsXxocsStock.TOTAL_QOH',
                            )
                        ));
                        if (!empty($stocks)) {
                            // 合计理论库存和即时库存
                            foreach ($stocks as $stock) {
                                $sc_theory_stock += $stock['EbsXxocsStock']['AVAILABLE_QUANTYTY'];
                                $sc_instant_stock += $stock['EbsXxocsStock']['TOTAL_QOH'];
                            }
                            if (array_key_exists('sc_theory_stock', $data['Req'])) {
                                $UserPrefData->modelData[$counter]['Req']['sc_theory_stock'] = $sc_theory_stock;
                            }
                            if (array_key_exists('sc_instant_stock', $data['Req'])) {
                                $UserPrefData->modelData[$counter]['Req']['sc_instant_stock'] = $sc_instant_stock;
                            }
                        }
                    }
                }
            }
        } else {//订单Contract
            $this->paginate['joins'][] = array(
                'table' => 'reserve_rel_reqs',
                'alias' => 'ReserveRelReq',
                'type' => 'LEFT',
                'conditions' => 'ReserveRelReq.req_id = Req.id'
            );
            $this->paginate['fields'] .= ' , Contract.id, Contract.is_crm_fail,Contract.cps_cfm_status, Contract.crm_fail_reason, Contract.contract_no, Contract.error_type,Req.handle_reserve_status,Contract.type_id,Req.account_id,Contract.alter_mid_account_audit_status'; // 加入订单的两个字段数据获取，界面需要用
            $this->paginate['fields'] .= ' ,ReserveRelReq.lot_number,ReserveRelReq.ebs_order_number,ReserveRelReq.type';
            $this->paginate['fields'] .= '
                ,RelReq.order_plans_sync_time
                ,RelReq.audit_4_purchase_time
                ,RelReq.order_plan_start_datetime
                ,RelReq.order_plan_end_datetime
                ,RelReq.is_uploaded_software

                ,RelReq.is_less_material
                ,RelReq.wiped_qty
                ,RelReq.sum_noticed_quantity
                ,RelReq.noticed_unconfirm_quantity

                ,RelReq.un_noticed_quantity
                ,RelReq.requested_quantity_confirm
                ,RelReq.confirm_un_vat_quantity
                ,RelReq.is_urgent
                ,RelReq.is_recommend_main
                ,RelReq.wip_create_time
                ,Contract.delivety_time
                ,Contract.mid_account_id
                ,RelReq.pre_sw_user_id
                ,RelReq.semi_bom_code
                ,RelReq.is_has_account_signature
                ,RelReq.stock_limit_days
                ,RelReq.id
                ,RelReq.is_todo_confirm
                ,RelReq.is_todo_work_plan
                ,RelReq.is_cart_order
                ,RelReq.is_hold_on
                ,RelReq.oa_prod_review_fd_id
                ,RelReq.oa_fd_id
                ,RelReq.hckd_rel_order_number
                ,RelReq.contract_check_status
                ,RelReq.contract_check_remark
                ,RelReq.contract_check_reason
                ,RelReq.contract_check_time
                ,RelReq.contract_check_user_id
                ,RelReq.req_quote_audit_status
                ,RelReq.req_quote_audit_remark
                ,RelReq.mf_promise_date
                ,RelReq.not_use_stock_product_reason
                ,RelReq.wip_need_stock_audit
                ,RelReq.quote_line_id
                ,RelReq.oa_prod_review_status
                ,RelReq.is_need_check_adcp
                ,RelReq.is_limit_audit_contract
                ,OrderCancel.cancelled_time
                ,OrderCancel.cancel_type
                ,OrderCancel.cancel_reason
            ';

            if(isset($params['purchase']) && 1 == $params['purchase']){//查看当天下采购订单
                $StartDate = date('Y-m-d H:i:s', mktime(0, 0, 0, date("m"), date('j'), date("Y")));
                $EndDate = date("Y-m-d H:i:s", mktime(23, 59, 0, date('n'), date('j'), date('Y')));
                $this->paginate['conditions'] .= " AND Contract.stock_start_date >= '".$StartDate."' AND Contract.stock_start_date <= '".$EndDate."'";
            }

            //全部订单明细，只能看到自己负责的敏感字段（价格等信息）
            if ('all' == $range || 'dept' == $range) {
                $selft_charge_account_ids = $g_Account->getSelftChargeAccountIds();//获取自己负责的客户ids
                $this->set('selft_charge_account_ids', $selft_charge_account_ids);
            }

            //指定req_id参数
            if (isset($this->params->params['named']['req_ids'])) {
                $rel_req_ids = $this->params->params['named']['req_ids'];
                $this->paginate['conditions'] .= ' AND Req.id IN(' . $rel_req_ids . ')';
            }

            // 导出数据
            if (isset($this->params->params['named']['export']) && 1 == $this->params->params['named']['export']) {
                set_time_limit(0);
                $this->autoRender = false;

                if (!$g_RolePrivs->get_priv_level('Reqs', 'can_export_order_details') && 'my' != $range) {
                    throw new Exception('抱歉，你无权进行此操作。', 1);
                } else if('my' == $range && empty($SearchId)) {
                    throw new Exception('请先进行搜索才能导出。', 1);
                }

                // 查询需要导出的数据
                $export_conds = $this->paginate;
                $export_conds['joins'][] = array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'INNER',
                    'conditions' => array('Product.id = Req.product_id'),
                );
                $export_conds['fields'] .= ' ,Contract.account_cno,Contract.account_mno,Contract.mid_account_id,Contract.ebs_stage,Product.name,Product.code,Product.is_ckd,Contract.is_protective_tariff,Contract.line_type_id';
                $export_conds['fields'] .= ' ,Contract.is_has_stock,Contract.order_time,Contract.account_bno';
                unset($export_conds['limit']);//不对查询行数限制
                $reqs = $this->Req->find('all', $export_conds);

                // 导出数据的类型
                $export_type = !empty($this->params->params['named']['export_type']) ? $this->params->params['named']['export_type'] : '';
                switch ($export_type) {
                    case 'contract.pdf'://导出搜索的订单对应的合同附件
                    case 'contract.pdf.view'://导出搜索的订单对应的合同附件
                        $this_req_ids = array();
                        foreach ($reqs as $req) {
                            $this_req_ids[$req['Req']['id']] = $req['Req']['id'];
                        }
                        $zip_result = $this->{$this->modelClass}->zipContractPdfByReqIds($this_req_ids);
                        if (!$zip_result['success']) {
                            throw new Exception($zip_result['message'], 1);
                        }
                        if ('contract.pdf.view' === $export_type) {
                            pr($zip_result);
                        } else {
                            // 下载文件
                            $g_Logs->write_log('Reqs', 0, 'info', '打包导出合同附件.', null, json_encode($zip_result));
                            $g_FileDownloads = $g_Commons->GlobalController('FileDownloads');
                            $g_FileDownloads->download($zip_result['datas'], '打包导出合同附件');
                        }
                        break;

                    default://格式化并导出订单明细
                        $user_pref_data = $g_AttrDics->setUserPrefData($reqs, $this->modelClass, array('Req' => 'Contract'), 5, 0);
                        if (!empty($reqs) && 'Contract' == $model_name) {
                            $out_all_req_ids = array();
                            foreach ($reqs as $req) {
                                $out_all_req_ids[] = $req['Req']['id'];
                            }
                            foreach ($user_pref_data->UserPrefColData->userCols as $col) {
                                if (substr_count($col['name'], 'ErpMfInfo.') > 0) {
                                    $is_erp_mf_info_col = true;
                                    break;
                                }
                            }
                            if (!empty($is_erp_mf_info_col)) {
                                $g_ErpMfInfo = $g_Commons->GlobalModel('ErpMfInfo');
                                $req_lot_numbers = $g_ErpMfInfo->getAllReqLotNumbersByReqIds($out_all_req_ids);
                                foreach ($user_pref_data->modelData as $idx => $temp) {
                                    $lot_numbers = isset($req_lot_numbers[$temp['Req']['id']]) ? $req_lot_numbers[$temp['Req']['id']] : array();
                                    $lot_numbers = implode(',', $lot_numbers);
                                    $temp['ErpMfInfo']['erp_batch_no'] = $lot_numbers;
                                    $temp['MfPlanBill']['erp_lot_number'] = $lot_numbers;
                                    $user_pref_data->modelData[$idx] = $temp;
                                }
                            }
                        }
                        $g_Commons->export_excel($user_pref_data, '订单明细');
                        break;
                }

                return;
            }

            // pr($this->paginate);
            $reqs = $this->paginate();
            if (!empty($reqs)) {
                $product_ids = array();
                foreach ($reqs as $idx => $req) {
                    $EbsOrderStages[$req['Req']['id']] = $req['Req']['ebs_order_number'];
                    $PageReqIds[] = $req['Req']['id'];
                    $product_ids[] = $req['Req']['product_id'];

                    if (isset($req['Contract']['type_id']) && !is_array($req['Contract']['type_id'])) {
                        $type_id = $req['Contract']['type_id'];
                        $type_label = $g_Type->findMainField($type_id);
                        $req['Contract']['type_id'] = array();
                        $req['Contract']['type_id']['value'] = $type_id;
                        $req['Contract']['type_id']['label'] = $type_label;
                    }
                    $reqs[$idx] = $req;
                }
                $product_ids = array_unique($product_ids);
                $product_rel_risk_mtl_count = $g_Product->getRiskMtlCountByIds($product_ids);

                // 获取已分派确认书
                $g_AuditStageRelObj = $g_Commons->GlobalModel('AuditStageRelObj');
                $g_AuditStageRelObj->recursive = -1;

                $req_audits = $g_AuditStageRelObj->find('list', array(
                    'conditions' => array(
                        'AuditStageRelObj.model_def_id' => Req,
                        'AuditStageRelObj.rel_obj_id' => $PageReqIds
                    ),
                    'fields' => 'AuditStageRelObj.rel_obj_id, AuditStageRelObj.id'
                ));

                // 用于保证显示BOM相关信息,及有效的下计划信息 add by GUOCAI 2014-07-31
                $mf_plan_bills = $g_MfPlanBill->getMfInfoByReqIds($PageReqIds);
                $apply_for_tech_files = $this->Req->getApplyForTechFilesInfo($PageReqIds);//获取TV技术资料
                foreach ($reqs as $req_index => $req) {
                    //风险物料（虚拟字段）
                    $reqs[$req_index]['Req']['risk_mtl_count'] = isset($product_rel_risk_mtl_count[$req['Req']['product_id']]) ? $product_rel_risk_mtl_count[$req['Req']['product_id']] : 0;
                    // 串批次信息
                    $reqs[$req_index]['MfPlanBill'] = !empty($mf_plan_bills[$req['Req']['id']]) ? $mf_plan_bills[$req['Req']['id']]['MfPlanBill'] : array();
                    // 串审核信息
                    if (!empty($req_audits[$req['Req']['id']])) {
                        $reqs[$req_index]['AuditStageRelObj']['id'] = $req_audits[$req['Req']['id']];
                    }
                    // 获取TV技术资料
                    $apply_for_tech_file = isset($apply_for_tech_files[$req['Req']['id']]) ? $apply_for_tech_files[$req['Req']['id']] : array();
                    unset($apply_for_tech_file['Req']);
                    $reqs[$req_index] = array_merge($reqs[$req_index], $apply_for_tech_file);
                }

                //获取任务队列执行信息
                $g_QueueTask = $g_Commons->GlobalModel('QueueTask');
                $queue_tasks = $g_QueueTask->getQueueTasks(Req, $PageReqIds, true);
                $not_display_types = array( //这些类型不显示在界面，以免干扰用户
                    OCS_QUEUE_TASK_TYPE_UPDATE_TASK_SUBJECT, //自动更新任务摘要
                    OCS_QUEUE_TASK_TYPE_RECORD_ORDER_LOG, //记录订单版本信息
                );
                foreach ($queue_tasks as $idx => $queue_task) {
                    foreach ($not_display_types as $queue_task_type) {
                        if (isset($queue_task[$queue_task_type])) {
                            unset($queue_task[$queue_task_type]);
                        }
                    }
                    $queue_tasks[$idx] = $queue_task;
                    if (empty($queue_tasks[$idx])) {
                        unset($queue_tasks[$idx]);
                    }
                }
                $this->set('queue_tasks', $queue_tasks);

                //检查是否关联退货订单
                $rel_order_line_list = $g_OrderLine->isRelOrderLine($PageReqIds);
                $this->set('rel_order_line_list', $rel_order_line_list);
            }
            ////////////获取快捷搜索字段  --  此为订单快捷搜索，意向订单没有用req的界面
            $search_fields = $g_Searches->getQuickSearchFields($this->name, 'Contracts');
            $this->set('search_fields', $search_fields);
            ///////////// 根据用户的自定义字段设置相关数据//////////////
            $UserPrefData = $g_AttrDics->setUserPrefData($reqs, $this->modelName, array('Req' => $model_name), 3, 0);
            //如果有布局工单关联表字段，则额外join表查询对应字段
            $is_erp_mf_info_col = true;

            if (!empty($reqs) && 'Contract' == $model_name) {
                foreach ($UserPrefData->UserPrefColData->userCols as $col) {
                    if (substr_count($col['name'], 'ErpMfInfo.') > 0) {
                        $is_erp_mf_info_col = true;
                        break;
                    }
                }
                if ($is_erp_mf_info_col) {
                    $g_ErpMfInfo = $g_Commons->GlobalModel('ErpMfInfo');
                    $req_lot_numbers = $g_ErpMfInfo->getAllReqLotNumbersByReqIds($PageReqIds);
                    foreach ($UserPrefData->modelData as $idx => $temp) {
                        $lot_numbers = isset($req_lot_numbers[$temp['Req']['id']]) ? $req_lot_numbers[$temp['Req']['id']] : array();
                        $lot_numbers = implode('<br/>', $lot_numbers);
                        $temp['ErpMfInfo']['erp_batch_no'] = $lot_numbers;
                        $temp['MfPlanBill']['erp_lot_number'] = $lot_numbers;
                        $UserPrefData->modelData[$idx] = $temp;
                    }
                }
            }

            //获取是为紧急订单
            $g_RelReq = $g_Commons->GlobalModel('RelReq');
            $is_urgent_list = $g_RelReq->getIsUrgentOrder($PageReqIds);
            $this->set('is_urgent_list', $is_urgent_list);
        }

        $this->set('modelName', $this->modelName);

        //获取EBS对应订单的状态信息
        $this->set('EbsOrderStages', $EbsOrderStages);

        if (OCS_EBS_DEBUG) {
            // 验证是否已经使用bom_name列,已使用则取最新的bom_name列
            $userCols = $UserPrefData->UserPrefColData->userCols;
            if (!empty($userCols)) {
                $bomCol = false;
                $lotCol = false;
                foreach ($userCols as $key => $userCol) {
                    if ('bom_name' == $userCol['fld_name']) {
                        $bomCol = true;
                    }
                    // if ('erp_lot_number' == $userCol['fld_name']) {
                    //     $lotCol = true;
                    // }
                }

                //$ProductIds = array();
                $thisReqIds = array();
                // $req_has_ci_plus = array();
                if (!empty($UserPrefData->modelData)) {
                    foreach ($UserPrefData->modelData as $key => $modelItem) {
                        $thisReqIds[] = $modelItem['Req']['id'];
                        // // 在布出bom 列的同时显示是否有CIplus hardcode add by GUOCAI
                        // if ($bomCol) {//增加CI plus列
                        //     //$ProductIds[$modelItem['Req']['id']] = is_array($modelItem['Req']['product_id']) ? $modelItem['Req']['product_id']['value'] : $modelItem['Req']['product_id'];
                        //     $sw_atom_ids_json_md5 = md5($modelItem['Req']['sw_atom_ids_json']);
                        //     if (isset($req_has_ci_plus[$sw_atom_ids_json_md5])) {
                        //         $has_ci_plus = $req_has_ci_plus[$sw_atom_ids_json_md5];
                        //     } else {
                        //         $sw_opts = $this->getSwAttrsAtoms($modelItem['Req']['sw_atom_ids_json']);
                        //         $sw_opts = !empty($sw_opts['SW_OptFunc']) ? $sw_opts['SW_OptFunc'] : '';
                        //         $sw_opts = explode(',', $sw_opts);
                        //         $has_ci_plus = (!empty($sw_opts) && in_array('SW_OptFunc_CIPlus', $sw_opts)) ? '有' : '无';
                        //         $req_has_ci_plus[$sw_atom_ids_json_md5] = $has_ci_plus;
                        //     }
                        //     $UserPrefData->modelData[$key]['Req']['CI_Plus'] = $has_ci_plus;
                        // }
                    }
                }

                // 获取订单的附件,用于识别订单是否已经上传附件及返回相应的下载链接 add by GUOCAI 2014-05-16
                $AttachmentCfm = array();
                $AttachmentCtr = array();
                $AttachmentPo = array();
                if (!empty($thisReqIds)) {
                    $AttachmentCfm = $this->Req->getReqConfirmationAttachmentsByReqId($thisReqIds); //确认书
                    $AttachmentCtr = $this->Req->getReqContractAttachmentsByReqId($thisReqIds); //合同
                    $AttachmentPo = $this->Req->getReqPoAttachmentsByReqId($thisReqIds); //客户PO
                }
                $this->set('AttachmentCfm', $AttachmentCfm);
                $this->set('AttachmentCtr', $AttachmentCtr);
                $this->set('AttachmentPo', $AttachmentPo);
            }
        }

        foreach ($UserPrefData->modelData as &$req) {
            if (empty($req['Req']['client_requirement_delivery']) && isset($req['Contract']['delivety_time'])) {
                $req['Req']['client_requirement_delivery'] = $req['Contract']['delivety_time'];
            }
            $order_quantity_fields = array(
                'wiped_qty',
                'sum_noticed_quantity',
                'noticed_unconfirm_quantity',
                'un_noticed_quantity',
                'requested_quantity_confirm',
                'confirm_un_vat_quantity',
            );
            foreach ($order_quantity_fields as $order_quantity_field) {
                if (isset($req['RelReq']) && !empty($req['RelReq']['order_plans_sync_time']) && 0 == strlen($req['RelReq'][$order_quantity_field])) {
                    $req['RelReq'][$order_quantity_field] = 0 . ' ';
                }
            }
        }

        //权限控制
        $UserPrefData->modelData = $this->Req->getPrivsByReqUser($UserPrefData->modelData, $range);

        // 输出页面布局
        $this->set('UserPrefData', $UserPrefData);
        ////////////
        //// 获取用户自定义搜索条件列表
        $UserPrefSearches = $g_UserPrefSearches->getUserPrefSearchesByBizIdAndModelDefIdAndUserId($g_BizId, Req, $g_UserId, $req_model_def['ModelDef']['id']);
        $this->set('UserPrefSearches', $UserPrefSearches);
        ///////////// 根据用户的自定义字段设置相关数据//////////////
        ///////获取订单类型//////////////////
        //OCS-420 TV事业部新建订单值列表调整 add by ziying 2015-9-6
        if ('Contract' == $model_name) {
            $is_stop = 1; // hardcode 是否停用 1为停用
            $order_type_categorys = $g_Enum->getEnumListByDictName('Type.category');
            $OrderTypes = $g_Type->find('all', array(
                'conditions' => array('Type.model_def_id' => $req_model_def['ModelDef']['id'],
                    'Type.is_stop !=' => $is_stop,
                    // "((Type.name LIKE '%TV%' AND (Type.name LIKE '%SY%' OR Type.name LIKE '%HK%')) OR Type.name LIKE '%CVTE%')",
                    'Type.biz_id' => $g_BizId
                ),
                'fields' => 'Type.id, Type.name, Type.code, Type.category',
                'order' => 'Type.name ASC'
            ));
            $this->set('order_type_categorys', $order_type_categorys);
            $this->set('OrderTypes', $OrderTypes);
        }
        $this->set('debug', json_encode($this->paginate));

        // 用于导出数据
        if (!isset($this->paginate['joins'])) {
            $this->paginate['joins'] = '';
        }
        $all_conditions = array('joins' => $this->paginate['joins'], 'conditions' => $this->paginate['conditions']);
        $this->set('all_conditions', json_encode($all_conditions));


        //设置首选列表宽度数据
        global $g_Commons;
        global $g_UserId;
        $conditions = array(
            "UserMeta.user_id" => $g_UserId,
            "UserMeta.meta_type" => 'column_width',
            "UserMeta.meta_key LIKE" => 'Req.%'
        );
        $user_meta_model = $g_Commons->GlobalModel('UserMeta');
        $UserMetas = $user_meta_model->find('all', array(
            'conditions' => $conditions
        ));
        $column_widths = array();
        foreach ($UserMetas as $UserMeta) {
            $column_widths[$UserMeta['UserMeta']['meta_key']] = $UserMeta['UserMeta']['meta_value'];
        }
        $this->set('column_widths', $column_widths);

        //查询当前用户角色，用于权限检查
        $g_User = $g_Commons->GlobalModel('User');
        $current_role_alias = $g_User->getAllUserAliasByUserId($g_UserId);
        $this->set('current_role_alias', $current_role_alias);

        // OCS-1742增加合同检查功能，获取需要出现检查按钮的订单类型
        $result_data = $this->Req->contractCheckOrderType();
        $contract_check_order_types = !empty($result_data['datas']['contract_check_order_types']) ? $result_data['datas']['contract_check_order_types'] : array();
        $this->set('contract_check_order_types', $contract_check_order_types);

        $page_stage_title = !empty($page_stage_title) ? '|' . $page_stage_title : '';
        $this->set('title_for_layout', __($range) . __($model_name) . $page_stage_title);
    }


    function view_cps_contract($ReqId = null) {
        $this->autoRender = false;

        global $g_BizId;
        global $g_Commons;
        global $g_BizName;
        $g_CpsContractCfm = $g_Commons->GlobalModel('CpsContractCfm');

        $this->Req->recursive = -1;
        $Req = $this->Req->find('first', array(
            'conditions' => array('Req.id' => $ReqId),
            'fields' => array('Req.model_def_id', 'Req.rel_obj_id')
        ));
        if ($Req['Req']['model_def_id'] == Contract) {
            $CpsContractCfm = $g_CpsContractCfm->find('first', array(
                'conditions' => array('CpsContractCfm.ocs_contract_id' => $Req['Req']['rel_obj_id']),
                'order' => array('CpsContractCfm.id DESC'),
                'fields' => array('CpsContractCfm.id')
            ));
            if (!empty($CpsContractCfm)) {
                $this->redirect(array(BizMark => $g_BizName, 'controller' => 'CpsContractCfms', 'action' => 'compare_with_cfm', $CpsContractCfm['CpsContractCfm']['id']));
                return;
            } else {
                echo 'No CpsContractCfm Data';
                return;
            }
        }
        echo 'Req model_def must be Contract';
        return;
    }

    public function view($id = null, $view_model = 'normal') {
        if ('embed' == $view_model) {
            $this->layout = 'nomenu';
        }
        $this->set('view_model', $view_model);

        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_CPS_options;
        global $g_Commons;
        $g_AttachmentComment = $g_Commons->GlobalModel('AttachmentComment');
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Atom = $g_Commons->GlobalModel('Atom');
        $g_Comment = $g_Commons->GlobalModel('Comment');
        $g_Dic = $g_Commons->GlobalModel('Dic');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');
        $g_ReqVersion = $g_Commons->GlobalModel('ReqVersion');
        $g_ReserveRelReq = $g_Commons->GlobalModel('ReserveRelReq');
        $g_Type = $g_Commons->GlobalModel('Type');
        $g_User = $g_Commons->GlobalModel('User');

        $g_Attachments = $g_Commons->GlobalController('Attachments');
        $g_Attachments->Attachment->recursive = -1;
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Products->Product->recursive = -1;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $this->Req->id = $id;

        $prod_attr_name = $g_ProdAttr->find('list', array(
            'fields' => 'alias, name',
            'order' => ''
        ));
        $prod_attr_name['Account'] = '客户';
        $prod_attr_name['OrderAccount'] = '下单客户';
        $prod_attr_name['IsCKD'] = '是否CKD';
        $prod_attr_name['IsSpecifiedMaterials'] = '客户锁BOM等级';
        $prod_attr_name['PCB'] = '产品全称信息';
        $prod_attr_name['SW_Note'] = '软件备注';
        $prod_attr_name['SW_ExtendSwAtoms'] = '其他软件项';
        $this->set('ProdAttrNames', $prod_attr_name);

        if (!$this->Req->exists()) {
            throw new NotFoundException(__('Invalid req'));
        }

        $params = $this->params->params['named'];
        $range = 'my';
        if (isset($params['range'])) {
            $range = $params['range'];
        }

        $Req = $this->Req->read(null, $id);
        $req_type = $g_Commons->getDataByCache($Req['Req']['model_def_id'],'ModelDef');
        $this->set('req_type', $req_type);
        if ('SampleOrder' == $req_type['ModelDef']['model_name']) {
            $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'to_task', $id, 'range' => $range, 'model_params' => 'SampleOrder'));
            return;
        }
        if ('Contract' == $req_type['ModelDef']['model_name']) {
            $g_Contract = $g_Commons->GlobalModel('Contract');

            $contract = $g_Contract->findById($Req['Req']['rel_obj_id']);
            $contract['Contract']['mid_account'] = $g_Account->findAlias($contract['Contract']['mid_account_id']);
            $Req['Req']['create_user'] = $g_User->findMainField($Req['Req']['create_user_id']);
            $Req['Req']['update_user'] = $g_User->findMainField($Req['Req']['update_user_id']);
            $Req['Req']['owner'] = $g_User->findMainField($Req['Req']['owner_user_id']);
            $Req['Req']['sales'] = $g_User->findMainField($Req['Req']['sales_user_id']);
            $this->set('contract', $contract);
            $OrderType = $g_Type->find('first', array(
                'conditions' => array('Type.id' => $contract['Contract']['type_id']),
                'fields' => array('Type.id', 'Type.name', 'Type.code')
            ));
            $this->set('OrderType', $OrderType);

            // 查找生产计划清单
            $MfPlanBill = $g_MfPlanBill->find('first', array('conditions' => array('MfPlanBill.req_id' => $id), 'fields' => array('MfPlanBill.id')));
            if (!empty($MfPlanBill)) {
                $this->set('MfPlanBillId', $MfPlanBill['MfPlanBill']['id']);
            }

            global $g_WebServices;
            $g_WebServices->OCS_get_ws_client_config();
            global $globalCPSWebServiceUrls;
            $BurnKeyStores_HDCP[0] = '';
            $BurnKeyStores_CIPlus[0] = '';
            $BurnKeyStores_MAC[0] = '';
            $BurnKeyStores_HDCP20G[0] = '';
            if ($globalCPSWebServiceUrls['connect']) {
                $client = new soap_client($globalCPSWebServiceUrls['BurnKey']['url'], true);
                $client->soap_defencoding = 'utf-8';
                $client->decode_utf8 = false;
                $client->xml_encoding = 'utf-8';
                $ws_params = array('VerifyStr' => $globalCPSWebServiceUrls['BurnKey']['hashes']['GetBurnKeyStore'], 'IsAll' => 1);
                $result = $client->call('GetBurnKeyStore', $ws_params);
                if (1 == $result['success']) {
                    $BurnKeyStores = $g_Commons->objectToArray(json_decode($result['datas']));
                }
            }
            if (!empty($BurnKeyStores['stores'])) {
                foreach ($BurnKeyStores['stores'] as $BurnKeyStore) {
                    switch ($BurnKeyStore['key_type_value']) {
                        case OCS_BURN_KEY_TYPE_HDCP:
                            $BurnKeyStores_HDCP[$BurnKeyStore['id']] = $BurnKeyStore['name'];
                            break;
                        case OCS_BURN_KEY_TYPE_CIPLUS:
                            $BurnKeyStores_CIPlus[$BurnKeyStore['id']] = $BurnKeyStore['name'];
                            break;
                        case OCS_BURN_KEY_TYPE_MAC:
                            $BurnKeyStores_MAC[$BurnKeyStore['id']] = $BurnKeyStore['name'];
                            break;
                        case OCS_BURN_KEY_TYPE_HDCP20G:
                            $BurnKeyStores_HDCP20G[$BurnKeyStore['id']] = $BurnKeyStore['name'];
                            break;
                        default:
                            break;
                    }
                }
            }
            $this->set('BurnKeyStores_HDCP', $BurnKeyStores_HDCP);
            $this->set('BurnKeyStores_CIPlus', $BurnKeyStores_CIPlus);
            $this->set('BurnKeyStores_MAC', $BurnKeyStores_MAC);
            $this->set('BurnKeyStores_HDCP20G', $BurnKeyStores_HDCP20G);
        }
        $AuditStatusDicLabels = $g_Dic->getEnableDicByType('audit_status');
        $this->set('AuditStatusDicLabels', $AuditStatusDicLabels);
        $this->set('DicLabels', $g_Dic->getEnableDicByType('status'));
        $this->set('range', $range);

        //add for semi_bom_code
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $rel_req_one = $g_RelReq->find('first', array(
            'conditions' => array(
                'RelReq.req_id' => $id,
            ),
            'fields' => array(
                'RelReq.semi_bom_code',
            ),
        ));
        if (!empty($rel_req_one) && !empty($rel_req_one['RelReq']['semi_bom_code'])) {
            $Req['Req']['rel_req_semi_bom_code'] = $rel_req_one['RelReq']['semi_bom_code'];
        } else {
            $Req['Req']['rel_req_semi_bom_code'] = '空';
        }

        $account = $g_Account->findById($Req['Req']['account_id']);
        $Req['Req']['account'] = $account['Account']['alias'];
        $stock_account_id = $Req['Req']['stock_account_id'];
        $Req['Req']['stock_account_id'] = array();
        $Req['Req']['stock_account_id']['value'] = $stock_account_id;
        $Req['Req']['stock_account_id']['label'] = $g_Account->findMainField($stock_account_id);
        $this->set('req', $Req);

        $attach_type_all = $g_Dic->getEnableDicByType('attach_type');
        $this->set('attach_type_all', $attach_type_all);

        $this->set('title_for_layout', __($req_type['ModelDef']['model_name']) . ':' . __($Req['Req']['name']));
        //////////////////////获取硬件通道
        $this->set('RelInputSource', $g_Products->getHwRelInputSource($Req['Req']['product_id']));
        $SWAttrsAtoms = $this->getSwAttrsAtoms($Req['Req']['sw_atom_ids_json'], $Req['Req']['remark']);
        $SWRelInputSource = $SWAttrsAtoms['SW_REL'];
        unset($SWAttrsAtoms['SW_REL']);
        $extendAtomNames = $g_Atom->getAtomCnNamesByAtomIds(explode(',', $Req['Req']['extend_sw_atom_ids']));
        $extendAtomNames = implode(',', $extendAtomNames);
        $SWAttrsAtoms['SW_ExtendSwAtoms'] = $extendAtomNames;
        $this->set('SWRelInputSource', $SWRelInputSource);
        $this->set('SWAttrsAtoms', $SWAttrsAtoms);

        $Attachments = $g_Attachments->Attachment->find('all', array(
            'conditions' => array('Attachment.model_def_id' => Req,
                'Attachment.obj_id' => $id,
                'Attachment.is_delete' => 0,
                'Attachment.rel_attachment_id' => 0
            ), // 为0是普通附件，不为0则为软件包说明的XML文件
            'order' => 'Attachment.create_time DESC'
        ));

        $g_CpsContract = $g_Commons->GlobalModel('CpsContract');
        $cps_contract_ids = $g_CpsContract->find('list', array(
            'conditions' => array(
                'CpsContract.contract_id' => $contract['Contract']['id']
            ),
            'fields' => 'CpsContract.id'
        ));
        if (!empty($cps_contract_ids)) { //不显示CPS客户需求回签的
            $CPS_Attachments = $g_Attachments->Attachment->find('all', array(
                'conditions' => array(
                    'Attachment.model_def_id' => CpsContract,
                    'Attachment.obj_id' => $cps_contract_ids,
                    'Attachment.is_delete' => 0,
                    'Attachment.attach_type' => OCS_ATTACH_TYPE_CPS_CONFIRMATION
                ), // 为0是普通附件，不为0则为软件包说明的XML文件
                'order' => 'Attachment.create_time DESC'
            ));
            $Attachments = array_merge($CPS_Attachments, $Attachments);
        }
        if (!empty($Attachments)) { // 按时间排序
            $order = array();
            foreach ($Attachments as $key => $temp) {
                $time = strtotime($temp['Attachment']['create_time']);
                $order[$key] = $time;
            }
            array_multisort($order, SORT_DESC, $Attachments);
        }

        $Attachment = array();
        $attachmentIds = array();
        $AttachmentComments = array();
        if (!empty($Attachments)) {
            foreach ($Attachments as $one) {
                $one['Attachment']['create_user'] = $g_User->get_by_id($one['Attachment']['create_user_id'], 'realname');
                $one['Attachment']['file_icon_url'] = $g_Attachments->get_file_icon_url($one['Attachment']['extension']);
                if ($one['Attachment']['attach_type'] != OCS_ATTACH_TYPE_SOFTWARE) {
                    $one['Attachment']['comment_num'] = $g_AttachmentComment->find('count', array('conditions' => array('AttachmentComment.attachment_id' => $one['Attachment']['id'])));
                    $Attachment[] = $one;
                }
                $attachmentIds[] = $one['Attachment']['id'];
                if (!isset($AttachmentComments[$one['Attachment']['id']])) {
                    $AttachmentComments[$one['Attachment']['id']] = 0;
                }
                if (!empty($one['AttachmentComment'])) {
                    foreach ($one['AttachmentComment'] as $attachmentCmt) {
                        if ($attachmentCmt['is_delete'] != 1) {
                            $AttachmentComments[$one['Attachment']['id']]++;
                        }
                    }
                }
            }
        }
        $this->set('Attachment', $Attachment);
        $this->set('AttachmentComments', $AttachmentComments);
        $this->set('attachmentIds', $attachmentIds);
        $delete_reason = $g_Dic->getEnableDicByType('delete_reason');
        $this->set('delete_reason', $delete_reason);

        $prod = $g_Products->Product->findById($Req['Req']['product_id']);
        $this->set('prod', $prod);
        $ProductOptAllNotes = $g_Products->getProductAllNotes($prod['Product']['prod_model_id'], explode(',', $prod['Product']['prod_opt_ids']));
        $this->set('ProductOptAllNotes', $ProductOptAllNotes);
        $prodDetail = $g_Products->getProductDetail($prod['Product']['name']);
        $this->set('prodDetail', $prodDetail);

        $this->set('req_type', $req_type);

        $model_def_id = Req;
        $this->set('modelDefId', $model_def_id);
        $this->set('relObjId', $id);
        $cmt_cnt = $g_Comment->find('count', array('conditions' => array('Comment.is_delete' => 0, 'Comment.model_def_id' => $model_def_id, 'Comment.obj_id' => $id)));
        $this->set('cmt_cnt', $cmt_cnt);

        $req_version = $g_ReqVersion->find('all', array(
            'conditions' => array('ReqVersion.model_def_id' => Req, 'ReqVersion.rel_obj_id' => $id, 'ReqVersion.is_modify_bill' => 0),
            'order' => 'ReqVersion.id DESC'
        ));
        $log_fields = array('product_id', 'sw_atom_ids_json', 'req_remark');
        $change_log = array();
        if (count($req_version) > 1) {
            for ($i = 0; $i < count($req_version) - 1; $i++) {
                $after_change = $req_version[$i]['ReqVersion'];
                $before_change = $req_version[$i + 1]['ReqVersion'];
                $change_data = array();
                if ($before_change['product_id'] != $after_change['product_id']) {
                    $change_data[] = '产品：' . $g_Products->Product->findMainField($before_change['product_id']) . ' => ' . $g_Products->Product->findMainField($after_change['product_id']);
                }
                if ($before_change['sw_atom_ids_json'] != $after_change['sw_atom_ids_json']) {
                    $before_sw = $g_Commons->objectToArray(json_decode($before_change['sw_atom_ids_json']));
                    $after_sw = $g_Commons->objectToArray(json_decode($after_change['sw_atom_ids_json']));
                    foreach ($before_sw as $prod_attr_id => $atom_ids) {
                        if (!isset($after_sw[$prod_attr_id])) {
                            if (SW_KeyBoard == $prod_attr_id) {
                                $before_atoms = array();
                                foreach ($before_sw[$prod_attr_id] as $key_id) {
                                    $temp_key_name = $g_Atom->find('first', array(
                                        'conditions' => array('Atom.id' => $key_id),
                                        'fields' => 'Atom.name'
                                    ));
                                    $before_atoms[] = $temp_key_name['Atom']['name'];
                                }
                            } else {
                                $before_atoms = $g_Atom->find('list', array(
                                    'conditions' => array('Atom.id' => $before_sw[$prod_attr_id]),
                                    'fields' => 'Atom.name'
                                ));
                            }
                            $change_data[] = $g_ProdAttr->findMainField($prod_attr_id) . ': ' . implode(',', $before_atoms) . ' => 空';
                            unset($before_sw[$prod_attr_id]);
                            continue;
                        }
                        if ($before_sw[$prod_attr_id] != $after_sw[$prod_attr_id]) {
                            if (SW_KeyBoard == $prod_attr_id) {
                                $before_atoms = array();
                                foreach ($before_sw[$prod_attr_id] as $key_id) {
                                    $temp_key_name = $g_Atom->find('first', array(
                                        'conditions' => array('Atom.id' => $key_id),
                                        'fields' => 'Atom.name'
                                    ));
                                    $before_atoms[] = $temp_key_name['Atom']['name'];
                                }
                                $after_atoms = array();
                                foreach ($after_sw[$prod_attr_id] as $key_id) {
                                    $temp_key_name = $g_Atom->find('first', array(
                                        'conditions' => array('Atom.id' => $key_id),
                                        'fields' => 'Atom.name'
                                    ));
                                    $after_atoms[] = $temp_key_name['Atom']['name'];
                                }
                            } else {
                                $before_atoms = $g_Atom->find('list', array(
                                    'conditions' => array('Atom.id' => $before_sw[$prod_attr_id]),
                                    'fields' => 'Atom.name'
                                ));
                                $after_atoms = $g_Atom->find('list', array(
                                    'conditions' => array('Atom.id' => $after_sw[$prod_attr_id]),
                                    'fields' => 'Atom.name'
                                ));
                            }
                            $change_data[] = $g_ProdAttr->findMainField($prod_attr_id) . ': ' . implode(',', $before_atoms) . ' => ' . implode(',', $after_atoms);
                            unset($after_sw[$prod_attr_id]);
                        } else {
                            unset($before_sw[$prod_attr_id]);
                            unset($after_sw[$prod_attr_id]);
                        }
                    }
                    foreach ($after_sw as $prod_attr_id => $atom_ids) {
                        $after_atoms = $g_Atom->find('list', array(
                            'conditions' => array('Atom.id' => $after_sw[$prod_attr_id]),
                            'fields' => 'Atom.name'
                        ));
                        $change_data[] = $g_ProdAttr->findMainField($prod_attr_id) . ':  空 => ' . implode(',', $after_atoms);
                    }
                }
                if ($before_change['req_remark'] != $after_change['req_remark']) {
                    $change_data[] = '备注：' . $before_change['req_remark'] . ' => ' . $after_change['req_remark'];
                }
                if (!empty($change_data)) {
                    $change_log[] = array(
                        'create_time' => $after_change['create_time'],
                        'create_user_id' => $g_User->findMainField($after_change['create_user_id']),
                        'change_log' => $change_data
                    );
                }
            }
        }
        $change_log = $this->getAuditCfmLogs($id, $change_log);
        $change_log = $this->getReqRdModifyBillLogs($id, $change_log);
        if (!empty($change_log)) {
            $order = array();
            foreach ($change_log as $temp) {
                $order[] = $temp['create_time'];
            }
            array_multisort($order, SORT_DESC, $change_log);
        }
        $this->set('ChangeLog', $change_log);

        //获取CPS邀请数据
        if (Contract == $Req['Req']['model_def_id']) {
            $g_CpsContract = $g_Commons->GlobalModel('CpsContract');
            $cps_contract = $g_CpsContract->find('first', array(
                'conditions' => array(
                    'CpsContract.contract_id' => $Req['Req']['rel_obj_id']
                ),
                'fields' => array(
                    'CpsContract.uuid',
                    'CpsContract.bill_no',
                )
            ));
            $this->set('cps_contract', $cps_contract);
        }
    }


    //获取确认书审核的相关log记录
    function getAuditCfmLogs($req_id = null, $change_log = array()) {
        global $g_BizId;
        global $g_Commons;
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_AuditStageRelObjs = $g_Commons->GlobalController('AuditStageRelObjs');
        $g_AuditStageRelObjs->AuditStageRelObj->recursive = -1;

        $AuditStageRelObjs = $g_AuditStageRelObjs->AuditStageRelObj->find('all', array('conditions' => array('AuditStageRelObj.model_def_id' => Req, 'AuditStageRelObj.rel_obj_id' => $req_id),
                    'fields' => array('AuditStageRelObj.id')));
        $rel_obj_ids = array();
        if (!empty($AuditStageRelObjs)) {
            foreach ($AuditStageRelObjs as $AuditStageRelObj) {
                $rel_obj_ids[] = $AuditStageRelObj['AuditStageRelObj']['id'];
            }
        }
        $AuditCfmLogs = $g_Logs->read_logs(AuditStageRelObj, $rel_obj_ids);
        if (!empty($AuditCfmLogs)) {
            foreach ($AuditCfmLogs as $AuditCfmLog) {
                $change_log[] = array(
                    'create_time' => $AuditCfmLog['Log']['create_time'],
                    'create_user_id' => $AuditCfmLog['Log']['user_id']['label'],
                    'change_log' => array($AuditCfmLog['Log']['content'])
                );
            }
        }
        $Logs = $g_Logs->read_logs(Req, $req_id, 'info');
        if (!empty($Logs)) {
            foreach ($Logs as $Log) {
                $change_log[] = array(
                    'create_time' => $Log['Log']['create_time'],
                    'create_user_id' => $Log['Log']['user_id']['label'],
                    'change_log' => array($Log['Log']['content'])
                );
            }
        }
        return $change_log;
    }

    // 获取需求更改单log记录
    function getReqRdModifyBillLogs($req_id = null, $change_log = array()) {
        global $g_BizId;
        global $g_Commons;
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_ReqRdModifyBills = $g_Commons->GlobalController('ReqRdModifyBills');
        global $g_OCS_options;
        $g_ReqVersions = $g_Commons->GlobalController('ReqVersions');
        $g_ReqRdModifyBills->ReqRdModifyBill->recursive = -1;

        $ReqRdModifyBills = $g_ReqRdModifyBills->ReqRdModifyBill->find('all', array('conditions' => array('ReqRdModifyBill.model_def_id' => Req, 'ReqRdModifyBill.rel_obj_id' => $req_id)));
        $rel_obj_ids = array();
        if (!empty($ReqRdModifyBills)) {
            foreach ($ReqRdModifyBills as $ReqRdModifyBill) {
                $rel_obj_ids[] = $ReqRdModifyBill['ReqRdModifyBill']['id'];
            }
        }
        if (empty($rel_obj_ids)) {
            return $change_log;
        }
        $Logs = $g_Logs->read_logs(ReqRdModifyBill, $rel_obj_ids);
        if (!empty($Logs)) {
            foreach ($Logs as $Log) {
                $change_log[] = array(
                    'create_time' => $Log['Log']['create_time'],
                    'create_user_id' => $Log['Log']['user_id']['label'],
                    'change_log' => array($Log['Log']['content'], '旧值：' . $Log['Log']['old_data'], '新值：' . $Log['Log']['new_data'])
                );
            }
        }
        return $change_log;
    }

    public function delete($id = null) {
        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_Commons;

        if (!$this->request->is('post')) {
            throw new MethodNotAllowedException();
        }
        $this->Req->id = $id;
        if (!$this->Req->exists()) {
            throw new NotFoundException(__('Invalid req'));
        }
        if ($this->Req->delete()) {
            $this->Session->setFlash(__('Req deleted'));
            $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'index'));
        }
        $this->Session->setFlash(__('Req was not deleted'));
        $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'index'));
    }

    function pop_new($model = null, $action = null, $type = 'single') {
        global $g_BizId;
        global $g_CPS_options;
        global $g_BizUrl;
        global $g_Commons;
        $g_Tasks = $g_Commons->GlobalController('Tasks');
        $g_Tasks->Task->recursive = -1;
        global $g_UserId;
        global $g_UserRealName;
        global $g_UserEmail;

        $error = array('flag' => 0, 'message' => '');
        $action_array = array('new', 'edit');
        $model_array = array('Contract', 'SampleOrder', 'PreOrder');
        $this->set('view_type', $type);
        if (!in_array($model, $model_array)) {
            $error['flag'] = 1;
            $error['message'] = 'No Such Model';
            $this->set('error', $error);
            return;
        }
        if (!in_array($action, $action_array)) {
            $error['flag'] = 1;
            $error['message'] = 'No Such Action';
            $this->set('error', $error);
            return;
        }
        $params = $this->params->params['named'];
        if (!isset($params['Pname']) || !isset($params['Pvalue'])) {
            $params['Pname'] = '';
        }
        switch ($model) {
            case 'Contract':
                $AudittedReqsInfo = $this->checkReqIsAuditted($params, $action); //检查该订单是已经被审核过了，如已经审核则不可再编辑。
                $this->set('AudittedReqsInfo', $AudittedReqsInfo);
                $this->set('is_audit_cfm', 0);
                if ($AudittedReqsInfo['has_auditted_reqs'] == 1) {
                    $msg = '订单';
                    foreach ($AudittedReqsInfo['datas'] as $tmp_req_id => $tm) {
                        $msg .= ' #' . $tmp_req_id . ',';
                    }
                    $msg = rtrim($msg, ',');
                    $msg .= '已经被审核过，软件需求不可编辑,如确需修改请提交更改申请单或者打回确认书。';
                    $this->set('FlashMsg', $msg);
                    $this->set('is_audit_cfm', 1);
                    $this->set('params', $params);
                    $params['is_audit_cfm'] = 1;
                }
                $layout_data = $this->initContractData($params, $action); // 初始化订单相关数据
                if (empty($layout_data)) {
                    $error['flag'] = 1;
                    $error['message'] = '参数错误';
                    $this->set('error', $error);
                    return;
                }
                $fakerInputAttrs = array(
                    'SW_PowerCurrent', 'SW_DefaultLanguage', 'SW_Language',
                    'SW_DefaultCountry', 'SW_Country', 'SW_KeyBoard',
                    'SW_KeyboardType', 'SW_AmplifierVoltage', 'SW_ExtendSwAtoms'
                ); //hardcode
                $faker_body_data = $this->initFakerBody($fakerInputAttrs);

                global $g_WebServices;
                $g_WebServices->OCS_get_ws_client_config();
                global $globalCPSWebServiceUrls;
                $BurnKeyStores_HDCP[0] = '';
                $BurnKeyStores_CIPlus[0] = '';
                $BurnKeyStores_MAC[0] = '';
                $BurnKeyStores_HDCP20G[0] = '';
                if ($globalCPSWebServiceUrls['connect']) {
                    $client = new soap_client($globalCPSWebServiceUrls['BurnKey']['url'], true);
                    $client->soap_defencoding = 'utf-8';
                    $client->decode_utf8 = false;
                    $client->xml_encoding = 'utf-8';
                    $ws_params = array('VerifyStr' => $globalCPSWebServiceUrls['BurnKey']['hashes']['GetBurnKeyStore'], 'IsAll' => 1);
                    $result = $client->call('GetBurnKeyStore', $ws_params);
                    if (1 == $result['success']) {
                        $BurnKeyStores = $g_Commons->objectToArray(json_decode($result['datas']));
                    }
                }
                if (!empty($BurnKeyStores['stores'])) {
                    foreach ($BurnKeyStores['stores'] as $BurnKeyStore) {
                        switch ($BurnKeyStore['key_type_value']) {
                            case OCS_BURN_KEY_TYPE_HDCP:
                                $BurnKeyStores_HDCP[$BurnKeyStore['id']] = $BurnKeyStore['name'];
                                break;
                            case OCS_BURN_KEY_TYPE_CIPLUS:
                                $BurnKeyStores_CIPlus[$BurnKeyStore['id']] = $BurnKeyStore['name'];
                                break;
                            case OCS_BURN_KEY_TYPE_MAC:
                                $BurnKeyStores_MAC[$BurnKeyStore['id']] = $BurnKeyStore['name'];
                                break;
                            case OCS_BURN_KEY_TYPE_HDCP20G:
                                $BurnKeyStores_HDCP20G[$BurnKeyStore['id']] = $BurnKeyStore['name'];
                                break;
                            default:
                                break;
                        }
                    }
                }
                $this->set('BurnKeyStores_HDCP', $BurnKeyStores_HDCP);
                $this->set('BurnKeyStores_CIPlus', $BurnKeyStores_CIPlus);
                $this->set('BurnKeyStores_MAC', $BurnKeyStores_MAC);
                $this->set('BurnKeyStores_HDCP20G', $BurnKeyStores_HDCP20G);

                break;
            case 'SampleOrder':
                $layout_data = $this->initSampleOrderData($params); // 初始化样品单相关数据
                $fakerInputAttrs = array(
                    'SW_DefaultLanguage', 'SW_Language', 'SW_DefaultCountry',
                    'SW_Country', 'SW_KeyBoard', 'SW_KeyboardType',
                    'SW_AmplifierVoltage', 'SW_ExtendSwAtoms'
                ); //hardcode
                $faker_body_data = $this->initFakerBody($fakerInputAttrs);

                // OCS-510 如果当天申请的样品单数量超过70片则在界面提示
                // $sum_quantity = $this->Req->find('all', array(
                //     'joins' => array(
                //         array(
                //             'table' => 'sample_orders',
                //             'alias' => 'SampleOrder',
                //             'type' => 'LEFT',
                //             'conditions' => 'SampleOrder.id=Req.rel_obj_id'
                //         )
                //     ),
                //     'conditions' => array(
                //         'Req.model_def_id' => SampleOrder,
                //         'SampleOrder.require_delivery_date >=' => date('Y-m-d 00:00:00'),
                //         'SampleOrder.require_delivery_date <=' => date('Y-m-d 23:59:59'),
                //         //'SampleOrder.status >' => OCS_SAMPLE_ORDER_AUDITED,
                //         'SampleOrder.close_reason' => 0
                //     ),
                //     'fields' => 'sum(Req.quantity) as total'
                // ));
                // // //周一至周五正常最大发货量为80pcs，周六日最大发货量为30pcs add by ziying 2015-09-30
                // $max_quantity = 80;
                // if (date("w") == 6 || date("w") == 0) {
                //     $max_quantity = 30;
                // }
                // if ($sum_quantity[0][0]['total'] > $max_quantity) {
                //     $this->set('sample_order_quantity', $sum_quantity[0][0]['total']);
                // }
                // 如果是CPS样品单新建，把ID传到界面，新建成功后可以保存关联关系
                if (!empty($params) && 'cps_sample_order_id' == $params['Pname']) {
                    $this->set('cps_sample_order_id', $params['Pvalue']);
                }

                //查找该样品单任务是否已经存在有效的规格书附件
                $g_Task = $g_Commons->GlobalModel('Task');
                $is_has_specification_attach = false;
                if (!empty($params['Pname']) && 'ids' == $params['Pname'] && !empty($params['Pvalue'])) {
                    $task_ids = explode(',', $params['Pvalue']);
                    $is_has_specification_attach = $g_Task->isHasSpecificationAttach($task_ids); //如果有多个，只判断一个即可
                }
                $this->set('is_has_specification_attach', $is_has_specification_attach);
                break;
            case 'PreOrder':
                $layout_data = $this->initPreOrderData($params); // 初始化意向订单相关数据
                $fakerInputAttrs = array(
                    'SW_DefaultLanguage', 'SW_Language', 'SW_DefaultCountry',
                    'SW_Country', 'SW_OptFunc',
                ); //hardcode
                if (OCS_BIZ_TYPE_AE == $g_BizId) {
                    $fakerInputAttrs[] = 'SW_AE_Map';
                    $fakerInputAttrs[] = 'SW_AE_BT';
                    $fakerInputAttrs[] = 'AE_CarPlay';
                    $fakerInputAttrs[] = 'SW_AE_Radio_Rec_Freq';
                    $fakerInputAttrs[] = 'SW_AE_Panel_light';
                }
                $faker_body_data = $this->initFakerBody($fakerInputAttrs);
                break;
            default:
                $error['flag'] = 1;
                $error['message'] = 'Undefinded Model';
                $this->set('error', $error);
                return;
        }
        $this->set('faker_body_data', $faker_body_data);
        $this->set('layout', $layout_data);
        $this->set('action', $action);
        $this->set('model', $model);
        $this->set('error', $error);
        $this->set('params', $params);

        // 此变量用于决定提交后父窗口是跳转还是刷新 参数url传值的格式必需更改，'/'改为'-'，再在这里改回
        $goto_url = isset($params['GotoUrl']) ? str_replace('-', '/', $params['GotoUrl']) : 'reload';
        $this->set('goto_url', $goto_url);

        $g_Currencies = $g_Commons->GlobalController('Currencies');
        $currency = array();
        $currency_temp = $g_Currencies->Currency->find('all');
        foreach ($currency_temp as $one) {
            $currency[$one['Currency']['id']] = array(
                'label' => $one['Currency']['label'],
                'exchange_rate' => $one['Currency']['exchange_rate'],
                'remark' => $one['Currency']['remark'],
            );
        }
        $this->set('currency', $currency);
    }

    function submit_req_by_ajax(/* $model = null, $action = null */) {
        $this->autoRender = false;

        global $g_BizId;
        global $g_Commons;
        global $g_BizName;
        if ($this->request->is('post') && !empty($this->request->data)) {
            $model = $this->request->data['model'];
            $action = $this->request->data['action'];
            $Pname = $this->request->data['Pname'];
            $Pvalue = $this->request->data['Pvalue'];
            switch ($model) {
                case 'Contract':
                    $result = $this->saveContractData($this->request->data, $action);
                    if (!$result['is_success']) {
                        $error['is_save'] = -1;
                        if (isset($result['error_message'])) {
                            $error['message_alert'] = $result['error_message'];
                        } else {
                            $error['message'] = '无此' . $result['field'] . '数据:' . $result['wrong_value'];
                        }
                        echo json_encode($error);
                        return;
                    }
                    echo json_encode(array('is_save' => 1));
                    break;
                case 'SampleOrder':
                    $result = $this->saveSampleOrderData($this->request->data, $action);

                    // if (OCS_BIZ_TYPE_CE == $g_BizId) {
                    //     $redis_key = 'CE_Save_SampleOrders_Result_' . microtime();
                    //     $g_Commons->setRedisCache($redis_key, json_encode($result));
                    //     $this->redirect(array(BizMark => $g_BizName, 'controller' => 'pop/SampleOrders', 'action' => 'ce_reload_page', $redis_key));
                    //     return;
                    // }
                    if (!$result['is_success']) {
                        $error['is_save'] = -1;
                        if (isset($result['error_message'])) {
                            $error['message'] = $result['error_message'];
                        } else {
                            $error['message'] = '无此' . $result['field'] . '数据:' . $result['wrong_value'];
                        }
                        echo json_encode($error);
                        return;
                    }
                    echo json_encode(array('is_save' => 1, 'datas' => $result['datas']));
                    break;
                case 'PreOrder':
                    $result = $this->savePreOrderData($this->request->data, $action);

                    // if (OCS_BIZ_TYPE_CE == $g_BizId) {
                    //     $redis_key = 'CE_Save_SampleOrders_Result_' . microtime();
                    //     $g_Commons->setRedisCache($redis_key, json_encode($result));
                    //     $this->redirect(array(BizMark => $g_BizName, 'controller' => 'pop/SampleOrders', 'action' => 'ce_reload_page', $redis_key));
                    //     return;
                    // }

                    if (!$result['is_success']) {
                        $error['is_save'] = -1;
                        $error['message'] = '无此' . $result['field'] . '数据:' . $result['wrong_value'];
                        echo json_encode($error);
                        return;
                    }
                    $result['is_save'] = $result['is_success'];

                    echo json_encode($result);
                    break;
                default:
                    echo json_encode('');
                    break;
            }
        } else {
            echo json_encode(array('is_save' => 'no data'));
        }
    }

    function checkReqIsAuditted($params = null, $action = null) {
        global $g_BizId;
        global $g_Commons;
        $g_AuditStageRelObj = $g_Commons->GlobalModel('AuditStageRelObj');

        $result = array();
        $result['has_auditted_reqs'] = 0;
        $result['message'] = '';
        if ('edit' != $action) {
            return $result;
        }
        $ReqRelAuditStage = array();
        switch ($params['Pname']) {
            case 'ids' :
                // 复制订单或批量编辑
                $ReqIds = explode(',', $params['Pvalue']);
                if (!empty($ReqIds)) {
                    foreach ($ReqIds as $ReqId) {
                        $AuditStageRelObjCnt = $g_AuditStageRelObj->find('count', array(
                            'conditions' => array(
                                'AuditStageRelObj.model_def_id' => Req,
                                'AuditStageRelObj.rel_obj_id' => $ReqId,
                                'AuditStageRelObj.is_audit' => 1
                            )
                        ));
                        if ($AuditStageRelObjCnt > 0) {//已经被审过
                            $ReqRelAuditStage[$ReqId] = $AuditStageRelObjCnt;
                            $result['has_auditted_reqs'] = 1;
                        }
                    }
                }
                break;
            default:break;
        }
        $result['datas'] = $ReqRelAuditStage;
        return $result;
    }

    function initContractData($params = null, $action = null) {
        global $g_BizId;
        global $g_Commons;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Currencies = $g_Commons->GlobalController('Currencies');
        $g_Depts = $g_Commons->GlobalController('Depts');
        $g_Dics = $g_Commons->GlobalController('Dics');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_ProdModelDetails = $g_Commons->GlobalController('ProdModelDetails');
        $g_ProdModels = $g_Commons->GlobalController('ProdModels');
        $g_Users = $g_Commons->GlobalController('Users');
        global $g_Order_Type_USD;
        $g_Accounts->Account->recursive = -1;
        $g_Atoms->Atom->recursive = -1;
        $g_Currencies->Currency->recursive = -1;
        $g_Depts->Dept->recursive = -1;
        $g_Dics->Dic->recursive = -1;
        $g_Enums->Enum->recursive = -1;
        $g_ProdAttrs->ProdAttr->recursive = -1;
        $g_Products->Product->recursive = -1;
        $g_ProdModelDetails->ProdModelDetail->recursive = -1;

        $currency_USD_temp = $g_Currencies->Currency->findByName('USD');
        $currency_opt = array();
        $unlimit_type = array('2388', '2379'); // 非试产订单选择产品要限制产品的状态,此两个类型是试产单，不做限制
        $plm_pre_bill_no_type = array('2388'); // 需要填PLM申请单号的类型
        $currency_opt[$currency_USD_temp['Currency']['id']] = $currency_USD_temp['Currency']['label'];
        $result = array('page_header' => 'Confirmations');
        $head_layout = array(
            'Req.account_id' => array('name' => 'Req.account_id', 'type' => 'input', 'class' => 'required account_id auto_complete_field input-medium', 'auto_complete' => 'Accounts'),
            'Contract.mid_account_id' => array('name' => 'Contract.mid_account_id', 'type' => 'input', 'class' => 'required mid_account_id auto_complete_field input-medium', 'auto_complete' => 'Accounts'),
            'Req.currency_id' => array('name' => 'Req.currency_id', 'type' => 'select', 'class' => 'required currency_id input-medium', 'options' => $currency_opt),
            'Req.exchange_ratio' => array('name' => 'Req.exchange_ratio', 'type' => 'input', 'class' => 'required exchange_ratio input-medium', 'default' => $currency_USD_temp['Currency']['exchange_rate'], 'remark' => $currency_USD_temp['Currency']['remark']),
            'Req.all_quantity' => array('name' => 'Req.all_quantity', 'label' => '总数量', 'type' => 'input', 'class' => 'disabled all_quantity input-medium', 'default' => ''),
            'Req.all_amount' => array('name' => 'Req.all_amount', 'label' => '合计总金额', 'type' => 'input', 'class' => 'disabled all_amount input-medium', 'default' => ''),
            'Req.owner_user_id' => array('name' => 'Req.owner_user_id', 'type' => 'input', 'class' => 'required owner_user_id auto_complete_field input-medium', 'auto_complete' => 'Users'),
            'Req.sales_user_id' => array('name' => 'Req.sales_user_id', 'type' => 'input', 'class' => 'sales_user_id auto_complete_field input-medium', 'auto_complete' => 'Users'),
            'Contract.order_time' => array('name' => 'Contract.order_time', 'type' => 'input', 'class' => 'required order_time input_datepicker input-medium', 'default' => date('Y-m-d')),
            'Req.com_dept_id' => array('name' => 'Req.com_dept_id', 'type' => 'input', 'class' => 'com_dept_id auto_complete_field input-medium', 'auto_complete' => 'Depts'),
            'Contract.address' => array('name' => 'Contract.address', 'type' => 'textarea', 'class' => 'required address input-medium'),
        );
        foreach ($head_layout as $key => $one) {
            if (!isset($one['label'])) {
                //$attr_dic_temp = Cache::read('attr_dic/' . $one['name'], 'attr_dic');
                //$attr_dic_temp = $g_Commons->getDataByAttrDicCache($one['name']);
                $attr_dic_temp = $g_Commons->getDataByCache($one['name'],'AttrDic');
                $head_layout[$key]['label'] = $attr_dic_temp['AttrDic']['label'];
            }
        }
        $is_try_produce = array(0 => '否', 1 => '是');
        $is_ckd = $g_Enums->getEnumListByDictName('Contract.is_ckd');
        $is_inc_trans_fee = array(0 => '不含运费', 1 => '含运费');
        $package_types = $g_Dics->getPackageTypes();
        $mtrl_substitute = $g_Enums->getEnumListByDictName('Confirmation.mtrl_substitute');
        $ProdLockTypes = $g_Enums->getSortEnumListByDictName('Req.prod_lock_type', 1);
        if ('edit' == $action && 'ids' == $params['Pname']) {
            $ids = explode(',', $params['Pvalue']);
            if (min($ids) >= 26515) {
                $ext_3rd_party_prods_type = 'select';
            } else {
                $ext_3rd_party_prods_type = 'input';
            }
        } else {
            $ext_3rd_party_prods_type = 'select';
        }
        $invc_prod_name = $g_Enums->getEnumListByDictName('Req.invc_prod_name'); // 开票品名枚举值
        // 编辑订单时，“软件占空比及电流值”可为空
        if ('edit' == $action) {
            $SW_PowerCurrent_Require = '';
        } else {
            $SW_PowerCurrent_Require = 'required';
        }

        $all_layout = array(
            array('common' => 0, 'name' => 'Req.reorder_source_id'),
            array('common' => 1, 'name' => 'Contract.is_try_produce', 'type' => 'select', 'class' => 'is_try_produce input-mini', 'options' => $is_try_produce),
            array('common' => 0, 'name' => 'Req.prod_lock_type', 'type' => 'select', 'class' => 'prod_lock_type input-small', 'options' => $ProdLockTypes),
            array('common' => 1, 'name' => 'Contract.plm_pre_bill_no', 'type' => 'input', 'class' => 'required plm_pre_bill_no input-mini'),
            array('common' => 0, 'name' => 'Req.product_id'),
            array('common' => 1, 'name' => 'Contract.delivety_time', 'type' => 'input', 'class' => 'required delivety_time input-small input_datepicker', 'copy' => 1, 'clear' => 1, 'rel' => 'delivety_time'),
//            array('common' => 0, 'name' => 'Req.account_id', 'copy' => 1, 'rel' => 'account'),
            array('common' => 0, 'name' => 'Req.quantity'),
            array('common' => 0, 'name' => 'Req.price'),
            array('common' => 1, 'name' => 'Contract.tech_price', 'type' => 'input', 'class' => 'required tech_price input-mini'),
            array('common' => 1, 'name' => 'Contract.free_spare_qty', 'type' => 'input', 'class' => 'free_spare_qty input-mini', 'copy' => 1, 'rel' => 'free_spare_qty'),
            array('common' => 0, 'name' => 'Req.amount'),
            array('common' => 0, 'name' => 'Req.invc_prod_name', 'options' => $invc_prod_name, 'copy' => 1, 'rel' => 'invc_prod_name'),
            array('common' => 1, 'name' => 'Contract.is_ckd', 'type' => 'select', 'class' => 'is_ckd input-mini', 'options' => $is_ckd),
            array('common' => 1, 'name' => 'Contract.is_has_stock', 'type' => 'select', 'class' => 'is_has_stock input-mini required', 'options' => $is_try_produce, 'empty' => true, 'copy' => 1, 'rel' => 'is_has_stock'),
            array('common' => 1, 'name' => 'Contract.account_cno', 'type' => 'input', 'class' => 'account_cno input-medium', 'default' => '无', 'copy' => 1, 'rel' => 'account_cno'),
            array('common' => 1, 'name' => 'Contract.account_mno', 'type' => 'input', 'class' => 'account_mno input-medium', 'default' => '无', 'copy' => 1, 'rel' => 'account_mno'),
            array('common' => 1, 'name' => 'Contract.account_bno', 'type' => 'input', 'class' => 'account_bno input-medium', 'default' => '无', 'copy' => 1, 'rel' => 'account_bno'),
            array('common' => 1, 'name' => 'Contract.account_brand', 'type' => 'input', 'class' => 'account_brand input-mini', 'copy' => 1, 'rel' => 'account_brand'),
            array('common' => 1, 'name' => 'Contract.account_prod_name', 'type' => 'input', 'class' => 'account_prod_name input-medium', 'copy' => 1, 'rel' => 'account_prod_name'),
            array('common' => 0, 'name' => 'Contract.final_account_id'),
            array('common' => 0, 'name' => 'Req.sw_contact_id', 'copy' => 1, 'rel' => 'sw_contact_id'),
            // array('common' => 1, 'name' => 'Contract.account_power', 'type' => 'input', 'class' => 'required account_power input-mini'),
            // array('common' => 1, 'name' => 'Contract.account_power_price', 'type' => 'input', 'class' => 'account_power_price input-mini'),
            // 可替代物料不填，详见贺文兰邮件 array('common' => 1, 'name' => 'Contract.mtrl_substitute', 'type' => 'multi_select', 'class' => 'required mtrl_substitute input-xlarge chzn-select', 'options' => $mtrl_substitute, 'copy' => 1, 'rel' => 'mtrl_substitute'),
            // array('common' => 1, 'name' => 'Contract.is_inc_trans_fee', 'type' => 'select', 'class' => 'is_inc_trans_fee input-small', 'options' => $is_inc_trans_fee),
            array('common' => 1, 'name' => 'Contract.package_type', 'type' => 'select', 'class' => 'package_type input-small', 'options' => $package_types),
            array('common' => 1, 'name' => 'Contract.review_remark', 'type' => 'input', 'class' => 'review_remark input-medium', 'copy' => 1, 'rel' => 'review_remark'),
            array('common' => 0, 'name' => 'Req.ext_3rd_party_prods', 'type' => $ext_3rd_party_prods_type, 'class' => 'ext_3rd_party_prods', 'copy' => 1, 'rel' => 'ext_3rd_party_prods'),
//            array('common' => 0, 'name' => 'Req.com_dept_id', 'copy' => 1, 'rel' => 'com_dept'),
            array('common' => 1, 'name' => 'req.hw_rel_sw_atom_ids', 'label' => '硬件关联软件选项', 'type' => 'multi_select', 'class' => 'hw_rel_sw_atom_ids chzn-select'),
            array('common' => 1, 'name' => 'Confirmation.SW_PowerCurrent', 'label' => '软件占空比及电流值', 'type' => 'text_dummy', 'required' => 1, 'SelectType' => 'radio', 'class' => 'PowerCurrent ' . $SW_PowerCurrent_Require, 'copy' => 1, 'rel' => 'PowerCurrent'),
            array('common' => 1, 'name' => 'Confirmation.SW_ExtendSwAtoms', 'label' => '其它软件项', 'type' => 'text_dummy', 'required' => 1, 'class' => 'ExtendSwAtoms required', 'sw_required' => 1, 'copy' => 1, 'rel' => 'ExtendSwAtoms'),
            array('common' => 1, 'name' => 'Confirmation.SW_AmplifierVoltage', 'label' => '功放供电电压', 'type' => 'text_dummy', 'required' => 1, 'SelectType' => 'radio', 'class' => 'AmplifierVoltage'),
            array('common' => 1, 'name' => 'Confirmation.SW_Panel', 'label' => '配屏型号', 'type' => 'text_dummy', 'SelectType' => 'radio', 'class' => 'Panel', 'copy' => 1, 'rel' => 'Panel'),
            // array('common' => 1, 'name' => 'Confirmation.SW_Logo', 'label' => '开机LOGO', 'type' => 'text_dummy', 'required' => 1, 'SelectType' => 'radio', 'class' => 'Logo'),
            // array('common' => 1, 'name' => 'Confirmation.SW_RemoteControl', 'label' => '遥控器', 'type' => 'text_dummy', 'required' => 1, 'SelectType' => 'radio', 'class' => 'RemoteControl'),
            array('common' => 1, 'name' => 'Confirmation.SW_KeyboardType', 'label' => '按键类型', 'type' => 'text_dummy', 'required' => 1, 'SelectType' => 'radio', 'class' => 'KeyboardType', 'copy' => 1, 'rel' => 'KeyboardType'),
            // array('common' => 1, 'name' => 'Confirmation.SW_KeyBoard', 'label' => '按键定义', 'type' => 'KeyBoard', 'class' => 'KeyBoard', 'SelectType' => 'radio', 'copy' => 1, 'rel' => 'KeyBoard'), //, 'required' => 1),
            // array('common' => 1, 'name' => 'Confirmation.SW_Language', 'label' => 'OSD语言', 'type' => 'text_dummy', 'required' => 1, 'class' => 'Language'),
            // array('common' => 1, 'name' => 'Confirmation.SW_DefaultLanguage', 'label' => '默认语言', 'type' => 'text_dummy', 'SelectType' => 'radio', 'required' => 1, 'class' => 'DefaultLanguage'),
            // array('common' => 1, 'name' => 'Confirmation.SW_Country', 'label' => '区域', 'type' => 'text_dummy', 'class' => 'Country', 'copy' => 1, 'rel' => 'Country'),
            array('common' => 1, 'name' => 'Confirmation.SW_DefaultCountry', 'label' => '默认国家/区域', 'type' => 'text_dummy', 'SelectType' => 'radio', 'required' => 1, 'class' => 'DefaultCountry', 'copy' => 1, 'rel' => 'DefaultCountry'),
            array('common' => 1, 'name' => 'Confirmation.SW_CIPlus', 'label' => 'CI PLUS', 'type' => 'CI_Plus', 'required' => 1, 'class' => 'CIPlus'),
            array('common' => 1, 'name' => 'Req.burn_key_store_ids', 'label' => '工厂烧录Key仓库', 'type' => 'BurnKeyStore', 'required' => 0, 'class' => 'BurnKeyStore'),
            array('common' => 0, 'name' => 'Req.remark', 'copy' => 1, 'rel' => 'remark', 'colspan' => 3),
//            array('common' => 1, 'name' => 'Contract.type_id', 'type' => 'input', 'class' => 'type_id', 'colspan' => 3, 'default' => $params['Pvalue'], 'hide' => 1), 此字段做不同处理
        );

        $reriew_edit_fields = array(
            'Req.account_id', 'Req.product_id', 'Req.prod_lock_type', 'Contract.mid_account_id', 'Req.quantity', 'Req.price', 'Req.foreign_price',
            'Req.exchange_ratio', 'Req.currency_id', 'Req.account_id', 'Contract.mid_account_id', 'Contract.order_time',
            'Req.owner_user_id', 'Req.sales_user_id', 'Req.com_dept_id', 'Contract.address', 'Contract.is_try_produce',
            'Contract.plm_pre_bill_no', 'Contract.delivety_time', 'Contract.tech_price', 'Contract.free_spare_qty', 'Contract.account_cno',
            'Contract.account_mno', 'Contract.final_account_id', 'Contract.is_ckd', 'Contract.is_has_stock', 'Contract.account_power',
            'Contract.account_power_price', 'Contract.account_brand', 'Contract.account_prod_name', 'Contract.mtrl_substitute', 'Contract.is_inc_trans_fee',
            'Contract.package_type', 'Contract.review_remark', 'Req.ext_3rd_party_prods', 'Req.remark', 'Req.invc_prod_name'
        );
        $can_edit_fields = array('Contract.address', 'Contract.account_mno', 'Contract.account_cno', 'Contract.account_bno',
            'Confirmation.SW_ExtendSwAtoms', 'Confirmation.SW_AmplifierVoltage', 'Confirmation.SW_Panel', 'Confirmation.SW_Logo',
            'Confirmation.SW_RemoteControl', 'Confirmation.SW_KeyboardType', 'Confirmation.SW_KeyBoard', 'Confirmation.SW_Language', 'Confirmation.SW_DefaultLanguage',
            'Confirmation.SW_Country', 'Confirmation.SW_DefaultCountry', 'Confirmation.SW_CIPlus', 'Req.remark');
        switch ($params['Pname']) {
            case 'type_id' :
                $all_layout[] = array('common' => 1, 'name' => 'Contract.type_id', 'type' => 'input', 'class' => 'type_id', 'colspan' => 3, 'default' => $params['Pvalue'], 'hide' => 1);
                if (!in_array($params['Pvalue'], $g_Order_Type_USD)) {
                    foreach ($head_layout as $head_key => $head_field) {
                        if ('Req.currency_id' == $head_field['name'] || 'Req.exchange_ratio' == $head_field['name']) {
                            $head_layout[$head_key]['hide'] = 1;
                        }
                    }
                } else {
                    foreach ($all_layout as $all_key => $all_field) {
                        if ('Req.price' == $all_field['name']) {
                            $all_layout[$all_key]['name'] = 'Req.foreign_price';
                        } else {
                            if ('Req.amount' == $all_field['name']) {
                                $all_layout[$all_key]['name'] = 'Req.foreign_amount';
                            }
                        }
                    }
                }
                $is_plm_pre_bill_no_type = in_array($params['Pvalue'], $plm_pre_bill_no_type) ? 1 : 0;
                foreach ($all_layout as $key => $one) {
                    if (!isset($one['label'])) {
                        //$attr_dic_temp = Cache::read('attr_dic/' . $one['name'], 'attr_dic');
                        //$attr_dic_temp = $g_Commons->getDataByAttrDicCache($one['name']);
                        $attr_dic_temp = $g_Commons->getDataByCache($one['name'],'AttrDic');
                        $all_layout[$key]['label'] = $attr_dic_temp['AttrDic']['label'];
                    }
                    if ('Contract.plm_pre_bill_no' == $one['name'] && 0 == $is_plm_pre_bill_no_type) {
                        $all_layout[$key]['hide'] = 2;
                    }
                }
                $result['layout']['all_field'] = $all_layout;
                $result['layout']['head_field'] = $head_layout;
                $result['layout']['is_limit_product'] = in_array($params['Pvalue'], $unlimit_type) ? 0 : 1;

                // 新建订单带入产品ID
                if (isset($params['product_ids']) && !empty($params['product_ids'])) {
                    $product_ids = explode(',', $params['product_ids']);
                    $prod_names = $g_Products->Product->find('list', array(
                                'conditions' => array('Product.id' => $product_ids),
                                'fields' => 'Product.name'
                            ));
                    $reqs_detail = array();
                    $counter = 0;
                    foreach ($prod_names as $prod_name) {
                        $reqs_detail[$counter++]['product'] = $prod_name;
                    }
                    $result['reqs'] = $reqs_detail;
                }
                break;
            case 'ids' :
                // 复制订单或批量编辑
                // 获取req表数据
                $ids = explode(',', $params['Pvalue']);
                $reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ids)));
                if (empty($reqs)) {
                    return array();
                }
                $reqs_detail = array();
                $all_quantity = 0;
                $all_amount = 0;
                foreach ($reqs as $key => $req) {
                    // $prod = $g_Products->Product->findById($req['Req']['product_id']);
                    $prod = $g_Products->Product->find('first', array(
                        'conditions' => array('Product.id' => $req['Req']['product_id']),
                        'fields' => 'Product.id, Product.pcb_id, Product.prod_model_id, Product.prod_opt_ids, Product.name'
                    ));

                    // 判断是否有关联软件功能元
                    $prod_opt_ids = explode(',', $prod['Product']['prod_opt_ids']);
                    $g_ProdModels->ProdModel->ProdModelRelOpt->recursive = -1;
                    $model_rel_opt = $g_ProdModels->ProdModel->ProdModelRelOpt->find('list', array(
                        'conditions' => array(
                            'ProdModelRelOpt.prod_model_id' => $prod['Product']['prod_model_id'],
                            'ProdModelRelOpt.prod_opt_id' => $prod_opt_ids,
                            'ProdModelRelOpt.sw_atom_ids !=' => ''
                        ),
                        'fields' => 'ProdModelRelOpt.sw_atom_ids'
                    ));
                    if (!empty($model_rel_opt)) {
                        $sw_atom_ids = array();
                        foreach ($model_rel_opt as $rel_sw) {
                            $sw_atom_ids = array_merge($sw_atom_ids, explode(',', $rel_sw));
                        }
                        if (!empty($sw_atom_ids)) {
                            $g_Atoms->Atom->recursive = -1;
                            $hw_rel_sw_atoms_options = $g_Atoms->Atom->find('list', array(
                                'conditions' => array('Atom.id' => $sw_atom_ids),
                                'fields' => 'Atom.id, Atom.name'
                            ));
                        }
                    }
                    $reqs_detail[$key]['req__hw_rel_sw_atom_ids'] = explode(',', $req['Req']['hw_rel_sw_atom_ids']);
                    // $prod_model_detail = $g_ProdModelDetails->ProdModelDetail->findByProdModelId($prod['Product']['prod_model_id']);
                    $prod_model_detail = $g_ProdModelDetails->ProdModelDetail->find('first', array(
                                'conditions' => array('ProdModelDetail.id' => $prod['Product']['pcb_id']),
                                'fields' => 'ProdModelDetail.serie_id'
                            ));
                    // $account = $g_Accounts->Account->findById($req['Req']['account_id']);
                    $account = $g_Accounts->Account->find('first', array(
                                'conditions' => array('Account.id' => $req['Req']['account_id']),
                                'fields' => 'Account.alias'
                            ));
                    // $com_dept = $g_Depts->Dept->findById($req['Req']['com_dept_id']);
                    $com_dept = $g_Depts->Dept->find('first', array(
                        'conditions' => array('Dept.id' => $req['Req']['com_dept_id']),
                        'fields' => 'Dept.name'
                    ));
//                    $all_extend_atom_ids = $g_ProdModels->getExtendSwAtomIdsByProdModelIdAndProdOptIds($prod['Product']['prod_model_id'], explode(',', $prod['Product']['prod_opt_ids']));
                    // 获取对应配件信息
                    $g_ProdModels->ProdModel->ProdModelWidgetInfo->recursive = -1;
                    $Widget = $g_ProdModels->ProdModel->ProdModelWidgetInfo->find('first', array(
                                'conditions' => array('ProdModelWidgetInfo.prod_model_id' => $prod['Product']['prod_model_id']),
                                'fields' => 'ProdModelWidgetInfo.info'
                            ));
                    $reqs_detail[$key]['ext_3rd_party_prods_option'] = empty($Widget) ? '' : $Widget['ProdModelWidgetInfo']['info'];

                    $all_extend_atom_ids = $g_Atoms->Atom->find('list', array('conditions' => array('Atom.name' => $g_Atoms->ExtendSwAtomNames), 'fields' => array('Atom.id')));

                    $all_quantity += $req['Req']['quantity'];
                    $all_amount += $req['Req']['amount'];
                    foreach ($req['Req'] as $field => $val) {
                        $reqs_detail[$key][$field] = $val;
                    }
//                    $reqs_detail[$key]['id'] = $req['Req']['id'];
                    $reqs_detail[$key]['reorder_source'] = $this->Req->findMainField($req['Req']['reorder_source_id']);
                    $reqs_detail[$key]['product'] = $prod['Product']['name'];
                    $reqs_detail[$key]['serie_id'] = $prod_model_detail['ProdModelDetail']['serie_id'];
                    $reqs_detail[$key]['account'] = $account['Account']['alias'];
                    $reqs_detail[$key]['owner'] = $g_Users->getUserRealNameById($req['Req']['owner_user_id']);
                    $reqs_detail[$key]['sales_user'] = $g_Users->getUserRealNameById($req['Req']['sales_user_id']);
//                    $reqs_detail[$key]['quantity'] = $req['Req']['quantity'];
//                    $reqs_detail[$key]['price'] = $req['Req']['price'];
//                    $reqs_detail[$key]['amount'] = $req['Req']['amount'];
                    $reqs_detail[$key]['currency'] = $req['Req']['currency_id']; //null != $req['Req']['currency_id'] ? $currency_opt[$req['Req']['currency_id']] : '';
                    $reqs_detail[$key]['com_dept'] = $com_dept['Dept']['name'];
                    if (!empty($req['Req']['sw_user_id'])) {
                        $reqs_detail[$key]['sw_user'] = $g_Users->getUserRealNameById($req['Req']['sw_user_id']);
                    }
                    if (!empty($req['Req']['hw_user_id'])) {
                        $reqs_detail[$key]['hw_user'] = $g_Users->getUserRealNameById($req['Req']['hw_user_id']);
                    }
                    if (!empty($req['Req']['foreign_price'])) {
                        $reqs_detail[$key]['foreign_price'] = $req['Req']['foreign_price'];
                    }
                    if (!empty($req['Req']['foreign_amount'])) {
                        $reqs_detail[$key]['foreign_amount'] = $req['Req']['foreign_amount'];
                    }
                    if (!empty($req['Req']['exchange_ratio'])) {
                        $reqs_detail[$key]['exchange_ratio'] = $req['Req']['exchange_ratio'];
                    }
                    if (!empty($req['Req']['rd_dept_id']) && -1 != $req['Req']['rd_dept_id']) {
                        // $rd_dept = $g_Depts->Dept->findById($req['Req']['rd_dept_id']);
                        $rd_dept = $g_Depts->Dept->find('first', array(
                                    'conditions' => array('Dept.id' => $req['Req']['rd_dept_id']),
                                    'fields' => 'Dept.name'
                                ));
                        $reqs_detail[$key]['rd_dept'] = $rd_dept['Dept']['name'];
                    }
                    if (!empty($req['Req']['remark'])) {
                        $reqs_detail[$key]['remark'] = $req['Req']['remark'];
                    }
                    if (!empty($req['Req']['sw_atom_ids_json'])) {
                        $sw = array();
                        $sw_ids = json_decode($req['Req']['sw_atom_ids_json']);
                        foreach ($sw_ids as $attr_id => $atom_ids) {
                            $alias = $g_ProdAttrs->findAliasById($attr_id);
//                            $sw[$alias] = array();
                            foreach ($atom_ids as $atom_id) {
                                $atom_name = $g_Atoms->findAtomNameById($atom_id);
                                $sw[$alias][] = $atom_name;
                                if (in_array($atom_id, $all_extend_atom_ids) && !empty($atom_id)) {
                                    if (!isset($sw['SW_ExtendSwAtoms'])) {
                                        $sw['SW_ExtendSwAtoms'] = array();
                                    }
                                    $sw['SW_ExtendSwAtoms'][] = $atom_name;
                                }
                            }
                            if ('SW_OptFunc' == $alias && !empty($sw[$alias]) && in_array('SW_OptFunc_CIPlus', $sw[$alias])) {
                                $alias = 'SW_CIPlus';
                                $sw[$alias][] = 'CI_Plus';
                            }
                        }

                        if (!empty($req['Req']['extend_sw_atom_ids'])) {
                            $extend_sw_atom_ids = explode(',', $req['Req']['extend_sw_atom_ids']);
                            $extend_sw_atom_names = $g_Atoms->Atom->find('list', array(
                                        'conditions' => array('Atom.id' => $extend_sw_atom_ids),
                                        'fields' => 'Atom.id, Atom.name'
                                    ));
                            $sw['SW_ExtendSwAtoms'] = array();
                            foreach ($extend_sw_atom_names as $ex_atom) {
                                $sw['SW_ExtendSwAtoms'][] = $ex_atom;
                            }
                        }
                        if (empty($sw['SW_ExtendSwAtoms'])) {
                            $sw['SW_ExtendSwAtoms'] = array('无');
                        }
                        $reqs_detail[$key]['sw'] = $sw;
                    }
                }

                // 获取订单数据
                $contract_detail = array();
                $ContractIds = array();
                $disable_fields = array();

                foreach ($reqs as $key => $req) {
                    $ContractIds[] = $req['Req']['rel_obj_id'];
                    $contract = $g_Contract->findById($req['Req']['rel_obj_id']);
                    $mid_account = $g_Accounts->Account->findById($contract['Contract']['mid_account_id']);
                    $final_account = $g_Accounts->Account->findById($contract['Contract']['final_account_id']);
                    foreach ($contract['Contract'] as $field => $val) {
                        $contract_detail[$key]['Contract__' . $field] = $val;
                    }
                    $contract_detail[$key]['Contract__mid_account'] = empty($mid_account) ? '' : $mid_account['Account']['alias'];
                    $contract_detail[$key]['Contract__final_account'] = empty($final_account) ? '' : $final_account['Account']['alias'];
                    $contract_detail[$key]['Contract__mtrl_substitute'] = explode(',', $contract_detail[$key]['Contract__mtrl_substitute']);
                    if ('new' == $action && isset($params['type_id'])) {
                        $contract_detail[$key]['Contract__type_id'] = $params['type_id'];
                    }
                }
                if ('edit' == $action) {
                    $result['webservice'] = $this->get_CRM_contract_status($ContractIds);
                    if (!empty($result['webservice']) && !isset($result['webservice']['error_message'])) {
                        switch ((string) ($result['webservice']['Status'][0])) {
                            case '1016'://(提交下采购)
                            case '1002'://(已下采购)
                            case '1017'://(提交下生产)价格、数量、客户、资金平台、接单日期 不可修改
                                $disable_fields = array('Req.quantity', 'Req.price', 'Req.foreign_price', 'Req.account_id', 'Contract.mid_account_id', 'Contract.order_time', 'Req.invc_prod_name');
                                break;
                            case '1003'://(待生产评审)价格、数量、客户、资金平台、接单日期、硬件产品、 不可修改
                                $disable_fields = array('Req.quantity', 'Req.price', 'Req.foreign_price', 'Req.account_id', 'Contract.mid_account_id', 'Contract.order_time', 'Req.product_id', 'Req.invc_prod_name',
                                    'Req.prod_lock_type'
//                                    'Confirmation.SW_ExtendSwAtoms', 'Confirmation.SW_AmplifierVoltage', 'Confirmation.SW_Panel', 'Confirmation.SW_Logo', 'Confirmation.SW_RemoteControl',
//                                    'Confirmation.SW_KeyboardType', 'Confirmation.SW_KeyBoard', 'Confirmation.SW_Language', 'Confirmation.SW_DefaultLanguage', 'Confirmation.SW_Country',
//                                    'Confirmation.SW_DefaultCountry', 'Confirmation.SW_CIPlus',
                                );
                                break;
                            case '1004'://(已下达生产)均不可修改
                                $disable_fields = array('*');
                                break;
                            case 'Conflict':// 多个订单状态冲突
                                $disable_fields = array('*');
                                break;
                            default:
                        }
                        //获取计划清单状态
                        $g_MfPlanBills = $g_Commons->GlobalController('MfPlanBills');
                        $MfPlanBillStatus = $g_MfPlanBills->getStatusByReqId($req['Req']['id']);
                        if ($MfPlanBillStatus >= OCS_MF_PLAN_BILL_STATUS_PASSED) {//当状态>=一致通过，产品代码不可再修改
                            if (!in_array('Req.product_id', $disable_fields)) {
                                $disable_fields[] = 'Req.product_id';
                            }
                            // if(!empty($reriew_edit_fields)){
                            //     $tempFields = array();
                            //     foreach($reriew_edit_fields as $reriew_edit_field){
                            //         if('Req.product_id' == $reriew_edit_field){
                            //             continue;
                            //         }
                            //         $tempFields[] = $reriew_edit_field;
                            //     }
                            //     $reriew_edit_fields = $tempFields;
                            // }
                        }
                    }

                    foreach ($head_layout as $key => $head_field) {
                        switch ($key) {
                            case 'Req.account_id':
                                $head_layout[$key]['default'] = array('id' => $reqs_detail[0]['account_id'], 'label' => $reqs_detail[0]['account']);
                                // 带出联系人数据
                                $g_Contacts = $g_Commons->GlobalController('Contacts');
                                $g_Contacts->Contact->recursive = -1;
                                $contacts = $g_Contacts->Contact->find('list', array('conditions' => array('Contact.account_id' => $reqs_detail[0]['account_id'])));
                                $this->set('SWContacts', $contacts);
                                break;
                            case 'Contract.mid_account_id':
                                $head_layout[$key]['default'] = array('id' => $contract_detail[0]['Contract__mid_account_id'], 'label' => $contract_detail[0]['Contract__mid_account']);
                                break;
                            case 'Req.currency_id':
                                $head_layout[$key]['default'] = array('id' => $reqs_detail[0]['currency_id'], 'label' => $reqs_detail[0]['currency']);
                                break;
                            case 'Req.exchange_ratio':
                                $head_layout[$key]['default'] = $reqs_detail[0]['exchange_ratio'];
                                break;
                            case 'Req.owner_user_id':
                                $head_layout[$key]['default'] = array('id' => $reqs_detail[0]['owner_user_id'], 'label' => $reqs_detail[0]['owner']);
                                break;
                            case 'Req.sales_user_id':
                                $head_layout[$key]['default'] = array('id' => $reqs_detail[0]['sales_user_id'], 'label' => $reqs_detail[0]['sales_user']);
                                break;
                            case 'Contract.order_time':
                                $head_layout[$key]['default'] = $contract_detail[0]['Contract__order_time'];
                                break;
                            case 'Req.com_dept_id':
                                $head_layout[$key]['default'] = array('id' => $reqs_detail[0]['com_dept_id'], 'label' => $reqs_detail[0]['com_dept']);
                                break;
                            case 'Contract.address':
                                $head_layout[$key]['default'] = $contract_detail[0]['Contract__address'];
                                break;
                            case 'Req.all_quantity':
                                $head_layout[$key]['default'] = $all_quantity;
                                break;
                            case 'Req.all_amount':
                                $head_layout[$key]['default'] = $all_amount;
                        }
                        if (in_array($key, $disable_fields) || in_array('*', $disable_fields)) {
                            $head_layout[$key]['disable'] = 1;
                        }
                        if (in_array($key, $reriew_edit_fields) && isset($result['webservice']['IsReReview']) && in_array('1', $result['webservice']['IsReReview'])) {
                            $head_layout[$key]['disable'] = 0;
                        }
                        if (in_array($key, $can_edit_fields)) {
                            $head_layout[$key]['disable'] = 0;
                        }
                    }
                } else if ('new' == $action && isset($params['type_id'])) {
                    // 新建且为复制的话type_id需调整
                    $all_layout[] = array('common' => 1, 'name' => 'Contract.type_id', 'type' => 'input', 'class' => 'type_id', 'colspan' => 3, 'default' => $params['type_id'], 'hide' => 1);
                    foreach ($reqs as $key => $req) {
                        $contract_detail[$key]['Contract__is_has_stock'] = 0; // 复制订单时出库存默认改为否 此为计婷提出的需求
                        $reqs_detail[$key]['ext_3rd_party_prods'] = '';
                        $reqs_detail[$key]['price'] = '';
                        $reqs_detail[$key]['amount'] = '';
                        $reqs_detail[$key]['quantity'] = '';
                    }
                }

                if (!in_array($contract_detail[0]['Contract__type_id'], $g_Order_Type_USD)) {
                    foreach ($head_layout as $head_key => $head_field) {
                        if ('Req.currency_id' == $head_field['name'] || 'Req.exchange_ratio' == $head_field['name']) {
                            $head_layout[$head_key]['hide'] = 1;
                        }
                    }
                } else {
                    foreach ($all_layout as $all_key => $all_field) {
                        if ('Req.price' == $all_field['name']) {
                            $all_layout[$all_key]['name'] = 'Req.foreign_price';
                        } else {
                            if ('Req.amount' == $all_field['name']) {
                                $all_layout[$all_key]['name'] = 'Req.foreign_amount';
                            }
                        }
                    }
                }

                // 获取字段label，在最后才获取是因为根据订单类型不同字段可能做调整
                $is_plm_pre_bill_no_type = in_array($contract_detail[0]['Contract__type_id'], $plm_pre_bill_no_type) ? 1 : 0;
                foreach ($all_layout as $key => $one) {
                    if (in_array($one['name'], $disable_fields) || in_array('*', $disable_fields)) {
                        $all_layout[$key]['disable'] = 1;
                        // 若是重评可修改单价
                        if (in_array($one['name'], $reriew_edit_fields) && in_array(1, $result['webservice']['IsReReview'])) {
                            $all_layout[$key]['disable'] = 0;
                        }
                        if (in_array($one['name'], $can_edit_fields)) {
                            $all_layout[$key]['disable'] = 0;
                        }
                    }
                    if (!isset($one['label'])) {
                        //$attr_dic_temp = Cache::read('attr_dic/' . $one['name'], 'attr_dic');
                        //$attr_dic_temp = $g_Commons->getDataByAttrDicCache($one['name']);
                        $attr_dic_temp = $g_Commons->getDataByCache($one['name'],'AttrDic');
                        $all_layout[$key]['label'] = $attr_dic_temp['AttrDic']['label'];
                    }
                    if ('Contract.plm_pre_bill_no' == $one['name'] && 0 == $is_plm_pre_bill_no_type) {
                        $all_layout[$key]['hide'] = 2;
                    }
                    if (!empty($hw_rel_sw_atoms_options) && 'req.hw_rel_sw_atom_ids' == $one['name']) {
                        $all_layout[$key]['options'] = $hw_rel_sw_atoms_options;
                    }
                }

                // 判断是否可修改产品，从cps订单带产品id过来时才可以覆盖原有的值
                if (isset($params['product_ids']) && !in_array('Req.product_id', $disable_fields) && !in_array('*', $disable_fields)) {
                    $product_ids = explode(',', $params['product_ids']);
                    foreach ($reqs_detail as $key => $req_detail) {
                        $prod = $g_Products->Product->findById($product_ids[$key]);
                        $prod_model_detail = $g_ProdModelDetails->ProdModelDetail->findByProdModelId($prod['Product']['prod_model_id']);
                        $reqs_detail[$key]['product'] = $prod['Product']['name'];
                        $reqs_detail[$key]['serie_id'] = $prod_model_detail['ProdModelDetail']['serie_id'];
                    }
                }

                $result['layout']['is_limit_product'] = in_array($contract_detail[0]['Contract__type_id'], $unlimit_type) ? 0 : 1;
                $result['layout']['all_field'] = $all_layout;
                $result['layout']['head_field'] = $head_layout;
                $result['reqs'] = $reqs_detail;
                $result['others'] = $contract_detail;
                break;
            case 'prod_backup_ids':
                // 给CRM调用，专门用于
                //$params['Pvalue'] = '4648,4641';//4661,4654,4648,4641
                $prod_backups = $this->get_CRM_prod_backup_ids($params['Pvalue']);
                if (empty($params['type_id'])) {
                    $result['error'] = 'no type_id';
                    return $result;
                }
                if (!empty($prod_backups['error_message'])) {
                    $result['webservice']['error_message'] = $prod_backups['error_message'];
                    return $result;
                }
                $head_layout['Req.account_id']['default'] = array('id' => $prod_backups['datas'][0]['account_id'], 'label' => $prod_backups['datas'][0]['account_alias']);
                if (!in_array($params['type_id'], $g_Order_Type_USD)) {
                    $head_layout['Req.currency_id']['hide'] = 1;
                    $head_layout['Req.exchange_ratio']['hide'] = 1;
                } else {
                    foreach ($all_layout as $all_key => $all_field) {
                        if ('Req.price' == $all_field['name']) {
                            $all_layout[$all_key]['name'] = 'Req.foreign_price';
                        } else {
                            if ('Req.amount' == $all_field['name']) {
                                $all_layout[$all_key]['name'] = 'Req.foreign_amount';
                            }
                        }
                    }
                }
                $reqs_detail = array();
                $contract_detail = array();
                foreach ($prod_backups['datas'] as $one) {
                    $reqs_detail[] = array('product_id' => $one['product_id'], 'product' => $one['product_name'], 'quantity' => $one['quantity']);
                    $contract_detail[]['Contract__type_id'] = $params['type_id'];
                }
                // 获取字段label，在最后才获取是因为根据订单类型不同字段可能做调整
                $is_plm_pre_bill_no_type = in_array($params['type_id'], $plm_pre_bill_no_type) ? 1 : 0;
                $all_layout[] = array('common' => 1, 'name' => 'Contract.type_id', 'type' => 'input', 'class' => 'type_id', 'colspan' => 3, 'default' => $params['type_id'], 'hide' => 1);
                foreach ($all_layout as $key => $one) {
                    if (!isset($one['label'])) {
                        //$attr_dic_temp = Cache::read('attr_dic/' . $one['name'], 'attr_dic');
                        //$attr_dic_temp = $g_Commons->getDataByAttrDicCache($one['name']);
                        $attr_dic_temp = $g_Commons->getDataByCache($one['name'],'AttrDic');
                        $all_layout[$key]['label'] = $attr_dic_temp['AttrDic']['label'];
                    }
                    if ('Contract.plm_pre_bill_no' == $one['name'] && 0 == $is_plm_pre_bill_no_type) {
                        $all_layout[$key]['hide'] = 2;
                    }
                }
                $result['layout']['is_limit_product'] = in_array($params['type_id'], $unlimit_type) ? 0 : 1;
                $result['layout']['all_field'] = $all_layout;
                $result['layout']['head_field'] = $head_layout;
                $result['reqs'] = $reqs_detail;
                $result['others'] = $contract_detail;
                break;
            default :
                $result['layout']['all_field'] = $all_layout;
        }

        //对于已经审核的确认书不可再修改其软件信息
        $disable_cols = array();
        if (isset($params['is_audit_cfm']) && 1 == $params['is_audit_cfm']) {
            $disable_cols = array('Req.product_id', 'Req.prod_lock_type', 'Req.ext_3rd_party_prods', 'Confirmation.SW_ExtendSwAtoms', 'Confirmation.SW_AmplifierVoltage', 'Confirmation.SW_Panel', 'Confirmation.SW_Logo', 'Confirmation.SW_RemoteControl',
                'Confirmation.SW_KeyboardType', 'Confirmation.SW_KeyBoard', 'Confirmation.SW_Language', 'Confirmation.SW_DefaultLanguage', 'Confirmation.SW_Country', 'Confirmation.SW_DefaultCountry', 'Confirmation.SW_CIPlus');
        }
        if (!empty($disable_cols)) {
            foreach ($disable_cols as $col) {
                foreach ($result['layout']['all_field'] as $idx => $temp) {
                    if ($temp['name'] == $col) {
                        $temp['disable'] = 1;
                        $result['layout']['all_field'][$idx] = $temp;
                    }
                }
            }
        }
        return $result;
    }

    function initSampleOrderData($params = null) {
        global $g_BizId;
        global $g_Commons;
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Attachment = $g_Commons->GlobalModel('Attachment');
        $g_Contact = $g_Commons->GlobalModel('Contact');
        $g_Dept = $g_Commons->GlobalModel('Dept');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_SampleOrder = $g_Commons->GlobalModel('SampleOrder');
        $g_Task = $g_Commons->GlobalModel('Task');
        $g_User = $g_Commons->GlobalModel('User');

        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;

        $result = array('page_header' => 'Sample Order');
        $result['layout']['req_extra'] = array();
        $result['layout']['other_extra'] = array();
        $account_status = $g_Enum->getEnumListByDictName('SampleOrder.account_status');
        $test_type = $g_Enum->getEnumListByDictName('SampleOrder.test_require_type');
        $sw_language = $g_Enum->getEnumListByDictName('SampleOrder.sw_language');   //软件语言
        $sw_system = $g_Enum->getEnumListByDictName('SampleOrder.sw_system');   //软件系统
        $sample_order_type = $g_Enum->getEnumListByDictName('SampleOrder.type');
        $sample_order_authenticate_types = $g_Enum->getEnumListByDictName('SampleOrder.authenticate_types');
        //发样产品类别 add by wyq 2015-2-9
        $deliver_product_type = $g_Enum->getEnumListByDictName('SampleOrder.deliver_product_type');
        $ext_prods = $g_Enum->getEnumListByDictName('Req.ext_prod_ids');
        $is_fee = array(0 => '否', 1 => '是');
        switch ($g_BizId) {
            case OCS_BIZ_TYPE_CE:
                $all_layout = array(
                    array('common' => 0, 'name' => 'Req.account_id', 'copy' => 1, 'rel' => 'account'),
                    array('common' => 1, 'name' => 'SampleOrder.type', 'type' => 'select', 'class' => 'type input-medium', 'options' => $sample_order_type),
                    array('common' => 1, 'name' => 'SampleOrder.delivery_info', 'type' => 'textarea', 'class' => 'required delivery_info input-large', 'colspan' => 3),
                    array('common' => 1, 'name' => 'SampleOrder.biz_contact_id', 'type' => 'input', 'class' => 'required biz_contact_id input-medium auto_complete_field', 'auto_complete' => 'Contacts', 'copy' => 1, 'rel' => 'biz_contact_id'),
                    array('common' => 1, 'name' => 'SampleOrder.require_delivery_date', 'type' => 'input', 'class' => 'required require_delivery_date input_datepicker no_past_date input-medium', 'copy' => 1, 'rel' => 'require_delivery_date'),
                    //            array('common' => 1, 'name' => 'SampleOrder.engineer_contact_id', 'type' => 'input', 'class' => 'engineer_contact_id input-medium auto_complete_field', 'auto_complete' => 'Contacts', 'copy' => 1, 'rel' => 'engineer_contact_id'),
                    array('common' => 0, 'name' => 'Req.product_id'),
                    array('common' => 1, 'name' => 'SampleOrder.deliver_product_type', 'type' => 'select', 'class' => 'type input-medium required', 'empty' => true, 'options' => $deliver_product_type),
                    array('common' => 1, 'name' => 'SampleOrder.is_fee', 'type' => 'select', 'class' => 'is_fee input-medium', 'options' => $is_fee),
                    array('common' => 0, 'name' => 'Req.quantity'),
                    array('common' => 0, 'name' => 'Req.price'),
                    array('common' => 0, 'name' => 'Req.amount', 'colspan' => 3),
                    array('common' => 0, 'name' => 'Req.owner_user_id', 'copy' => 1, 'rel' => 'owner'),
                    array('common' => 0, 'name' => 'Req.sales_user_id', 'copy' => 1, 'rel' => 'sales_user'),
                    // array('common' => 1, 'name' => 'SampleOrder.fae_user_id', 'type' => 'input', 'class' => 'fae_user_id input-medium auto_complete_field', 'auto_complete' => 'Users', 'copy' => 1, 'rel' => 'fae_user_id', 'colspan' => 3),
                    array('common' => 0, 'name' => 'Req.com_dept_id', 'copy' => 1, 'rel' => 'com_dept'),
                    array('common' => 0, 'name' => 'Req.rd_dept_id', 'copy' => 1, 'rel' => 'rd_dept'),
                    array('common' => 1, 'name' => 'SampleOrder.test_require_type', 'type' => 'select', 'class' => 'test_require_type input-medium', 'options' => $test_type, 'colspan' => 1),
                    array('common' => 1, 'name' => 'SampleOrder.authenticate_types', 'type' => 'multi_select', 'class' => 'required authenticate_types input-medium chzn-select', 'options' => $sample_order_authenticate_types, 'colspan' => 1),
                    // array('common' => 0, 'name' => 'Req.ext_prod_ids', 'type' => 'multi_select', 'class' => 'ext_prod_ids input-medium', 'options' => $ext_prods),
                    // array('common' => 0, 'name' => 'Req.ext_3rd_party_prods', 'type' => 'input', 'class' => 'ext_3rd_party_prods input-medium'),
                    //            array('common' => 1, 'name' => 'SampleOrder.account_status', 'type' => 'select', 'class' => 'required account_status input-medium', 'options' => $account_status),
                    //array('common' => 1, 'name' => 'Confirmation.SW_Panel', 'label' => '配屏尺寸或型号', 'type' => 'text_dummy_sample', 'SelectType' => 'radio', 'class' => 'Panel', 'copy' => 1, 'rel' => 'Panel'),
                    array('common' => 1, 'name' => 'Confirmation.SW_Country', 'label' => '区域', 'type' => 'text_dummy_sample', 'class' => 'Country', 'copy' => 1, 'rel' => 'Country'),
                    //array('common' => 0, 'name' => 'SampleOrder.is_need_safety_file', 'copy' => 1, 'rel' => 'is_need_safety_file', 'colspan' => 3),
                    // array('common' => 0, 'name' => 'SampleOrder.bpm_remark', 'copy' => 1, 'rel' => 'bpm_remark', 'colspan' => 3),
                    array('common' => 0, 'name' => 'Req.remark', 'label' => '商务备注', 'copy' => 1, 'rel' => 'remark', 'colspan' => 3),
                    // array('common' => 0, 'name' => 'SampleOrder.power_backlight_remark', 'colspan' => 3, 'hide' => 3),
                    // array('common' => 1, 'name' => 'SampleOrder.is_sw_file', 'label' => '是否需要软件确认书','type' =>'checkbox','class' => 'is_sw_file','default'=>1),
                    // array('common' => 1, 'name' => 'SampleOrder.sw_file', 'label' => '软件确认书', 'type' => 'file', 'class' => 'required', 'colspan' => 3),
                );
                break;
            case OCS_BIZ_TYPE_TV:
                $all_layout = array(
                    array('common' => 0, 'name' => 'Req.account_id', 'copy' => 1, 'rel' => 'account'),
                    array('common' => 1, 'name' => 'SampleOrder.type', 'type' => 'select', 'class' => 'type input-medium', 'options' => $sample_order_type),
                    array('common' => 1, 'name' => 'SampleOrder.delivery_info', 'type' => 'textarea', 'class' => 'required delivery_info input-large', 'colspan' => 3),
                    array('common' => 1, 'name' => 'SampleOrder.biz_contact_id', 'type' => 'input', 'class' => 'required biz_contact_id input-medium auto_complete_field', 'auto_complete' => 'Contacts', 'copy' => 1, 'rel' => 'biz_contact_id'),
                    array('common' => 1, 'name' => 'SampleOrder.require_delivery_date', 'type' => 'input', 'class' => 'required require_delivery_date input_datepicker no_past_date input-medium', 'copy' => 1, 'rel' => 'require_delivery_date'),
    //            array('common' => 1, 'name' => 'SampleOrder.engineer_contact_id', 'type' => 'input', 'class' => 'engineer_contact_id input-medium auto_complete_field', 'auto_complete' => 'Contacts', 'copy' => 1, 'rel' => 'engineer_contact_id'),
                    //array('common' => 1, 'name' => 'SampleOrder.account_cno', 'label' => '客户订单号', 'type' => 'input', 'class' => 'account_cno input-medium', 'copy' => 1, 'rel' => 'account_cno'),
                    //array('common' => 1, 'name' => 'SampleOrder.account_mno', 'label' => '客户料号','type' => 'input', 'class' => 'account_mno input-medium', 'copy' => 1, 'rel' => 'account_mno'),
                    //array('common' => 1, 'name' => 'SampleOrder.delivery_remark', 'label' => '送货备注', 'type' => 'textarea', 'class' => 'delivery_remark input-large', 'colspan' => 3, 'rel' => 'delivery_remark'),

                    array('common' => 0, 'name' => 'Req.product_id'),
                    array('common' => 1, 'name' => 'SampleOrder.is_fee', 'type' => 'select', 'class' => 'is_fee input-medium', 'options' => $is_fee),
                    array('common' => 0, 'name' => 'Req.quantity'),
                    array('common' => 0, 'name' => 'Req.price'),
                    array('common' => 0, 'name' => 'Req.amount', 'colspan' => 3),
                    array('common' => 0, 'name' => 'Req.owner_user_id', 'copy' => 1, 'rel' => 'owner'),
                    array('common' => 0, 'name' => 'Req.sales_user_id', 'copy' => 1, 'rel' => 'sales_user'),
                    array('common' => 1, 'name' => 'SampleOrder.fae_user_id', 'type' => 'input', 'class' => 'fae_user_id input-medium auto_complete_field', 'auto_complete' => 'Users', 'copy' => 1, 'rel' => 'fae_user_id', 'colspan' => 3),
                    array('common' => 0, 'name' => 'Req.com_dept_id', 'copy' => 1, 'rel' => 'com_dept'),
                    array('common' => 0, 'name' => 'Req.rd_dept_id', 'copy' => 1, 'rel' => 'rd_dept'),
//                    array('common' => 1, 'name' => 'SampleOrder.test_require_type', 'type' => 'select', 'class' => 'test_require_type input-medium', 'options' => $test_type, 'colspan' => 1),
                    array('common' => 1, 'name' => 'SampleOrder.sw_language', 'type' => 'select', 'class' => 'required sw_language input-medium', 'options' => $sw_language, 'colspan' => 1),  //add by lvbaocheng 软件语言
                    array('common' => 1, 'name' => 'SampleOrder.sw_system', 'type' => 'select', 'class' => 'required sw_system input-medium', 'options' => $sw_system, 'colspan' => 1),  //add by lvbaocheng 软件系统
                    array('common' => 1, 'name' => 'SampleOrder.authenticate_types', 'type' => 'multi_select', 'class' => 'required authenticate_types input-medium chzn-select', 'options' => $sample_order_authenticate_types, 'colspan' => 1),
                    //array('common' => 0, 'name' => 'Req.ext_prod_ids', 'type' => 'multi_select', 'class' => 'ext_prod_ids input-medium', 'options' => $ext_prods),
                    //array('common' => 0, 'name' => 'Req.ext_3rd_party_prods', 'type' => 'input', 'class' => 'ext_3rd_party_prods input-medium'),
        //            array('common' => 1, 'name' => 'SampleOrder.account_status', 'type' => 'select', 'class' => 'required account_status input-medium', 'options' => $account_status),
                    array('common' => 1, 'name' => 'Confirmation.SW_Panel', 'label' => '配屏尺寸或型号', 'type' => 'text_dummy_sample', 'SelectType' => 'radio', 'class' => 'Panel', 'copy' => 1, 'rel' => 'Panel'),
                    array('common' => 1, 'name' => 'Confirmation.SW_Country', 'label' => '区域', 'type' => 'text_dummy_sample', 'class' => 'Country', 'copy' => 1, 'rel' => 'Country'),
                    array('common' => 0, 'name' => 'SampleOrder.is_need_safety_file', 'copy' => 1, 'rel' => 'is_need_safety_file', 'colspan' => 3),
                    array('common' => 0, 'name' => 'SampleOrder.bpm_remark', 'copy' => 1, 'rel' => 'bpm_remark', 'colspan' => 3),
                    array('common' => 1, 'name' => 'SampleOrder.is_no_constant_current', 'label' => '无恒流','type' =>'checkbox','class' => 'is_no_constant_current', 'colspan' => 3),
                    array('common' => 0, 'name' => 'SampleOrder.power_backlight_remark', 'colspan' => 3),
                    array('common' => 0, 'name' => 'Req.remark', 'label' => '商务备注', 'copy' => 1, 'rel' => 'remark', 'colspan' => 3),
                );
                break;
            default:
                $all_layout = array(
                    array('common' => 0, 'name' => 'Req.account_id', 'copy' => 1, 'rel' => 'account'),
                    array('common' => 1, 'name' => 'SampleOrder.type', 'type' => 'select', 'class' => 'type input-medium', 'options' => $sample_order_type),
                    array('common' => 1, 'name' => 'SampleOrder.delivery_info', 'type' => 'textarea', 'class' => 'required delivery_info input-large', 'colspan' => 3),
                    array('common' => 1, 'name' => 'SampleOrder.biz_contact_id', 'type' => 'input', 'class' => 'required biz_contact_id input-medium auto_complete_field', 'auto_complete' => 'Contacts', 'copy' => 1, 'rel' => 'biz_contact_id'),
                    array('common' => 1, 'name' => 'SampleOrder.require_delivery_date', 'type' => 'input', 'class' => 'required require_delivery_date input_datepicker no_past_date input-medium', 'copy' => 1, 'rel' => 'require_delivery_date'),
                    //            array('common' => 1, 'name' => 'SampleOrder.engineer_contact_id', 'type' => 'input', 'class' => 'engineer_contact_id input-medium auto_complete_field', 'auto_complete' => 'Contacts', 'copy' => 1, 'rel' => 'engineer_contact_id'),
                    array('common' => 0, 'name' => 'Req.product_id'),
                    array('common' => 1, 'name' => 'SampleOrder.is_fee', 'type' => 'select', 'class' => 'is_fee input-medium', 'options' => $is_fee),
                    array('common' => 0, 'name' => 'Req.quantity'),
                    array('common' => 0, 'name' => 'Req.price'),
                    array('common' => 0, 'name' => 'Req.amount', 'colspan' => 3),
                    array('common' => 0, 'name' => 'Req.owner_user_id', 'copy' => 1, 'rel' => 'owner'),
                    array('common' => 0, 'name' => 'Req.sales_user_id', 'copy' => 1, 'rel' => 'sales_user'),
                    array('common' => 1, 'name' => 'SampleOrder.fae_user_id', 'type' => 'input', 'class' => 'fae_user_id input-medium auto_complete_field', 'auto_complete' => 'Users', 'copy' => 1, 'rel' => 'fae_user_id', 'colspan' => 3),
                    array('common' => 0, 'name' => 'Req.com_dept_id', 'copy' => 1, 'rel' => 'com_dept'),
                    array('common' => 0, 'name' => 'Req.rd_dept_id', 'copy' => 1, 'rel' => 'rd_dept'),
                    array('common' => 1, 'name' => 'SampleOrder.test_require_type', 'type' => 'select', 'class' => 'test_require_type input-medium', 'options' => $test_type, 'colspan' => 1),
                    array('common' => 1, 'name' => 'SampleOrder.authenticate_types', 'type' => 'multi_select', 'class' => 'required authenticate_types input-medium chzn-select', 'options' => $sample_order_authenticate_types, 'colspan' => 1),
                    array('common' => 0, 'name' => 'Req.ext_prod_ids', 'type' => 'multi_select', 'class' => 'ext_prod_ids input-medium', 'options' => $ext_prods),
                    array('common' => 0, 'name' => 'Req.ext_3rd_party_prods', 'type' => 'input', 'class' => 'ext_3rd_party_prods input-medium'),
                    //            array('common' => 1, 'name' => 'SampleOrder.account_status', 'type' => 'select', 'class' => 'required account_status input-medium', 'options' => $account_status),
                    array('common' => 1, 'name' => 'Confirmation.SW_Panel', 'label' => '配屏尺寸或型号', 'type' => 'text_dummy_sample', 'SelectType' => 'radio', 'class' => 'Panel', 'copy' => 1, 'rel' => 'Panel'),
                    array('common' => 1, 'name' => 'Confirmation.SW_Country', 'label' => '区域', 'type' => 'text_dummy_sample', 'class' => 'Country', 'copy' => 1, 'rel' => 'Country'),
                    array('common' => 0, 'name' => 'SampleOrder.is_need_safety_file', 'copy' => 1, 'rel' => 'is_need_safety_file', 'colspan' => 3),
                    array('common' => 0, 'name' => 'SampleOrder.bpm_remark', 'copy' => 1, 'rel' => 'bpm_remark', 'colspan' => 3),
                    array('common' => 0, 'name' => 'Req.remark', 'label' => '商务备注', 'copy' => 1, 'rel' => 'remark', 'colspan' => 3),
                    // array('common' => 1, 'name' => 'SampleOrder.is_need_power_backlight_remark', 'label' => '是否需要电源背光备注','type' =>'checkbox','class' => 'is_need_power_backlight_remark'),
                    // array('common' => 0, 'name' => 'SampleOrder.power_backlight_remark', 'colspan' => 3, 'hide' => 3),
                );
                break;
        }

        foreach ($all_layout as $key => $one) {
            if (!isset($one['label'])) {
                //$attr_dic_temp = Cache::read('attr_dic/' . $one['name'], 'attr_dic');
                //$attr_dic_temp = $g_Commons->getDataByAttrDicCache($one['name']);
                $attr_dic_temp = $g_Commons->getDataByCache($one['name'],'AttrDic');
                $all_layout[$key]['label'] = $attr_dic_temp['AttrDic']['label'];
            }
        }
        switch ($params['Pname']) {
            case 'ids' :
                $result['layout']['all_field'] = $all_layout;
                $ids = explode(',', $params['Pvalue']);
                $reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ids)));
                $reqs_detail = array();
                $sample_order = array();

                foreach ($reqs as $key => $req) {
                    $prod = $g_Product->find('first', array(
                        'conditions' => array(
                            'Product.id' => $req['Req']['product_id']
                        ),
                        'fields' => 'Product.id, Product.prod_model_id, Product.name'
                    ));

                    $account_alias = $g_Account->get_by_id($req['Req']['account_id'], 'alias');
                    $com_dept_name = $g_Dept->get_by_id($req['Req']['com_dept_id'], 'name');
//                    $all_extend_atom_ids = $g_ProdModels->getExtendSwAtomIdsByProdModelIdAndProdOptIds($prod['Product']['prod_model_id'], explode(',', $prod['Product']['prod_opt_ids']));

                    $all_extend_atom_ids = $g_Atoms->Atom->find('list', array('conditions' => array('Atom.name' => $g_Atoms->ExtendSwAtomNames), 'fields' => array('Atom.id')));
                    foreach ($req['Req'] as $field => $val) {
                        $reqs_detail[$key][$field] = $val;
                    }
//                    $reqs_detail[$key]['id'] = $req['Req']['id'];
                    $reqs_detail[$key]['ext_prod_ids'] = explode(',', $req['Req']['ext_prod_ids']);
                    $reqs_detail[$key]['product'] = $prod['Product']['name'];
//                    $reqs_detail[$key]['product_id'] = $req['Req']['product_id'];
                    $reqs_detail[$key]['serie_id'] = 0;
                    $reqs_detail[$key]['account'] = $account_alias;
//                    $reqs_detail[$key]['account_id'] = $req['Req']['account_id'];
                    $reqs_detail[$key]['owner'] = $g_User->get_by_id($req['Req']['owner_user_id'], 'realname');
//                    $reqs_detail[$key]['owner_user_id'] = $req['Req']['owner_user_id'];
                    $reqs_detail[$key]['sales_user'] = $g_User->get_by_id($req['Req']['sales_user_id'], 'realname');
//                    $reqs_detail[$key]['quantity'] = $req['Req']['quantity'];
//                    $reqs_detail[$key]['price'] = $req['Req']['price'];
//                    $reqs_detail[$key]['amount'] = $req['Req']['amount'];
//                    $reqs_detail[$key]['currency'] = $req['Req']['currency_id'];
                    $reqs_detail[$key]['com_dept'] = $com_dept_name;
//                    $reqs_detail[$key]['com_dept_id'] = $req['Req']['com_dept_id'];
                    if (!empty($req['Req']['sw_user_id'])) {
                        $reqs_detail[$key]['sw_user'] = $g_User->get_by_id($req['Req']['sw_user_id'], 'realname');
//                        $reqs_detail[$key]['sw_user_id'] = $req['Req']['sw_user_id'];
                    }
                    if (!empty($req['Req']['hw_user_id'])) {
                        $reqs_detail[$key]['hw_user'] = $g_User->get_by_id($req['Req']['hw_user_id'], 'realname');
//                        $reqs_detail[$key]['hw_user_id'] = $req['Req']['hw_user_id'];
                    }
                    if (!empty($req['Req']['foreign_price'])) {
                        $reqs_detail[$key]['foreign_price'] = $req['Req']['foreign_price'];
                    }
                    if (!empty($req['Req']['foreign_amount'])) {
                        $reqs_detail[$key]['foreign_amount'] = $req['Req']['foreign_amount'];
                    }
                    if (!empty($req['Req']['foreign_amount'])) {
                        $reqs_detail[$key]['foreign_amount'] = $req['Req']['foreign_amount'];
                    }
                    if (!empty($req['Req']['exchange_ratio'])) {
                        $reqs_detail[$key]['exchange_ratio'] = $req['Req']['exchange_ratio'];
                    }
                    if (!empty($req['Req']['rd_dept_id']) && -1 != $req['Req']['rd_dept_id']) {
                        // $rd_dept = $g_Depts->Dept->findById($req['Req']['rd_dept_id']);
                        $reqs_detail[$key]['rd_dept'] = $g_Dept->get_by_id($req['Req']['rd_dept_id'], 'name');
//                        $reqs_detail[$key]['rd_dept_id'] = $req['Req']['rd_dept_id'];
                    }
                    if (!empty($req['Req']['remark'])) {
                        $reqs_detail[$key]['remark'] = $req['Req']['remark'];
                    }
                    if (!empty($req['Req']['sw_atom_ids_json'])) {
                        $sw = array();
                        $sw_ids = json_decode($req['Req']['sw_atom_ids_json']);
                        foreach ($sw_ids as $attr_id => $atom_ids) {
                            $alias = $g_ProdAttr->get_by_id($attr_id, 'alias');
                            $sw[$alias] = array();
                            foreach ($atom_ids as $atom_id) {
                                $atom_name = $g_Atoms->findAtomNameById($atom_id);
                                $sw[$alias][] = $atom_name;
                                if (in_array($atom_id, $all_extend_atom_ids) && !empty($atom_id)) {
                                    if (!isset($sw['SW_ExtendSwAtoms'])) {
                                        $sw['SW_ExtendSwAtoms'] = array();
                                    }
                                    $sw['SW_ExtendSwAtoms'][] = $atom_name;
                                }
                            }
                            if ('SW_OptFunc' == $alias && in_array('SW_OptFunc_CIPlus', $sw[$alias])) {
                                $alias = 'SW_CIPlus';
                                $sw[$alias][] = 'CI_Plus';
                            }
                        }

                        $reqs_detail[$key]['sw'] = $sw;
                    }
                    // 加入sample order表数据
                    $sample_order_temp = $g_SampleOrder->findById($req['Req']['rel_obj_id']);
                    $tasks = $g_Task->find('first',array(
                        'conditions' => array('model_def_id' => Req,'rel_obj_id' => $req['Req']['id']),
                        'fields' => 'Task.id'
                    ));
                    $attachments = $g_Attachment->find('first',array(
                        'conditions' => array('model_def_id' => Task,'obj_id' => $tasks['Task']['id'],'attach_type' => OCS_ATTACH_TYPE_CONFIRMATION),
                        'fields' => 'Attachment.id'
                    ));
                    if (empty($attachments['Attachment']['id']) || (!isset($attachments['Attachment']['id']))) {
                        $sample_order[$key]['SampleOrder__is_sw_file'] = true;
                    } else {
                        $sample_order[$key]['SampleOrder__is_sw_file'] = false;
                    }
                    foreach ($sample_order_temp['SampleOrder'] as $field => $val) {
                        $sample_order[$key]['SampleOrder__' . $field] = $sample_order_temp['SampleOrder'][$field];
                    }
                    $sample_order[$key]['SampleOrder__authenticate_types'] = explode(',', $sample_order_temp['SampleOrder']['authenticate_types']);
                    $sample_order[$key]['SampleOrder__biz_contact_id_label'] = $g_Contact->get_by_id($sample_order_temp['SampleOrder']['biz_contact_id'], 'name');
                    $sample_order[$key]['SampleOrder__require_delivery_date'] = date('Y-m-d', strtotime($sample_order_temp['SampleOrder']['require_delivery_date']));
                    if (!empty($sample_order_temp['SampleOrder']['engineer_contact_id'])) {
                        $sample_order[$key]['SampleOrder__engineer_contact_id_label'] = $g_Contact->get_by_id($sample_order_temp['SampleOrder']['engineer_contact_id'], 'name');
                    }
                    if (!empty($sample_order_temp['SampleOrder']['fae_user_id'])) {
                        $sample_order[$key]['SampleOrder__fae_user_id_label'] = $g_User->get_by_id($sample_order_temp['SampleOrder']['fae_user_id'], 'realname');
                    }

                    if (!empty($sample_order_temp['SampleOrder']['power_backlight_remark'])) {

                        $sample_order[$key]['SampleOrder__power_backlight_remark'] = array();
                        $power_backlight_remark_array = json_decode($sample_order_temp['SampleOrder']['power_backlight_remark'], true);
                        if (!empty($power_backlight_remark_array)) {
                            // 如果保存的是JSON格式，那么属于新的保存方式
                            foreach ($power_backlight_remark_array as $remark_key => $remark_value) {
                                $sample_order[$key]['SampleOrder__power_backlight_remark'][$remark_key] = $remark_value;
                            }
                        } else {
                            // CVTE-SA-OCS 申请样品页面增加电源背光选项判断_V1.1 add by GUOCAI
                            $temp = explode('V/', $sample_order_temp['SampleOrder']['power_backlight_remark']);
                            $sample_order[$key]['SampleOrder__power_backlight_remark']['v1'] = $temp[0];
                            $sample_order[$key]['SampleOrder__power_backlight_remark']['v2'] = $temp[0];
                            $temp = explode('mA×', $temp[1]);
                            $sample_order[$key]['SampleOrder__power_backlight_remark']['mA'] = $temp[0];
                            $temp = explode('路', $temp[1]);
                            $sample_order[$key]['SampleOrder__power_backlight_remark']['xL'] = $temp[0];
                            $temp = explode('PIN—', $temp[1]);
                            //$sample_order[$key]['SampleOrder__power_backlight_remark'][4] = $temp[0];
                            $temp = explode('端子定义：', $temp[1]);
                            $sample_order[$key]['SampleOrder__power_backlight_remark']['hW'] = !empty($temp[1]) ? $temp[1] : null;
                        }
                        $sample_order[$key]['SampleOrder__is_need_power_backlight_remark'] = true;
                        $sample_order[$key]['SampleOrder__is_no_constant_current'] = false;
                    }
                    if (!empty($sample_order_temp['SampleOrder']['panel_info']) && empty($reqs_detail[$key]['sw']['SW_Panel'])) {
                        $reqs_detail[$key]['sw']['SW_Panel'] = $sample_order_temp['SampleOrder']['panel_info'];
                    }
                }

                $result['reqs'] = $reqs_detail;
                $result['others'] = $sample_order;
                break;
            case 'product':
                $result['layout']['all_field'] = $all_layout;
                $product_ids = explode(',', $params['Pvalue']); // 此处用ids表示，可同时带多个产品
                $reqs_detail = array();
                foreach ($product_ids as $key => $product_id) {
                    $prod = $g_Product->find('first', array(
                        'conditions' => array(
                            'Product.id' => $product_id
                        ),
                        'fields' => 'Product.id, Product.prod_model_id, Product.name'
                    ));
                    $reqs_detail[$key]['product'] = $prod['Product']['name'];
                    $reqs_detail[$key]['serie_id'] = 0;
                }
                $result['reqs'] = $reqs_detail;
                break;
            case 'cps_sample_order_id':
                $result['layout']['all_field'] = $all_layout;
                $cps_sample_order_id = $params['Pvalue'];

                $g_CpsSampleOrder = $g_Commons->GlobalModel('CpsSampleOrder');
                $cps_sample_order = $g_CpsSampleOrder->find('first', array(
                    'conditions' => array(
                        'CpsSampleOrder.id' => $cps_sample_order_id
                    )
                ));

                if (!empty($cps_sample_order)) {
                    $req_item = array();
                    $other_item = array();
                    // 产品
                    if (!empty($cps_sample_order['CpsSampleOrder']['product_id'])) {
                        $prod = $g_Product->find('first', array(
                            'conditions' => array(
                                'Product.id' => $cps_sample_order['CpsSampleOrder']['product_id']
                            ),
                            'fields' => 'Product.id, Product.name'
                        ));
                        $req_item['product'] = $prod['Product']['name'];
                    }

                    // 配屏和区域
                    $sw_info = json_decode($cps_sample_order['CpsSampleOrder']['sw_atom_ids_json'], true);
                    if (!empty($sw_info[SW_Panel])) {
                        $req_item['sw']['SW_Panel'][] = $sw_info[SW_Panel];
                    }
                    if (!empty($sw_info[SW_Country])) {
                        $req_item['sw']['SW_Country'][] = $sw_info[SW_Country];
                    }

                    // 背光规格
                    $power_backlight_remark = json_decode($cps_sample_order['CpsSampleOrder']['power_backlight_remark'], true);
                    if (!empty($power_backlight_remark)) {
                        $power_backlight_remark_tmp = array(
                            'v1' => $power_backlight_remark['Vmin'],
                            'v2' => $power_backlight_remark['Vmax'],
                            'mA' => $power_backlight_remark['mA'],
                            'xL' => $power_backlight_remark['xL'],
                            'hW' => $power_backlight_remark['hw'],
                        );
                        $other_item['SampleOrder__power_backlight_remark'] = $power_backlight_remark_tmp;
                    }

                    // 联系人
                    if (!empty($cps_sample_order['CpsSampleOrder']['create_user_email'])) {
                        $contact = $g_Contact->find('first', array(
                            'conditions' => array(
                                'Contact.email' => $cps_sample_order['CpsSampleOrder']['create_user_email'],
                                'Contact.account_id' => $cps_sample_order['CpsSampleOrder']['account_id'],
                            ),
                            'fields' => 'Contact.id, Contact.name',
                            'order' => ''
                        ));
                        if (!empty($contact)) {
                            $other_item['SampleOrder__biz_contact_id_label'] = $contact['Contact']['name'];
                            $other_item['SampleOrder__biz_contact_id'] = $contact['Contact']['id'];
                        }
                    }

                    $authenticate_types = explode(',', $cps_sample_order['CpsSampleOrder']['authenticate_types']);
                    $authenticate_type_values = $g_Enum->find('list', array('conditions' => array('Enum.dict_name' => 'SampleOrder.authenticate_types', 'Enum.label' => $authenticate_types), 'fields' => array('Enum.value')));

                    $sample_type = $g_Enum->find('first', array('conditions' => array('Enum.dict_name' => 'SampleOrder.type', 'Enum.label' => $cps_sample_order['CpsSampleOrder']['sample_type']), 'fields' => array('Enum.value')));

                    $req_item['account'] = $g_Account->get_by_id($cps_sample_order['CpsSampleOrder']['account_id'], 'alias');
                    $req_item['quantity'] = $cps_sample_order['CpsSampleOrder']['quantity'];

                    $other_item['SampleOrder__delivery_info'] = $cps_sample_order['CpsSampleOrder']['delivery_info'];
                    $other_item['SampleOrder__require_delivery_date'] = date('Y-m-d', strtotime($cps_sample_order['CpsSampleOrder']['require_delivery_date']));
                    $other_item['SampleOrder__authenticate_types'] = empty($authenticate_type_values) ? null : array_values($authenticate_type_values);
                    $other_item['SampleOrder__type'] = empty($sample_type) ? null : $sample_type['Enum']['value'];

                    $reqs_detail = array($req_item);
                    $sample_order = array($other_item);
                    $result['reqs'] = $reqs_detail;
                    $result['others'] = $sample_order;
                }
                break;
            default :
                $result['layout']['all_field'] = $all_layout;
        }
        return $result;
    }

    function initPreOrderData($params = null) {
        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        global $g_UserRealName;

        $result = array('page_header' => 'Pre Order');
        switch($g_BizId) {
            case OCS_BIZ_TYPE_AE:
                $all_layout = array(
                    array(
                        'common' => 0,
                        'name' => 'Req.account_id',
                        'copy' => 1,
                        'rel' => 'account'
                    ),
                    array(
                        'common' => 0,
                        'name' => 'Req.product_id'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Task.sw_user_id',
                        'type' => 'input',
                        'class' => 'required sw_user_id input-medium auto_complete_field',
                        'auto_complete' => 'Users',
                        'default' => $g_UserId,
                        'default_label' => $g_UserRealName
                    ),
                    array(
                        'common' => 0,
                        'name' => 'Req.rd_dept_id',
                        'label' => '项目组',
                        'copy' => 1,
                        'rel' => 'rd_dept'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Task.subject',
                        'type' => 'textarea',
                        'class' => 'subject input-large',
                        'colspan' => 3,
                        'placeholder' => '此栏不填则系统自动生成摘要'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Confirmation.SW_AE_Map',
                        'label' => '地图',
                        'type' => 'text_dummy',
                        'SelectType' => 'radio',
                        'class' => 'Panel',
                        'copy' => 1,
                        'rel' => 'Panel'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Confirmation.SW_Logo',
                        'label' => '开机LOGO',
                        'type' => 'text_dummy',
                        'required' => 1,
                        'SelectType' => 'radio',
                        'class' => 'Logo'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Confirmation.SW_AE_BT',
                        'label' => '蓝牙',
                        'type' => 'text_dummy',
                        'SelectType' => 'radio',
                        'class' => 'Panel',
                        'copy' => 1,
                        'rel' => 'Panel'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Confirmation.AE_CarPlay',
                        'label' => 'CarPlay',
                        'type' => 'text_dummy',
                        'SelectType' => 'radio',
                        'class' => 'Panel',
                        'copy' => 1,
                        'rel' => 'Panel'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Confirmation.SW_AE_Radio_Rec_Freq',
                        'label' => '收音频率',
                        'type' => 'text_dummy',
                        'SelectType' => 'radio',
                        'class' => 'Panel',
                        'copy' => 1,
                        'rel' => 'Panel'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Confirmation.SW_AE_Panel_light',
                        'label' => '面板灯颜色',
                        'type' => 'text_dummy',
                        'SelectType' => 'radio',
                        'class' => 'Panel',
                        'copy' => 1,
                        'rel' => 'Panel'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Confirmation.SW_DefaultLanguage',
                        'label' => '默认语言',
                        'type' => 'text_dummy',
                        'SelectType' => 'radio',
                        'required' => 1,
                        'class' => 'DefaultLanguage'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Confirmation.SW_DefaultCountry',
                        'label' => '默认国家',
                        'type' => 'text_dummy',
                        'SelectType' => 'radio',
                        'required' => 1,
                        'class' => 'DefaultCountry'
                    ),
                    array(
                        'common' => 1,
                        'name' => 'Confirmation.SW_OptFunc',
                        'label' => '可选模块',
                        'type' => 'text_dummy',
                        'class' => 'OptFunc',
                        'required' => 1
                    ),
                    array(
                        'common' => 0,
                        'name' => 'Req.remark',
                        'copy' => 1,
                        'rel' => 'remark',
                        'colspan' => 3
                    ),
                );
                break;
            default:
                $all_layout = array(
                    array('common' => 0, 'name' => 'Req.account_id', 'copy' => 1, 'rel' => 'account'),
                    array('common' => 0, 'name' => 'Req.product_id'),
                    array('common' => 1, 'name' => 'Task.sw_user_id', 'type' => 'input', 'class' => 'required sw_user_id input-medium auto_complete_field', 'auto_complete' => 'Users', 'default' => $g_UserId, 'default_label' => $g_UserRealName),
                    array('common' => 0, 'name' => 'Req.rd_dept_id', 'label' => '项目组', 'copy' => 1, 'rel' => 'rd_dept'),
                    array('common' => 1, 'name' => 'Task.subject', 'type' => 'textarea', 'class' => 'subject input-large', 'colspan' => 3, 'placeholder' => '此栏不填则系统自动生成摘要'),
                    array('common' => 1, 'name' => 'Confirmation.SW_Panel', 'label' => '配屏型号', 'type' => 'text_dummy', 'SelectType' => 'radio', 'class' => 'Panel', 'copy' => 1, 'rel' => 'Panel'),
                    array('common' => 1, 'name' => 'Confirmation.SW_Logo', 'label' => '开机LOGO', 'type' => 'text_dummy', 'required' => 1, 'SelectType' => 'radio', 'class' => 'Logo'),
                    array('common' => 1, 'name' => 'Confirmation.SW_RemoteControl', 'label' => '遥控器', 'type' => 'text_dummy', 'required' => 1, 'SelectType' => 'radio', 'class' => 'RemoteControl'),
                    array('common' => 1, 'name' => 'Confirmation.SW_Language', 'label' => 'OSD语言', 'type' => 'text_dummy', 'required' => 1, 'class' => 'Language'),
                    array('common' => 1, 'name' => 'Confirmation.SW_DefaultLanguage', 'label' => '默认语言', 'type' => 'text_dummy', 'SelectType' => 'radio', 'required' => 1, 'class' => 'DefaultLanguage'),
                    array('common' => 1, 'name' => 'Confirmation.SW_Country', 'label' => '区域', 'type' => 'text_dummy', 'class' => 'Country', 'copy' => 1, 'rel' => 'Country'),
                    array('common' => 1, 'name' => 'Confirmation.SW_DefaultCountry', 'label' => '默认国家', 'type' => 'text_dummy', 'SelectType' => 'radio', 'required' => 1, 'class' => 'DefaultCountry'),
                    array('common' => 1, 'name' => 'Confirmation.SW_OptFunc', 'label' => '可选模块', 'type' => 'text_dummy', 'class' => 'OptFunc', 'required' => 1),
                    array('common' => 0, 'name' => 'Req.remark', 'copy' => 1, 'rel' => 'remark', 'colspan' => 3),
                );
        }

        foreach ($all_layout as $key => $one) {
            if (!isset($one['label'])) {
                //$attr_dic_temp = Cache::read('attr_dic/' . $one['name'], 'attr_dic');
                //$attr_dic_temp = $g_Commons->getDataByAttrDicCache($one['name']);
                $attr_dic_temp = $g_Commons->getDataByCache($one['name'],'AttrDic');
                $all_layout[$key]['label'] = $attr_dic_temp['AttrDic']['label'];
            }
        }
        $result['layout']['all_field'] = $all_layout;
        return $result;
    }

    function initFakerBody($fakerInputAttrs, $RelSwInputSourceAtoms = null) {
        global $g_BizId;
        global $g_Commons;
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');

        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;

        $result['fakerInputAttrs'] = $fakerInputAttrs;
        $fakerAliasAttrIds = array();
        $fakerInputAtomIds = array();
        $fakerInputSortAtoms = array();
        foreach ($fakerInputAttrs as $fakerInputAttr) {
            if ('SW_ExtendSwAtoms' == $fakerInputAttr) {
                $fakerAliasAttrIds[$fakerInputAttr] = $fakerInputAttr;
                continue;
            }
            $prodAttrId = $g_ProdAttr->find('first', array(
                'conditions' => array('ProdAttr.alias' => $fakerInputAttr),
                'fields' => 'ProdAttr.id, ProdAttr.atom_lib_id'
            ));
            ////////////////// 复用功能元库的属性，$fakerAliasAttrIds的值写为原属性的id
            if (0 != $prodAttrId['ProdAttr']['atom_lib_id']) {
                $fakerAliasAttrIds[$fakerInputAttr] = $prodAttrId['ProdAttr']['atom_lib_id'];
            } else {
                $fakerAliasAttrIds[$fakerInputAttr] = $prodAttrId['ProdAttr']['id'];
            }
        }
        $fakerInputCategories = array();
        if (!empty($fakerInputAttrs)) {
            foreach ($fakerInputAttrs as $fakerInputAttr) {
                $fakerInputCategories[$fakerInputAttr] = $g_Enum->getEnumByDictName($fakerInputAttr . '.category');
            }
        }
        if (!empty($fakerInputCategories)) { // 排序
            foreach ($fakerInputCategories as $key => $fakerInputCategory) {
                if (!empty($fakerInputCategory)) {
                    $sort = array();
                    foreach ($fakerInputCategory as $enum) {
                        $sort[] = $enum['Enum']['sequence'];
                    }
                    array_multisort($sort, SORT_ASC, $fakerInputCategory);
                    $fakerInputCategories[$key] = $fakerInputCategory;
                }
            }
        }

        if (!empty($fakerInputCategories)) {
            foreach ($fakerInputCategories as $key => $fakerInputCategory) {
                $prodAttr = $g_ProdAttr->find('first', array(
                    'conditions' => array('ProdAttr.alias' => $key),
                    'fields' => 'ProdAttr.id, ProdAttr.atom_lib_id'
                ));
                $prodAttr = $prodAttr['ProdAttr'];
                $prodAttrId = $prodAttr['id'];
                if ('SW_InputSource' == $key) {
                    // 软件通道特殊处理下拉显示的功能元
                    if (null != $RelSwInputSourceAtoms) {
                        foreach ($RelSwInputSourceAtoms as $RelSwAtom) {
                            $relSwAtomIds['Atom'] = $g_Atoms->findAtomsById($RelSwAtom['id']);
                            // $relSwAtomIds = explode(',', $relSwAtomIds['Atom']['rel_sw_inputsource_ids']);
                            $relSwAtomIds = json_decode($relSwAtomIds['Atom']['rel_sw_inputsource_ids']);
                            $counter = 0;
                            foreach ($relSwAtomIds as $relSwAtomId) {
                                $fakerInputSortAtoms[$prodAttrId][$RelSwAtom['id']][$counter++]['Atom'] = $g_Atoms->findAtomsById($relSwAtomId);
                            }
                        }
                    }
                } else {
                    if (!empty($fakerInputCategory)) {
                        foreach ($fakerInputCategory as $enum) {
                            if (0 == $prodAttr['atom_lib_id']) {
                                $fakerInputSortAtoms[$prodAttrId][$enum['Enum']['label']] = $g_Atoms->getOwnerVisibleAtomByProdAttrId($prodAttrId, $enum['Enum']['value']);
                            } else {
                                $fakerInputSortAtoms[$prodAttrId][$enum['Enum']['label']] = $g_Atoms->getOwnerVisibleAtomByProdAttrId($prodAttr['atom_lib_id'], $enum['Enum']['value']);
                            }
                        }
                    } else { // 都还没分类的，即还没有枚举值;写死“No Category”
                        if (0 == $prodAttr['atom_lib_id']) {
                            $fakerInputSortAtoms[$prodAttrId][__('No Category')] = $g_Atoms->getOwnerVisibleAtomByProdAttrId($prodAttrId);
                        } else {
                            $fakerInputSortAtoms[$prodAttrId][__('No Category')] = $g_Atoms->getOwnerVisibleAtomByProdAttrId($prodAttr['atom_lib_id']);
                        }
                    }
                }
            }
        }
        if (!empty($fakerInputSortAtoms)) {
            foreach ($fakerInputSortAtoms as $fakerInputSortAtom) {
                foreach ($fakerInputSortAtom as $atoms) {
                    foreach ($atoms as $atom) {
                        $fakerInputAtomIds[$atom['Atom']['prod_attr_id']][$atom['Atom']['name']] = $atom['Atom']['id'];
                    }
                }
            }
        }
        // 其他软件项特殊处理
        // $ExtendSwAtomNames = array('TN', 'NICAM', 'D&B');
        $extendSwAtoms = $g_Atoms->Atom->find('all', array('conditions' => array('Atom.name' => $g_Atoms->ExtendSwAtomNames), 'fields' => array('Atom.id', 'Atom.name', 'Atom.prod_attr_id')));
        $fakerInputSortAtoms['SW_ExtendSwAtoms']['未分类'] = $extendSwAtoms;
        $extendSwAtomNameIds = array();
        foreach ($extendSwAtoms as $one) {
            $extendSwAtomNameIds[$one['Atom']['name']] = $one['Atom']['id'];
        }
        $fakerInputAtomIds['SW_ExtendSwAtoms'] = $extendSwAtomNameIds;

        $result['fakerInputSortAtoms'] = $fakerInputSortAtoms;
        $result['fakerInputAtomIds'] = $fakerInputAtomIds;
        $result['fakerAliasAttrIds'] = $fakerAliasAttrIds;
        return $result;
    }

    // 保存订单需求版本信息
    function saveContractData($data, $action) {
        global $g_BizId;
        global $g_Commons;
        $g_Contract = $g_Commons->GlobalModel('Contract');

        foreach ($data['req'] as $key => $req) {
            foreach ($data['head']['req'] as $field => $val) {
                $data['req'][$key][$field] = $val;
            }
        }
        foreach ($data['Contract'] as $key => $req) {
            foreach ($data['head']['Contract'] as $field => $val) {
                $data['Contract'][$key]['Contract__' . $field] = $val;
            }
        }
        $ContractResult = $this->verificaContractData($data, $action);
        if (!$ContractResult['is_success']) {
            return $ContractResult;
        }
        $result = $this->verificaReqData($data, $action);
        if (!$result['is_success']) {
            return $result;
        }

        $ContractId = array();
        foreach ($ContractResult['save_data'] as $key => $ContractData) {
            if ('new' == $action) {
                $g_Contract->create();
            } else {
                $ContractData['id'] = $result['save_data'][$key]['rel_obj_id'];
            }
            $g_Contract->save($ContractData);
            $ContractId[$key] = $g_Contract->id;
        }
        foreach ($result['save_data'] as $key => $req_data) {
            if (!isset($req_data['id'])) {
                $this->Req->create();
            }
            $req_data['model_def_id'] = Contract;
            $req_data['rel_obj_id'] = $ContractId[$key];
            if (isset($req_data['id']) && isset($req_data['product_id'])) {//检查是否有更改产品代码
                $this->CheckAndNotifyProductChange($req_data['id'], $req_data['product_id']);
            }
            $this->Req->save($req_data);
            $this->saveReqVersion($this->Req->id);

            //获取计划清单状态
            // global $g_Commons;
            // $g_MfPlanBills = $g_Commons->GlobalController('MfPlanBills');
            // $g_MfPlanBills->MfPlanBill->recursive = -1;
            // $MfPlanBillStatus = $g_MfPlanBills->getStatusByReqId($this->Req->id);
            // if ($MfPlanBillStatus >= OCS_MF_PLAN_BILL_STATUS_PASSED) {//状态>=一致通过时，如果产品代码有变化则计划清单里的ＢＯＭ编码也要跟着变
            //     $MfPlanBill = $g_MfPlanBills->MfPlanBill->find('first', array('conditions' => array('MfPlanBill.req_id' => $this->Req->id),
            //                 'fields' => array('MfPlanBill.id', 'MfPlanBill.bom_name', 'MfPlanBill.req_id')));
            //     $g_Logs = $g_Commons->GlobalController('Logs');
            //     $g_Products = $g_Commons->GlobalController('Products');
            //     $g_Products->Product->recursive = -1;
            //     $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $MfPlanBill['MfPlanBill']['req_id']),
            //                 'fields' => array('Req.product_id')));
            //     $BomName = $g_Products->getProductBomNameByProductId($Req['Req']['product_id']);
            //     $MfPlanBill['MfPlanBill']['bom_name'] = $BomName;
            //     $g_MfPlanBills->MfPlanBill->save($MfPlanBill['MfPlanBill']);
            //     $log_content = '';
            //     global $g_UserRealName;
            //     $log_content .= '修改产品代码，对应的BOM编码由#' . $MfPlanBill['MfPlanBill']['bom_name'] . '改为 #' . $BomName;
            //     $g_Logs->write_log('MfPlanBills', $g_MfPlanBills->MfPlanBill->id, 'info', $g_UserRealName . '于' . date('Y-m-d H:i:s') . $log_content);
            // }
        }

        foreach ($ContractId as $contract_id) {
            $this->WSWriteContractToCRM($contract_id);
        }
        return array('is_success' => true);
    }

    // 保存样品单需求版本信息
    function saveSampleOrderData($data, $action) {
        global $g_BizId;
        global $g_Commons;
        $g_SampleOrder = $g_Commons->GlobalModel('SampleOrder');
        $g_User = $g_Commons->GlobalModel('User');
        $g_Task = $g_Commons->GlobalModel('Task');

        $g_Attachments = $g_Commons->GlobalController('Attachments');
        $g_Tasks = $g_Commons->GlobalController('Tasks');

        $SampleResult = $this->verificaSampleOrderData($data, $action);
        if (!$SampleResult['is_success']) {
            return $SampleResult;
        }
        $ReqResult = $this->verificaReqData($data, $action);

        if (!$ReqResult['is_success']) {
            return $ReqResult;
        }
        $SampleOrderId = array();
        $needSafetyFileOrderIds = array();
        foreach ($SampleResult['save_data'] as $key => $SampleOrderData) {
            //新建样品单 or 编辑样品单时预计发样日期取需求发样日期 add by ziying 2016-1-19 modify by linfangjie 2017.05.08
            $SampleOrderData['estimate_delivery_date'] = isset($SampleOrderData['require_delivery_date']) ? $SampleOrderData['require_delivery_date'] : '';

            if ('new' == $action) {
                $g_SampleOrder->create();
                $SampleOrderData['account_status'] = 1;
            } else {
                $SampleOrderData['id'] = $ReqResult['save_data'][$key]['rel_obj_id'];
                $SampleOrderOldData = $g_SampleOrder->findById($SampleOrderData['id']);
                if (OCS_SAMPLE_ORDER_RETURN == $SampleOrderOldData['SampleOrder']['status']) {
                    $SampleOrderData['status'] = OCS_SAMPLE_ORDER_WAIT_AUDIT;
                }
            }
            $g_SampleOrder->save($SampleOrderData);
            if (1 == $SampleOrderData['is_need_safety_file'] && 'new' == $action) {//需要安规文件
                $needSafetyFileOrderIds[] = $g_SampleOrder->id;
            }
            $SampleOrderId[$key] = $g_SampleOrder->id;
        }

        $ReqsInfo = array();
        foreach ($ReqResult['save_data'] as $key => $req_data) {
            if ('new' == $action) {
                $req_data['rel_obj_id'] = $SampleOrderId[$key];
                $req_data['is_has_task'] = 1;
                $this->Req->create();
            }
            $req_data['model_def_id'] = SampleOrder; // $sample_order_model['ModelDef']['id'];
            $this->Req->save($req_data);
            if (in_array($req_data['rel_obj_id'], $needSafetyFileOrderIds)) {
                $temp = array();
                $temp['id'] = $this->Req->id;
                $temp['name'] = $req_data['name'];
                $temp['remark'] = $req_data['remark'];
                $ReqsInfo[] = $temp;
            }
            $this->saveReqVersion($this->Req->id);
            $task_id = $g_Tasks->CreateSampleOrderTask($this->Req->id); //创建样品单任务
            $update_status_result = $g_Task->updateStatusByTaskReq($task_id, $req_data);
            if (!empty($data['SampleOrder'][$key]['SampleOrder__sw_file'])) {
                $g_Attachments->upload_attachment($data['SampleOrder'][$key]['SampleOrder__sw_file'], Task, $task_id, OCS_ATTACH_TYPE_CONFIRMATION);
            }

            //当新建样品单时板卡为量产前和数量>5 ,则状态自动变为项目管理审核；
            if ('new' == $action && 0 == $update_status_result['status_updated']) {
                $g_Tasks->Task->autoSetAndNotifySampleOrder($task_id);
            }
        }
        if (!empty($ReqsInfo)) { // 有需要安规资料的样品单，则发邮件通知相关人
            $notifyUserRealnames = array('陈旭婷', '王俊洋'); // hardcode　现默认邮件提醒人为他们, '侯晓应'
            $toUsers = array();
            foreach ($notifyUserRealnames as $realname) {
                $User = $g_User->find('first', array(
                    'conditions' => array('User.realname' => $realname, 'User.is_valid' => 1),
                    'fields' => array('User.id', 'User.email')
                ));
                if (!empty($User)) {
                    $toUsers[] = $User['User']['email'];
                }
            }
            global $g_UserEmail;
            global $g_BizUrl;
            global $g_CVTOCS;
            global $g_OCS_options;
            $cc = array();
            $cc[$g_UserEmail] = $g_UserEmail;
            $msg = '';
            $msg .= '请相关人员提供修改项，样品BOM，及填写样品批号。';
            $msg .= '<div style="background:#FFFADF;border:1px solid #F0F0F0;padding:3px;margin-bottom:20px;display:block;">';
            $msg .= '<table border=1>';
            $msg .= '<tr><th>ID</th><th>样品单主题</th><th>备注</th></tr>';
            foreach ($ReqsInfo as $req) {
                $msg .= '<tr>';
                $msg .= '<td>' . $req['id'] . '</td>';
                $msg .= '<td><a href="' . $g_OCS_options['url'] . $g_BizUrl . 'Reqs/view/' . $req['id'] . '">' . $req['name'] . '</a></td>';
                $msg .= '<td>' . $req['remark'] . '</td>';
                $msg .= '</tr>';
            }
            $msg .= '</table>';
            $msg .= '</div>';
            $g_EmailSends = $g_Commons->GlobalController('EmailSends');
            $g_EmailSends->template = 'bom';
            $g_EmailSends->subject = '[样品单提醒]请提供修改项及样品BOM';
            $g_EmailSends->body = $msg;
            $g_EmailSends->toUsers = $toUsers;
            $g_EmailSends->cc = $cc;
            $result = $g_EmailSends->sendEmail();
            $g_EmailSends->emailSendErrorProcess($result);
        }
        return array('is_success' => true, 'datas' => $SampleOrderId);
    }

    // 保存意向订单需求版本信息
    function savePreOrderData($data, $action, $return_task_id = 0, $is_save_monitor = 1) {
        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_CVTOCS;
        global $g_Commons;
        $g_Tasks = $g_Commons->GlobalController('Tasks');

        $task_id = 0;
        $ReqResult = $this->verificaReqData($data, $action);
        if (!$ReqResult['is_success']) {
            return $ReqResult;
        }
        $auto_open_similar_task = '';
        foreach ($ReqResult['save_data'] as $key => $req_data) {
            if ('new' == $action) {
                $req_data['rel_obj_id'] = 0;
                $req_data['is_has_task'] = 1;
                $this->Req->create();
                $auto_open_similar_task = '/auto_open:similar_task';
            }
            $req_data['model_def_id'] = 0;
            if (!isset($req_data['create_user_id'])) {
                $req_data['create_user_id'] = 0;
            }
            $this->Req->save($req_data);
            $this->saveReqVersion($this->Req->id);
            $task_id = $g_Tasks->CreatePreOrderTask($this->Req->id, $data['Task'][$key], $is_save_monitor);
        }
        if (1 == $return_task_id) {
            return $task_id;
        } else {
            return array('is_success' => true, 'go_to_url' => $g_CVTOCS['baseBizPath'] . 'Tasks/view/range:all/' . $task_id . $auto_open_similar_task);
        }
    }

    function verificaReqData($data, $action) {
        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Product = $g_Commons->GlobalModel('Product');

        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdAttrs->ProdAttr->recursive = -1;

        $flag = false;
        $result = array();
        foreach ($data['req'] as $num => $req) {
            $sw_atom_ids = array('0');
            $sw_atom_ids_json = array();
            $extend_atom_ids = array('0');
            if (isset($req['product_id'])) {
                $product = $g_Product->find('first', array(
                    'joins' => array(
                        array(
                            'table' => 'prod_models',
                            'alias' => 'ProdModel',
                            'type' => 'LEFT',
                            'conditions' => 'ProdModel.id = Product.prod_model_id'
                        ),
                        array(
                            'table' => 'prod_model_details',
                            'alias' => 'ProdModelDetail',
                            'type' => 'LEFT',
                            'conditions' => 'Product.pcb_id = ProdModelDetail.id'
                        ),
                    ),
                    'conditions' => array(
                        'Product.id' => $req['product_id']
                    ),
                    'fields' => 'ProdModel.name, ProdModelDetail.serie_id'
                ));
//                $all_extend_atom_ids = $g_ProdModels->getExtendSwAtomIdsByProdModelIdAndProdOptIds($product['Product']['prod_model_id'], explode(',', $product['Product']['prod_opt_ids']));
                $all_extend_atom_ids = $g_Atoms->Atom->find('list', array('conditions' => array('Atom.name' => $g_Atoms->ExtendSwAtomNames), 'fields' => array('Atom.id')));

                if (!isset($req['rd_dept_id']) || -1 == $req['rd_dept_id'] || 0 == $req['rd_dept_id']) {
                    // 根据系列获取研发部门
                    $rd_dept_id = -1;
                    if (!empty($product['ProdModelDetail']['serie_id']) && 0 != $product['ProdModelDetail']['serie_id']) {
                        $g_Series = $g_Commons->GlobalController('Series');
                        $g_Series->Series->recursive = -1;
                        $rd_dept_id = $g_Series->Series->find('first', array(
                            'conditions' => array('Series.id' => $product['ProdModelDetail']['serie_id']),
                            'fields' => 'Series.rd_dept_id'
                        ));
                        $rd_dept_id = $rd_dept_id['Series']['rd_dept_id'];
                    }
                    $req['rd_dept_id'] = $rd_dept_id;
                }
            }
            // 其它软件项先做特殊处理
            if (isset($req['sw']['Confirmation__SW_ExtendSwAtoms']) && !empty($req['sw']['Confirmation__SW_ExtendSwAtoms'])) {
                $extend_atoms = explode(',', $req['sw']['Confirmation__SW_ExtendSwAtoms']);
                foreach ($extend_atoms as $atom_name) {
                    // 如果是“无”不做处理
                    if ('无' == $atom_name) {
                        continue;
                    }
                    $extend_one = $g_Atoms->Atom->findByName($atom_name);
                    $sw_atom_ids[] = $extend_one['Atom']['id'];
                    $extend_atom_ids[] = $extend_one['Atom']['id'];
                    if (!isset($sw_atom_ids_json[$extend_one['Atom']['prod_attr_id']])) {
                        $sw_atom_ids_json[$extend_one['Atom']['prod_attr_id']] = array();
                    }
                    $sw_atom_ids_json[$extend_one['Atom']['prod_attr_id']][] = $extend_one['Atom']['id'];
                }
            }
            $extend_atom_ids[] = '0';
            $HasCIPlus = 0;
            if (isset($req['sw'])) {
                foreach ($req['sw'] as $sw_alias => $atom_names) {
                    $sw_alias = ltrim($sw_alias, 'Confirmation__');
                    if ('SW_CIPlus' == $sw_alias) {
                        if ('CI_Plus' == $atom_names) {
                            $sw_alias = 'SW_OptFunc';
                            $atom_names = 'SW_OptFunc_CIPlus';
                            $HasCIPlus = 1;
                        }
                    }
                    $prodAttr_sw = $g_ProdAttrs->findByAlias($sw_alias);
                    // 即使没填对应属性的功能元也给保留该属性数组，以便后面fixSwAtomData函数的运算
                    // hardcode 将ciplus转为可选功能中的功能元
                    if (empty($prodAttr_sw)) {
                        continue;
                    }
                    if (!isset($sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']])) {
                        $sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']] = array();
                    }
                    if (is_array($atom_names)) {
                        $atom_names = implode(',', $atom_names);
                    }
                    if ('' == $atom_names || ',,,,,,,' == $atom_names) {
                        continue;
                    }
                    $prodAttr_sw_id = $prodAttr_sw['ProdAttr']['id'];
                    if (0 != $prodAttr_sw['ProdAttr']['atom_lib_id']) {
                        $prodAttr_sw_id = $prodAttr_sw['ProdAttr']['atom_lib_id'];
                    }
                    $atom_names = explode(',', $atom_names);
                    foreach ($atom_names as $atom_name) {
                        $atom_name = $g_Commons->enCharToCnChar($atom_name);
                        if ('SW_KeyBoard' == $sw_alias && '' == $atom_name) {
                            if (!isset($sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']])) {
                                $sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']] = array();
                            }
                            $sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']][] = '';
                            continue;
                        }
                        $atom_sw = $g_Atoms->Atom->findByNameAndProdAttrId($atom_name, $prodAttr_sw_id);
                        if (empty($atom_sw)) {
                            if (0 == $prodAttr_sw['ProdAttr']['can_auto_create_atom']) {
                                return array('is_success' => $flag, 'field' => '功能元', 'wrong_value' => $atom_name);
                            } else {
                                $atom_sw['name'] = $atom_name;
                                $atom_sw['name_cn'] = $atom_name;
                                $atom_sw['name_sw'] = $atom_name;
                                $atom_sw['name_hw'] = $atom_name;
                                $atom_sw['prod_attr_id'] = $prodAttr_sw_id;
                                $atom_sw['pinyin'] = $g_Commons->pinyin($atom_name);
                                $atom_sw['create_time'] = date("Y-m-d H:i:s");
                                $atom_sw['update_time'] = date("Y-m-d H:i:s");
                                $g_Atoms->Atom->create();
                                $atom_sw = $g_Atoms->Atom->save($atom_sw);
                            }
                        }
                        $sw_atom_ids[] = $atom_sw['Atom']['id'];
                        $sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']][] = $atom_sw['Atom']['id'];
                    }
                }
            }

            $sw_atom_ids[] = '0';
            $sw_atom_ids = implode(',', $sw_atom_ids);
            $sw_atom_ids_json = json_encode($sw_atom_ids_json);

            // 是否有提交硬件关联软件选项
            if (isset($req['req__hw_rel_sw_atom_ids'])) {
                $result[$num]['hw_rel_sw_atom_ids'] = implode(',', $req['req__hw_rel_sw_atom_ids']);
            }

            $req['burn_key_store_ids'] = '';
            if (isset($req['burn_key_hdcp_store']) && '' != $req['burn_key_hdcp_store']) {
                $req['burn_key_store_ids'] .= OCS_BURN_KEY_TYPE_HDCP . ':' . $req['burn_key_hdcp_store'];
            }
            if (isset($req['burn_key_ci_plus_store']) && '' != $req['burn_key_ci_plus_store']) {
                if (1 == $HasCIPlus) {
                    $req['burn_key_store_ids'] .= ',' . OCS_BURN_KEY_TYPE_CIPLUS . ':' . $req['burn_key_ci_plus_store'];
                } else {
                    $req['burn_key_store_ids'] .= ',' . OCS_BURN_KEY_TYPE_CIPLUS . ':0';
                }
            }
            if (isset($req['burn_key_mac_store']) && '' != $req['burn_key_mac_store']) {
                $req['burn_key_store_ids'] .= ',' . OCS_BURN_KEY_TYPE_MAC . ':' . $req['burn_key_mac_store'];
            }
            if (isset($req['burn_key_hdcp20g_store']) && '' != $req['burn_key_hdcp20g_store']) {
                $req['burn_key_store_ids'] .= ',' . OCS_BURN_KEY_TYPE_HDCP20G . ':' . $req['burn_key_hdcp20g_store'];
            }
            $exitProductId = 0;
            if (isset($req['id'])) {
                $result[$num]['id'] = $req['id'];
                $req_now = $this->Req->findById($req['id']);
                $exitProductId = $req_now['Req']['product_id'];
                $sw_prod_attr = $g_ProdAttrs->getSeriesSWAdvanceAttr($product['ProdModelDetail']['serie_id']);
                $sw_prod_attr_list = array();
                foreach ($sw_prod_attr as $one) {
                    $sw_prod_attr_list[] = $one['id'];
                }
                $sw_atom = $this->fixSwAtomData($req_now['Req']['sw_atom_ids_json'], $sw_atom_ids_json, $extend_atom_ids, $all_extend_atom_ids, $sw_prod_attr_list);
                $sw_atom_ids = $sw_atom['sw_atom_ids'];
                $sw_atom_ids_json = $sw_atom['sw_atom_ids_json'];
            }
            if (!empty($req['ext_3rd_party_prods'])) {
                if (is_array($req['ext_3rd_party_prods'])) {
                    $req['ext_3rd_party_prods'] = implode(' ; ', $req['ext_3rd_party_prods']);
                    $req['ext_3rd_party_prods'] = $g_Commons->js_unescape($req['ext_3rd_party_prods']);
                }
                $result[$num]['ext_3rd_party_prods'] = $req['ext_3rd_party_prods'];
            }
            if (!empty($req['ext_prod_ids'])) {
                $result[$num]['ext_prod_ids'] = implode(' ; ', $req['ext_prod_ids']);
            }
            $result[$num]['sw_atom_ids'] = $sw_atom_ids;
            $result[$num]['sw_atom_ids_json'] = $sw_atom_ids_json;

            $result[$num]['extend_sw_atom_ids'] = implode(',', $extend_atom_ids);
            $fields = array('quantity', 'price', 'amount', 'foreign_price', 'foreign_amount', 'exchange_ratio', 'currency_id', 'remark', 'com_dept_id', 'sw_contact_id',
                'sales_user_id', 'owner_user_id', 'account_id', 'product_id', 'prod_lock_type', 'rd_dept_id', 'hw_user_id', 'sw_user_id', 'rel_obj_id', 'invc_prod_name', 'reorder_source_id', 'burn_key_store_ids');
            foreach ($fields as $one) {
                if (isset($req[$one])) {
                    $result[$num][$one] = $req[$one];
                } else {
                    if (isset($req_now['Req'][$one])) {
                        $result[$num][$one] = $req_now['Req'][$one];
                    }
                }
            }
            if (isset($req['foreign_price'])) {
                $result[$num]['price'] = $req['foreign_price'] * $req['exchange_ratio'];
                $result[$num]['amount'] = $req['foreign_amount'] * $req['exchange_ratio'];
            } else {
                $result[$num]['exchange_ratio'] = 1;
            }
            $result[$num]['biz_id'] = $g_BizId;

            // 在此判断数据库字段不能为空的字段是否有值
            $not_null_fields = array('biz_id', 'product_id', 'rd_dept_id', 'status', 'quantity', 'com_dept_id');
            foreach ($not_null_fields as $one_field) {
                if (isset($result[$num][$one_field]) && null == $result[$num][$one_field]) {
                    $result[$num][$one_field] = 0;
                }
            }

            $account = $g_Account->findById($req['account_id']);
            if ('new' == $action) {
                if (isset($data['head']['Contract']['order_time'])) {
                    $result[$num]['name'] = $account['Account']['short_name'] . '-' . date('md', strtotime($data['head']['Contract']['order_time'])) . '-' . $product['ProdModel']['name'] . '-' . $req['quantity'];
                } else {
                    if (!isset($req['quantity'])) {
                        $result[$num]['name'] = $account['Account']['short_name'] . '-' . date('md') . '-' . $product['ProdModel']['name'];
                    } else {
                        $result[$num]['name'] = $account['Account']['short_name'] . '-' . date('md') . '-' . $product['ProdModel']['name'] . '-' . $req['quantity'];
                    }
                }
                $result[$num]['create_user_id'] = $g_UserId;
                $result[$num]['create_time'] = date('Y-m-d H:i:s');
                $result[$num]['update_user_id'] = $g_UserId;
                $result[$num]['update_time'] = date('Y-m-d H:i:s');
                $result[$num]['status'] = 1;
            } else {
                if (0 != $exitProductId && $exitProductId != $result[$num]['product_id']) {//说明修改订单，产品被修改了。
                    //产品被修改，则自动将确认书的审核状态改为“确认待修改”状态。
                    $ReqId = $result[$num]['id'];
                    $BackForwardStage = OCS_PRODMODEL_REL_AUDIT_USER_STAGE_RESET; //确认书待修改状态
                    $oldProdName = $g_Product->findMainField($exitProductId);
                    $newProdName = $g_Product->findMainField($result[$num]['product_id']);
                    $BackForwardReason = '修改产品：' . $oldProdName . '=>' . $newProdName;
                    $conds = array('AuditStageRelObj.model_def_id' => Req,
                        'AuditStageRelObj.rel_obj_id' => $ReqId, 'AuditStageRelObj.is_audit' => 1);
                    $conds[] = 'AuditStageRelObj.audit_stage <= ' . $BackForwardStage;
                    $g_AuditStageRelObjs = $g_Commons->GlobalController('AuditStageRelObjs');
                    $g_Logs = $g_Commons->GlobalController('Logs');
                    global $g_UserRealName;
                    global $g_UserEmail;

                    //产品改变，生产计划清单的相应信息也要变
                    $g_MfPlanBills = $g_Commons->GlobalController('MfPlanBills');
                    $g_MfPlanBills->ClearHwAuditData($ReqId); //清空硬件审核数据，当产品代码改变时

                    $g_Users = $g_Commons->GlobalController('Users');
                    $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
                    $g_Enums = $g_Commons->GlobalController('Enums');
                    $g_AuditStageRelObjs->AuditStageRelObj->recursive = -1;
                    $AuditStageRelObjs = $g_AuditStageRelObjs->AuditStageRelObj->find('all', array('conditions' => $conds));
                    if (!empty($AuditStageRelObjs)) {
                        foreach ($AuditStageRelObjs as $AuditStageRelObj) {//将所有小于打回状态的记录改为待审核，且清除已审核人和时间。
                            $AuditStageRelObj['AuditStageRelObj']['is_audit'] = 0;
                            $AuditStageRelObj['AuditStageRelObj']['final_audit_user_id'] = 0;
                            $AuditStageRelObj['AuditStageRelObj']['audit_time'] = NULL;
                            $g_AuditStageRelObjs->AuditStageRelObj->save($AuditStageRelObj['AuditStageRelObj']);

                            //写LOG
                            $g_Logs->write_log('AuditStageRelObjs', $g_AuditStageRelObjs->AuditStageRelObj->id, 'info', $g_UserRealName . '于' . date('Y-m-d H:i:s') . '修改订单产品，系统自动打回确认书; 打回原因：' . $BackForwardReason);
                        }

                        $Req = $this->Req->findById($ReqId);
                        if (!empty($Req)) {//将订单的audit_stage改为打回到的状态.
                            $Req['Req']['audit_stage'] = $BackForwardStage;
                            $Req['Req']['update_time'] = date('Y-m-d H:i:s');
                            $Req['Req']['update_user_id'] = $g_UserId;
                            $this->Req->save($Req['Req']);
                            $data = $this->syncAuditStageToCRM($ReqId);
                        }

                        $ToUsers = array();
                        $CcUsers = array();
                        $CcUsers[] = $g_UserEmail;
                        if (OCS_PRODMODEL_REL_AUDIT_USER_STAGE_RESET == $BackForwardStage) {//如果打回到“修改订单”这一环节，则要通知内勤修改订单后再重新分派。
                            $ToUsers[] = $g_Users->getUserEmailById($Req['Req']['owner_user_id']);
                        }
                        if (!empty($AuditStageRelObjs)) {
                            foreach ($AuditStageRelObjs as $AuditStageRelObj) {
                                if ($AuditStageRelObj['AuditStageRelObj']['pending_audit_user_id'] != 0) {
                                    $CcUsers[] = $g_Users->getUserEmailById($AuditStageRelObj['AuditStageRelObj']['pending_audit_user_id']);
                                }
                            }
                        }
                        $maxAuditStage = $g_AuditStageRelObjs->getMaxAudittedStage(Req, $Req['Req']['id']); //获取该订单对应的最大审核值；
                        //邮件通知已审核该订单审核人。
                        if (!empty($ToUsers)) {
                            global $g_OCS_options;
                            global $g_BizUrl;
                            $Options = array();
                            $Options['Email']['ToUsers'] = $ToUsers;
                            $Options['Field']['login_user_realname'] = $g_UserRealName;
                            $Options['Field']['login_user_email'] = $g_UserEmail;
                            $Options['Field']['audited_stage'] = $g_Enums->getLabelByDictNameAndValue('Req.audit_stage', $maxAuditStage);
                            $Options['Field']['backfoward_stage'] = $g_Enums->getLabelByDictNameAndValue('Req.audit_stage', OCS_PRODMODEL_REL_AUDIT_USER_STAGE_RESET);
                            $Options['Field']['Req__owner_name'] = $g_Users->getUserRealNameById($Req['Req']['owner_user_id']);
                            $Options['Field']['audit_backforward_reason'] = $BackForwardReason;
                            $Options['Field']['ocs_biz_url'] = $g_OCS_options['url'] . $g_BizUrl;
                            $Options['Email']['CcUsers'] = $CcUsers;
                            $g_QueueJobs->AddNoticeJob(array('Email'), Req, $ReqId, 'ResetAudit', $Options);
                        }
                    }
                }
                $result[$num]['update_user_id'] = $g_UserId;
                $result[$num]['update_time'] = date('Y-m-d H:i:s');
                if (isset($data['head']['Contract']['order_time'])) {
                    $name_date = date('md', strtotime($data['head']['Contract']['order_time']));
                } else {
                    $name = explode('-', $req_now['Req']['name']);
                    $name_date = $name[1];
                }
                $result[$num]['name'] = $account['Account']['short_name'] . '-' . $name_date . '-' . $product['ProdModel']['name'] . '-' . $result[$num]['quantity'];
            }
        }
        $flag = true;
        return array('is_success' => $flag, 'save_data' => $result);
    }

    function verificaContractData($data, $action) {
        global $g_BizId;
        global $g_Commons;
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Products->Product->recursive = -1;

        $flag = false;
        $result = array();
//        $error = ''; // 注释掉产品的PCB状态的数量限制
//        foreach ($data['req'] as $num => $req) {
//            if ($req['quantity'] > 100) {
//                $prod_use_state = $g_Products->Product->find('first', array(
//                            'joins' => array(
//                                array(
//                                    'table' => 'prod_model_details',
//                                    'alias' => 'ProdModelDetail',
//                                    'type' => 'LEFT',
//                                    'conditions' => 'ProdModelDetail.id = Product.pcb_id'
//                                )
//                            ),
//                            'conditions' => array('Product.id' => $req['product_id']),
//                            'fields' => 'ProdModelDetail.use_state, Product.name'
//                        ));
//                if ('批量' != $prod_use_state['ProdModelDetail']['use_state'] && '逐步淘汰' != $prod_use_state['ProdModelDetail']['use_state']) {
//                    $error .= $prod_use_state['Product']['name'] . '此产品PCB状态为：' . $prod_use_state['ProdModelDetail']['use_state'] . ', 数量不可以超过100;';
//                }
//            }
//        }
//        if ('' != $error) {
//            return array('is_success' => $flag, 'error_message' => $error);
//        }
        if ('new' == $action) {
            $g_Bizs = $g_Commons->GlobalController('Bizs');
            $g_Bizs->Biz->recursive = -1;
            $g_SeqRules = $g_Commons->GlobalController('SeqRules');
            $g_Types = $g_Commons->GlobalController('Types');
            $g_Types->Type->recursive = -1;
            foreach ($data['Contract'] as $contract_data) {
                $type_id = $contract_data['Contract__type_id'];
                break;
            }
            $type = $g_Types->Type->findById($type_id);
            $type['Type']['seq_rule_name'] = null == $type['Type']['seq_rule_name'] ? 'contract.contract_no' : $type['Type']['seq_rule_name'];
            $type['Type']['seq_prefix'] = null == $type['Type']['seq_prefix'] ? 'SYBC' : $type['Type']['seq_prefix'];
            $seqNum = $g_SeqRules->inquireNextSeq($g_BizId, $type['Type']['seq_rule_name'], date('y'));
            $g_SeqRules->save($g_BizId, $seqNum, $type['Type']['seq_rule_name'], date('y'));
            $Biz = $g_Bizs->Biz->findById($g_BizId);
            $contract_no = $type['Type']['seq_prefix'] . $Biz['Biz']['alias'] . '-' . date('y') . sprintf("%06d", $seqNum);
        }
        foreach ($data['Contract'] as $num => $contract_data) {
            foreach ($contract_data as $field => $val) {
                $field = explode('__', $field);
                if ('mtrl_substitute' == $field[1]) {
                    $val_temp = array(0);
                    if (!empty($val)) {
                        $val_temp[] = implode(',', $val);
                    }
                    $val_temp[] = 0;
                    $val = $val_temp;
                }
                $val = is_array($val) ? implode(',', $val) : $val;
//                if (!empty($val)) {
                $result[$num][$field[1]] = $val;
//                }
            }
            if ('new' == $action) {
                $result[$num]['contract_no'] = $contract_no;
            }
        }
        $flag = true;
        return array('is_success' => $flag, 'save_data' => $result);
    }

    function verificaSampleOrderData($data, $action) {
        global $g_BizId;
        global $g_Commons;
        $g_Product = $g_Commons->GlobalModel('Product');
        $flag = false;
        $result = array();
        switch ($g_BizId) {
            case OCS_BIZ_TYPE_TV:
                foreach ($data['SampleOrder'] as $key => $sample_order) {

                    // OCS-1010 产品管理-产品退市二期上线后零散需求改善
                    // 1）只验证产成品代码为TV事业部

                    // OCS-1171 产品管理:产品退市二期测试报告
                    // 1）产成品编号获取产品全称，按产品全称+客户 去报表“退市产品客户关联报表”匹配“产品全称+出货客户”栏位。获取字段“客户特殊停止接单日期”
                    // 2）如客户特殊停止接单日期不为空，当前时间≤客户特殊停止接单日期时，该产品全称该客户发样不做限制；当前时间＞客户特殊停止接单日期时，该产品全称该客户只能创建“补大货”类型的样品单。否则，报错：此产品已经停止发样
                    // 3）若客户特殊停止接单日期为空，当前时间≤停止接单日期时，该产品全称该客户发样不做限制；当前时间＞停止接单日期时，，该产品全称该客户只能创建“补大货”类型的样品单。否则，报错：此产品已经停止发样
                    // OCS-2184 同一天同客户最多只能处理15片样品
                    if (!in_array($sample_order['SampleOrder__type'], array(OCS_SAMPLE_ORDER_TYPE_SUPPLEMENT_BULK))) {//非"补大货"的样品单类型,则需要验证
                        if (isset($data['req'][$key]['product_id'])) {

                            // 根据产品ID获取产品全称
                            $product_detail = $g_Product->find('first', array(
                                'joins' => array(
                                    array(
                                        'table' => 'prod_model_details',
                                        'alias' => 'ProdModelDetail',
                                        'type' => 'INNER',
                                        'conditions' => array('ProdModelDetail.id = Product.pcb_id'),
                                    ),
                                    array(
                                        'table' => 'prod_rel_accounts',
                                        'alias' => 'ProdRelAccount',
                                        'type' => 'LEFT',
                                        'conditions' => array(
                                            'ProdRelAccount.prod_model_detail_id = ProdModelDetail.id',
                                            'ProdRelAccount.account_id' => $data['req'][$key]['account_id'],
                                        ),
                                    ),
                                ),
                                'conditions' => array('Product.id' => $data['req'][$key]['product_id']),
                                'fields' => array('Product.id', 'ProdModelDetail.stop_sample_time','ProdModelDetail.stop_orders_time', 'ProdModelDetail.line_name', 'ProdRelAccount.stop_order_time'),
                            ));

                            // 按产品全称+客户 获取“退市产品客户关联报表”匹配“产品全称+出货客户”栏位。获取字段“客户特殊停止接单日期”
                            // 如果“客户特殊停止接单日期”为空,则获取“停止接单日期”
                            $stop_time = ''; //停止时间
                            if (!empty($product_detail['ProdModelDetail'])) {
                                if (!empty($product_detail['ProdRelAccount']['stop_order_time'])) {//客户特殊停止接单日期
                                    $stop_time = $product_detail['ProdRelAccount']['stop_order_time'];
                                } elseif (!empty($product_detail['ProdModelDetail']['stop_orders_time'])) {//停止接单日期
                                    $stop_time = $product_detail['ProdModelDetail']['stop_orders_time'];
                                }
                            }
                            if (!empty($stop_time) && time() >= strtotime($stop_time)) {
                                $param_string = '(' . $stop_time . ', ' . $data['req'][$key]['account_id'] . ', ' . $data['req'][$key]['product_id'] . ')';
                                return array('is_success' => $flag, 'error_message' => '此产品已经停止发样。' . $param_string);
                            }
                        }
                    }

                    if ($sample_order['SampleOrder__require_delivery_date'] < date('Y-m-d')) {
                        return array('is_success' => $flag, 'error_message' => '需求发样日期是过去的时间，请重新填写。');
                    }
                    if (date('H') >= 18 && $sample_order['SampleOrder__require_delivery_date'] == date('Y-m-d')) {
                        return array('is_success' => $flag, 'error_message' => '现在已经超过下午6点，请不要选择今天发样。');
                    }

                    //OCS-2184 同一需求发样日期，同一客户最多只能处理15片样品
                    $g_Reqs = $g_Commons->GlobalModel('Req');
                    $quantity_same_day = $g_Reqs->find('first', array(
                        'joins' => array(
                            array(
                                'table' => 'sample_orders',
                                'alias' => 'SampleOrder',
                                'type' => 'INNER',
                                'conditions' => 'SampleOrder.id=Req.rel_obj_id'
                            ),
                        ),
                        'conditions' => array(
                            'Req.model_def_id' => SampleOrder,
                            'Req.account_id' => $data['req'][$key]['account_id'],
                            'SampleOrder.require_delivery_date' => $sample_order['SampleOrder__require_delivery_date'],
                            'Req.id !=' => isset($data['req'][$key]['id']) ? $data['req'][$key]['id']:0
                        ),
                        'fields' => array(
                            'SUM(Req.quantity) AS quantity_same_day'
                        )
                    ));

                    $pre_quantity = 0;
                    if(!is_null($quantity_same_day)){
                        $pre_quantity = $quantity_same_day[0]['quantity_same_day'];
                    }
                    // if( $data['req'][$key]['quantity'] + $pre_quantity > 15){
                    //     return array('is_success' => $flag, 'error_message' => '同一需求发样日期，同一客户最多只能处理15片样品，本次申请后将达 '. ($data['req'][$key]['quantity'] + $pre_quantity) .' 片，请错开发样日期。');
                    // }

                    $result[$key]['fae_user_id'] = $sample_order['SampleOrder__fae_user_id'] == null ? 0 : $sample_order['SampleOrder__fae_user_id'];
                    if (!empty($sample_order['SampleOrder__authenticate_types'])) {
                        $result[$key]['authenticate_types'] = implode(',', $sample_order['SampleOrder__authenticate_types']);
                    }
                    $result[$key]['biz_contact_id'] = $sample_order['SampleOrder__biz_contact_id'];
                    $result[$key]['delivery_info'] = $sample_order['SampleOrder__delivery_info'];
                    $result[$key]['require_delivery_date'] = $sample_order['SampleOrder__require_delivery_date'];
                    //客户单号
                    // if (isset($sample_order['SampleOrder__account_cno'])) {
                    //     $result[$key]['account_cno'] = $sample_order['SampleOrder__account_cno'];
                    // }
                    // //客户料号
                    // if (isset($sample_order['SampleOrder__account_mno'])) {
                    //     $result[$key]['account_mno'] = $sample_order['SampleOrder__account_mno'];
                    // }
                    //送货备注
                    // if (isset($sample_order['SampleOrder__delivery_remark'])) {
                    //     $result[$key]['delivery_remark'] = $sample_order['SampleOrder__delivery_remark'];
                    // }
                    //            $result[$key]['account_status'] = $sample_order['SampleOrder__account_status'];
                    if(isset($sample_order['SampleOrder__test_require_type'])){
                        $result[$key]['test_require_type'] = $sample_order['SampleOrder__test_require_type'];
                    }

                    if(empty($sample_order['SampleOrder__type'])){
                        return array('is_success' => $flag, 'error_message' => '请选择类型。');
                    }else{
                        $result[$key]['type'] = $sample_order['SampleOrder__type'];
                    }
                    //            $result[$key]['modify_info'] = $sample_order['SampleOrder__modify_info'];
                    if (!isset($sample_order['SampleOrder__is_fee'])) {
                        return array('is_success' => $flag, 'error_message' => '请选择是否收费');
                    }else{
                        $result[$key]['is_fee'] = $sample_order['SampleOrder__is_fee'];
                    }

                    $result[$key]['is_need_safety_file'] = 0;
                    if (isset($sample_order['SampleOrder__is_need_safety_file'])) {
                        $result[$key]['is_need_safety_file'] = $sample_order['SampleOrder__is_need_safety_file'];
                    }
                    $result[$key]['bpm_remark'] = '';
                    if (isset($sample_order['SampleOrder__bpm_remark'])) {
                        $result[$key]['bpm_remark'] = $sample_order['SampleOrder__bpm_remark'];
                    }
                    if ('new' == $action) {
                        $result[$key]['status'] = OCS_SAMPLE_ORDER_NOT_PRINT;
                        //                $result[$key]['bill_no'] = 1;
                    }
                    // 电源背光规格
                    // CVTE-SA-OCS 申请样品页面增加电源背光选项判断_V1.1 add by GUOCAI
                    $result[$key]['power_backlight_remark'] = json_encode($sample_order['power_backlight_remark']);

                    //软件系统/语言 add by lvbaocheng 2017/5/3 17:10
                    if(isset($sample_order['SampleOrder__sw_language'])){
                        $result[$key]['sw_language'] = $sample_order['SampleOrder__sw_language'];
                    }
                    if($sample_order['SampleOrder__sw_system']){
                        $result[$key]['sw_system'] = $sample_order['SampleOrder__sw_system'];
                    }

                    if (isset($data['req'][$key]['sw'])) {
                        $result[$key]['panel_info'] = $data['req'][$key]['sw']['Confirmation__SW_Panel'];
                        // 判断配屏是否只填写尺寸,是的话则删除，否则会保存成功能元
                        if (is_numeric($data['req'][$key]['sw']['Confirmation__SW_Panel'])) {
                            unset($data['req'][$key]['sw']['Confirmation__SW_Panel']);
                        } else {
                            if ('无' == $data['req'][$key]['sw']['Confirmation__SW_Panel']) {
                                return array('is_success' => $flag, 'error_message' => '配屏不能填"无"');
                            }
                        }
                    }

                    //OCS-512 导出样品单报表中添加字段“板卡方案” add by ziying 2015-11-03
                    if (isset($data['req'][$key]['product_id'])) {
                        $g_SampleOrder = $g_Commons->GlobalModel('SampleOrder');
                        $result[$key]['board_plan'] = $g_SampleOrder->generateBoardPlan($data['req'][$key]['product_id']);
                    }

                    //Agile产品全称生命周期阶段为已退市、已作废、已终止，则不允许 类型为 客户试产、样机、大货确认、过认证的样品单 (只有补大货是可以录的)
                    //Agile产品全称为逐步退市，则只可录 型号配置的可用客户范围
                    if (isset($data['req'][$key]['product_id'])) {
                        $product = $g_Product->find('first', array(
                            'conditions' => array(
                                'Product.id' => $data['req'][$key]['product_id']
                            ),
                            'fields' => array(
                                'Product.id',
                                'Product.pcb_id',
                                'Product.prod_model_id',
                                'Product.account_id',
                                'Product.order_account_id'
                            )
                        ));
                        $g_ProdModelDetail = $g_Commons->GlobalModel('ProdModelDetail');
                        $prod_model_detail = $g_ProdModelDetail->find('first', array(
                            'conditions' => array(
                                'ProdModelDetail.id' => $product['Product']['pcb_id'],
                            ),
                            'fields' => array(
                                'ProdModelDetail.id',
                                'ProdModelDetail.use_state',
                            )
                        ));
                        if (!empty($prod_model_detail)) {
                            if (in_array($prod_model_detail['ProdModelDetail']['use_state'], array('已退市', '已作废', '已终止'))
                                && isset($sample_order['SampleOrder__type']) && OCS_SAMPLE_ORDER_TYPE_SUPPLEMENT_BULK != $sample_order['SampleOrder__type']) { //不为“补大货”类型， 不允许提交
                                return array('is_success' => false, 'error_message' => '已退市/已作废/已终止 产品不允许发样');
                            }
                            if ('逐步退市' == $prod_model_detail['ProdModelDetail']['use_state']) {
                                $g_AccountRelObj = $g_Commons->GlobalModel('AccountRelObj');
                                $g_Account = $g_Commons->GlobalModel('Account');

                                //获取所有可用客户
                                $available_account_ids = $g_AccountRelObj->getAccountIdsByProdModelId($product['Product']['prod_model_id']);
                                //查找所有相同客户 （主要是同时存在CRM和EBS客户，需通过客户全称来查找）
                                $all_available_account_ids = array();
                                foreach ($available_account_ids as $account_id) {
                                    $account_ids = $g_Account->getSampleAccountIdsById($account_id);
                                    $all_available_account_ids = array_merge($all_available_account_ids, $account_ids);
                                }

                                //不在客户范围且类型不为“补大货”，则不允许录单
                                if (isset($data['req'][$key]['account_id']) && !empty($all_available_account_ids)
                                    && !in_array($data['req'][$key]['account_id'], $all_available_account_ids) && OCS_SAMPLE_ORDER_TYPE_SUPPLEMENT_BULK != $sample_order['SampleOrder__type']) {
                                    return array('is_success' => false, 'error_message' => '客户#' . $data['req'][$key]['account'] . ' 无该产品的发样权限');
                                }
                            }
                        }

                        // [OCS-1160]产品管理:订单产品增加录单范围限制
                        // 样品单也增加录单范围限制 by wuhuashan
                        $g_ProdModelDetailAccountRange = $g_Commons->GlobalModel('ProdModelDetailAccountRange');
                        $pcb_account_range = $g_ProdModelDetailAccountRange->find('list', array(
                            'conditions' => array(
                                'ProdModelDetailAccountRange.prod_model_detail_id' => $product['Product']['pcb_id'],
                            ),
                            'fields' => 'ProdModelDetailAccountRange.id, ProdModelDetailAccountRange.account_id'
                        ));
                        if (!empty($pcb_account_range)) {
                            $account_ids = array($data['req'][$key]['account_id']);
                            if (!empty($product['Product']['account_id'])) {
                                $account_ids[] = $product['Product']['account_id'];
                            }
                            if (!empty($product['Product']['order_account_id'])) {
                                $account_ids[] = $product['Product']['order_account_id'];
                            }
                            $is_in_range = array_intersect($account_ids, $pcb_account_range);
                            if (empty($is_in_range) && OCS_SAMPLE_ORDER_TYPE_SUPPLEMENT_BULK != $sample_order['SampleOrder__type']) {
                                return array('is_success' => false, 'error_message' => '所选客户没有在对应产品的产品全称客户可用范围内，不允许录单');
                            }
                        }
                    }
                }
                break;
            default:
                foreach ($data['SampleOrder'] as $key => $sample_order) {
                    if ($sample_order['SampleOrder__require_delivery_date'] < date('Y-m-d')) {
                        return array('is_success' => $flag, 'error_message' => '需求发样日期是过去的时间，请重新填写。');
                    }
                    if (date('H') >= 18 && $sample_order['SampleOrder__require_delivery_date'] == date('Y-m-d')) {
                        return array('is_success' => $flag, 'error_message' => '现在已经超过下午6点，请不要选择今天发样。');
                    }
                    $result[$key]['fae_user_id'] = empty($sample_order['SampleOrder__fae_user_id']) ? 0 : $sample_order['SampleOrder__fae_user_id'];
                    if (!empty($sample_order['SampleOrder__authenticate_types'])) {
                        $result[$key]['authenticate_types'] = implode(',', $sample_order['SampleOrder__authenticate_types']);
                    }
                    //增加发样产品类别字段
                    if (isset($sample_order['SampleOrder__deliver_product_type'])) {
                        $result[$key]['deliver_product_type'] = $sample_order['SampleOrder__deliver_product_type'];
                    }
                    $result[$key]['biz_contact_id'] = $sample_order['SampleOrder__biz_contact_id'];
                    $result[$key]['delivery_info'] = $sample_order['SampleOrder__delivery_info'];
                    $result[$key]['require_delivery_date'] = $sample_order['SampleOrder__require_delivery_date'];
                    //            $result[$key]['account_status'] = $sample_order['SampleOrder__account_status'];

                    if(empty($sample_order['SampleOrder__test_require_type'])){
                        return array('is_success' => $flag, 'error_message' => '请选择测试类型。');
                    }else{
                        $result[$key]['test_require_type'] = $sample_order['SampleOrder__test_require_type'];
                    }

                    if(empty($sample_order['SampleOrder__type'])){
                        return array('is_success' => $flag, 'error_message' => '请选择类型。');
                    }else{
                        $result[$key]['type'] = $sample_order['SampleOrder__type'];
                    }
                    //            $result[$key]['modify_info'] = $sample_order['SampleOrder__modify_info'];
                    if (!isset($sample_order['SampleOrder__is_fee'])) {
                        return array('is_success' => $flag, 'error_message' => '请选择是否收费');
                    }else{
                        $result[$key]['is_fee'] = $sample_order['SampleOrder__is_fee'];
                    }
                    $result[$key]['is_need_safety_file'] = 0;
                    if (isset($sample_order['SampleOrder__is_need_safety_file'])) {
                        $result[$key]['is_need_safety_file'] = $sample_order['SampleOrder__is_need_safety_file'];
                    }
                    $result[$key]['bpm_remark'] = '';
                    if (isset($sample_order['SampleOrder__bpm_remark'])) {
                        $result[$key]['bpm_remark'] = $sample_order['SampleOrder__bpm_remark'];
                    }
                    if ('new' == $action) {
                        $result[$key]['status'] = OCS_SAMPLE_ORDER_NOT_PRINT;
                        //                $result[$key]['bill_no'] = 1;
                    }
                }
                break;
        }
        $flag = true;
        return array('is_success' => $flag, 'save_data' => $result);
    }

    function fixSwAtomData($old_json, $new_json, $extend_atom_ids, $all_extend_atom_ids, $sw_prod_attr_list) {
        set_time_limit(0);

        global $g_BizId;
        global $g_Commons;
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');

        $old_sw = json_decode($old_json, true);
        $new_sw = json_decode($new_json, true);
        $fix_opt = 0;
        $opt_func_id = $g_ProdAttrs->findIdByAlias('SW_OptFunc');
        $ci_plus_id = $g_Atoms->findAtomIdByName('SW_OptFunc_CIPlus', $opt_func_id);
        $all_extend_atom_ids[] = $ci_plus_id;
        foreach ($new_sw as $attr_id => $atom_ids) {
            if ($opt_func_id == $attr_id) {
                if (isset($old_sw[$attr_id])) {
                    foreach ($old_sw[$attr_id] as $key => $old_opt_atom) {
                        if (!in_array($old_opt_atom, $atom_ids) && in_array($old_opt_atom, $all_extend_atom_ids)) {
                            unset($old_sw[$attr_id][$key]);
                        }
                    }
                    foreach ($atom_ids as $one) {
                        if (!in_array($one, $old_sw[$attr_id]))
                            $old_sw[$attr_id][] = $one;
                    }
                } else {
                    $old_sw[$attr_id] = $new_sw[$attr_id];
                }
                continue;
            }
            $old_sw[$attr_id] = $new_sw[$attr_id];
        }
        if (!isset($new_sw[$opt_func_id]) && isset($old_sw[$opt_func_id])) {
            foreach ($old_sw[$opt_func_id] as $key => $val) {
                if (in_array($val, $all_extend_atom_ids)) {
                    unset($old_sw[$opt_func_id][$key]);
                }
            }
        }
        foreach ($old_sw as $attr_id => $atom_ids) {
            if (!isset($new_sw[$attr_id]) && $attr_id != $opt_func_id && !in_array($attr_id, $sw_prod_attr_list)) {
                unset($old_sw[$attr_id]);
            }
        }
        $sw_atom_ids = array('0');
        foreach ($old_sw as $attr => $atoms) {
            foreach ($atoms as $atom_id) {
                $sw_atom_ids[] = $atom_id;
            }
        }
        $sw_atom_ids[] = '0';
        return array('sw_atom_ids' => implode(',', $sw_atom_ids), 'sw_atom_ids_json' => json_encode($old_sw));
    }

    // 邮件通知已审核确认书的人，通知版本已变更，请知悉。
    function NotifyCfmAudittedUserReversionChanged($oldVersionId, $newVersionId, $modelDefId, $ReqId) {
        global $g_BizId;
        global $g_Commons;
        global $g_UserRealName;
        global $g_UserEmail;
        global $g_CVTOCS;
        global $g_OCS_options;
        global $g_BizUrl;

        $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
        $g_AuditStageRelObjs = $g_Commons->GlobalController('AuditStageRelObjs');
        $g_User = $g_Commons->GlobalModel('User');

        $this->Req->recursive = -1;

        $req = $this->Req->find('first', array(
            'conditions' => array(
                'Req.id' => $ReqId
            ),
            'fields' => array(
                'Req.id',
                'Req.close_status',
            )
        ));

        //关闭或者作废订单不提醒
        if (empty($req) || in_array($req['Req']['close_status'], array(OCS_ORDER_CLOSE_STATUS_CLOSE, OCS_ORDER_CLOSE_STATUS_CANCEL))) {
            return false;
        }

        $toUsers = array();
        $Options = array();
        $AllAuditUsers = $g_AuditStageRelObjs->getAllAudittedUsers(Req, $ReqId);
        if (!empty($AllAuditUsers)) {
            foreach ($AllAuditUsers as $AllAuditUser) {
                $toUsers[] = $g_User->get_by_id($AllAuditUser['value'], 'email');
            }
            $Options['Email']['ToUsers'] = $toUsers;
            $Options['Field']['login_user_realname'] = $g_UserRealName;
            $Options['Field']['login_user_email'] = $g_UserEmail;
            $cmpReqIds = $oldVersionId . ',' . $newVersionId;
            $Options['Field']['common_url'] = $g_OCS_options['url'] . $g_BizUrl . 'pop/ReqVersions/compare_req_versions/' . $cmpReqIds . '/' . $modelDefId . '/' . $ReqId . '/0/hw';
            $Options['Email']['CcUsers'] = 'ocs_dev@cvte.cn' != $g_UserEmail ? array($g_UserEmail) : array();
            $g_QueueJobs->AddNoticeJob(array('Email'), Req, $ReqId, 'ModifyReq', $Options);
        }
    }

    // 保存需求快照
    function saveReqVersion($req_id, $is_change_task_status = true) {
        global $g_BizId;
        global $g_BizUrl;
        global $g_Commons;
        global $g_UserId;
        global $g_UserRealName;
        global $g_UserEmail;
        global $g_OCS_options;

        $g_Task = $g_Commons->GlobalModel('Task');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');

        $g_ReqVersions = $g_Commons->GlobalController('ReqVersions');
        $g_UserRelReqVersions = $g_Commons->GlobalController('UserRelReqVersions');
        $g_MfPlanBills = $g_Commons->GlobalController('MfPlanBills');
        $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
        $this->Req->recursive = -1;

        $req_data = $this->Req->findById($req_id);
        $last_req_version = $g_ReqVersions->getLastReqVersion(Req, $req_id); // hardcode Req

        $has_version = empty($last_req_version) ? false : true;
        $change_prod = ($has_version && $last_req_version['ReqVersion']['product_id'] != $req_data['Req']['product_id']) ? true : false;
        $change_quantity = ($has_version && $last_req_version['ReqVersion']['quantity'] != $req_data['Req']['quantity']) ? true : false;
        $change_sw_atom_ids_json = ($has_version && $last_req_version['ReqVersion']['sw_atom_ids_json'] != $req_data['Req']['sw_atom_ids_json']) ? true : false;
        $change_sw_atom_ids = ($has_version && $last_req_version['ReqVersion']['sw_atom_ids'] != $req_data['Req']['sw_atom_ids']) ? true : false;
        $change_ext_prod_ids = ($has_version && $last_req_version['ReqVersion']['ext_prod_ids'] != $req_data['Req']['ext_prod_ids']) ? true : false;
        $change_ext_3rd_party_prods = ($has_version && $last_req_version['ReqVersion']['ext_3rd_party_prods'] != $req_data['Req']['ext_3rd_party_prods']) ? true : false;
        $change_remark = ($has_version && $last_req_version['ReqVersion']['req_remark'] != $req_data['Req']['remark']) ? true : false;

        if (!$has_version || $change_prod || $change_quantity || $change_sw_atom_ids_json || $change_sw_atom_ids || $change_ext_prod_ids || $change_ext_3rd_party_prods || $change_remark) {

            $req_version = array();
            $req_version['model_def_id'] = Req;
            $req_version['rel_obj_id'] = $req_id;
            if ($change_prod) {//说明产品代码改变了，
                //产生BOM任务后，记录改变产品代码的次数
                $this->Req->updateProdChangeTimesByReqId($req_id);

                //记录最后变更产品代码
                $g_MfPlanBill->SaveLastChangeProduct($req_id, $last_req_version['ReqVersion']['product_id'], $req_data['Req']['product_id']);

                //发邮件通知相关人，产品变更
                $this->Req->NotifyChangeProduct($req_id, $last_req_version['ReqVersion']['product_id'], $req_data['Req']['product_id']);

                //自动将BOM审核状态打回到“BOM待修改”,重新设置备料和正式的字段
                $g_MfPlanBills->RollBackBomAuditStatus($req_id);

                //如果BOM工程师已确认，自动驳回
                $g_MfPlanBills->MfPlanBill->RollBackBomConfirmStatus($req_id);
            }
            if (isset($req_data['Req']['product_id'])) {
                $req_version['product_id'] = $req_data['Req']['product_id'];
            }
            $req_version['quantity'] = $req_data['Req']['quantity'];
            $req_version['sw_atom_ids_json'] = $req_data['Req']['sw_atom_ids_json'];
            $req_version['sw_atom_ids'] = $req_data['Req']['sw_atom_ids'];
            $req_version['ext_prod_ids'] = $req_data['Req']['ext_prod_ids'];
            $req_version['ext_3rd_party_prods'] = $req_data['Req']['ext_3rd_party_prods'];
            $req_version['req_remark'] = $req_data['Req']['remark'];
            $req_version['create_time'] = date('Y-m-d H:i:s');
            $req_version['create_user_id'] = isset($g_UserId) ? $g_UserId : 0;
            $g_ReqVersions->ReqVersion->create();
            $g_ReqVersions->ReqVersion->save($req_version);

            // 判断是否MID 的SKD物料订单，如果是且修改了产品和数量，则打回SKD配料清单
            if ($has_version && OCS_BIZ_TYPE_TV != $g_BizId && Contract == $req_data['Req']['model_def_id'] && OCS_REQ_TYPE_SKD == $req_data['Req']['req_type']) {
                if ($change_prod || $change_quantity) {
                    $g_Contract = $g_Commons->GlobalModel('Contract');
                    $skd_list = $g_Contract->find('first', array(
                        'joins' => array(
                            array(
                                'table' => 'skd_material_lists',
                                'alias' => 'SkdMaterialList',
                                'type' => 'LEFT',
                                'conditions' => 'SkdMaterialList.contract_no=Contract.contract_no'
                            ),
                        ),
                        'conditions' => array('Contract.id' => $req_data['Req']['rel_obj_id']),
                        'fields' => 'SkdMaterialList.id, SkdMaterialList.status'
                    ));
                    if (!empty($skd_list) && SKD_LIST_STATUS_AUDIT_FAILE != $skd_list['SkdMaterialList']['status']) {
                        $skd_list['SkdMaterialList']['status'] = SKD_LIST_STATUS_AUDIT_FAILE;
                        $skd_list['SkdMaterialList']['audit_fail_reason'] = '订单修改代码或者数量系统自动打回修改';

                        $g_SkdMaterialList = $g_Commons->GlobalModel('SkdMaterialList');
                        $g_SkdMaterialList->save($skd_list['SkdMaterialList']);
                    }
                }
            }

            // 暂时处理成只改数量不处理其他
            if ($has_version && $change_quantity && !$change_prod && !$change_sw_atom_ids_json && !$change_sw_atom_ids && !$change_ext_prod_ids && !$change_ext_3rd_party_prods && !$change_remark) {
                return $g_ReqVersions->ReqVersion->id;
            }

            // 邮件通知版本变更（已审核确认书的人）
            if (isset($last_req_version['ReqVersion']['id']) && $req_data['Req']['model_def_id'] == Contract) {
                $this->NotifyCfmAudittedUserReversionChanged($last_req_version['ReqVersion']['id'], $g_ReqVersions->ReqVersion->id, Req, $req_id);
            }

            // 获取上一次需求版本和这一次需求版本信息，发送邮件
            $UserReqVersion = $g_UserRelReqVersions->getUserConfirmReqVersion($req_data['Req']['id']);
            if (0 != $UserReqVersion) {
                $oldId = $UserReqVersion;
            } else {
                $oldId = $last_req_version['ReqVersion']['id'];
            }
            $newId = $g_ReqVersions->ReqVersion->id;
            // 找出任务
            $Task = $g_Task->find('first', array(
                'conditions' => array('Task.model_def_id' => Req, 'Task.rel_obj_id' => $req_data['Req']['id']),
                'fields' => 'Task.id'
            ));
            if (Contract == $req_data['Req']['model_def_id'] && !empty($Task)) {
                if (!empty($oldId) && !empty($newId)) {
                    $Options['Field']['login_user_realname'] = $g_UserRealName;
                    $Options['Field']['login_user_email'] = $g_UserEmail;
                    $Options['Field']['other_email_content'] = $g_ReqVersions->generateReqDiffEmailContent(array($oldId, $newId));
                    $Options['Field']['ocs_biz_url'] = $g_OCS_options['url'] . $g_BizUrl;
                    $g_QueueJobs->AddNoticeJob(array('Email'), Task, $Task['Task']['id'], 'ChangeRequirement', $Options);
                }

                if ($is_change_task_status) {
                    $g_Task->diffKeyAttrInfoForUpdateTask($Task['Task']['id'], array($last_req_version['ReqVersion']['id'], $newId));
                }
            }

            return $newId;
        }

        return 0;
    }

    function pop_edit_advanced_sw($id = null) {
        global $g_BizId;
        global $g_Commons;
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Atom = $g_Commons->GlobalModel('Atom');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');
        $g_User = $g_Commons->GlobalModel('User');

        $g_Products = $g_Commons->GlobalController('Products');
        $g_ProdModelDetails = $g_Commons->GlobalController('ProdModelDetails');
        $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
        global $g_UserRealName;
        global $g_UserEmail;

        $this->Req->id = $id;
        if (!$this->Req->exists()) {
            throw new NotFoundException(__('Invalid Req'));
        }
        $biz = $g_BizId;
        $this->set('biz', $biz);
        $Req = $this->Req->findById($id);
        $Req['Req']['account_name'] = $g_Account->get_by_id($Req['Req']['account_id'], 'name');
        $Req['Req']['owner_user_name'] = $g_User->get_by_id($Req['Req']['owner_user_id'], 'realname');
        $Req['Req']['sales_name'] = $g_User->get_by_id($Req['Req']['sales_user_id'], 'realname');
        $product = $g_Products->Product->findById($Req['Req']['product_id']);
        $Req['Req']['product_name'] = $product['Product']['name'];
        $series = $g_ProdModelDetails->findByProdModelId($product['Product']['prod_model_id']);
        $Req['Req']['serie_id'] = $series['ProdModelDetail']['serie_id'];
        //////////////////////获取硬件通道
        $HW_BasicFunc = $g_Products->getHwRelInputSource($product['Product']['id']);
        $Req['Req']['HW_BasicFunc'] = $HW_BasicFunc;

        $form_tbl_layout = $this->getEditSwLayout($series['ProdModelDetail']['serie_id'], $id);
        $this->set('form_tbl_layout', $form_tbl_layout);

        $disable_edit_prod_attr = array('SW_Panel', 'SW_DefaultCountry', 'SW_AmplifierVoltage', 'SW_PowerCurrent', 'SW_KeyboardType', 'SW_CIPlus', 'SW_Country', 'SW_OptFunc_CIPlus', 'SW_TV_CI_PLUS');
        $disable_atoms = array('TN', 'NICAM', 'D&B', 'SW_OptFunc_CIPlus'); // 保存时必须也判断是否存在，此界面无权更改
        if (0 == $Req['Req']['model_def_id'] && 0 == $Req['Req']['rel_obj_id']) {
            $disable_edit_prod_attr = array();
            $disable_atoms = array();
        }
        $this->set('disable_edit_prod_attr', $disable_edit_prod_attr);
        $this->set('disable_atoms', $disable_atoms);

        $atomsId = json_decode($Req['Req']['sw_atom_ids_json']);
        $sw_atom = array();
        $prod_attr_label = array();
        foreach ($atomsId as $key => $value) {
            $prod_attr_temp = $g_ProdAttr->find('first', array('conditions' => array('ProdAttr.id' => $key), 'fields' => 'ProdAttr.alias, ProdAttr.name'));
            $alias = $prod_attr_temp['ProdAttr']['alias'];
            $prod_attr_label[$prod_attr_temp['ProdAttr']['alias']] = $prod_attr_temp['ProdAttr']['name'];
            foreach ($value as $pos => $atomId) {
                $sw_atom[$alias][$pos] = $g_Atom->get_by_id($atomId, 'name');
            }
            // if ('SW_OptFunc' == $alias && !empty($sw_atom[$alias])) {
            //     $sw_atom[$alias] = implode(',', $sw_atom[$alias]);
            // }
        }

        if (!empty($Req['Req']['extend_sw_atom_ids'])) {
            $extend_sw_atom_ids = explode(',', $Req['Req']['extend_sw_atom_ids']);
            $extend_sw_atoms = $g_Atom->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'prod_attrs',
                        'alias' => 'ProdAttr',
                        'type' => 'LEFT',
                        'conditions' => 'ProdAttr.id=Atom.prod_attr_id'
                    )
                ),
                'conditions' => array('Atom.id' => $extend_sw_atom_ids),
                'fields' => 'Atom.name, ProdAttr.alias'
            ));

            foreach ($extend_sw_atoms as $atom) {
                if (empty($sw_atom[$atom['ProdAttr']['alias']])) {
                    $sw_atom[$atom['ProdAttr']['alias']] = array();
                }
                if (!in_array($atom['Atom']['name'], $sw_atom[$atom['ProdAttr']['alias']])) {
                    $sw_atom[$atom['ProdAttr']['alias']][] = $atom['Atom']['name'];
                }
            }
        }
        if (!empty($sw_atom['SW_OptFunc'])) {
            $sw_atom['SW_OptFunc'] = implode(',', $sw_atom['SW_OptFunc']);
        }
        $Req['Req']['sw'] = $sw_atom;

        $this->set('Req', $Req);
        $this->set('ProdAttrLabel', $prod_attr_label);

        $fakerInputAttrs = array('SW_DefaultLanguage', 'SW_Language', 'SW_DefaultCountry', 'SW_Country', 'SW_KeyBoard', 'SW_InputSource', 'SW_OptFunc', 'SW_KeyboardType', 'SW_AmplifierVoltage', 'SW_PowerCurrent', 'SW_CIPlus'); //hardcode
        $faker_body_data = $this->initFakerBody($fakerInputAttrs, $HW_BasicFunc);
        $this->set('faker_body_data', $faker_body_data);

        $prodDetail = $g_Products->getProductDetail($product['Product']['name']);
        if (!empty($prodDetail)) {
            foreach ($prodDetail as $key => $value) {
                $value = explode(',', $value);
                $tempArray = array();
                foreach ($value as $one) {
                    if (!empty($one))
                        $tempArray[] = $one;
                }
                $prodDetail->$key = implode(',', $tempArray);
            }
        }
        $this->set('prodDetail', $prodDetail);

        // 返单的软件需求
        if (!empty($Req['Req']['reorder_source_id']) && 0 != $Req['Req']['reorder_source_id']) {
            $reorder = $this->Req->find('first', array(
                'conditions' => array('Req.id' => $Req['Req']['reorder_source_id']),
                'fields' => 'Req.sw_atom_ids_json, Req.id, Req.name'
            ));
            $reorder_sw_atom = $this->getSwAttrsAtoms($reorder['Req']['sw_atom_ids_json']);
            $this->set('reorder', array('id' => $reorder['Req']['id'], 'name' => $reorder['Req']['name'], 'sw_atoms' => $reorder_sw_atom));
        }

        if (Contract == $Req['Req']['model_def_id']) {
            $g_CpsContractCfm = $g_Commons->GlobalModel('CpsContractCfm');
            $cps_contract = $g_CpsContractCfm->find('first', array(
                'conditions' => array('CpsContractCfm.ocs_contract_id' => $Req['Req']['rel_obj_id']),
                'order' => 'create_time DESC',
                'fields' => 'CpsContractCfm.sw_json'
            ));
            if (!empty($cps_contract)) {
                $cps_contract['CpsContractCfm']['sw_atoms'] = json_decode($cps_contract['CpsContractCfm']['sw_json']);
                $cps_contract = $cps_contract['CpsContractCfm'];
                $this->set('cps_contract', $g_Commons->objectToArray($cps_contract));
            }
        }
    }

    function submit_req_sw_by_ajax($id = null) {
        $this->autoRender = false;

        if ($this->request->is('post') && !empty($this->request->data)) {
            global $g_BizId;
            global $g_Commons;
            $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');

            $g_Atoms = $g_Commons->GlobalController('Atoms');
            $g_Atoms->Atom->recursive = -1;
            $sw = $this->request->data['req'][1]['sw'];
            $remark = $this->request->data['req'][1]['Confirmation__SW_Note'];
            $sw_atom_ids = array();
            $error = array();
            foreach ($sw as $sw_alias => $atom_names) {
                if (is_array($atom_names)) {
                    $atom_names = implode(',', $atom_names);
                }
                if ('' == $atom_names || ',,,,,,,' == $atom_names) {
                    continue;
                }
                $sw_alias = ltrim($sw_alias, 'Confirmation__');
                $prodAttr_sw = $g_ProdAttr->find('first', array(
                    'conditions' => array(
                        'ProdAttr.alias' => $sw_alias
                    ),
                    'fields' => 'id, atom_lib_id, can_auto_create_atom'
                ));
                if (empty($prodAttr_sw)) {
                    continue;
                }
                $prodAttr_sw_id = $prodAttr_sw['ProdAttr']['id'];
                if (0 != $prodAttr_sw['ProdAttr']['atom_lib_id']) {
                    $prodAttr_sw_id = $prodAttr_sw['ProdAttr']['atom_lib_id'];
                }
                $atom_names = explode(',', trim($atom_names, ','));
                foreach ($atom_names as $atom_name) {
                    $atom_name = $g_Commons->enCharToCnChar($atom_name);
                    if (('SW_KeyBoard' == $sw_alias && '' == $atom_name) || ('SW_InputSource' == $sw_alias && '' == $atom_name)) {
                        if (!isset($sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']])) {
                            $sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']] = array();
                        }
                        $sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']][] = '';
                        continue;
                    }
                    $atom_sw = $g_Atoms->Atom->findByNameAndProdAttrId($atom_name, $prodAttr_sw_id);
                    if (empty($atom_sw)) {
                        if (0 == $prodAttr_sw['ProdAttr']['can_auto_create_atom']) {
                            $error = array('is_save' => -1, 'message' => '无此功能元:' . $atom_name);
                        } else {
                            $atom_sw['name'] = $atom_name;
                            $atom_sw['name_cn'] = $atom_name;
                            $atom_sw['name_sw'] = $atom_name;
                            $atom_sw['name_hw'] = $atom_name;
                            $atom_sw['prod_attr_id'] = $prodAttr_sw_id;
                            $atom_sw['pinyin'] = $g_Commons->pinyin($atom_name);
                            $atom_sw['create_time'] = date("Y-m-d H:i:s");
                            $atom_sw['update_time'] = date("Y-m-d H:i:s");
                            $g_Atoms->Atom->create();
                            $atom_sw = $g_Atoms->Atom->save($atom_sw);
                        }
                    }
                    if (!isset($sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']])) {
                        $sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']] = array();
                    }
                    $sw_atom_ids_json[$prodAttr_sw['ProdAttr']['id']][] = $atom_sw['Atom']['id'];
                }
            }
            $Req = $this->Req->find('first', array(
                'conditions' => array(
                    'Req.id' => $id
                ),
                'fields' => 'Req.id, Req.sw_atom_ids_json'
            ));
            $sw_old = json_decode($Req['Req']['sw_atom_ids_json'], true);

            $disable_atoms = array('TN', 'NICAM', 'D&B', 'SW_OptFunc_CIPlus'); // 保存时必须也判断是否存在，此界面无权更改
            $disable_atom_ids = $g_Atoms->Atom->find('list', array(
                'conditions' => array('Atom.prod_attr_id' => SW_OptFunc, 'Atom.name' => $disable_atoms),
                'fields' => 'Atom.id'
            ));
            $opt_disabled = array();
            if (!empty($sw_old[SW_OptFunc])) {
                foreach ($sw_old[SW_OptFunc] as $sw_opt_func) {
                    if (in_array($sw_opt_func, $disable_atom_ids)) {
                        $opt_disabled[] = $sw_opt_func;
                    }
                }
            }

            if (!isset($sw_atom_ids_json[SW_OptFunc])) {
                $sw_atom_ids_json[SW_OptFunc] = array();
            }

            foreach ($sw_atom_ids_json as $prod_attr_id => $atoms) {
                $sw_old[$prod_attr_id] = $atoms;
            }
            foreach ($sw_old as $prod_attr_id => $atoms) {
                foreach ($atoms as $atom_id) {
                    $sw_atom_ids[] = $atom_id;
                }
            }

            $extend_sw_atom_ids = array();
            if (!empty($sw_old[SW_OptFunc])) {
                $all_extend_atom_ids = $g_Atoms->Atom->find('list', array('conditions' => array('Atom.name' => $g_Atoms->ExtendSwAtomNames), 'fields' => array('Atom.id')));
                foreach ($sw_old[SW_OptFunc] as $key_index => $sw_opt_func) {
                    if (in_array($sw_opt_func, $all_extend_atom_ids)) {
                        $extend_sw_atom_ids[] = $sw_opt_func;
                    }
                    if (in_array($sw_opt_func, $disable_atom_ids)) {
                        unset($sw_old[SW_OptFunc][$key_index]);
                    }
                }
            }

            if (!empty($opt_disabled)) {
                if (!isset($sw_old[SW_OptFunc])) {
                    $sw_old[SW_OptFunc] = array();
                }
                foreach ($opt_disabled as $opt_one) {
                    if (!in_array($opt_one, $sw_old[SW_OptFunc])) {
                        $sw_old[SW_OptFunc][] = $opt_one;
                    }
                    if (!in_array($opt_one, $sw_atom_ids)) {
                        $sw_atom_ids[] = $opt_one;
                    }
                }
            }

            if (empty($error)) {
                $sw_atom_ids_json = json_encode($sw_old);
                $extend_sw_atom_ids = '0' . implode(',', $extend_sw_atom_ids) . ',0';
                $Req['Req']['sw_atom_ids_json'] = $sw_atom_ids_json;
                $Req['Req']['sw_atom_ids'] = '0,' . implode(',', $sw_atom_ids) . ',0';
                $Req['Req']['extend_sw_atom_ids'] = $extend_sw_atom_ids;
                $Req['Req']['remark'] = $remark;

                //软件高级编辑，保存客户软件版本需求
                if (isset($this->request->data['account_sw_version']) && isset($this->request->data['account_id']) && !empty($this->request->data['account_sw_version']) && $this->request->data['account_id'] > 0) {
                    $g_AccountProdRelProducts = $g_Commons->GlobalController('AccountProdRelProducts');
                    $AccountId = $this->request->data['account_id'];
                    $Name = $this->request->data['account_sw_version'];
                    $Data = array();
                    $Data['SwATomIdsJson'] = $sw_atom_ids_json;
                    $Data['ExtAtomIdsStr'] = $extend_sw_atom_ids;
                    $Data['SwRemark'] = $remark;
                    $result = $g_AccountProdRelProducts->saveNewAccountSwVersion($AccountId, $Name, $Data);
                    if (!$result['success']) {
                        echo json_encode($result);
                        return;
                    }
                }

                $this->Req->save($Req['Req']);
                $this->saveReqVersion($this->Req->id); // 保存Req版本
                echo json_encode(array('is_save' => 1));
            } else {
                echo json_encode($error);
            }
        }
    }

    function getEditSwLayout($serie_id = null, $req_id = null) {
        global $g_BizId;
        global $g_Commons;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_Task = $g_Commons->GlobalModel('Task');

        $SeriesAttr = $g_ProdAttrs->getSeriesSWAdvanceAttr($serie_id);

        //[OCS-1637]需求，正式任务 订单上的软件属性不允许在任务上变更（不显示）
        if (!empty($req_id)) {
            $task = $g_Task->find('first', array(
                'conditions' => array(
                    'Task.model_def_id' => Req,
                    'Task.rel_obj_id' => $req_id,
                ),
                'fields' => array(
                    'Task.id',
                    'Task.task_type',
                )
            ));
            if (!empty($task) && OCS_TASK_TYPE_PRODUCE == $task['Task']['task_type']) {
                $order_sw_attrs = array(
                    'SW_OtherApplicationSoftware', //其它应用软件
                    'SW_Browser', //浏览器
                    'SW_Authorization', //互联网电视牌照
                    'SW_OSsystem', //OS系统
                    'SW_Appstore', //应用商店
                );
                foreach ($SeriesAttr as $idx => $attr) {
                    if (in_array($attr['alias'], $order_sw_attrs)) {
                        unset($SeriesAttr[$idx]);
                    }
                }
            }
        }

        $form_tbl_layout = array();
        foreach ($SeriesAttr as $one) {
            $SWAttr = array();
            $SWAttr['name'] = 'Confirmation.' . $one['alias'];
            $SWAttr['label'] = $one['name'];
            $SWAttrClass = explode('_', $one['alias']);
            $SWAttr['class'] = $SWAttrClass[1];
            switch ($one['alias']) {
                case 'SW_KeyBoard':
                    $SWAttr['type'] = 'KeyBoard'; // 按键板特殊处理 hardcode
                    break;
                case 'SW_InputSource':
                    $SWAttr['type'] = 'InputSource'; // 通道殊处理 hardcode
                    break;
                default:
                    $SWAttr['type'] = 'text_dummy';
                    break;
            }
            if (OCS_ATTR_INPUT_TYPE_SELECT_SINGLE == $one['input_type']) {
                $SWAttr['SelectType'] = 'radio';
            }
            if (0 == $one['is_affected_by_series']) {
                $SWAttr['common'] = 1;
            } else {
                $SWAttr['common'] = 0;
            }
            $form_tbl_layout[] = $SWAttr;
        }
        $form_tbl_layout[] = array('name' => 'Confirmation.SW_Note', 'label' => '软件备注', 'type' => 'text', 'class' => 'remark');
        return $form_tbl_layout;
    }

    public function reqs_is_has_task($ReqIds = '') {
        $this->autoRender = false;

        $this->Req->recursive = -1;

        if ('' != $ReqIds) {
            $ReqIds = explode(',', $ReqIds);
            if (!empty($ReqIds)) {
                foreach ($ReqIds as $One) {
                    $Req = $this->Req->find('first', array('conditions' => array('id' => $One), 'fields' => array('is_has_task')));
                    if (1 == $Req['Req']['is_has_task']) {
                        echo 1;
                        return;
                    }
                }
            }
        }

        echo 0;
    }

    // 关联任务的类型：0：无关联；1：主要关联；2：次要关联
    public function relTaskType($ReqId) {
        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_Commons;
        $g_Task = $g_Commons->GlobalModel('Task');

        $RelType = 0;
        $TaskNum = $g_Task->find('count', array('conditions' => array('model_def_id' => Req, 'rel_obj_id' => $ReqId), 'fields' => array('id')));
        if ($TaskNum > 0) {
            $RelType = 1;
        } else {
            $TaskNum = $g_Task->find('first', array('conditions' => array('rel_req_json LIKE' => '%"' . $ReqId . '"%'), 'fields' => array('id')));
            if ($TaskNum > 0) {
                $RelType = 2;
            }
        }

        return $RelType;
    }

    public function to_task($req_id = null) {
        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_Commons;
        $g_Task = $g_Commons->GlobalModel('Task');

        $task = $g_Task->find('first', array('conditions' => array('model_def_id' => Req, 'rel_obj_id' => $req_id), 'fields' => array('id')));
        if (empty($task)) {
            $task = $g_Task->find('first', array('conditions' => array('rel_req_json LIKE' => '%"' . $req_id . '"%'), 'fields' => array('id')));
        }

        if (!empty($task)) {
            $params = $this->params->params['named'];
            $url = array(BizMark => $g_BizName, 'controller' => 'Tasks', 'action' => 'view', $task['Task']['id']);
            if (isset($params['range'])) {
                $url['range'] = $params['range'];
            }
            if (isset($params['model_params'])) {
                $url['model_name'] = 'Reqs';
                $url['model_params'] = $params['model_params'];
            }
            $this->redirect($url);
        } else {
            $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'view', $req_id));
        }
    }


    // ############################除tv外其他事业部go_to_task(用于设置链接跳转)############################
    public function go_to_task($req_id = null) {
        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_Commons;
        $g_Task = $g_Commons->GlobalModel('Task');

        $task = $g_Task->find('first', array('conditions' => array('model_def_id' => Req, 'rel_obj_id' => $req_id), 'fields' => array('id')));
        if (empty($task)) {
            $task = $g_Task->find('first', array('conditions' => array('rel_req_json LIKE' => '%"' . $req_id . '"%'), 'fields' => array('id')));
        }

        if (!empty($task)) {
            $params = $this->params->params['named'];
            $url = array(BizMark => $g_BizName, 'controller' => 'Tasks', 'action' => 'view_new', $task['Task']['id']);
            if (isset($params['range'])) {
                $url['range'] = $params['range'];
            }
            if (isset($params['model_params'])) {
                $url['model_name'] = 'Reqs';
                $url['model_params'] = $params['model_params'];
            }
            $this->redirect($url);
        } else {
            $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'detail', $req_id));
        }
    }


    function getSwAttrsAtoms($sw_atom_ids_json, $remark = null) {
        global $g_BizId;
        global $g_Commons;
        $g_Atom = $g_Commons->GlobalModel('Atom');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');

        $HWRelInputSource = 22; // hardcode 硬件关联软件通道属性id
        $atomsId = json_decode($sw_atom_ids_json, true);
        $data = array();
        $SwRelInputSource = array();
        $order = array();
        if (!empty($atomsId)) {
            $prod_attr_ids = array();
            $atom_ids = array();
            foreach ($atomsId as $key => $value) {
                $prod_attr_ids[] = $key;
                foreach ($value as $atomId) {
                    $atom_ids[] = $atomId;
                }
            }
            $prod_attr_alias = $g_ProdAttr->find('list', array(
                'conditions' => array('ProdAttr.id' => $prod_attr_ids),
                'fields' => 'ProdAttr.id, ProdAttr.alias',
                'order' => 'ProdAttr.order'
            ));
            $atom_names = $g_Atom->find('list', array(
                'conditions' => array('Atom.id' => $atom_ids),
                'fields' => 'Atom.id, Atom.name'
            ));
            foreach ($prod_attr_alias as $p_id => $p_alias) {
                $value = $atomsId[$p_id];
                if ($p_id == $HWRelInputSource) {
                    foreach ($value as $index => $atomId) {
                        $SwRelInputSource[$index] = $atom_names[$atomId];
                    }
                }
                foreach ($value as $atomId) {
                    $data[$p_alias][] = isset($atom_names[$atomId]) ? $atom_names[$atomId] : '';
                }
            }
        }
        if (!empty($data)) {
            foreach ($data as $key => $tmp) {
                $tmp = implode(',', $tmp);
                $tmp = preg_replace('/(,)+/', ',', $tmp);
                $data[$key] = $tmp;
                if (',' == $tmp) {
                    $data[$key] = null;
                }
            }
        }
        $data['SW_Note'] = $remark;
        $data['SW_REL'] = $SwRelInputSource;
        return $data;
    }

    function send_bill() {
        set_time_limit(0);
        $this->layout = 'pdf';

        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        $ids = Cache::read('sample_order_file_export');
        Cache::delete('sample_order_file_export');
        $ids = explode(',', $ids);
        $reqs = $this->Req->find('all', array(
                    'joins' => array(
                        array(
                            'table' => 'sample_orders',
                            'alias' => 'SampleOrder',
                            'type' => 'LEFT',
                            'conditions' => 'SampleOrder.id = Req.rel_obj_id'
                        ),
                        array(
                            'table' => 'accounts',
                            'alias' => 'Account',
                            'type' => 'LEFT',
                            'conditions' => 'Account.id = Req.account_id'
                        ),
                        array(
                            'table' => 'products',
                            'alias' => 'Product',
                            'type' => 'LEFT',
                            'conditions' => 'Product.id = Req.product_id'
                        ),
                        array(
                            'table' => 'prod_models',
                            'alias' => 'ProdModel',
                            'type' => 'LEFT',
                            'conditions' => 'ProdModel.id = Product.prod_model_id'
                        ),
                        array(
                            'table' => 'tasks',
                            'alias' => 'Task',
                            'type' => 'LEFT',
                            'conditions' => 'Task.rel_obj_id = Req.id AND Task.model_def_id = '.Req
                        ),
                    ),
                    'conditions' => array('Req.id' => $ids),
                    'fields' => 'Req.account_id, Req.quantity, Task.id, SampleOrder.delivery_info, Account.name, ProdModel.name',
                    'order' => 'Req.account_id ASC',
                        )
        );
        $data = array();
        foreach ($reqs as $one) {
            $deliver_info = explode(' ', $one['SampleOrder']['delivery_info']);
            $data[md5($one['Req']['account_id'] . $deliver_info[0])][] = array('sample_task_id' => $one['Task']['id'], 'account_name' => $one['Account']['name'], 'delivery_info' => $one['SampleOrder']['delivery_info'],
                'product_name' => $one['ProdModel']['name'], 'quantity' => $one['Req']['quantity']);
        }
        $this->set('data', $data);
    }

    function sms_list() {
        set_time_limit(0);
        $this->layout = 'pdf';

        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        $ids = Cache::read('sample_order_file_export');
        Cache::delete('sample_order_file_export');

        $ids = explode(',', $ids);
        $reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'sample_orders',
                    'alias' => 'SampleOrder',
                    'type' => 'LEFT',
                    'conditions' => 'SampleOrder.id = Req.rel_obj_id'
                ),
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'LEFT',
                    'conditions' => 'Product.id = Req.product_id'
                ),
                array(
                    'table' => 'prod_models',
                    'alias' => 'ProdModel',
                    'type' => 'LEFT',
                    'conditions' => 'ProdModel.id = Product.prod_model_id'
                ),
            ),
            'conditions' => array('Req.id' => $ids),
            'fields' => 'SampleOrder.delivery_info, ProdModel.name, Req.model_def_id, Req.rel_obj_id, Req.name',
            'order' => 'SampleOrder.delivery_info ASC',
        ));
        $g_DeliveryInfo = $g_Commons->GlobalModel('DeliveryInfo');

        $data = array();
        $count = 0;
        foreach ($reqs as $one) {
            $deliverys = $g_DeliveryInfo->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'enums',
                        'alias' => 'Enum',
                        'type' => 'LEFT',
                        'conditions' => 'Enum.value = DeliveryInfo.delivery_company AND Enum.dict_name = \'DeliveryInfo.delivery_company\'',
                    ),
                ),
                'conditions' => array(
                    'DeliveryInfo.model_def_id' => $one['Req']['model_def_id'],
                    'DeliveryInfo.rel_obj_id' => $one['Req']['rel_obj_id'],
                ),
                'fields' => 'DeliveryInfo.delivery_express_no, DeliveryInfo.quantity, Enum.label'
            ));
            if (empty($deliverys)) {
                $data['no_express_info'][] = array('delivery_info' => $one['SampleOrder']['delivery_info'], 'sample_order_name' => $one['Req']['name']);
            } else {
                $delivery_express = array();
                foreach ($deliverys as $express) {
                    $delivery_express[] = array('company' => $express['Enum']['label'], 'delivery_express_no' => $express['DeliveryInfo']['delivery_express_no'],
                        'quantity' => $express['DeliveryInfo']['quantity'], 'product_name' => $one['ProdModel']['name']);
                }
                preg_match_all('/1[358]{1}\d{9}/', $one['SampleOrder']['delivery_info'], $matchesarray);
                if (empty($matchesarray[0])) {
                    $cellphone = '0';
                } else {
                    $cellphone = implode(',', $matchesarray[0]);
                }
                if (0 == $count) {
                    $data['has_express_info'][$count] = array('delivery_info' => $one['SampleOrder']['delivery_info'], 'sample_order_name' => $one['Req']['name'],
                        'delivery_express' => $delivery_express, 'cellphone' => $cellphone);
                    $count++;
                } else {
                    if ($one['SampleOrder']['delivery_info'] == $data['has_express_info'][$count - 1]['delivery_info']) {
                        foreach ($delivery_express as $one_express) {
                            $data['has_express_info'][$count - 1]['delivery_express'][] = $one_express;
                        }
                    } else {
                        $data['has_express_info'][$count] = array('delivery_info' => $one['SampleOrder']['delivery_info'], 'sample_order_name' => $one['Req']['name'],
                            'delivery_express' => $delivery_express, 'cellphone' => $cellphone);
                        $count++;
                    }
                }
            }
        }
        // update by lvbaocheng 2017/5/3 10:24
        if (isset($data['has_express_info'])) {
            foreach ($data['has_express_info'] as $key => $one_express_info) {
                $sort = array();
                foreach ($one_express_info['delivery_express'] as $one_express) {
                    $sort[] = $one_express['delivery_express_no'];
                }
                array_multisort($sort, SORT_ASC, $one_express_info['delivery_express']);
                $data['has_express_info'][$key]['delivery_express'] = $one_express_info['delivery_express'];
            }
        }
        $this->set('data', $data);
    }

    function process_conditions() {
        $this->autoRender = false;

        global $g_Commons;

        if ($this->request->is('post')) {
            $value = $this->request->data;
            $all_ids = $this->Req->find('list', array(
                        'joins' => $value['joins'],
                        'conditions' => $value['conditions'],
                        'fields' => 'Req.id'
                    ));
            echo json_encode($all_ids);
        }
    }

    function file_export($type = 'excel') {
        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_Commons;

        $params = $this->params->params['named'];
        if (isset($params['ids'])) {
            $value = $params['ids'];
        } else {
            global $g_Commons;
            $g_Searches = $g_Commons->GlobalController('Searches');
            $g_Searches->Search->recursive = -1;
            $search_cond = $g_Searches->Search->findById($params['SearchId']);
            $conditions = json_decode($search_cond['Search']['cond_json']);
            $conditions = $g_Commons->objectToArray($conditions);
            $all_ids = $this->Req->find('list', array(
                'joins' => $conditions['joins'],
                'conditions' => $conditions['conditions'],
                'fields' => 'Req.id'
            ));
            $value = implode(',', $all_ids);
        }
        Cache::write('sample_order_file_export', $value);
        switch ($type) {
            case 'excel':
                $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'xml_excel_export'));
                break;
            case 'send_bill':
                $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'send_bill'));
                break;
            case 'sms_list':
                $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'sms_list'));
                break;
            case 'delivery_excel':
                $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'delivery_excel'));
                break;
        }
    }

    function xml_excel_export() {
        set_time_limit(0);
        $this->layout = 'content';

        global $g_BizId;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        $g_Tasks = $g_Commons->GlobalController('Tasks');
        $g_Tasks->Task->recursive = -1;
        $this->Req->recursive = -1;

        $ids = Cache::read('sample_order_file_export');
        Cache::delete('sample_order_file_export');

        $ids = explode(',', $ids);
        //增加样品单导出 实际发样数量字段
        $reqsinfos = $this->Req->find('all', array(
            'joins' =>array(
                array(
                    'table' => 'delivery_infos',
                    'alias' => 'DeliveryInfo',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Req.rel_obj_id  = DeliveryInfo.rel_obj_id'
                    )
                )
            ),
            'conditions' => array('Req.id' => $ids, 'Req.model_def_id' => SampleOrder, 'Req.biz_id' => $g_BizId),
            'group' =>'Req.rel_obj_id',
            'fields' => 'Req.*, Req.quantity, sum(DeliveryInfo.quantity) as total'
        ));
        if (!empty($reqsinfos)) {
            foreach ($reqsinfos as $key => $value) {
                if (empty($value[0]['total'])) {
                    $reqsinfos[$key]['Req']['total'] = 0;
                } else {
                    $reqsinfos[$key]['Req']['total'] = $value[0]['total'];
                }
            }
        }
        $deep_level = 2;
        $UserPrefData = $g_AttrDics->setUserPrefData($reqsinfos, $this->modelName, array('Req' => 'SampleOrder'), $deep_level, 0);
        foreach ($UserPrefData->modelData as $Model) {
            $req_ids[] = $Model['Req']['id'];
        }
        if (isset($req_ids)) {
            $task_list = $g_Tasks->Task->find('list', array(
                'conditions' => array('Task.model_def_id' => Req, 'Task.rel_obj_id' => $req_ids),
                'fields' => 'Task.rel_obj_id, Task.id'
            ));
        }

        foreach ($UserPrefData->modelData as $key_index => $Model) {

            // 转换"背光电源备注" add by GUOCAI (申请样品页面增加电源背光选项判断_V1.1)
            if (isset($Model['SampleOrder']['Req.rel_obj_id']['power_backlight_remark'])) {
                $power_backlight_remark = $Model['SampleOrder']['Req.rel_obj_id']['power_backlight_remark'];
                $power_backlight = $g_Tasks->Task->getPowerBacklightRemarkByStr($power_backlight_remark);
                $UserPrefData->modelData[$key_index]['SampleOrder']['Req.rel_obj_id']['power_backlight_remark'] = $power_backlight['power_backlight_remark'];
            }

            $UserPrefData->modelData[$key_index]['Task']['id'] = $task_list[$Model['Req']['id']];
        }
        if (!empty($UserPrefData->UserPrefColData->userCols)) {
            App::import('Vendor', 'PHPExcel/PHPExcel/IOFactory');
            App::import('Vendor', 'PHPExcel/PHPExcel');
            $objPHPExcel = new PHPExcel();

            $objPHPExcel->createSheet(1);
            $objModelSheet = $objPHPExcel->getActiveSheet();

            $index = 'B';
            $row = 1;
            $objModelSheet->setCellValue('A' . $row, '样品单任务编号');
            foreach ($UserPrefData->UserPrefColData->userCols as $userCol) {
                $objModelSheet->setCellValue($index++ . $row, $userCol['label']);
            }
            $row++;
            foreach ($UserPrefData->modelData as $Model) {
                $index = 'B';
                $objModelSheet->setCellValue('A' . $row, $Model['Task']['id']);
                if (!empty($UserPrefData->UserPrefColData->userCols)) {
                    foreach ($UserPrefData->UserPrefColData->userCols as $userCol) {
                        if (isset(${'g_' . $this->name}->moneyFields) && in_array($userCol['field_name'], ${'g_' . $this->name}->moneyFields)) {
                            //即之前配置了该字段但由于没权限相看仍不可见
                            continue;
                        }
                        $level = count(explode('.', $userCol['field_name']));
                        if ($level > 2) {
                            $field_name = explode('.', $userCol['field_name']);
                            unset($field_name[$level - 1]);
                            $field_name = implode('.', $field_name);
                            $tmp = $Model[$userCol['tbl_name']][$field_name][$userCol['fld_name']];
                            if (empty($tmp)) {
                                $value = null;
                            } else {
                                $value = is_array($tmp) ? $tmp['label'] : $tmp;
                            }
                        } else {
                            $tmp = $Model[$userCol['tbl_name']][$userCol['fld_name']];
                            $value = is_array($tmp) ? $tmp['label'] : $tmp;
                        }
                        $objModelSheet->setCellValue($index++ . $row, $value);
                    }
                }
                $row++;
            }
            $row = 1;
            //增加导出实际发样数量字段
            $objModelSheet->setCellValue($index . $row++, '实际发样数量');
            foreach ($UserPrefData->modelData as $model_data_key => $model_value) {
                $total = $model_value['Req']['total'];
                $objModelSheet->setCellValue($index . $row++, $total);
            }
        }
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $file_path = '../webroot/cache/attach/' . time() . 'sample_order.xlsx';
        $objWriter->save($file_path);
        // 输出Excel
        $g_FileDownloads = $g_Commons->GlobalController('FileDownloads');
        $g_FileDownloads->download($file_path, date('Y-m-d') . '样品单');
    }

    function audit_sample_order() {
        global $g_BizId;
        global $g_Commons;

        $joins = array(
            array(
                'table' => 'model_defs',
                'alias' => 'ModelDef',
                'type' => 'LEFT',
                'conditions' => 'ModelDef.name = \'SampleOrders\''
            ),
            array(
                'table' => 'sample_orders',
                'alias' => 'SampleOrder',
                'type' => 'LEFT',
                'conditions' => 'Req.rel_obj_id = SampleOrder.id'
            ),
        );
        $not_audit_sample_order = $this->Req->find('all', array(
                    'joins' => $joins,
                    'conditions' => array(
                        'Req.biz_id = ' . $g_BizId,
                        'Req.model_def_id = ModelDef.id',
                        'SampleOrder.status <' . OCS_SAMPLE_ORDER_RETURN,
                        'SampleOrder.close_reason' => '0',
                    ),
                    'fields' => 'Req.*, SampleOrder.*'
                ));
        if (!empty($not_audit_sample_order)) {
            global $g_BizId;
            $g_Atoms = $g_Commons->GlobalController('Atoms');
            $g_Atoms->Atom->recursive = -1;
            $g_Accounts = $g_Commons->GlobalController('Accounts');
            $g_Contacts = $g_Commons->GlobalController('Contacts');
            $g_Depts = $g_Commons->GlobalController('Depts');
            $g_Enums = $g_Commons->GlobalController('Enums');
            $g_ModelDefs = $g_Commons->GlobalController('ModelDefs');
            $g_ModelDefs->ModelDef->recursive = -1;
            $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
            $g_ProdAttrs->ProdAttr->recursive = -1;
            $g_Products = $g_Commons->GlobalController('Products');
            $g_Tasks = $g_Commons->GlobalController('Tasks');
            $g_Tasks->Task->recursive = -1;
            $g_Users = $g_Commons->GlobalController('Users');

            $req_model = $g_ModelDefs->ModelDef->findByName('Reqs');
            foreach ($not_audit_sample_order as $key => $one) {
                foreach ($one['Req'] as $field => $value) {
                    switch ($field) {
                        case 'product_id':
                            $not_audit_sample_order[$key]['Req']['product'] = $g_Products->Product->findMainField($value);
                            break;
                        case 'account_id':
                            $not_audit_sample_order[$key]['Req']['account'] = $g_Accounts->Account->findAlias($value);
                            break;
                        case 'owner_user_id':
                            $not_audit_sample_order[$key]['Req']['owner_user'] = $g_Users->User->findMainField($value);
                            break;
                        case 'sales_user_id':
                            $not_audit_sample_order[$key]['Req']['sales_user'] = $g_Users->User->findMainField($value);
                            break;
                        case 'com_dept_id':
                            $not_audit_sample_order[$key]['Req']['com_dept'] = $g_Depts->Dept->findMainField($value);
                            break;
                        case 'rd_dept_id':
                            $not_audit_sample_order[$key]['Req']['rd_dept'] = $g_Depts->Dept->findMainField($value);
                            break;
                        case 'create_user_id':
                            $not_audit_sample_order[$key]['Req']['create_user'] = $g_Users->User->findMainField($value);
                            break;
                        case 'ext_prod_ids':
                            $ext_prod_ids_enums = $g_Enums->getEnumListByDictName('Req.ext_prod_ids');
                            $ext_prod_ids = explode(',', $value);
                            $ext_prod_label = array();
                            foreach ($ext_prod_ids as $ext_prod_id) {
                                if (0 != $ext_prod_id) {
                                    $ext_prod_label[] = $ext_prod_ids_enums[$ext_prod_id];
                                }
                            }
                            if (empty($ext_prod_label)) {
                                $ext_prod_label = '无';
                            } else {
                                $ext_prod_label = implode(',', $ext_prod_label);
                            }
                            $not_audit_sample_order[$key]['Req']['ext_prod'] = $ext_prod_label;
                            break;
                        case 'sw_atom_ids_json':
                            //update by lvbaocheng 2017/5/3 11:38
                            $sw = json_decode($value, true);
                            $SWPanelAttr = $g_ProdAttrs->findByAlias('SW_Panel');
                            $SWCountryAttr = $g_ProdAttrs->findByAlias('SW_Country');
                            if (array_key_exists($SWPanelAttr['ProdAttr']['id'], $sw)) {
//                            if (isset($sw->$SWPanelAttr['ProdAttr']['id'])) {
                                $atoms = $g_Atoms->Atom->find('list', array('conditions' => array('Atom.id' => $SWPanelAttr['ProdAttr']['id'])));
                                $not_audit_sample_order[$key]['Req']['SWPanel'] = implode(',', $atoms);
                            } else {
                                $not_audit_sample_order[$key]['Req']['SWPanel'] = __('none');
                            }

                            if (array_key_exists($SWCountryAttr['ProdAttr']['id'], $sw)) {
//                            if (isset($sw->$SWCountryAttr['ProdAttr']['id'])) {
                                $atoms = $g_Atoms->Atom->find('list', array('conditions' => array('Atom.id' => $SWCountryAttr['ProdAttr']['id'])));
                                $not_audit_sample_order[$key]['Req']['SWCountry'] = implode(',', $atoms);
                            } else {
                                $not_audit_sample_order[$key]['Req']['SWCountry'] = __('none');
                            }
                            break;
                    }
                }
                $task_temp = $g_Tasks->Task->findByModelDefIdAndRelObjId($req_model['ModelDef']['id'], $one['Req']['id']);
                $not_audit_sample_order[$key]['Req']['Task_id'] = $task_temp['Task']['id'];
                foreach ($one['SampleOrder'] as $field => $value) {
                    switch ($field) {
                        case 'biz_contact_id':
                            $not_audit_sample_order[$key]['SampleOrder']['biz_contact'] = $g_Contacts->Contact->findMainField($value);
                            break;
                        case 'require_delivery_date':
                            $not_audit_sample_order[$key]['SampleOrder']['require_delivery_date'] = date('Y-m-d', strtotime($value));
                            break;
                        case 'status':
                            $sample_order_status = $g_Enums->Enum->findByDictNameAndValue('SampleOrder.status', $value);
                            $not_audit_sample_order[$key]['SampleOrder']['status_label'] = $sample_order_status['Enum']['label'];
                            break;
                        case 'type':
                            $sample_order_type = $g_Enums->Enum->findByDictNameAndValue('SampleOrder.type', $value);
                            $not_audit_sample_order[$key]['SampleOrder']['type_label'] = $sample_order_type['Enum']['label'];
                            break;
                        case 'is_fee':
                            $not_audit_sample_order[$key]['SampleOrder']['is_fee'] = $value ? __('Yes') : __('No');
                            break;
                        case 'fae_user_id':
                            $not_audit_sample_order[$key]['SampleOrder']['fae_user'] = $g_Users->User->findMainField($value);
                            break;
                        case 'test_require_type':
                            $sample_order_test_require_type = $g_Enums->Enum->findByDictNameAndValue('SampleOrder.test_require_type', $value);
                            $not_audit_sample_order[$key]['SampleOrder']['test_require_type_label'] = $sample_order_test_require_type['Enum']['label'];
                            break;
                        case 'authenticate_types':
                            $authenticate_types_enums = $g_Enums->getEnumListByDictName('SampleOrder.authenticate_types');
                            $authenticate_types = explode(',', $value);
                            $authenticate_types_label = array();
                            foreach ($authenticate_types as $authenticate_types_id) {
                                //update by lvbaocheng 2017/5/3 11:44
                                $authenticate_types_label[] = isset($authenticate_types_enums[$authenticate_types_id]) ? $authenticate_types_enums[$authenticate_types_id] : '';
                            }
                            if (empty($authenticate_types_label)) {
                                $authenticate_types_label = '无';
                            } else {
                                $authenticate_types_label = implode(',', $authenticate_types_label);
                            }
                            $not_audit_sample_order[$key]['SampleOrder']['authenticate_types_label'] = $authenticate_types_label;
                            break;
                    }
                }
            }
        }
        $this->set('data', $not_audit_sample_order);
        $labels = array(
            array('table' => 'Req', 'field' => 'name', 'attr_dic' => 'Req.name'),
            array('table' => 'SampleOrder', 'field' => 'status_label', 'attr_dic' => 'SampleOrder.status'),
            array('table' => 'Req', 'field' => 'create_user', 'attr_dic' => 'Req.create_user_id'),
            array('table' => 'Req', 'field' => 'create_time', 'attr_dic' => 'Req.create_time'),
            array('table' => 'Req', 'field' => 'account', 'attr_dic' => 'Req.account_id'),
            array('table' => 'SampleOrder', 'field' => 'type_label', 'attr_dic' => 'SampleOrder.type'),
            array('table' => 'SampleOrder', 'field' => 'delivery_info', 'attr_dic' => 'SampleOrder.delivery_info'),
            array('table' => 'SampleOrder', 'field' => 'biz_contact', 'attr_dic' => 'SampleOrder.biz_contact_id'),
            array('table' => 'SampleOrder', 'field' => 'require_delivery_date', 'attr_dic' => 'SampleOrder.require_delivery_date'),
            array('table' => 'SampleOrder', 'field' => 'authenticate_types_label', 'attr_dic' => 'SampleOrder.authenticate_types'),
            array('table' => 'Req', 'field' => 'product', 'attr_dic' => 'Req.product_id'),
            array('table' => 'Req', 'field' => 'quantity', 'attr_dic' => 'Req.quantity'),
            array('table' => 'Req', 'field' => 'price', 'attr_dic' => 'Req.price'),
            array('table' => 'SampleOrder', 'field' => 'is_fee', 'attr_dic' => 'SampleOrder.is_fee'),
            array('table' => 'Req', 'field' => 'amount', 'attr_dic' => 'Req.amount'),
            array('table' => 'Req', 'field' => 'amount', 'attr_dic' => 'Req.amount'),
            array('table' => 'Req', 'field' => 'owner_user', 'attr_dic' => 'Req.owner_user_id'),
            array('table' => 'Req', 'field' => 'sales_user', 'attr_dic' => 'Req.sales_user_id'),
            array('table' => 'Req', 'field' => 'com_dept', 'attr_dic' => 'Req.com_dept_id'),
            array('table' => 'Req', 'field' => 'rd_dept', 'attr_dic' => 'Req.rd_dept_id'),
            array('table' => 'SampleOrder', 'field' => 'test_require_type_label', 'attr_dic' => 'SampleOrder.test_require_type'),
            array('table' => 'Req', 'field' => 'ext_prod', 'attr_dic' => 'Req.ext_prod_ids'),
            array('table' => 'Req', 'field' => 'ext_3rd_party_prods', 'attr_dic' => 'Req.ext_3rd_party_prods'),
            array('table' => 'Req', 'field' => 'SWPanel', 'attr_dic' => 'ProdAttr.SW_Panel'),
            array('table' => 'Req', 'field' => 'SWCountry', 'attr_dic' => 'ProdAttr.SW_Country'),
            array('table' => 'Req', 'field' => 'remark', 'attr_dic' => 'Req.remark'),
        );
        foreach ($labels as $key => $val) {
            //$attr_dic_temp = Cache::read('attr_dic/' . $val['attr_dic'], 'attr_dic');
            //$attr_dic_temp = $g_Commons->getDataByAttrDicCache($val['attr_dic']);
            $attr_dic_temp = $g_Commons->getDataByCache($val['attr_dic'],'AttrDic');
            $labels[$key]['label'] = $attr_dic_temp['AttrDic']['label'];
        }
        $this->set('labels', $labels);
    }

    function audit_sample_order_by_ajax() {
        $this->autoRender = false;

        global $g_BizId;
        global $g_Commons;
        $g_ModelDefs = $g_Commons->GlobalController('ModelDefs');
        $g_SampleOrders = $g_Commons->GlobalController('SampleOrders');
        $g_Tasks = $g_Commons->GlobalController('Tasks');
        $g_Tasks->Task->recursive = -1;
        global $g_UserId;

        if (!isset($_POST['SampleOrderId']) || empty($_POST['SampleOrderId'])) {
            echo -1;
            return;
        }
        if (!isset($_POST['TaskId']) || empty($_POST['TaskId'])) {
            echo -1;
            return;
        }
        $audit_sample_orders = $_POST['SampleOrderId'];

        $sample_order_old_status = array();
        $sample_order_audit = $g_SampleOrders->SampleOrder->find('all', array('conditions' => array('SampleOrder.id' => $audit_sample_orders)));
        foreach ($sample_order_audit as $one_order) {
            if (OCS_SAMPLE_ORDER_NOT_PRINT == $one_order['SampleOrder']['status']) {
                $sample_order_old_status[$one_order['SampleOrder']['id']] = '新创建';
            } else {
                $sample_order_old_status[$one_order['SampleOrder']['id']] = '待审核';
            }
            $one_order['SampleOrder']['status'] = OCS_SAMPLE_ORDER_AUDITED;
            $g_SampleOrders->SampleOrder->save($one_order);
        }

        $sample_order_model = $g_ModelDefs->ModelDef->findByName('SampleOrders');
        $all_req = $this->Req->find('all', array(
                    'conditions' => array('Req.model_def_id' => $sample_order_model['ModelDef']['id'], 'Req.rel_obj_id' => $audit_sample_orders)
                ));
        foreach ($all_req as $one_req) {
            $one_req['Req']['update_time'] = date('Y-m-d H:i:s');
            $one_req['Req']['update_user_id'] = $g_UserId;
            $one_req['Req']['business_audit_user_id'] = $g_UserId;
            if (empty($one_req['Req']['business_audit_time'])) {
                $one_req['Req']['business_audit_time'] = date('Y-m-d H:i:s');
            }
            $this->Req->save($one_req['Req']);
            $this->saveReqVersion($this->Req->id);
        }

        $task_ids = $_POST['TaskId'];
        $tasks = $g_Tasks->Task->find('all', array('conditions' => array('Task.id' => $task_ids)));
        foreach ($tasks as $one_task) {
            $OldStatus = $one_task['Task']['status'];
            $one_task['Task']['status'] = OCS_TASK_SAMPLE_ORDER_AUDITED;
            $NewStatus = $one_task['Task']['status'];
            $one_task['Task']['update_time'] = date("Y-m-d H:i:s");
            $one_task['Task']['update_user_id'] = $g_UserId;
            $g_Tasks->Task->save($one_task);

            if ($OldStatus != $NewStatus) {
                $g_ActionRecords = $g_Commons->GlobalController('ActionRecords');
                $g_ActionRecords->ActionRecord->create('Task.Status.Begin.' . $OldStatus, Task, $one_task['Task']['id']);
                $g_ActionRecords->ActionRecord->create('Task.Status.End.' . $NewStatus, Task, $one_task['Task']['id']);
            }
        }

        //sample_order change_status send to wechat
        foreach ($all_req as $one_req) {
            $g_Tasks->Task->SendMessageToWechat($one_req['Req']['id'], $sample_order_old_status[$one_req['Req']['rel_obj_id']], '商务已审');
        }
        echo 1;
    }

    function close_sample_order() {
        $this->autoRender = false;

        global $g_BizId;
        global $g_Commons;
        $g_SampleOrders = $g_Commons->GlobalController('SampleOrders');
        global $g_UserId;

        if (!isset($_POST['req_id']) || empty($_POST['req_id'])) {
            echo -1;
            return;
        }
        if (!isset($_POST['close_reason']) || empty($_POST['close_reason'])) {
            echo -1;
            return;
        }

        $req = $this->Req->findById($_POST['req_id']);
        //$sample_order_model = Cache::read('model_def/' . $req['Req']['model_def_id'], 'model_def');
        //$sample_order_model = $g_Commons->getDataByModelDefCache($req['Req']['model_def_id']);
        $sample_order_model = $g_Commons->getDataByCache($req['Req']['model_def_id'],'ModelDef');
        if ('SampleOrders' != $sample_order_model['ModelDef']['name']) {
            echo -1;
            return;
        }

        $req['Req']['update_time'] = date('Y-m-d H:i:s');
        $req['Req']['update_user_id'] = $g_UserId;
        $sample_order = $g_SampleOrders->SampleOrder->findById($req['Req']['rel_obj_id']);
        $sample_order['SampleOrder']['close_reason'] = $_POST['close_reason'];
        $sample_order['SampleOrder']['close_time'] = date('Y-m-d H:i:s');
        $sample_order['SampleOrder']['close_user_id'] = $g_UserId;
        $g_SampleOrders->SampleOrder->save($sample_order['SampleOrder']);
        echo 1;
    }

    function statistical_sample_order_data($date_start = null, $date_end = null, $option = null) {
        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_Commons;
        $this->set('title_for_layout', '样品统计');

        if ($this->request->is('post') && !empty($this->request->data)) {
            $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'statistical_sample_order_data', $this->request->data['date_start'], $this->request->data['date_end']));
        }
        if (null == $date_start && null == $date_end) {
            $flag = 0;
            $date_start = date('Y-m-d');
        } else {
            if (null != $date_start && null != $date_end) {
                $flag = 2;
            } else {
                $flag = 1;
                $date_start = null != $date_start ? $date_start : $date_end;
            }
        }
        $g_DeliveryInfo = $g_Commons->GlobalModel('DeliveryInfo');
        $this->loadModel("User");
        $this->User->recursive = -1;
        $Enum = $g_Commons->GlobalModel('Enum');
        $delay_reason_label = $Enum->find('list', array(
            'conditions' => array('Enum.dict_name' => 'SampleOrder.delay_reason'),
            'fields' => 'Enum.value, Enum.label'
        ));
        $this->set('delay_reason_label', $delay_reason_label);

        $day = date('d', strtotime($date_start));
        $mon = date('m', strtotime($date_start));
        $year = date('Y', strtotime($date_start));
        if (2 != $flag) {
            if ($day > 25) {
                $mon_start_day = date('Y-m-26 00:00:00', strtotime($date_start));
                if ($mon == 12) {
                    $mon_end_day = ($year + 1) . '-01-25 23:59:59';
                } else {
                    $mon_end_day = $year . '-' . ($mon + 1) . '-25 23:59:59';
                }
            } else {
                if ($mon == 1) {
                    $mon_start_day = ($year - 1) . '-12-26 00:00:00';
                } else {
                    $mon_start_day = $year . '-' . ($mon - 1) . '-26 00:00:00';
                }
                $mon_end_day = date('Y-m-25 23:59:59', strtotime($date_start));
            }
        } else {
            $mon_start_day = date('Y-m-d 00:00:00', strtotime($date_start));
            $mon_end_day = date('Y-m-d 23:59:59', strtotime($date_end));
        }

        $mon_start_day = date('Y-m-d H:i:s', strtotime($mon_start_day));
        $mon_end_day = date('Y-m-d H:i:s', strtotime($mon_end_day));

        $this->set('mon_start_day', $mon_start_day);
        $this->set('mon_end_day', $mon_end_day);
        $this->set('option', $option);

        if (2 != $flag) {
            $day_data = array();
            //当天发样
            $day_deliverys = $g_DeliveryInfo->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'reqs',
                        'alias' => 'Req',
                        'type' => 'LEFT',
                        'conditions' => 'Req.rel_obj_id = DeliveryInfo.rel_obj_id'
                    ),array(
                        'table' => 'sample_orders',
                        'alias' => 'SampleOrder',
                        'type' => 'LEFT',
                        'conditions' => 'SampleOrder.id = DeliveryInfo.rel_obj_id'
                    )
                ),
                'conditions' => array(
                    'Req.model_def_id' => SampleOrder,
                    'DeliveryInfo.model_def_id' => SampleOrder,
                    'DeliveryInfo.delivery_time >=' => date('Y-m-d H:i:s', strtotime($date_start)),
                    'DeliveryInfo.delivery_time <' => date('Y-m-d H:i:s', strtotime($date_start) + 86400),
                    'Req.biz_id' => $g_BizId,
                    'SampleOrder.status' => OCS_SAMPLE_ORDER_SENDED
                ),
                'fields' => 'DeliveryInfo.rel_obj_id, DeliveryInfo.quantity'
            ));
            $day_delivery_sum = 0;
            $day_delivery_list = array();
            foreach ($day_deliverys as $delivery) {
                $day_delivery_sum += $delivery['DeliveryInfo']['quantity'];
                $day_delivery_list[] = $delivery['DeliveryInfo']['rel_obj_id'];
            }
            $day_delivery_list = array_unique($day_delivery_list);
            $day_data['day_delivery_sum'] = $day_delivery_sum;
            $day_data['day_delivery_num'] = count($day_delivery_list);
            //当月发样
            $mon_deliverys = $g_DeliveryInfo->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'reqs',
                        'alias' => 'Req',
                        'type' => 'LEFT',
                        'conditions' => 'Req.rel_obj_id=DeliveryInfo.rel_obj_id'
                    ),array(
                        'table' => 'sample_orders',
                        'alias' => 'SampleOrder',
                        'type' => 'LEFT',
                        'conditions' => 'SampleOrder.id = DeliveryInfo.rel_obj_id'
                    )
                ),
                'conditions' => array(
                    'Req.model_def_id' => SampleOrder,
                    'DeliveryInfo.model_def_id' => SampleOrder,
                    'Req.create_time >=' => $mon_start_day,
                    'Req.create_time <' => $mon_end_day,
                    'Req.biz_id' => $g_BizId,
                    'SampleOrder.status' => OCS_SAMPLE_ORDER_SENDED
                ),
                'fields' => 'DeliveryInfo.rel_obj_id, DeliveryInfo.quantity'
            ));

            $mon_delivery_sum = 0;
            $mon_delivery_list = array();
            foreach ($mon_deliverys as $delivery) {
                $mon_delivery_sum += $delivery['DeliveryInfo']['quantity'];
                $mon_delivery_list[] = $delivery['DeliveryInfo']['rel_obj_id'];
            }
            $mon_delivery_list = array_unique($mon_delivery_list);
            $day_data['mon_delivery_sum'] = $mon_delivery_sum;
            $day_data['mon_delivery_num'] = count($mon_delivery_list);
            //当日申请单里，样品单状态不为取消发样的单据
            $day_sample_orders = $this->Req->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'sample_orders',
                        'alias' => 'SampleOrder',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'Req.rel_obj_id = SampleOrder.id'
                        )
                    )
                ),
                'conditions' => array(
                    'Req.model_def_id' => SampleOrder,
                    'SampleOrder.close_reason' => '0',
                    'SampleOrder.status !=' => '70', // 样品单状态不能为取消发样
                    'Req.create_time >=' => date('Y-m-d H:i:s', strtotime($date_start)), 'Req.create_time <' => date('Y-m-d H:i:s', strtotime($date_start) + 86400),
                    'Req.biz_id' => $g_BizId
                ),
                'fields' => 'Req.id, Req.quantity'
            ));
            $day_sample_sum = 0;
            foreach ($day_sample_orders as $sample) {
                $day_sample_sum += $sample['Req']['quantity'];
            }

            $day_data['day_sample_sum'] = $day_sample_sum;
            $day_data['day_sample_num'] = count($day_sample_orders);

            //当月申请单中，样品单状态不为取消发样，最新发样的单据(计算延迟)
            $mon_sample_orders = $this->Req->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'delivery_infos',
                        'alias' => 'DeliveryInfo',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'Req.delivery_info_id = DeliveryInfo.id'
                        )
                    ),
                    array(
                        'table' => 'sample_orders',
                        'alias' => 'SampleOrder',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'Req.rel_obj_id = SampleOrder.id'
                        )
                    )
                ),
                'conditions' => array('Req.model_def_id' => SampleOrder, 'SampleOrder.close_reason' => '0', 'SampleOrder.status !=' => '70',
                    'Req.create_time >=' => $mon_start_day, 'Req.create_time <' => $mon_end_day, 'Req.biz_id' => $g_BizId),
                'fields' => 'Req.id, Req.quantity, SampleOrder.require_delivery_date, SampleOrder.delay_reason, DeliveryInfo.delivery_time, DeliveryInfo.quantity'
            ));
            $mon_sample_sum = 0;
            $mon_delay_sum = 0;
            $mon_delay_num = 0;
            foreach ($mon_sample_orders as $sample) {
                $mon_sample_sum += $sample['Req']['quantity'];

                $requird_time = strtotime($sample['SampleOrder']['require_delivery_date']);
                $delivery_time = strtotime($sample['DeliveryInfo']['delivery_time']);
                if (strtotime(date('Y-m-d', $requird_time)) < strtotime(date('Y-m-d', $delivery_time))) {
                    $mon_delay_sum += $sample['DeliveryInfo']['quantity'];
                    $mon_delay_num++;
                }
            }

            // 电源数据
            $power_mon_delivery = $g_DeliveryInfo->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'reqs',
                        'alias' => 'Req',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'Req.delivery_info_id = DeliveryInfo.id'
                        )
                    ),
                    array(
                        'table' => 'products',
                        'alias' => 'Product',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'Req.product_id = Product.id'
                        )
                    ),
                    array(
                        'table' => 'sample_orders',
                        'alias' => 'SampleOrder',
                        'type' => 'LEFT',
                        'conditions' => 'SampleOrder.id = DeliveryInfo.rel_obj_id'
                    )
                ),
                'conditions' => array(
                    'DeliveryInfo.delivery_time >=' => $mon_start_day, 'DeliveryInfo.delivery_time <' => $mon_end_day,
                    'Product.name LIKE' => '%P.%', 'Req.biz_id' => $g_BizId,
                    'SampleOrder.status' => OCS_SAMPLE_ORDER_SENDED
                ),
                'fields' => 'DeliveryInfo.*, Req.id'
            ));
            $mon_power_req_ids = array();
            $mon_power_quantity = 0;
            $day_power_req_ids = array();
            $day_power_quantity = 0;
            foreach ($power_mon_delivery as $power_delivery) {
                $mon_power_quantity += $power_delivery['DeliveryInfo']['quantity'];
                $mon_power_req_ids[] = $power_delivery['Req']['id'];
                if ($date_start == date('Y-m-d', strtotime($power_delivery['DeliveryInfo']['delivery_time']))) {
                    $day_power_quantity += $power_delivery['DeliveryInfo']['quantity'];
                    $day_power_req_ids[] = $power_delivery['Req']['id'];
                }
            }

            $mon_power_req_ids = array_unique($mon_power_req_ids);
            $day_power_req_ids = array_unique($day_power_req_ids);


            $day_data['mon_power_sum'] = $mon_power_quantity;
            $day_data['mon_power_num'] = count($mon_power_req_ids);
            $day_data['day_power_sum'] = $day_power_quantity;
            $day_data['day_power_num'] = count($day_power_req_ids);
            $day_data['mon_sample_sum'] = $mon_sample_sum;
            $day_data['mon_sample_num'] = count($mon_sample_orders);
            $day_data['mon_delay_sum'] = $mon_delay_sum;
            $day_data['mon_delay_num'] = $mon_delay_num;
            $this->set('day_data', $day_data);
            //当日发样的总量
            $day_delivery = $g_DeliveryInfo->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'reqs',
                        'alias' => 'Req',
                        'type' => 'LEFT',
                        'conditions' => 'Req.rel_obj_id = DeliveryInfo.rel_obj_id'
                    ),
                    array(
                        'table' => 'sample_orders',
                        'alias' => 'SampleOrder',
                        'type' => 'LEFT',
                        'conditions' => 'SampleOrder.id = DeliveryInfo.rel_obj_id'
                    )
                ),
                'conditions' => array(
                    'Req.model_def_id' => SampleOrder,
                    'DeliveryInfo.model_def_id' => SampleOrder,
                    'DeliveryInfo.delivery_time >=' => date('Y-m-d H:i:s', strtotime($date_start)),
                    'DeliveryInfo.delivery_time <' => date('Y-m-d H:i:s', strtotime($date_start) + 86400),
                    'Req.biz_id' => $g_BizId,
                    'SampleOrder.status' => OCS_SAMPLE_ORDER_SENDED
                ),
                'fields' => 'SUM(DeliveryInfo.quantity) AS total'
            ));
            //当日申请单中样品单状态不为取消的单据总量
            $day_sample_order = $this->Req->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'sample_orders',
                        'alias' => 'SampleOrder',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'Req.rel_obj_id = SampleOrder.id'
                        )
                    )
                ),
                'conditions' => array('Req.model_def_id' => SampleOrder, 'SampleOrder.close_reason' => '0', 'SampleOrder.status !=' => '70', // 样品单状态不能为取消发样
                    'Req.create_time >=' => date('Y-m-d H:i:s', strtotime($date_start)), 'Req.create_time <' => date('Y-m-d H:i:s', strtotime($date_start) + 86400), 'Req.biz_id' => $g_BizId),
                'fields' => 'SUM(Req.quantity) AS total'
            ));
            $power_day_delivery = $g_DeliveryInfo->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'reqs',
                        'alias' => 'Req',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'Req.delivery_info_id = DeliveryInfo.id'
                        )
                    ),
                    array(
                        'table' => 'products',
                        'alias' => 'Product',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'Req.product_id = Product.id'
                        )
                    ),
                    array(
                        'table' => 'sample_orders',
                        'alias' => 'SampleOrder',
                        'type' => 'LEFT',
                        'conditions' => 'SampleOrder.id = DeliveryInfo.rel_obj_id'
                    )
                ),
                'conditions' => array('DeliveryInfo.delivery_time >=' => date('Y-m-d H:i:s', strtotime($date_start)),
                    'DeliveryInfo.delivery_time <' => date('Y-m-d H:i:s', strtotime($date_start) + 86400),
                    'Product.name LIKE' => '%P.%', 'Req.biz_id' => $g_BizId,'SampleOrder.status' => OCS_SAMPLE_ORDER_SENDED
                ),
                'fields' => 'SUM(DeliveryInfo.quantity) AS total'
            ));
            //当天申请需要样品部处理 2014 11-14
            $task_sample_orders = $this->Req->find('all',array(
                'joins' => array(
                    array(
                        'table' => 'tasks',
                        'alias' => 'Task',
                        'type' => 'left',
                        'conditions' => array(
                            'Req.id = Task.rel_obj_id')
                        )
                    ),
                'conditions' => array(
                    'Req.model_def_id' => SampleOrder,
                    'Req.create_time >=' => date('Y-m-d H:i:s', strtotime($date_start)),
                    'Req.create_time <=' => date('Y-m-d H:i:s', strtotime($date_start) + 86400),
                    'Task.model_def_id' => Req,
                    'Req.biz_id' => $g_BizId
                    ),
                'fields' => 'Req.id,Req.quantity,Req.create_time,Task.status'
            ));
            $task_sample_orders_result = array();
            for ($i = 0; $i< 3 ;$i++) {
                for ($j = 0; $j< 5; $j++) {
                    $task_sample_orders_result[$i][$j]['num'] = 0;
                    $task_sample_orders_result[$i][$j]['qty'] = 0;
                }
            }
            if (!empty($task_sample_orders)) {
                foreach ($task_sample_orders as $orders_key => $order) {
                    if ($order['Task']['status'] == OCS_TASK_SAMPLE_ORDER_AUDITED || $order['Task']['status'] == OCS_TASK_SAMPLE_ORDER_PRINTED ||
                        $order['Task']['status'] == OCS_TASK_SAMPLE_ORDER_TEST_WAITING || $order['Task']['status'] == OCS_TASK_SAMPLE_ORDER_NEED_ADD ||
                        $order['Task']['status'] == OCS_TASK_SAMPLE_ORDER_PAUSE || $order['Task']['status'] == OCS_TASK_SAMPLE_ORDER_SENDED) {

                        $task_sample_orders_day[0][] = $order['Req'];
                    } else if ($order['Task']['status'] == OCS_TASK_SAMPLE_ORDER_FACTORY) {

                        $task_sample_orders_day[1][] = $order['Req'];
                    } else if ($order['Task']['status'] == OCS_TASK_SAMPLE_ORDER_CANCEL) {

                        $task_sample_orders_day[2][] = $order['Req'];
                    } else {
                        continue;
                    }
                }
            }
            if (!empty($task_sample_orders_day)) {
                foreach ($task_sample_orders_day as $order_key => $order_value) {
                    foreach ($order_value as $key => $value) {
                        $hours = date('H', strtotime($value['create_time']));
                         if ($hours <= 10 ) {
                            $task_sample_orders_result[$order_key][0]['num']++;
                            $task_sample_orders_result[$order_key][0]['qty']+= $value['quantity'];
                        } else if ($hours <= 12 && $hours > 10 ) {
                            $task_sample_orders_result[$order_key][1]['num']++;
                            $task_sample_orders_result[$order_key][1]['qty']+= $value['quantity'];
                        } else if ($hours <= 15 && $hours > 12 ) {
                            $task_sample_orders_result[$order_key][2]['num']++;
                            $task_sample_orders_result[$order_key][2]['qty']+= $value['quantity'];
                        } else if ($hours <= 18 && $hours > 15) {
                            $task_sample_orders_result[$order_key][3]['num']++;
                            $task_sample_orders_result[$order_key][3]['qty']+= $value['quantity'];
                        } else {
                            $task_sample_orders_result[$order_key][4]['num']++;
                            $task_sample_orders_result[$order_key][4]['qty']+= $value['quantity'];
                        }
                    }
                }
            }
            $this->set('task_sample_orders_result',$task_sample_orders_result);
        }

        //当月发样总量
        $mon_delivery = $g_DeliveryInfo->find('all', array(
            'joins' => array(
                array(
                    'table' => 'reqs',
                    'alias' => 'Req',
                    'type' => 'LEFT',
                    'conditions' => 'Req.rel_obj_id = DeliveryInfo.rel_obj_id'
                ),
                array(
                    'table' => 'sample_orders',
                    'alias' => 'SampleOrder',
                    'type' => 'LEFT',
                    'conditions' => 'SampleOrder.id = DeliveryInfo.rel_obj_id'
                )
            ),
            'conditions' => array(
                'Req.model_def_id' => SampleOrder,
                'DeliveryInfo.model_def_id' => SampleOrder,
                'DeliveryInfo.delivery_time >=' => $mon_start_day,
                'DeliveryInfo.delivery_time <' => $mon_end_day,
                'Req.biz_id' => $g_BizId,
                'SampleOrder.status' => OCS_SAMPLE_ORDER_SENDED
            ),
            'fields' => 'SUM(DeliveryInfo.quantity) AS total'
        ));
        //当月申请单中样品单状态不为取消的单据总量
        $mon_sample_order = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'sample_orders',
                    'alias' => 'SampleOrder',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Req.rel_obj_id = SampleOrder.id'
                    )
                )
            ),
            'conditions' => array('Req.model_def_id' => SampleOrder, 'SampleOrder.close_reason' => '0', 'SampleOrder.status !=' => '70',
                'Req.create_time >=' => $mon_start_day, 'Req.create_time <' => $mon_end_day, 'Req.biz_id' => $g_BizId),
            'fields' => 'SUM(Req.quantity) AS total'
        ));
        // 电源
        $power_mon_delivery = $g_DeliveryInfo->find('all', array(
            'joins' => array(
                array(
                    'table' => 'reqs',
                    'alias' => 'Req',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Req.delivery_info_id = DeliveryInfo.id'
                    )
                ),
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Req.product_id = Product.id'
                    )
                ),
                array(
                    'table' => 'sample_orders',
                    'alias' => 'SampleOrder',
                    'type' => 'LEFT',
                    'conditions' => 'SampleOrder.id = DeliveryInfo.rel_obj_id'
                ),
            ),
            'conditions' => array(
                'DeliveryInfo.delivery_time >=' => $mon_start_day, 'DeliveryInfo.delivery_time <' => $mon_end_day,
                'Product.name LIKE' => '%P.%', 'Req.biz_id' => $g_BizId , 'SampleOrder.status' => OCS_SAMPLE_ORDER_SENDED
            ),
            'fields' => 'SUM(DeliveryInfo.quantity) AS total'
        ));
        // 申请发样数据
        $deliver_orders = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'delivery_infos',
                    'alias' => 'DeliveryInfo',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Req.delivery_info_id = DeliveryInfo.id'
                    )
                ),
                array(
                    'table' => 'sample_orders',
                    'alias' => 'SampleOrder',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Req.rel_obj_id = SampleOrder.id'
                    )
                ),
                array(
                    'table' => 'tasks',
                    'alias' => 'Task',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Task.rel_obj_id = Req.id AND Task.model_def_id = '.Req
                    )
                ),
            ),
            'conditions' => array('Req.model_def_id' => SampleOrder, 'SampleOrder.close_reason' => '0', 'SampleOrder.status !=' => '70',
                'DeliveryInfo.delivery_time >=' => $mon_start_day, 'DeliveryInfo.delivery_time <' => $mon_end_day, 'Req.biz_id' => $g_BizId),
            'fields' => 'Task.id, Req.id, Req.name, Req.quantity, Req.create_time, SampleOrder.is_fee, SampleOrder.require_delivery_date, SampleOrder.delay_reason, SampleOrder.status, DeliveryInfo.delivery_time, DeliveryInfo.quantity',
            'group' => 'Req.id'
        ));

        // 已发样数据
        $delivered_order = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'sample_orders',
                    'alias' => 'SampleOrder',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Req.rel_obj_id = SampleOrder.id'
                    )
                )
            ),
            'conditions' => array('Req.model_def_id' => SampleOrder, 'SampleOrder.close_reason' => '0', 'SampleOrder.status' => OCS_SAMPLE_ORDER_SENDED,
                'Req.create_time >=' => $mon_start_day, 'Req.create_time <' => $mon_end_day, 'Req.biz_id' => $g_BizId),
            'fields' => 'Req.id, Req.name, Req.quantity, Req.create_time, SampleOrder.id, SampleOrder.is_fee, SampleOrder.require_delivery_date, SampleOrder.delay_reason, SampleOrder.modify_users, SampleOrder.test_user_id'
        ));
        $is_fees = array();
        $test_users = array();
        $modify_users = array();
        foreach ($delivered_order as $deliver_order) {
            if (1 == $deliver_order['SampleOrder']['is_fee']) {
                $is_fees[] = $deliver_order;
            }
            if (!empty($deliver_order['SampleOrder']['modify_users'])) {
                $deliver_order['SampleOrder']['modify_users'] = str_replace('，', ',', $deliver_order['SampleOrder']['modify_users']);
                $deliver_order['SampleOrder']['modify_users'] = str_replace(' ', ',', $deliver_order['SampleOrder']['modify_users']);
                $deliver_order['SampleOrder']['modify_users'] = str_replace('、', ',', $deliver_order['SampleOrder']['modify_users']);
                $m_users = explode(',', $deliver_order['SampleOrder']['modify_users']);
                foreach ($m_users as $key => $user) {
                    if (array_key_exists($user, $modify_users)) {
                        $modify_users[$user] += $deliver_order['Req']['quantity'];
                    } else {
                        if (empty($modify_users[$user])) {
                            $modify_users[$user] = 0;
                        }
                        $modify_users[$user] += $deliver_order['Req']['quantity'];
                    }
                }
            }
            if (!empty($deliver_order['SampleOrder']['test_user_id'])) {
                $deliver_order['SampleOrder']['test_user_id'] = str_replace('，', ',', $deliver_order['SampleOrder']['test_user_id']);
                $deliver_order['SampleOrder']['test_user_id'] = str_replace(' ', ',', $deliver_order['SampleOrder']['test_user_id']);
                $deliver_order['SampleOrder']['test_user_id'] = str_replace('、', ',', $deliver_order['SampleOrder']['test_user_id']);
                $m_users = explode(',', $deliver_order['SampleOrder']['test_user_id']);
                foreach ($m_users as $key => $user) {
                    if (array_key_exists($user, $test_users)) {
                        $test_users[$user] += $deliver_order['Req']['quantity'];
                    } else {
                        if (empty($test_users[$user])) {
                            $test_users[$user] = 0;
                        }
                        $test_users[$user] += $deliver_order['Req']['quantity'];
                    }
                }
            }
        }

        $interarray = array_intersect_key($modify_users, $test_users);
        $work_statics = array();
        foreach ($interarray as $m_key => $m_value) {
            $work_statics[$m_key]['modify_num'] = $m_value;
            foreach ($test_users as $t_key => $t_value) {
                if ($t_key == $m_key) {
                    $work_statics[$m_key]['test_num'] = $t_value;
                }
            }
        }
        $diff_modify_users = array_diff_key($modify_users, $test_users);
        $diff_test_users = array_diff_key($test_users, $modify_users);
        foreach ($diff_modify_users as $m_key => $m_value) {
            $work_statics[$m_key]['modify_num'] = $m_value;
            $work_statics[$m_key]['test_num'] = 0;
        }
        foreach ($diff_test_users as $t_key => $t_value) {
            $work_statics[$t_key]['modify_num'] = 0;
            $work_statics[$t_key]['test_num'] = $t_value;
        }

        $delay_order = array();
        $delay_1day = array();
        $delay_2day = array();
        $delay_3day = array();
        $delay_3day_more = array();
        $quantity_more_5 = array();
        $in_time_order = array();
        $sum_delivered_orders = array();
        $start_time = strtotime($mon_start_day);
        $end_time = strtotime($mon_end_day);
        foreach ($deliver_orders as $deliver_order) {
            if (empty($deliver_order['DeliveryInfo']['delivery_time'])) {
                continue;
            }

            $requird_time = strtotime($deliver_order['SampleOrder']['require_delivery_date']);
            $delivery_time = strtotime($deliver_order['DeliveryInfo']['delivery_time']);

            //状态为“已发样”，申请数量>5，快递时间在指定时间段内
            if (OCS_SAMPLE_ORDER_SENDED == $deliver_order['SampleOrder']['status']
                && $deliver_order['Req']['quantity'] > 5 && !empty($deliver_order['DeliveryInfo']['delivery_time'])) {
                // 指定时间段内
                if($start_time <= $delivery_time && $delivery_time <= $end_time) {
                    $quantity_more_5[] = $deliver_order;
                }
            }
            if (OCS_SAMPLE_ORDER_SENDED == $deliver_order['SampleOrder']['status']) { //状态为“已发样”
                $sum_delivered_orders[] = $deliver_order;
                if ($start_time <= $delivery_time && $delivery_time <= $end_time) { // 快递时间需在查询时间段内
                    if (strtotime(date('Y-m-d', $requird_time)) < strtotime(date('Y-m-d', $delivery_time))) {
                        $delay_order[] = $deliver_order;
                        $delay_time = ($delivery_time - $requird_time) / (24 * 3600);

                        if ($delay_time < 1) {
                            $in_time_order[] = $deliver_order;
                        } else if ($delay_time >= 1 && $delay_time < 2) {
                            $delay_1day[] = $deliver_order;
                        } else if ($delay_time >= 2 && $delay_time < 3) {
                            $delay_2day[] = $deliver_order;
                        } else if ($delay_time >= 3 && $delay_time < 4) {
                            $delay_3day[] = $deliver_order;
                        } else if ($delay_time >= 4) {
                            $delay_3day_more[] = $deliver_order;
                        }
                    } else { // 超前发样也算作按时发样
                        $in_time_order[] = $deliver_order;
                    }
                }
            }
        }

        if (2 == $flag) {
            $data = array(
                'flag' => $flag,
                'date' => $date_start,
                'mon_delivery' => null == $mon_delivery[0][0]['total'] ? 0 : $mon_delivery[0][0]['total'],
                'mon_sample_order' => null == $mon_sample_order[0][0]['total'] ? 0 : $mon_sample_order[0][0]['total'],
                'power_mon_delivery' => null == $power_mon_delivery[0][0]['total'] ? 0 : $power_mon_delivery[0][0]['total'],
                'mon_start_day' => $mon_start_day,
                'mon_end_day' => $mon_end_day,
                'in_time_order' => $in_time_order,
                'all_delivery_order' => $deliver_orders,
                'delivered_orders' => $sum_delivered_orders,
                'delay_order' => $delay_order,
                'delay_1day' => $delay_1day,
                'delay_2day' => $delay_2day,
                'delay_3day' => $delay_3day,
                'delay_3day_more' => $delay_3day_more,
                'quantity_more_5' => $quantity_more_5,
                'is_fees' => $is_fees,
                // 'modify_users' => $modify_users,
                // 'test_users' => $test_users
                'work_statics' => $work_statics
            );
        } else {
            $data = array(
                'flag' => $flag,
                'date' => $date_start,
                'data_delivery' => null == $day_delivery[0][0]['total'] ? 0 : $day_delivery[0][0]['total'],
                'day_sample_order' => null == $day_sample_order[0][0]['total'] ? 0 : $day_sample_order[0][0]['total'],
                'power_data_delivery' => null == $power_day_delivery[0][0]['total'] ? 0 : $power_day_delivery[0][0]['total'],
                'mon_delivery' => null == $mon_delivery[0][0]['total'] ? 0 : $mon_delivery[0][0]['total'],
                'mon_sample_order' => null == $mon_sample_order[0][0]['total'] ? 0 : $mon_sample_order[0][0]['total'],
                'power_mon_delivery' => null == $power_mon_delivery[0][0]['total'] ? 0 : $power_mon_delivery[0][0]['total'],
                'mon_start_day' => $mon_start_day,
                'mon_end_day' => $mon_end_day,
                'in_time_order' => $in_time_order,
                'all_delivery_order' => $deliver_orders,
                'delivered_orders' => $sum_delivered_orders,
                'delay_order' => $delay_order,
                'delay_1day' => $delay_1day,
                'delay_2day' => $delay_2day,
                'delay_3day' => $delay_3day,
                'delay_3day_more' => $delay_3day_more,
                'quantity_more_5' => $quantity_more_5,
                'is_fees' => $is_fees,
                // 'modify_users' => $modify_users,
                // 'test_users' => $test_users
                'work_statics' => $work_statics
            );
        }

        $this->set('data', $data);

        //填单余量时间分析
        // 逻辑调整：统计状态为：已发样 的样品单，且按第一次发样时间减去商务审核时间作为余量时间 陈旭婷需求 by wuhuashan
        $Req_order_margins = $this->Req->find('all',array(
            'joins' => array(
                 array(
                    'table' => 'sample_orders',
                    'alias' => 'SampleOrder',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Req.rel_obj_id = SampleOrder.id',
                    )
                )
            ),
            'conditions' => array(
                'Req.model_def_id' => SampleOrder,
                'Req.create_time <' => $mon_end_day,
                'Req.create_time >' => $mon_start_day,
                'Req.biz_id' => $g_BizId,
                // 'Req.create_time < SampleOrder.require_delivery_date',
                'SampleOrder.status' => OCS_SAMPLE_ORDER_SENDED
            ),
            'fields' => 'Req.id,Req.create_user_id,SampleOrder.id,SampleOrder.require_delivery_date,Req.create_time,Req.business_audit_time'
        ));

        $sample_id_margins = array();
        foreach ($Req_order_margins as $req) {
            $sample_id_margins[] = $req['SampleOrder']['id'];
        }

        $samples_deliver_time_margins = $g_DeliveryInfo->find('all', array(
            'conditions' => array(
                'DeliveryInfo.model_def_id' => SampleOrder,
                'DeliveryInfo.rel_obj_id' => $sample_id_margins
            ),
            'fields' => 'DeliveryInfo.rel_obj_id, DeliveryInfo.delivery_time',
            'order' => 'DeliveryInfo.delivery_time'
        ));
        $sample_id_deliver_time_first = array();
        foreach ($samples_deliver_time_margins as $deliver) {
            if (empty($sample_id_deliver_time_first[$deliver['DeliveryInfo']['rel_obj_id']])) {
                $sample_id_deliver_time_first[$deliver['DeliveryInfo']['rel_obj_id']] = $deliver['DeliveryInfo']['delivery_time'];
            }
        }

        foreach ($Req_order_margins as $key => $req) {
            if (!empty($sample_id_deliver_time_first[$req['SampleOrder']['id']])) {
                $Req_order_margins[$key]['SampleOrder']['first_delivery_time'] = $sample_id_deliver_time_first[$req['SampleOrder']['id']];
            }
        }

        $user_order_num = array();
        foreach ($Req_order_margins as $order_key => $order_value) {
            if (!array_key_exists($order_value['Req']['create_user_id'],$user_order_num)) {
                $user_order_num[$order_value['Req']['create_user_id']] = 0 ;
            } else {
                $user_order_num[$order_value['Req']['create_user_id']] ++;
            }
        }
        arsort($user_order_num);
        $user_order_max_num = array_slice($user_order_num,0,10,true);
        $total_by_margin = array(0,0,0,0,0,0);
        $user = array();
        foreach ($Req_order_margins as $order_key => $order_value) {
            switch ($option) {
                case 'audit_dim': //审核时间 － 创建时间
                    if (empty($order_value['Req']['business_audit_time']) || empty($order_value['Req']['create_time'])) {
                        continue;
                    }
                    $margin_time = (strtotime($order_value['Req']['business_audit_time']) - strtotime($order_value['Req']['create_time']))/ (24 * 3600);
                break;
                case 'req_sample_dim': //需求发样 － 审核时间
                    if (empty($order_value['SampleOrder']['require_delivery_date']) || empty($order_value['Req']['business_audit_time'])) {
                        continue;
                    }
                    $margin_time = (strtotime($order_value['SampleOrder']['require_delivery_date']) - strtotime($order_value['Req']['business_audit_time']))/ (24 * 3600);
                break;
                case 'create_sample_dim': //需求发样 － 创建时间
                    if (empty($order_value['SampleOrder']['require_delivery_date']) || empty($order_value['Req']['create_time'])) {
                        continue;
                    }
                    $margin_time = (strtotime($order_value['SampleOrder']['require_delivery_date']) - strtotime($order_value['Req']['create_time']))/ (24 * 3600);
                break;
                default: //实际发样 － 审核时间
                    if (empty($order_value['SampleOrder']['first_delivery_time']) || empty($order_value['Req']['business_audit_time'])) {
                        continue;
                    }
                    $margin_time = (strtotime($order_value['SampleOrder']['first_delivery_time']) - strtotime($order_value['Req']['business_audit_time']))/ (24 * 3600);
                break;
            }
            if (array_key_exists($order_value['Req']['create_user_id'],$user_order_max_num)) {
                if(!isset($user_order_max_num[$order_value['Req']['create_user_id']]['flag'])) {
                    $user_order_max_num[$order_value['Req']['create_user_id']] = array(0,0,0,0,0,0);
                    $user_order_max_num[$order_value['Req']['create_user_id']]['flag'] = true;
                }
            }
            else {
                if(!isset($user_order_max_num['其他'])) {
                    $user_order_max_num['其他'] = array(0,0,0,0,0,0);
                }
            }
            if ($margin_time > 0 && $margin_time <= 0.5) {
                if (array_key_exists($order_value['Req']['create_user_id'],$user_order_max_num)) {
                    $user_order_max_num[$order_value['Req']['create_user_id']][0]++;
                    $user_order_max_num[$order_value['Req']['create_user_id']][5]++;
                    $total_by_margin[5]++;
                } else {
                    $user_order_max_num['其他'][0]++;
                    $user_order_max_num['其他'][5]++;
                    $total_by_margin[5]++;
                }
                $total_by_margin[0]++;
            }
            //填单余量 >0.5 <=1
            if ($margin_time > 0.5 && $margin_time <= 1) {
                if (array_key_exists($order_value['Req']['create_user_id'],$user_order_max_num)) {
                    $user_order_max_num[$order_value['Req']['create_user_id']][1]++;
                    $user_order_max_num[$order_value['Req']['create_user_id']][5]++;
                    $total_by_margin[5]++;
                } else {
                    $user_order_max_num['其他'][1]++;
                    $user_order_max_num['其他'][5]++;
                    $total_by_margin[5]++;
                }
                $total_by_margin[1]++;
            }
            //填单余量 >1 <=2
            if ($margin_time > 1 && $margin_time <= 2) {
                if (array_key_exists($order_value['Req']['create_user_id'],$user_order_max_num)) {
                    $user_order_max_num[$order_value['Req']['create_user_id']][2]++;
                    $user_order_max_num[$order_value['Req']['create_user_id']][5]++;
                    $total_by_margin[5]++;
                } else {
                    $user_order_max_num['其他'][2]++;
                    $user_order_max_num['其他'][5]++;
                    $total_by_margin[5]++;
                }
                $total_by_margin[2]++;
            }
            //填单余量 >2 <= 10
            if ($margin_time > 2 && $margin_time <= 10) {
                if (array_key_exists($order_value['Req']['create_user_id'],$user_order_max_num)) {
                    $user_order_max_num[$order_value['Req']['create_user_id']][3]++;
                    $user_order_max_num[$order_value['Req']['create_user_id']][5]++;
                    $total_by_margin[5]++;
                } else {
                    $user_order_max_num['其他'][3]++;
                    $user_order_max_num['其他'][5]++;
                    $total_by_margin[5]++;
                }
                $total_by_margin[3]++;
            }
            //填单余量  >10
            if ($margin_time > 10) {
                if (array_key_exists($order_value['Req']['create_user_id'],$user_order_max_num)) {
                    $user_order_max_num[$order_value['Req']['create_user_id']][4]++;
                    $user_order_max_num[$order_value['Req']['create_user_id']][5]++;
                    $total_by_margin[5]++;
                } else {
                    $user_order_max_num['其他'][4]++;
                    $user_order_max_num['其他'][5]++;
                    $total_by_margin[5]++;
                }
                $total_by_margin[4]++;
            }

        }
        $user = array();
        foreach ($user_order_max_num as $key => $value) {
            if ($key !='其他') {
                $users = $this->User->find('first',array(
                        'conditions' => array('id' => $key),
                        'fields' => 'User.realname'
                    ));
                if (!empty($user_order_max_num)) {
                    $user[$key] = $users['User']['realname'];
                }
            }
        }
        //总占比
        $total_percent = array(0,0,0,0,0,0);
        for ($i=0; $i<count($total_percent); $i++) {
            if ($total_by_margin[5] == 0) {
                $total_percent[$i] = 0 ;
                continue;
            }
            $total_percent[$i] = $total_by_margin[$i] /$total_by_margin[5];
        }
        $user_order_max_num['总计'] = $total_by_margin;
        $user_order_max_num['占比'] = $total_percent;
        $this->set('user_order_max_num',$user_order_max_num);
        $this->set('user',$user);


        if (2 != $flag) {
            $day_time = strtotime(date('Y-m-d', strtotime($date_start)));
            $day_order = $this->Req->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'sample_orders',
                        'alias' => 'SampleOrder',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'Req.rel_obj_id = SampleOrder.id'
                        )
                    )
                ),
                'conditions' => array('Req.model_def_id' => SampleOrder, 'SampleOrder.close_reason' => '0', 'SampleOrder.status !=' => '70', // 样品单状态不能为取消发样
                    'Req.create_time >=' => date('Y-m-d', $day_time), 'Req.create_time <' => date('Y-m-d H:i:s', $day_time + 86400), 'Req.biz_id' => $g_BizId),
                'fields' => 'Req.id,Req.quantity,Req.create_time, SampleOrder.id, SampleOrder.require_delivery_date'
            ));

            //需求分析
            // 调整为统计一个月内的需求数据 by wuhuashan
            $day_Detail_orders = array();
            foreach ($deliver_orders as $req) {
                $hours = date('H', strtotime($req['Req']['create_time']));
                if ($hours < 11) {
                    $day_Detail_orders[0][] = $req;
                } elseif ($hours < 14) {
                    $day_Detail_orders[1][] = $req;
                } elseif ($hours < 20) {
                    $day_Detail_orders[2][] = $req;
                } else {
                    $day_Detail_orders[3][] = $req;
                }
            }

            // $date_during =array(
            //     $day_time,$day_time + 11*3600,$day_time + 14*3600,$day_time+20*3600,$day_time+86400
            // );
            // for ($i = 0 ; $i < 4; $i++) {
            //     $day_Detail_orders[$i] = $this ->Req ->find('all',array(
            //         'joins' => array(
            //             array(
            //                 'table' => 'delivery_infos',
            //                 'alias' => 'DeliveryInfo',
            //                 'type' => 'LEFT',
            //                 'conditions' => array(
            //                     'Req.delivery_info_id = DeliveryInfo.id'
            //                 )
            //             ),
            //             array(
            //                 'table' => 'sample_orders',
            //                 'alias' => 'SampleOrder',
            //                 'type' => 'LEFT',
            //                 'conditions' => array(
            //                     'Req.rel_obj_id = SampleOrder.id'
            //                 )
            //             )
            //         ),
            //         'conditions' => array('Req.model_def_id'=>SampleOrder ,'Req.create_time < '=> date('Y-m-d H:i:s', $date_during[$i+1]),'Req.create_time >= ' => date('Y-m-d H:i:s', $date_during[$i]),'Req.biz_id' =>$g_BizId),
            //         'fields' => array('Req.id','Req.quantity','Req.create_time','SampleOrder.id','SampleOrder.is_fee','DeliveryInfo.delivery_time','SampleOrder.require_delivery_date')
            //         )
            //     );
            // }
            $day_sample_order_qty_sum = array(0, 0, 0, 0);
            $day_sample_order_sum = array(0, 0, 0, 0);
            $day_sample_order_delay_1day = array(0, 0, 0, 0);
            $day_sample_order_delay_2day = array(0, 0, 0, 0);
            $day_sample_order_delay_3day = array(0, 0, 0, 0);
            $quantity_sample_order_is_fees_sum = array(0, 0, 0, 0);
            $quantity_sample_order_more_5_sum = array(0, 0, 0, 0);

            foreach ($day_Detail_orders as $key => $day_Detail_order) {
                if (!empty($day_Detail_order[$key])) {
                    foreach ($day_Detail_order as $day_detail) {
                        $day_sample_order_qty_sum[$key] = $day_detail['Req']['quantity'] + $day_sample_order_qty_sum[$key];
                        $day_sample_order_sum[$key] = $day_sample_order_sum[$key] + 1;
                        if ($day_detail['SampleOrder']['is_fee'] == 1) {
                            $quantity_sample_order_is_fees_sum[$key] = $quantity_sample_order_is_fees_sum[$key] + 1;
                        }
                        if ($day_detail['Req']['quantity'] > 5) {
                            $quantity_sample_order_more_5_sum[$key] = $quantity_sample_order_more_5_sum[$key] + 1;
                        }
                        if (!empty($day_detail['DeliveryInfo']['delivery_time'])) {
                            $day_requird_time = strtotime($day_detail['SampleOrder']['require_delivery_date']);
                            $day_delivery_time = strtotime($day_detail['DeliveryInfo']['delivery_time']);
                            if (strtotime(date('Y-m-d', $day_requird_time)) < strtotime(date('Y-m-d', $day_delivery_time))) {
                                $day_delivery_delay_time = ($day_delivery_time - $day_requird_time) / (24 * 3600);
                                if ($day_delivery_delay_time > 0 && $day_delivery_delay_time <= 1) {
                                    $day_sample_order_delay_1day[$key] = $day_sample_order_delay_1day[$key] + 1;
                                }
                                if ($day_delivery_delay_time > 1 && $day_delivery_delay_time <= 2) {
                                    $day_sample_order_delay_2day[$key] = $day_sample_order_delay_2day[$key] + 1;
                                }
                                if ($day_delivery_delay_time > 2 && $day_delivery_delay_time <= 3) {
                                    $day_sample_order_delay_3day[$key] = $day_sample_order_delay_3day[$key] + 1;
                                }
                            }
                        }
                    }
                }
            }
            $day_sample_order_qty_total = 0;
            foreach ($day_sample_order_qty_sum as $value) {
                $day_sample_order_qty_total = $day_sample_order_qty_total + $value;
            }
            $day_sample_order_total = 0;
            foreach ($day_sample_order_sum as $value) {
                $day_sample_order_total = $day_sample_order_total + $value;
            }
            $title = array('当天11点前填单', '当天11-14点前填单', '当天14-20点前填单', '当天20以后填单');
            $require_day = array();
            if (!empty($day_sample_order_qty_sum)) {
                foreach ($day_sample_order_qty_sum as $id => $temp) {
                    $data = array(
                        'title' => $title[$id],
                        'day_sample_order_qty_sum' => $day_sample_order_qty_sum[$id],
                        'day_sample_order_sum' => $day_sample_order_sum[$id],
                        'day_sample_order_qty_total' => $day_sample_order_qty_total,
                        'day_sample_order_total' => $day_sample_order_total,
                        'quantity_sample_order_more_5_sum' => $quantity_sample_order_more_5_sum[$id],
                        'quantity_sample_order_is_fees_sum' => $quantity_sample_order_is_fees_sum[$id],
                        'day_sample_order_delay_1day' => $day_sample_order_delay_1day[$id],
                        'day_sample_order_delay_2day' => $day_sample_order_delay_2day[$id],
                        'day_sample_order_delay_3day' => $day_sample_order_delay_3day[$id]
                    );
                    $require_day[] = $data;
                }
            }
            $this->set('require_day', $require_day);

            $sample_ids = array();
            foreach ($delivered_order as $order) {
                $sample_ids[] = $order['SampleOrder']['id'];
            }

            $delivers = $g_DeliveryInfo->find('all', array(
                'conditions' => array('DeliveryInfo.model_def_id' => SampleOrder, 'DeliveryInfo.rel_obj_id' => $sample_ids),
                'fields' => 'DeliveryInfo.rel_obj_id, DeliveryInfo.quantity, DeliveryInfo.delivery_time'
            ));
            $deliver_data = array();
            foreach ($delivers as $deliver) {
                $deliver = $deliver['DeliveryInfo'];
                $deliver_data[$deliver['rel_obj_id']][] = $deliver;
            }

            $speed_deliver = array(
                'before_11' => 0,
                'before_14' => 0,
                'before_16' => 0,
            );

            foreach ($delivered_order as $order) {
                $create_date = strtotime(date('Y-m-d', strtotime($order['Req']['create_time'])));
                $create_time = strtotime($order['Req']['create_time']);
                $s_id = $order['SampleOrder']['id'];
                //当天（11点前）申请当天发样
                if ($create_time <= $create_date + 11 * 3600) {
                    if (!empty($deliver_data[$s_id])) {
                        foreach ($deliver_data[$s_id] as $deliver) {
                            $deliver['delivery_time'] = strtotime($deliver['delivery_time']);
                            if ($deliver['delivery_time'] >= $create_date && $deliver['delivery_time'] < $create_date + 24 * 3600) {
                                $speed_deliver['before_11'] += $deliver['quantity'];
                            }
                        }
                    }
                }
                // 当天（2点前）申请第二天发样占比
                if ($create_time <= $create_date + 14 * 3600) {
                    if (!empty($deliver_data[$s_id])) {
                        foreach ($deliver_data[$s_id] as $deliver) {
                            $deliver['delivery_time'] = strtotime($deliver['delivery_time']);
                            if ($deliver['delivery_time'] >= $create_date + 24 * 3600 && $deliver['delivery_time'] < $create_date + 2 * 24 * 3600) {
                                $speed_deliver['before_14'] += $deliver['quantity'];
                            }
                        }
                    }
                }
                // 当天（4点前）申请第三天发样占比
                if ($create_time <= $create_date + 16 * 3600) {
                    if (!empty($deliver_data[$s_id])) {
                        foreach ($deliver_data[$s_id] as $deliver) {
                            $deliver['delivery_time'] = strtotime($deliver['delivery_time']);
                            if ($deliver['delivery_time'] >= $create_date + 2 * 24 * 3600 && $deliver['delivery_time'] < $create_date + 3 * 24 * 3600) {
                                $speed_deliver['before_16'] += $deliver['quantity'];
                            }
                        }
                    }
                }
            }
            $this->set('speed_deliver', $speed_deliver);

        }
    }

    function view_close_sample_order() {
        global $g_BizId;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Tasks = $g_Commons->GlobalController('Tasks');
        // $g_ModelDefs = $g_Commons->GlobalController('ModelDefs');
        $g_Tasks->Task->recursive = -1;

        $this->paginate['joins'][] = array(
            'table' => 'sample_orders',
            'alias' => 'SampleOrder',
            'type' => 'LEFT',
            'conditions' => array(
                'Req.rel_obj_id = SampleOrder.id'
            )
        );
        $this->paginate['conditions'] = 'SampleOrder.close_reason != 0 AND Req.model_def_id = ' . SampleOrder; // 获取关闭的样品单
        $this->paginate['fields'] = 'Req.*';
        $reqs = $this->paginate();
        // $req_model = $g_ModelDefs->ModelDef->findByName('Reqs');
        $req_ids = array();
        foreach ($reqs as $key => $val) {
            $req_ids[] = $val['Req']['id'];
        }
        $task_ids = $g_Tasks->Task->find('list', array(
                    'conditions' => array(
                        'Task.model_def_id' => Req,
                        'Task.rel_obj_id' => $req_ids
                    ),
                    'fields' => 'Task.rel_obj_id, Task.id'
                ));
        foreach ($reqs as $key => $val) {
            $reqs[$key]['Req']['task_id'] = $task_ids[$val['Req']['id']];
        }
        $UserPrefData = $g_AttrDics->setUserPrefData($reqs, $this->modelName, array('Req' => 'SampleOrder'), 3, 0);
        $this->set('UserPrefData', $UserPrefData);
    }

    function pop_split_contract_view($contract_id = null) {
        global $g_BizId;
        global $g_Commons;
        // $g_ModelDefs = $g_Commons->GlobalController('ModelDefs');
        // $g_ModelDefs->ModelDef->recursive = -1;
        $this->Req->recursive = -1;

        // $contract_model = $g_ModelDefs->ModelDef->findByName('Contracts');
        // $req = $this->Req->findByModelDefIdAndRelObjId($contract_model['ModelDef']['id'], $contract_id);
        $req = $this->Req->find('first', array(
                    'conditions' => array(
                        'Req.model_def_id' => Contract,
                        'Req.rel_obj_id' => $contract_id,
                        'Req.parent_id' => 0 // 非虚拟订单
                    ),
                    'fields' => 'Req.name, Req.quantity'
                ));
        if (empty($req)) {
            $this->set('data', array('error' => '1', 'message' => '查无此单'));
            return;
        }
        $CRM_status = $this->WSGetContractStatusFormCRM($contract_id);
        if ($CRM_status['success'] != 1) {
            $this->set('data', array('error' => '1', 'message' => 'CRM连接失败', 'contract_id' => $contract_id, 'name' => $req['Req']['name']));
            return;
        }
        $message = '';
        $CRM_status['datas'] = json_decode($CRM_status['datas']);
        if (0 == $CRM_status['datas']->IsHasData) {
            $message = 'CRM无此订单数据';
        }
        if (1004 == $CRM_status['datas']->Status) { // hardcode 1004下生产不可拆单
            $this->set('data', array('error' => '1', 'message' => '此订单已下达生产', 'contract_id' => $contract_id, 'name' => $req['Req']['name']));
            return;
        }
        if (1 == $CRM_status['datas']->IsValid) {
            $this->set('data', array('error' => '1', 'message' => '此订单已生效，不可拆单', 'contract_id' => $contract_id, 'name' => $req['Req']['name']));
            return;
        }
        $data = array('error' => '0', 'message' => $message, 'contract_id' => $contract_id, 'name' => $req['Req']['name'], 'quantity' => $req['Req']['quantity'], 'StockNumber' => $CRM_status['datas']->StockNumber, 'ManufactureNumber' => $CRM_status['datas']->ManufactureNumber);
        $this->set('data', $data);
    }

    function save_split_contract($contract_id = null) {
        $this->autoRender = false;

        global $g_BizId;
        global $g_Commons;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        // $g_ModelDefs = $g_Commons->GlobalController('ModelDefs');
        // $g_ModelDefs->ModelDef->recursive = -1;
        $this->Req->recursive = -1;
        global $g_UserId;

        // $contract_model = $g_ModelDefs->ModelDef->findByName('Contracts');
        // $req = $this->Req->findByModelDefIdAndRelObjId($contract_model['ModelDef']['id'], $contract_id);
        $req = $this->Req->find('first', array(
            'conditions' => array(
                'Req.model_def_id' => Contract,
                'Req.rel_obj_id' => $contract_id,
                'Req.parent_id' => 0 // 非虚拟订单
            ),
                // 'fields' => 'Req.name, Req.quantity'
        ));
        $contract = $g_Contract->findById($contract_id);
        $contract_id_array = array($contract_id);
        if (empty($req) || empty($contract)) {
            echo -1;
            return;
        }
        if ($this->request->is('post') && !empty($this->request->data)) {
            $quantity = $this->request->data['quantity'];
            $StockNumber = null;
            if (!empty($this->request->data['StockNumber'])) {
                $StockNumber = $this->request->data['StockNumber'];
            }
            $ManufactureNumber = null;
            if (!empty($this->request->data['ManufactureNumber'])) {
                $ManufactureNumber = $this->request->data['ManufactureNumber'];
            }
            $AllQuantity = 0;
            foreach ($quantity as $one) {
                if (0 == $one) {
                    echo -1;
                    return;
                }
                $AllQuantity += $one;
            }
            if ($AllQuantity != $req['Req']['quantity']) {
                echo -1;
                return;
            }
            $req_id = $req['Req']['id'];
            $counter = 0;
            $name = array();
            $split_array = array();
            foreach ($quantity as $one) {
                if (0 == $counter) {
                    $name = explode('-', $req['Req']['name']);
                    $name[3] = $one;
                    $req['Req']['quantity'] = $one;
                    $req['Req']['amount'] = $one * $req['Req']['price'];
                    $req['Req']['foreign_amount'] = $one * $req['Req']['foreign_price'];
                    $req['Req']['name'] = implode('-', $name);
                    $req['Req']['update_user_id'] = $g_UserId;
                    $req['Req']['update_time'] = date("Y-m-d H:i:s");

                    if (isset($req['Req']['id']) && isset($req['Req']['product_id'])) {//检查是否有更改产品代码
                        $this->CheckAndNotifyProductChange($req['Req']['id'], $req['Req']['product_id']);
                    }
                    $this->Req->save($req['Req']);
                    $this->saveReqVersion($this->Req->id);
                    //// 保存拆单数组
                    $split_one = array('SourceID' => $contract_id, 'Quantity' => $one);
                    if (null != $StockNumber) {
                        $split_one['StockNumber'] = $StockNumber[$counter];
                    }
                    if (null != $ManufactureNumber) {
                        $split_one['ManufactureNumber'] = $ManufactureNumber[$counter];
                    }
                    $split_array[] = $split_one;
                } else {
                    if (isset($contract['Contract']['id'])) {
                        unset($contract['Contract']['id']);
                    }
                    $contract['Contract']['is_crm_fail'] = 0;
                    $contract['Contract']['crm_contract_id'] = 0;
                    $contract['Contract']['crm_fail_reason'] = '';
                    $g_Contract->create();
                    $g_Contract->save($contract['Contract']);

                    $contract_id_array[] = $g_Contract->id;
                    if (isset($req['Req']['id'])) {
                        unset($req['Req']['id']);
                    }
                    $name[3] = $one;
                    $req['Req']['quantity'] = $one;
                    $req['Req']['amount'] = $one * $req['Req']['price'];
                    $req['Req']['foreign_amount'] = $one * $req['Req']['foreign_price'];
                    $req['Req']['name'] = implode('-', $name);
                    $req['Req']['is_has_task'] = 0;
                    $req['Req']['create_user_id'] = $g_UserId;
                    $req['Req']['update_user_id'] = $g_UserId;
                    $req['Req']['create_time'] = date("Y-m-d H:i:s");
                    $req['Req']['update_time'] = date("Y-m-d H:i:s");
                    $req['Req']['rel_obj_id'] = $g_Contract->id;
                    $req['Req']['split_source_id'] = $req_id;
                    $this->Req->create();
                    $this->Req->save($req['Req']);
                    $this->saveReqVersion($this->Req->id);
                    // 保存拆单数组
                    $split_one = array('SourceID' => $g_Contract->id, 'Quantity' => $one);
                    if (null != $StockNumber) {
                        $split_one['StockNumber'] = $StockNumber[$counter];
                    }
                    if (null != $ManufactureNumber) {
                        $split_one['ManufactureNumber'] = $ManufactureNumber[$counter];
                    }
                    $split_array[] = $split_one;
                }
                $counter++;
            }
            $result = $this->WSSplitCRM($contract_id, $split_array);
            if (1 == $result['success']) {
                echo 1;
            } else {
                foreach ($contract_id_array as $contract_save_id) {
                    $contract_save = $g_Contract->findById($contract_save_id);
                    $contract_save['Contract']['is_crm_fail'] = 1;
                    $g_Contract->save($contract_save['Contract']);
                }
                echo -2;
            }
        }
    }

    function get_CRM_contract_status($ContractIds) {
        global $g_BizId;
        global $g_Commons;

        $ContractCRMStatus = array();
        foreach ($ContractIds as $contract_id) {
            $ContractCRMStatus[$contract_id] = $this->WSGetContractStatusFormCRM($contract_id);
        }
        $web_service = array();
        foreach ($ContractCRMStatus as $contract_id => $One) {
            if (1 != $One['success']) {
                $web_service['error_message'] = $One['message'];
            }
            $datas = json_decode($One['datas']);
            if (!empty($datas)) {
                foreach ($datas as $field => $value) {
                    $web_service[$field][] = $value;
                }
            }
        }
        if (!empty($web_service) && !isset($web_service['error_message'])) {
            $conflict = 0;
            foreach ($web_service['Status'] as $crm_status) {
                if ($crm_status != $web_service['Status'][0]) {
                    $conflict = 1;
                    break;
                }
            }
            if (1 == $conflict) {
                $web_service['Status'][0] = 'Conflict'; // 多个订单在CRM状态不一致
                $web_service['StatusString'][0] = '多个订单状态不一致';
            }
        }
        return $web_service;
    }

    // 转换sw_atom_ids_json字段
    public function getSwAtomNamesByAtomIDs($ProdSwAtomIds, $lang = null) {
        global $g_BizId;
        global $g_Commons;
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdAttrs->ProdAttr->recursive = -1;

        $ProdSwAtomIds = json_decode($ProdSwAtomIds);
        $result = array();
        if (!empty($ProdSwAtomIds)) {
            foreach ($ProdSwAtomIds as $key => $value) {
                $ProdAttr = $g_ProdAttrs->ProdAttr->findById($key);
                foreach ($value as $atomId) {
                    if (is_numeric($atomId)) {
                        $Atom = $g_Atoms->Atom->findById($atomId);
                        $Atom_name = $Atom['Atom']['name'];
                        if ('en' == $lang && '' != $Atom['Atom']['name_en']) {
                            $Atom_name = $Atom['Atom']['name_en'];
                        }
                        if (!isset($result[$ProdAttr['ProdAttr']['alias']])) {
                            $result[$ProdAttr['ProdAttr']['alias']] = $Atom_name;
                        } else {
                            $result[$ProdAttr['ProdAttr']['alias']] .= ',' . $Atom_name;
                        }
                    } else {
                        if (!isset($result[$ProdAttr['ProdAttr']['alias']])) {
                            $result[$ProdAttr['ProdAttr']['alias']] = '';
                        } else {
                            $result[$ProdAttr['ProdAttr']['alias']] .= ',';
                        }
                    }
                }
            }
        }
        return $result;
    }

    // 调用CRM拆单接口
    function WSSplitCRM($contract_id, $split_options) {
        global $g_BizId;
        global $g_Commons;
        global $g_WebServices;

        $g_WebServices->OCS_get_ws_client_config();

        global $globalCRMWebServiceUrls;
        if (!isset($globalCRMWebServiceUrls['connect']) || !$globalCRMWebServiceUrls['connect']) {
            return true;
        }
        if (empty($globalCRMWebServiceUrls['Contract']['hashes']['splitContract'])) {
            return true;
        }
        $client = new soap_client($globalCRMWebServiceUrls['Contract']['url']);
        $client->soap_defencoding = 'utf-8';
        $client->decode_utf8 = false;
        $client->xml_encoding = 'utf-8';
        $client->response_timeout = 60;
        global $g_UserRealName;
        $params = array('vstr' => $globalCRMWebServiceUrls['Contract']['hashes']['splitContract'],
            'org_str' => 'TVCRM', 'user_realname' => $g_UserRealName, 'split_datas' => json_encode($split_options),
            'split_source_type' => 'OCS', 'split_source_id' => $contract_id);
        return $client->call('splitContract', $params);
    }

    // 获取CRM订单状态数据接口
    public function WSGetContractStatusFormCRM($ContractId) {
        global $g_BizId;
        global $g_Commons;
        global $g_WebServices;

        $g_WebServices->OCS_get_ws_client_config();
        global $globalCRMWebServiceUrls;
        $result = array();
        if (1 == $globalCRMWebServiceUrls['connect']) {
            $client = new soap_client($globalCRMWebServiceUrls['Contract']['url']);
            $client->soap_defencoding = 'utf-8';
            $client->decode_utf8 = false;
            $client->xml_encoding = 'utf-8';
            $client->response_timeout = 60;
            $params_getContractStatusBySourceInfo = array('vstr' => $globalCRMWebServiceUrls['Contract']['hashes']['getContractStatusBySourceInfo'],
                'org_str' => 'TVCRM', 'SourceTypeStr' => 'OCS', 'SourceID' => $ContractId);
            $result = $client->call('getContractStatusBySourceInfo', $params_getContractStatusBySourceInfo);
        }
        return $result;
    }

    // 往CRM写订单数据的接口
    public function WSWriteContractToCRM($ContractId) {
        global $g_BizId;
        global $g_Commons;
        global $g_WebServices;

        $g_WebServices->OCS_get_ws_client_config();

        global $globalCRMWebServiceUrls;
        if (!isset($globalCRMWebServiceUrls['connect']) || !$globalCRMWebServiceUrls['connect']) {
            return true;
        }
        if (empty($globalCRMWebServiceUrls['Contract']['hashes']['addContract'])) {
            return true;
        }
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_Accounts->Account->recursive = -1;
        $g_Depts = $g_Commons->GlobalController('Depts');
        $g_Depts->Dept->recursive = -1;
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Enums->Enum->recursive = -1;
        // $g_ModelDefs = $g_Commons->GlobalController('ModelDefs');
        // $g_ModelDefs->ModelDef->recursive = -1;
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Users->User->recursive = -1;
        // $contract_model = $g_ModelDefs->ModelDef->findByName('Contracts');
        $contract_data = $g_Contract->find('first', array(
            'joins' => array(
                array(
                    'table' => 'reqs',
                    'alias' => 'Req',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Req.rel_obj_id = Contract.id',
                        'Req.model_def_id = ' . Contract,
                        'Req.parent_id = 0',
                    )
                )
            ),
            'conditions' => array(
                'Contract.id' => $ContractId
            ),
            'fields' => '*'
        ));

        $cont_crm_ws = array();
        // $account = $g_Accounts->Account->findById($contract_data['Req']['account_id']);
        $account = $g_Accounts->Account->find('first', array(
                    'conditions' => array('Account.id' => $contract_data['Req']['account_id']),
                    'fields' => 'Account.source_type, Account.source_id'
                ));
        if ('TVCRM' == $account['Account']['source_type']) {
            $cont_crm_ws['AccountID'] = $account['Account']['source_id'];
        } else {
            return __('Can not find Account!');
        }

        if ($contract_data['Contract']['mid_account_id'] > 0) {
            // $mid_account = $g_Accounts->Account->findById($contract_data['Contract']['mid_account_id']);
            $mid_account = $g_Accounts->Account->find('first', array(
                        'conditions' => array('Account.id' => $contract_data['Contract']['mid_account_id']),
                        'fields' => 'Account.source_type, Account.source_id'
                    ));
            if ('TVCRM' == $mid_account['Account']['source_type']) {
                $cont_crm_ws['USAccountID'] = $mid_account['Account']['source_id'];
            } else {
                return __('Can not find Account!');
            }
        }
        $cont_crm_ws['SourceTypeStr'] = 'OCS';
        $cont_crm_ws['SourceID'] = $contract_data['Contract']['id']; //待考虑：可能要用表体ID
        $cont_crm_ws['OwnerName'] = $g_Users->User->findMainField($contract_data['Req']['owner_user_id']);
        $cont_crm_ws['SalesName'] = $g_Users->User->findMainField($contract_data['Req']['sales_user_id']);
        global $g_UserRealName;
        $cont_crm_ws['UserName'] = $g_UserRealName;
        $cont_crm_ws['Name'] = $contract_data['Req']['name'];
        $cont_crm_ws['StartDate'] = $contract_data['Contract']['order_time'];
        $cont_crm_ws['Quantity'] = $contract_data['Req']['quantity'];
        $cont_crm_ws['ContractNo'] = $contract_data['Contract']['contract_no'];
        $cont_crm_ws['TypeID'] = $contract_data['Contract']['type_id'];
        $cont_crm_ws['ExchangeRatio'] = $contract_data['Req']['exchange_ratio'];
        $cont_crm_ws['CurrencyID'] = $contract_data['Req']['currency_id']; //注意：OCS-CRM的汇率内码需要保持一致，或者改用mapping的形式
        $cont_crm_ws['address'] = $contract_data['Contract']['address'];
        $Dept = $g_Depts->Dept->findById($contract_data['Req']['com_dept_id']);
        $cont_crm_ws['DepartmentID'] = $Dept['Dept']['source_id'];
        $cont_crm_ws['ModifiedTime'] = date("Y-m-d H:i:s");

        $subObj_Detail = array();
        if (0 != $contract_data['Req']['invc_prod_name']) {
            $invc_prod_name = $g_Enums->Enum->find('first', array(
                        'conditions' => array('Enum.dict_name' => 'Req.invc_prod_name', 'Enum.value' => $contract_data['Req']['invc_prod_name']),
                        'fields' => array('Enum.alias', 'Enum.label')
                    ));
            $subObj_Detail['InvcProdNameAlias'] = $invc_prod_name['Enum']['alias'];
            $subObj_Detail['InvcProdName'] = $invc_prod_name['Enum']['label'];
        }
        $subObj_Detail['isTryProduce'] = $contract_data['Contract']['is_try_produce'];
        $subObj_Detail['ProductOCSID'] = $contract_data['Req']['product_id'];
        $subObj_Detail['Quantity'] = $contract_data['Req']['quantity'];
        $subObj_Detail['FinalPrice'] = $contract_data['Req']['price'];
        $subObj_Detail['TechPrice'] = $contract_data['Contract']['tech_price'];
        $subObj_Detail['Amount'] = $contract_data['Req']['amount'];
        $subObj_Detail['NetAmount'] = $contract_data['Req']['amount'];
        $subObj_Detail['RequiredDeliverDate'] = $contract_data['Contract']['delivety_time'];

        $subObj_Detail['AccountContractNo'] = $contract_data['Contract']['account_cno'];
        $subObj_Detail['AccountMNo'] = $contract_data['Contract']['account_mno'];
        $subObj_Detail['AccountBatchNo'] = $contract_data['Contract']['account_bno'];
        $subObj_Detail['ReservedProductNo'] = $contract_data['Contract']['free_spare_qty'];
        $subObj_Detail['ExtBoard'] = $contract_data['Req']['ext_3rd_party_prods'];
//        $subObj_Detail['BurnKeyStores'] = $contract_data['Req']['burn_key_store_ids'];
        $finalAaccount = $g_Accounts->findAccountById($contract_data['Contract']['final_account_id']);
        if (!empty($finalAaccount['Account']['source_type']) && 'TVCRM' == $finalAaccount['Account']['source_type']) {
            $subObj_Detail['FinalAccountID'] = $finalAaccount['Account']['source_id'];
        } else {
            $subObj_Detail['FinalAccountID'] = 0;
        }
        $subObj_Detail['isCKD'] = $contract_data['Contract']['is_ckd'];
        $subObj_Detail['isStockInv'] = $contract_data['Contract']['is_has_stock'];
        $subObj_Detail['isTransFee'] = $contract_data['Contract']['is_inc_trans_fee'];
        $subObj_Detail['Box'] = $contract_data['Contract']['package_type'];
        $subObj_Detail['FinalProd'] = $contract_data['Contract']['account_prod_name'];
        $subObj_Detail['pp'] = $contract_data['Contract']['account_brand'];
        $subObj_Detail['ReviewNote'] = $contract_data['Contract']['review_remark'];
        // $subObj_Detail['CanReplacedM'] = $contract_data['Contract']['mtrl_substitute']; 可替代物料不用再填也不传CRM
        if (isset($contract_data['Contract']['account_power'])) {
            $subObj_Detail['AccountPower'] = $contract_data['Contract']['account_power'];
        }
        if (isset($contract_data['Contract']['account_power_price'])) {
            $subObj_Detail['AccountPowerPrice'] = $contract_data['Contract']['account_power_price'];
        }
        if (isset($contract_data['Req']['foreign_price'])) {
            $subObj_Detail['ForeignFinalPrice'] = $contract_data['Req']['foreign_price'];
            $subObj_Detail['ForeignAmount'] = $contract_data['Req']['foreign_amount'];
        }
        if (isset($contract_data['Req']['remark'])) {
            $subObj_Detail['remark'] = $contract_data['Req']['remark']; //SW_Note
        }
        if (isset($contract_data['Contract']['plm_pre_bill_no'])) {
            $subObj_Detail['PlmPreBillNo'] = $contract_data['Contract']['plm_pre_bill_no']; // PLM申请单号
        }
        $sw_atom_names = $this->getSwAtomNamesByAtomIDs($contract_data['Req']['sw_atom_ids_json']);
        $SW_Detail_Flds_Array = array(
            'KeyType_str' => 'SW_KeyboardType',
            'ykqxh' => 'SW_RemoteControl',
            'ppxh' => 'SW_Panel',
            'logo' => 'SW_Logo',
            'keyDef' => 'SW_KeyBoard',
            'osd' => 'SW_Language',
            'MarketRegion' => 'SW_DefaultCountry',
            'mryy' => 'SW_DefaultLanguage',
            'PowerCurrency' => 'SW_PowerCurrent',
        );
        foreach ($SW_Detail_Flds_Array as $crm_fld => $ocs_fld) {
            if (isset($sw_atom_names[$ocs_fld])) {
                if ('SW_KeyBoard' == $ocs_fld) {
                    $KeyBoards = explode(',', $sw_atom_names[$ocs_fld]);
                    foreach ($KeyBoards as $KeyNum => $Key) {
                        if ("" == $Key) {
                            $KeyBoards[$KeyNum] = 'K' . $KeyNum . '=""';
                        } else {
                            $KeyBoards[$KeyNum] = 'K' . $KeyNum . '=' . $Key;
                        }
                    }
                    $subObj_Detail[$crm_fld] = implode(',', $KeyBoards);
                } else {
                    $subObj_Detail[$crm_fld] = $sw_atom_names[$ocs_fld];
                }
            } else {
                $subObj_Detail[$crm_fld] = '';
            }
        }

        $cont_crm_ws['subObj_Detail'] = array();
        $cont_crm_ws['subObj_Detail'][] = $subObj_Detail;

        $client = new soap_client($globalCRMWebServiceUrls['Contract']['url']);
        $client->soap_defencoding = 'utf-8';
        $client->decode_utf8 = false;
        $client->xml_encoding = 'utf-8';
        $client->response_timeout = 80;
        $params_addContract = array('vstr' => $globalCRMWebServiceUrls['Contract']['hashes']['addContract'],
            'org_str' => 'TVCRM', 'user_realname' => 'administrator', 'contract_data' => json_encode($cont_crm_ws));
        $result = $client->call('addContract', $params_addContract);

        if ($result['success']) {
            $updateContractCRMResult = array(
                'id' => $contract_data['Contract']['id'],
                'is_crm_fail' => 0,
                'crm_fail_reason' => ''
            );
        } else {
            $updateContractCRMResult = array(
                'id' => $contract_data['Contract']['id'],
                'is_crm_fail' => 1,
                'crm_fail_reason' => $result['message']
            );
        }
        $g_Contract->save($updateContractCRMResult);
        return $result;
    }

    function resync_crm_json() {
        $this->autoRender = false;

        global $g_Commons;

        if (empty($_POST['contract_id'])) {
            return;
        }
        $result = $this->WSWriteContractToCRM($_POST['contract_id']);
        echo json_encode($result);
        return;
    }

    // 通过确认书ID获取xml格式的软件确认书
    public function getSwConfirmationXmlDoc($ReqId) {
        global $g_BizId;
        global $g_Commons;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_Accounts->Account->recursive = -1;
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdAttrs->ProdAttr->recursive = -1;
        $g_ProdModels = $g_Commons->GlobalController('ProdModels');
        $g_ProdModels->ProdModel->recursive = -1;
        $g_ProdModelDetails = $g_Commons->GlobalController('ProdModelDetails');
        $g_ProdModelDetails->ProdModelDetail->recursive = -1;
        $g_ProdOpts = $g_Commons->GlobalController('ProdOpts');
        $g_ProdOpts->ProdOpt->recursive = -1;
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Products->Product->recursive = -1;

        // 软件部分
        $Req = $this->Req->findById($ReqId); // 获取软件确认书
        if (empty($Req)) {
            $result['success'] = false;
            $result['message'] = 'Can\'t find Confirmation Data!';
            return $result;
        }
        $atom_ids = json_decode($Req['Req']['sw_atom_ids_json']);
        $atom_ids = $g_Commons->objectToArray($atom_ids);
        $atoms = array();
        foreach ($atom_ids as $key => $arr) {
            if (empty($arr)) {
                continue;
            }
            foreach ($arr as $atom_id) {
                if (isset($atom_id) && 0 != $atom_id && '' != $atom_id) {
                    $atom = $g_Atoms->Atom->findById($atom_id);
                    $atoms[$key][] = $atom['Atom']; // 获取软件确认书记录的功能元
                }
            }
        }

        $SW_prodAttrs = $g_ProdAttrs->ProdAttr->find('all', array('conditions' => array('ProdAttr.biz_id' => $g_BizId, 'ProdAttr.type_id' => OCS_PROD_SW))); // 获取软件的产品属性
        if (Contract == $Req['Req']['model_def_id'] || SampleOrder == $Req['Req']['model_def_id']) {
            $contract = $g_Contract->findById($Req['Req']['rel_obj_id']); // 获取订单信息
            $account = $g_Accounts->Account->findById($contract['Contract']['account_id']); // 获取客户信息
            $mid_account = $g_Accounts->Account->findById($contract['Contract']['mid_account_id']); // 获取中间客户信息
            // 硬件部分
            $product = $g_Products->Product->findById($Req['Req']['product_id']); // 获取产品信息
            $prod_opt_ids = explode(',', $product['Product']['prod_opt_ids']);
            $prod_opts = array();
            foreach ($prod_opt_ids as $prod_opt_id) {
                if (empty($prod_opt_id)) {
                    continue;
                }
                $prod_opt = $g_ProdOpts->ProdOpt->findById($prod_opt_id);
                $prod_opts[] = $prod_opt['ProdOpt']; // 获取硬件确认书的选型
            }

            $HW_prodAttrs = $g_ProdAttrs->ProdAttr->find('all', array('conditions' => array('ProdAttr.biz_id' => $g_BizId, 'ProdAttr.type_id' => OCS_PROD_HW))); // 获取硬件的产品属性
            // 产品线部分
            $prodLine = $g_ProdModelDetails->ProdModelDetail->findById($product['Product']['pcb_id']);
            $ProdModel = $g_ProdModels->ProdModel->findById($product['Product']['prod_model_id']);

            // 生成XmlDoc
            $xmlDoc = '';
            $dom = new DOMDocument('1.0', 'utf-8');
            header("Content-Type: text/plain");
            $root = $dom->createElement("Root");
            $dom->appendChild($root);

            // 记录订单信息
            $XmlContract = $dom->createElement('Contract');
            $root->appendChild($XmlContract);
            $XmlContractSummary = $dom->createElement('Summary');
            $XmlContract->appendChild($XmlContractSummary);
            $XmlContractSummary->appendChild($dom->createTextNode($contract['Contract']['summary']));
            $XmlContractAccount = $dom->createElement('Account');
            $XmlContract->appendChild($XmlContractAccount);
            $XmlContractAccount->appendChild($dom->createTextNode($account['Account']['name']));
            $XmlContractMidAccount = $dom->createElement('MidAccount');
            $XmlContract->appendChild($XmlContractMidAccount);
            $XmlContractMidAccount->appendChild($dom->createTextNode($mid_account['Account']['name']));
            $XmlContractQuantity = $dom->createElement('Quantity');
            $XmlContract->appendChild($XmlContractQuantity);
            $XmlContractQuantity->appendChild($dom->createTextNode((int) $contract['Contract']['quantity']));
            $XmlContractContractNo = $dom->createElement('ContractNo');
            $XmlContract->appendChild($XmlContractContractNo);
            $XmlContractContractNo->appendChild($dom->createTextNode($contract['Contract']['contract_no']));
            $XmlContractOrderTime = $dom->createElement('OrderTime');
            $XmlContract->appendChild($XmlContractOrderTime);
            $XmlContractOrderTime->appendChild($dom->createTextNode($contract['Contract']['order_time']));

            // 记录产品线信息
            $XmlProdLine = $dom->createElement('ProdLine');
            $root->appendChild($XmlProdLine);
            $XmlPLLineName = $dom->createElement('LineName');
            $XmlProdLine->appendChild($XmlPLLineName);
            $XmlPLLineName->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['line_name']));
            $XmlPLPcbNum = $dom->createElement('PcbNum');
            $XmlProdLine->appendChild($XmlPLPcbNum);
            $XmlPLPcbNum->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['pcb_num']));
            $XmlPLShortPcbNum = $dom->createElement('ShortPcbNum');
            $XmlProdLine->appendChild($XmlPLShortPcbNum);
            $XmlPLShortPcbNum->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['short_pcb_num']));
            $XmlPLSolution = $dom->createElement('Solution');
            $XmlProdLine->appendChild($XmlPLSolution);
            $XmlPLSolution->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['solution']));
            $XmlPLRegion = $dom->createElement('Region');
            $XmlProdLine->appendChild($XmlPLRegion);
            $XmlPLRegion->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['region']));
            $XmlPLOwnedBy = $dom->createElement('OwnedBy');
            $XmlProdLine->appendChild($XmlPLOwnedBy);
            $XmlPLOwnedBy->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['owned_by']));
            $XmlPLPhaseState = $dom->createElement('PhaseState');
            $XmlProdLine->appendChild($XmlPLPhaseState);
            $XmlPLPhaseState->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['phase_state']));
            $XmlPLStandard = $dom->createElement('Standard');
            $XmlProdLine->appendChild($XmlPLStandard);
            $XmlPLStandard->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['standard']));
            $XmlPLStructure = $dom->createElement('Structure');
            $XmlProdLine->appendChild($XmlPLStructure);
            $XmlPLStructure->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['structure']));
            $XmlPLOwnedUnit = $dom->createElement('OwnedUnit');
            $XmlProdLine->appendChild($XmlPLOwnedUnit);
            $XmlPLOwnedUnit->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['owned_unit']));
            $XmlPLUseState = $dom->createElement('UseState');
            $XmlProdLine->appendChild($XmlPLUseState);
            $XmlPLUseState->appendChild($dom->createTextNode($prodLine['ProdModelDetail']['use_state']));

            // 记录软件确认书信息
            $XmlConfirmation = $dom->createElement('Confirmation');
            $root->appendChild($XmlConfirmation);
            $XmlSWItems = $dom->createElement('SW_Items');
            $XmlConfirmation->appendChild($XmlSWItems);
            foreach ($SW_prodAttrs as $prodAttr) {
                $AttrAtomNum = 0;
                $AttrAtomIds = '';
                $AttrAtomAttrs = '';
                foreach ($atoms as $prodAttrId => $atomArr) {
                    if ($prodAttr['ProdAttr']['id'] == $prodAttrId) {
                        foreach ($atomArr as $atom) {
                            if (isset($atom)) {
                                if (0 == $AttrAtomNum) {
                                    $AttrAtomIds = $atom['id'];
                                    $AttrAtomAttrs = $atom['name_sw'];
                                } else {
                                    $AttrAtomIds .= ',' . $atom['id'];
                                    $AttrAtomAttrs .= ',' . $atom['name_sw'];
                                }
                                $AttrAtomNum++;
                            }
                        }
                    }
                }
                if ('' != $AttrAtomAttrs) {
                    $XmlNum = $dom->createElement('Attr');
                    $XmlSWItems->appendChild($XmlNum);
                    $XmlNum->setAttribute('Name', $prodAttr['ProdAttr']['name']);
                    $XmlNum->setAttribute('Alias', $prodAttr['ProdAttr']['alias']);
                    $XmlNum->setAttribute('Ids', $AttrAtomIds);
                    $XmlNum->setAttribute('Atoms', $AttrAtomAttrs);
                }
            }
            $XmlNum = $dom->createElement('Attr');
            $XmlSWItems->appendChild($XmlNum);
            $XmlNum->setAttribute('Name', 'SW_MainBoard');
            $XmlNum->setAttribute('Alias', 'SW_MainBoard');
            $XmlNum->setAttribute('Ids', '');
            $XmlNum->setAttribute('Atoms', $ProdModel['ProdModel']['name']);

            // 记录硬件确认书信息
            $XmlHWItems = $dom->createElement('HW_Items');
            $XmlConfirmation->appendChild($XmlHWItems);
            foreach ($HW_prodAttrs as $prodAttr) {
                $AttrProdOptNum = 0;
                $AttrProdOptIds = '';
                $AttrProdOptAttrs = '';
                foreach ($prod_opts as $prod_opt) {
                    if ($prod_opt['prod_attr_id'] == $prodAttr['ProdAttr']['id']) {
                        $atoms = explode(',', $prod_opt['atom_ids']);
                        $prod_atom_ids = '';
                        foreach ($atoms as $atom) {
                            if (0 != $atom) {
                                if ('' == $prod_atom_ids) {
                                    $prod_atom_ids .= $atom;
                                } else {
                                    $prod_atom_ids .= ',' . $atom;
                                }
                            }
                        }
                        if (0 == $AttrProdOptNum) {
                            $AttrProdOptIds = $prod_atom_ids;
                            $AttrProdOptAttrs = $prod_opt['atom_names'];
                        } else {
                            $AttrProdOptIds .= ',' . $prod_atom_ids;
                            $AttrProdOptAttrs .= ',' . $prod_opt['atom_names'];
                        }
                        $AttrProdOptNum++;
                    }
                }
                if ('' != $AttrProdOptAttrs) {
                    $XmlNum = $dom->createElement('Attr');
                    $XmlHWItems->appendChild($XmlNum);
                    $XmlNum->setAttribute('Name', $prodAttr['ProdAttr']['name']);
                    $XmlNum->setAttribute('Alias', $prodAttr['ProdAttr']['alias']);
                    $XmlNum->setAttribute('Ids', $AttrProdOptIds);
                    $XmlNum->setAttribute('Atoms', $AttrProdOptAttrs);
                }
            }
            if (!empty($ProdModel['ProdModel']['type'])) {
                // 三合一板卡：50，90，120，170，220
                $ProdModelTypeAtom = 'TV';
                if (in_array($ProdModel['ProdModel']['type'], array(50, 90, 120, 170, 220))) {
                    $ProdModelTypeAtom = 'TIO'; // 三合一，Three In One
                }
                $XmlNum = $dom->createElement('Attr');
                $XmlHWItems->appendChild($XmlNum);
                $XmlNum->setAttribute('Name', 'HW_ProdModelType');
                $XmlNum->setAttribute('Alias', 'HW_ProdModelType');
                $XmlNum->setAttribute('Ids', $ProdModel['ProdModel']['type']);
                $XmlNum->setAttribute('Atoms', $ProdModelTypeAtom);
            }

            $xmlDoc = $dom->saveXML();
            return $xmlDoc;
        } else {
            return '';
        }
    }

    // 获取CRM备货订单接口
    public function WSGetProdBackUpFormCRM($prod_back_ids = null) {
        global $g_BizId;
        global $g_Commons;
        global $g_WebServices;

        $g_WebServices->OCS_get_ws_client_config();
        global $globalCRMWebServiceUrls;
        $result = array();
        if (1 == $globalCRMWebServiceUrls['connect']) {
            $client = new soap_client($globalCRMWebServiceUrls['Contract']['url']);
            $client->soap_defencoding = 'utf-8';
            $client->decode_utf8 = false;
            $client->xml_encoding = 'utf-8';
            $client->response_timeout = 60;
            $params_getContractStatusBySourceInfo = array('vstr' => $globalCRMWebServiceUrls['Contract']['hashes']['getProdBackupInfoByIds'],
                'org_str' => 'TVCRM', 'prod_backup_ids' => $prod_back_ids);
            $result = $client->call('getProdBackupInfoByIds', $params_getContractStatusBySourceInfo);
        }
        return $result;
    }

    public function get_CRM_prod_backup_ids($prod_back_ids = null) {
        global $g_BizId;
        $result = $this->WSGetProdBackUpFormCRM($prod_back_ids);
        $web_service = array();
        if ('1' != $result['success']) {
            $web_service['error_message'] = $result['message'];
        } else {
            global $g_BizId;
            global $g_Commons;
            $g_Accounts = $g_Commons->GlobalController('Accounts');
            $g_Accounts->Account->recursive = -1;
            global $g_Commons;
            $g_Commons->Common->recursive = -1;
            $g_Products = $g_Commons->GlobalController('Products');
            $g_Products->Product->recursive = -1;

            $datas = json_decode($result['datas']);
            $datas = $g_Commons->objectToArray($datas);
            $account_ids = array();
            foreach ($datas as $data) {
                $product = $g_Products->Product->findByName($data['ProductName']);
                if (empty($product)) {
                    continue;
                }
                $account = $g_Accounts->Account->find('first', array('conditions' => array('Account.biz_id' => $g_BizId, 'Account.alias' => $data['AccountName'])));
                if (!in_array($account['Account']['id'], $account_ids)) {
                    $account_ids[] = $account['Account']['id'];
                }
                $web_service['datas'][] = array('product_id' => $product['Product']['id'], 'product_name' => $product['Product']['name'],
                    'account_id' => $account['Account']['id'], 'account_alias' => $account['Account']['alias'], 'quantity' => $data['Quantity']);
            }
            if (empty($web_service['datas'])) {
                $web_service['error_message'] = 'no valid';
            } else if (count($web_service['datas']) >= 1 && count($account_ids) != 1) {
                $web_service['error_message'] = 'not the same account';
            }
        }
        return $web_service;
    }

    function getNotifyMessage($submitData, $Items, $Type) {
        global $g_BizId;
        global $g_Commons;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        global $g_CVTOCS;

        $msg = '';
        switch ($Type) {
            case 'BOM':
                $msg .= '请开始准备BOM。';
                $msg .= '<div style="background:#FFFADF;border:1px solid #F0F0F0;padding:3px">';
                $msg .= '<table border=1>';
                $msg .= '<tr><th >订单ID</th><th>完成日期</th><th>备注</th><th>订单号</th><th>主题</th><th>客户单号</th><th>客户料号</th>';
                $msg .= '<th>合同号</th><th>产品名称</th><th>产品代码</th><th>配屏</th></tr>';
                foreach ($submitData['Item'] as $itemId => $item) {
                    $Req = $Items[$itemId]['Req'];
                    $prod_sw_atom_ids = json_decode($Req['sw_atom_ids_json'], true);
                    $panelProdAttrId = $g_ProdAttrs->findProdAttrIdByAlias('SW_Panel');
                    $SwPanel = '';
                    if (isset($prod_sw_atom_ids[$panelProdAttrId][0])) {//配屏是单选的
                        $SwPanel = $g_Atoms->Atom->findMainField($prod_sw_atom_ids[$panelProdAttrId][0]);
                    }
                    $msg .= '<tr>';
                    $msg .= '<td>' . $Req['id'] . '</td>';
                    $msg .= '<td>' . $item['complete_date'] . '</td>';
                    $msg .= '<td>' . $item['remark'] . '</td>';
                    $msg .= '<td>' . $Req['bill_no'] . '</td>';
                    $msg .= '<td><a href="' . $g_CVTOCS['baseBizPath'] . 'Reqs/view/' . $Req['id'] . '">' . $Req['name'] . '</a></td>';
                    $msg .= '<td>' . $Req['account_cno'] . '</td>';
                    $msg .= '<td>' . $Req['account_mno'] . '</td>';
                    $msg .= '<td>' . $Req['contract_no'] . '</td>';
                    $msg .= '<td>' . $Req['product_id']['name'] . '</td>';
                    $msg .= '<td>' . $Req['product_id']['code'] . '</td>';
                    $msg .= '<td>' . $SwPanel . '</td>';
                    $msg .= '</tr>';
                }
                $msg .= '</table>';
                $msg .= '</div>';
                break;
            default:break;
        }
        return $msg;
    }

    function getNotifyUserEmails($submitData) {
        global $g_BizId;
        global $g_Commons;
        $g_Users = $g_Commons->GlobalController('Users');

        $toUsers = array();
        if (!empty($submitData)) {
            foreach ($submitData['Item'] as $itemId => $item) {
                if (!empty($item['notify_user_ids'])) {
                    foreach ($item['notify_user_ids'] as $userId) {
                        $toUsers[] = $g_Users->getUserEmailById($userId);
                    }
                }
            }
        }
        $toUsers = array_unique($toUsers);
        return $toUsers;
    }

    // 通过contractIds进行相应的提醒
    function pop_batch_notify_via_contract_ids() {
        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_Commons;

        $AllParams = array();
        if (!empty($this->params->params['named'])) {
            foreach ($this->params->params['named'] as $key => $tmp) {
                $Params = explode('&', $tmp);
                foreach ($Params as $Param) {
                    $alias = preg_replace('/(=.+)/', '', $Param);
                    $pos = strpos($Param, '='); //获取第一次出现=的位置
                    if ($pos > 0) {
                        $value = substr($Param, $pos + 1, strlen($Param)); //截取从pos+1位置到尾部的所有字符
                    } else {
                        $value = substr($Param, 0, strlen($Param));
                    }
                    $AllParams[$key][$alias] = $value;
                }
            }
        }
        $type = '';
        if (isset($AllParams['P']['type'])) {
            $type = $AllParams['P']['type'];
        }
        $contractIds = $AllParams['P']['contractIds'];
        switch ($type) {
            case 'BOM':
                $reqIds = $this->Req->getSequenceIdsStrByModelDefIdAndRelObjIds(Contract, $contractIds);
                $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'batch_notify', 'P' => 'ids=' . $reqIds . '&type=BOM'));
                break;
            default:break;
        }
    }

    function pop_batch_notify() {
        global $g_BizId;
        global $g_Commons;
        $g_Notices = $g_Commons->GlobalController('Notices');
        $g_Enums = $g_Commons->GlobalController('Enums');
        global $g_UserId;
        $g_Users = $g_Commons->GlobalController('Users');

        $AllParams = array();
        if (!empty($this->params->params['named'])) {
            foreach ($this->params->params['named'] as $key => $tmp) {
                $Params = explode('&', $tmp);
                foreach ($Params as $Param) {
                    $alias = preg_replace('/(=.+)/', '', $Param);
                    $pos = strpos($Param, '='); //获取第一次出现=的位置
                    if ($pos > 0) {
                        $value = substr($Param, $pos + 1, strlen($Param)); //截取从pos+1位置到尾部的所有字符
                    } else {
                        $value = substr($Param, 0, strlen($Param));
                    }
                    $AllParams[$key][$alias] = $value;
                }
            }
        }
        $this->set('AllParams', $AllParams);
        $this->set('pageTitle', '批量提醒');
        $Type = $AllParams['P']['type'];
        $IDS = $AllParams['P']['ids'];
        $this->set('IDS', $IDS);
        $this->set('Type', $Type);
        $TypeId = $g_Enums->getValueByDictNameAndAlias('Notice.notify_type', $Type);

        $Items = array();
        switch ($Type) {
            case 'BOM':
                $g_Contract = $g_Commons->GlobalModel('Contract');
                $g_Products = $g_Commons->GlobalController('Products');
                $g_Enums = $g_Commons->GlobalController('Enums');
                $this->set('pageTitle', '批量提醒[申请做BOM]');
                $this->Req->recursive = -1;
                $g_Products->Product->recursive = -1;
                $g_Notices->Notice->recursive = -1;
                $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => explode(',', $IDS)), 'order' => array('Req.update_time DESC'),
                            'fields' => array('Req.id', 'Req.product_id', 'Req.name', 'Req.model_def_id', 'Req.rel_obj_id', 'Req.bill_no', 'Req.sw_atom_ids_json')));
                if (!empty($Reqs)) {
                    foreach ($Reqs as $Req) {
                        $productId = $Req['Req']['product_id'];
                        $Product = $g_Products->Product->find('first', array('conditions' => array('Product.id' => $productId, 'Product.is_delete' => 0),
                                    'fields' => array('Product.name', 'Product.code')));
                        $Req['Req']['product_id'] = array();
                        $Req['Req']['product_id']['id'] = $productId;
                        $Req['Req']['product_id']['name'] = $Product['Product']['name'];
                        $Req['Req']['product_id']['code'] = $Product['Product']['code'];
                        $Req['Req']['account_mno'] = 'notFound';
                        $Req['Req']['account_cno'] = 'notFound';
                        if (Contract == $Req['Req']['model_def_id']) {
                            $Contract = $g_Contract->find('first', array(
                                'conditions' => array('Contract.id' => $Req['Req']['rel_obj_id']),
                                'fields' => array('Contract.account_mno', 'Contract.account_cno', 'Contract.contract_no', 'Contract.crm_contract_id')
                            ));
                            if (!empty($Contract)) {
                                $Req['Req']['account_mno'] = $Contract['Contract']['account_mno'];
                                $Req['Req']['account_cno'] = $Contract['Contract']['account_cno'];
                                $Req['Req']['contract_no'] = $Contract['Contract']['contract_no'];
                                $Req['Req']['crm_contract_id'] = $Contract['Contract']['crm_contract_id'];
                            }
                        }
                        $Notice = $g_Notices->Notice->find('first', array('conditions' => array('Notice.model_def_id' => Req,
                                        'Notice.obj_id' => $Req['Req']['id'], 'Notice.notify_type' => $TypeId)));
                        $Req['Req']['is_notified'] = (!empty($Notice)) ? 1 : 0;
                        $Items[$Req['Req']['id']] = $Req;
                    }
                }
                $notifyUsers = array();
                $g_Users->User->recursive = -1;
                $userNames = array('lichuang', 'lengsa', 'songjiao', 'houhaifang'); // hardcode
                foreach ($userNames as $userName) {
                    $User = $g_Users->User->findByUsername($userName);
                    if (!empty($User)) {
                        $notifyUsers[] = $User;
                    }
                }
                $this->set('notifyUsers', $notifyUsers);
                break;
            default:
                break;
        }
        $this->set('Items', $Items);

        $this->set('saveComplete', 0);
        if ($this->request->is('post') && !empty($this->request->data)) {//提交
            $submitData = $this->request->data;
            if (!empty($submitData)) {
                switch ($Type) {
                    case 'BOM':
                        $g_Comments = $g_Commons->GlobalController('Comments');
                        $toUsers = array();
                        $ccUsers = array();
                        $notifyUserNames = '';
                        $msg = $this->getNotifyMessage($submitData, $Items, $Type); //产生通知的内容
                        $toUsers = $this->getNotifyUserEmails($submitData);
                        if (!empty($toUsers)) {
                            foreach ($toUsers as $userEmail) {
                                $notifyUserNames .= $g_Users->getUserRealNameByEmail($userEmail);
                            }
                        }
                        foreach ($submitData['Item'] as $itemId => $item) {
                            if (!empty($item['notify_user_ids'])) {
                                foreach ($item['notify_user_ids'] as $userId) {
                                    $Notice = array();
                                    $Notice['content'] = $msg;
                                    $Notice['user_id'] = $userId;
                                    $Notice['model_def_id'] = Req;
                                    $Notice['obj_id'] = $itemId;
                                    $Notice['notify_type'] = $TypeId;
                                    $Notice['create_user_id'] = $g_UserId;
                                    $Notice['create_time'] = date('Y-m-d H:i:s');
                                    $g_Notices->Notice->create();
                                    $g_Notices->Notice->save($Notice);
                                }
                            }
                            $comment = '';
                            $comment .= '<label>[订单提醒]申请做BOM</label>';
                            $comment .= '<div>';
                            $comment .= '<p><span style="background-color:#FAFAC1">邮件通知：</span>' . $notifyUserNames . '</p>';
                            $comment .= '<p><span style="background-color:#FAFAC1">完成日期：</span>' . $item['complete_date'] . '</p>';
                            $comment .= '<p><span style="background-color:#FAFAC1">备注：</span>' . $item['remark'] . '</p>';
                            $comment .= '</div>';
                            $Comment = array();
                            $Comment['model_def_id'] = Req;
                            $Comment['obj_id'] = $itemId;
                            $Comment['comment'] = $comment;
                            $Comment['comment_text'] = strip_tags($comment); // 转为纯文本;
                            $g_Comments->addComment($Comment);
                        }

                        $optUserEmail = $g_Users->getUserEmailById($g_UserId);
                        $ccUsers[] = $optUserEmail; // 抄送给自己
                        $g_EmailSends = $g_Commons->GlobalController('EmailSends');
                        $g_EmailSends->template = 'bom';
                        $g_EmailSends->subject = '[订单提醒]申请做BOM';
                        $g_EmailSends->body = $msg;
                        $g_EmailSends->toUsers = $toUsers;
                        $g_EmailSends->ccUsers = $ccUsers;
                        $g_EmailSends->replyTo = $optUserEmail;
                        $result = $g_EmailSends->sendEmail();
                        $g_EmailSends->emailSendErrorProcess($result);
                        break;
                    default:break;
                }
            }
            $this->set('saveComplete', 1);
        }
    }

    function delivery_excel($ids = null) {
        set_time_limit(0);

        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        $g_PrintTmpls = $g_Commons->GlobalController('PrintTmpls');
        $g_PrintTmpls->PrintTmpl->recursive = -1;
        global $g_UserRealName;
        $this->Req->recursive = -1;

        $temple = $g_PrintTmpls->PrintTmpl->find('first', array(
                    'joins' => array(
                        array(
                            'table' => 'attachments',
                            'alias' => 'Attachment',
                            'type' => 'LEFT',
                            'conditions' => 'Attachment.id = PrintTmpl.attachment_id'
                        )
                    ),
                    'conditions' => array(
                        'PrintTmpl.model_def_id' => SampleOrder,
                        'PrintTmpl.name' => '快递单模版',
                    ),
                    'fields' => 'Attachment.id, Attachment.path, Attachment.hash_name'
                ));
        if (empty($temple)) {
            return;
        }
        if (empty($ids)) {
            $ids = Cache::read('sample_order_file_export');
            Cache::delete('sample_order_file_export');
        }
        $ids = explode(',', $ids);
        //OCS-576 样品单打印模板需求优化 add by ziying 2015-9-24
        $reqs = $this->Req->find('all', array(
                    'joins' => array(
                        array(
                            'table' => 'sample_orders',
                            'alias' => 'SampleOrder',
                            'type' => 'LEFT',
                            'conditions' => 'SampleOrder.id = Req.rel_obj_id'
                        ),
                        array(
                            'table' => 'accounts',
                            'alias' => 'Account',
                            'type' => 'LEFT',
                            'conditions' => 'Account.id = Req.account_id'
                        ),
                        array(
                            'table' => 'users',
                            'alias' => 'User',
                            'type' => 'LEFT',
                            'conditions' => array('User.id' => $g_UserId)
                        ),
                    ),
                    'conditions' => array('Req.id' => $ids),
                    'fields' => 'SampleOrder.delivery_info, Account.short_name, User.mobile',
                    'order' => 'Req.account_id ASC',
                    'group' => 'SampleOrder.delivery_info'
                        )
        );
        foreach ($reqs as $key => $value) {
            $reqs[$key]['SampleOrder']['sender'] = $g_UserRealName;
            $reqs[$key]['SampleOrder']['sender_info_phone'] = $value['User']['mobile'];//用户手机号
            preg_match('/\s[\x{4e00}-\x{9fa5}]{2,4}\s/u', $value['SampleOrder']['delivery_info'], $match);
            $reqs[$key]['SampleOrder']['delivery_info_contact'] = empty($match) ? '' : $match[0];
            preg_match('/1[358]{1}\d{9}/', $value['SampleOrder']['delivery_info'], $match);
            $reqs[$key]['SampleOrder']['delivery_info_phone'] = empty($match) ? '' : $match[0];
        }
        $g_Excels = $g_Commons->GlobalController('Excels');

        return $g_Excels->export($temple['Attachment']['id'], '样品快递单' . date('Y-m-d H:i:s'), 'Reqs', $Action = '', null, $reqs);
    }

    // 唛头打印 add by GUOCAI 2014-07-14
    function mark_excel($reqIds = null, $type = null) {
        set_time_limit(0);
        global $g_BizId;
        global $g_Commons;
        global $g_UserRealName;
        $g_PrintTmpls = $g_Commons->GlobalController('PrintTmpls');
        $g_PrintTmpls->PrintTmpl->recursive = -1;
        $this->Req->recursive = -1;

        $type = (in_array($type, array('exportMarkDatas','exportChMarkDatas','exportSrMainboardMark','exportSrPlateletMark','exportOrderProduction')))?$type:null;
        // 获取模板
        if(!empty($type)){
            $temp = $g_PrintTmpls->PrintTmpl->getPrintTmplByAlias(Req, $type);
            switch ($type) {
                case 'exportOrderProduction':
                    // 4-已审采购-提交下生产
                    $excel_action = 'exportOrderProduction';
                    $output_file_name = array('id' => $temp['PrintTmpl']['id'], 'output_file_name' => $temp['PrintTmpl']['output_file_name']);
                    break;
                default:
                    // 唛头模板数据源
                    $excel_action = 'exportMarkDatas';
                    $output_file_name = array('id' => $reqIds[0], 'output_file_name' => $temp['PrintTmpl']['output_file_name']);
                    break;
            }
        }
        if (empty($temp)) {
            echo '未找到模板';
            return;
        }
        if (!is_array($reqIds)) {
            $reqIds = explode(',', $reqIds);
        }
        if (empty($reqIds)) {
            echo '未找ReqId';
            return;
        }
        // 参数格式化
        $conditions = array('Req.id' => $reqIds);
        $conditions = json_encode($conditions);
        $output_file_name = json_encode($output_file_name);
        $g_Excels = $g_Commons->GlobalController('Excels');
        return $g_Excels->export($temp['Attachment']['id'], $output_file_name, 'Reqs', $excel_action, $conditions);
    }

    // 唛头报表
    public function exportMarkDatas($conditions = null) {
        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        // 参数处理
        $conditions = $g_Commons->objectToArray(json_decode($conditions));
        $reqIds = $conditions['Req.id'];
        if (empty($reqIds)) {
            return null;
        }

        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdAttrs->ProdAttr->recursive = -1;

        $g_Dics = $g_Commons->GlobalController('Dics');
        $g_Contract = $g_Commons->GlobalModel('Contract');

        $Reqs = $g_Contract->find('all', array(
            'conditions' => array('Req.id' => $reqIds),
            'joins' => array(
                array('table' => 'reqs', 'alias' => 'Req', 'type' => 'INNER',
                    'conditions' => array('Req.model_def_id' => Contract, 'Req.dest_type' => 'EBS', 'Req.rel_obj_id = Contract.id'),
                ),
                array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'LEFT',
                    'conditions' => array('MfPlanBill.req_id = Req.id'),
                ),
                array('table' => 'products', 'alias' => 'Product', 'type' => 'LEFT',
                    'conditions' => array('Product.id = Req.product_id'),
                ),
                array('table' => 'prod_models', 'alias' => 'ProdModel', 'type' => 'LEFT',
                    'conditions' => array('ProdModel.id = Product.prod_model_id'),
                ),
                array('table' => 'prod_model_details', 'alias' => 'ProdModelDetail', 'type' => 'LEFT',
                    'conditions' => array('Product.pcb_id = ProdModelDetail.id'),
                ),
            ),
            'fields' => array('Contract.*,Req.*,MfPlanBill.*,Product.*,ProdModel.*,ProdModelDetail.version'),
            'group' => array('Req.id')
        ));
        if (!empty($Reqs)) {
            foreach ($Reqs as $key => $Req) {
                $Reqs[$key]['Product']['SW_Panel'] = '无'; //配屏
                if (!empty($Req['Req'])) {
                    // 获取功能元及对应的属性
                    $date_atom = $this->Req->getFormatAtom($Req['Req']);
                    $Reqs[$key]['Product']['SW_Panel'] = (!empty($date_atom['SW_Panel'])) ? implode(',', $date_atom['SW_Panel']) : '无';
                }
            }
        }

        $ModelDatas = $g_AttrDics->formatModelData($Reqs, 'Req');
        $ModelDatas = $g_AttrDics->formatModelData($ModelDatas, 'Product');

        return $ModelDatas;
    }

    // 导出4已审采购提交下生产的订单报表 add by GUOCAI
    public function exportOrderProduction($conditions = null){
        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        // 参数处理
        $conditions = $g_Commons->objectToArray(json_decode($conditions));
        $reqIds = $conditions['Req.id'];
        if (empty($reqIds)) {
            return null;
        }

        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdAttrs->ProdAttr->recursive = -1;
        $g_Dics = $g_Commons->GlobalController('Dics');

        $Reqs = $this->Req->find('all', array(
                    'conditions' => array('Req.parent_id' => 0,'Req.close_status' => 0,'Contract.ebs_stage' => 20),
                    'joins' => array(
                        array('table' => 'contracts', 'alias' => 'Contract', 'type' => 'INNER',
                            'conditions' => array('Req.model_def_id' => Contract, 'Req.dest_type' => 'EBS', 'Req.rel_obj_id = Contract.id'),
                        ),
                        array('table' => 'products', 'alias' => 'Product', 'type' => 'LEFT',
                            'conditions' => array('Product.id = Req.product_id'),
                        ),
                        array('table' => 'users', 'alias' => 'User', 'type' => 'LEFT',
                            'conditions' => array('User.id = Req.owner_user_id'),
                        ),
                        array('table' => 'accounts', 'alias' => 'Account', 'type' => 'LEFT',
                            'conditions' => array('Account.id = Req.account_id'),
                        ),
                        array('table' => 'accounts', 'alias' => 'ProAccount', 'type' => 'LEFT',
                            'conditions' => array('ProAccount.id = Product.order_account_id'),
                        ),
                    ),
                    'fields' => array('Req.id,Req.name,Req.ebs_order_number,Req.quantity,Contract.account_prod_name,Product.name,Product.code,Product.is_ckd,Account.name,ProAccount.name,User.realname,Contract.mto_no,Contract.delivety_time'),
                    'group' => array('Req.id')
                ));
        // 获取下采购时间
        $ReqIds = array();
        foreach ($Reqs as $key => $Req) {
            $ReqIds[$Req['Req']['id']] = $Req['Req']['id'];
        }
        // 读取EBS中的记录,获取下采购时间
        $orderStages = $this->Req->getOrderStagesByReqIds($ReqIds);
        foreach ($Reqs as $key => $Req) {
            $Reqs[$key]['Req']['om_cg_date'] = '';
            if(!empty($orderStages[$Req['Req']['id']]['4-已审采购-提交下生产']['CREATION_TIME'])){
                $Reqs[$key]['Req']['om_cg_date'] = date('Y-m-d H:i:s', strtotime($orderStages[$Req['Req']['id']]['4-已审采购-提交下生产']['CREATION_TIME']));
            }
        }

        $ModelDatas = $g_AttrDics->formatModelData($Reqs, 'Req');
        $ModelDatas = $g_AttrDics->formatModelData($ModelDatas, 'Product');
        return $ModelDatas;
    }

    // 导出合同 add by GUOCAI
    public function exportContracts($contract_no = null, $template = null) {
        set_time_limit(0);

        global $g_BizId;
        global $g_Commons;
        global $g_UserRealName;
        $g_PrintTmpls = $g_Commons->GlobalController('PrintTmpls');
        $g_PrintTmpls->PrintTmpl->recursive = -1;

        if (empty($contract_no)) {
            echo '缺少合同号。';
            return;
        }

        // 获取英文合同模板
        $template = ($this->Req->isEnTmpl($template)) ? $template : 'invoice';

        // 获取模板
        $tmpl = $g_PrintTmpls->PrintTmpl->getPrintTmplByAlias(Req, $template);
        if (empty($tmpl)) {
            echo '未找到模板';
            return;
        }

        // 参数格式化
        $output_file_name = array('id' => $tmpl['PrintTmpl']['id'], 'output_file_name' => $tmpl['PrintTmpl']['output_file_name']);
        $output_file_name = json_encode($output_file_name);
        $g_Excels = $g_Commons->GlobalController('Excels');
        $export_params = array(
            'tmpl_alias' => $template,
            'contract_no' => $contract_no,
        );
        return $g_Excels->export($tmpl['Attachment']['id'], $output_file_name, 'Reqs', 'exportContractsData', $export_params);
    }

    // 导出合同的数据源
    public function exportContractsData($export_params = array()) {
        if (empty($export_params['contract_no']) || empty($export_params['tmpl_alias'])) {
            return array();
        }

        // 格式化合同内容
        $contracts = $this->Req->getContractDatas($export_params);
        $contracts = $this->Req->formatContractDatasForPrint($contracts, array('tmpl_alias' => $export_params['tmpl_alias'], 'is_format' => false));

        // // 特殊模板的数据处理(目前只有PI模板使用)
        // if(!empty($contracts)){

        //     // 用于金额格式
        //     $view = new View($this, false);
        //     $Money = $view->loadHelper('Money');

        //     foreach ($contracts as $key => $Contract) {
        //         // 格式化金额
        //         $contracts[$key]['Req']['quantity'] = (float)$Contract['Req']['quantity'];
        //         $contracts[$key]['Req']['foreign_price'] = (float)$Contract['Req']['foreign_price'];
        //         $contracts[$key]['Req']['foreign_amount'] = (float)$Contract['Req']['foreign_amount'];
        //     }

        //     // 格式化金额
        //     $ContractAmount = round($contracts[0]['Contract']['ContractAmount'], 2);
        //     $contracts[0]['Contract']['ContractAmount'] = (float)$ContractAmount;
        //     $contracts[0]['Contract']['ContractAmountEN'] = 'SAY TOTAL AMOUNT IN US DOLLARS ' . strtoupper($Money->convertNumberForPi($ContractAmount)) . ' ONLY.';
        // }

        // 设置导出的execl如果产品行不足,则用空白行补充以确保execl的整体高度
        $contractsMin = 9;
        $contractsCount = count($contracts);
        if ($contractsCount < $contractsMin) {
            $contractsNum = $contractsMin - $contractsCount;
            for ($i=0; $i < $contractsNum; $i++) {
                $contracts[] = array();
            }
        }

        // //特殊处理 装运期限（shipment_term） 和 付款期限（payment_term） add by ziying
        // if (!isset($contracts[0]['Account_1']['shipment_term']) || empty($contracts[0]['Account_1']['shipment_term'])) {
        //     $contracts[0]['Account_1']['shipment_term'] = 'FOB Hong Kong';
        // }
        // if (!isset($contracts[0]['Account_1']['payment_term']) || empty($contracts[0]['Account_1']['payment_term'])) {
        //     $contracts[0]['Account_1']['payment_term'] = '30% T/T pre-payment, 70% balance before shipment';
        // }
        return $contracts;
    }

    // 根据CPS的req数据生成ModeID
    public function getModeIdByCPSReq($Req) {
        global $g_BizId;
        global $g_Commons;
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_Accounts->Account->recursive = -1;
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdAttrs->ProdAttr->recursive = -1;
        $g_ProdModels = $g_Commons->GlobalController('ProdModels');
        $g_ProdModels->ProdModel->recursive = -1;

        if (isset($Req['prod_model_id'])) {
            $ProdModel = $g_ProdModels->ProdModel->findById($Req['prod_model_id']);
        }
        $Account = $g_Accounts->Account->findById($Req['account_id']);
        $CustomerName = isset($Account['Account']['eng_short_name']) ? $Account['Account']['eng_short_name'] : 'CVT';

        $TaskSwInfoTmp = json_decode($Req['sw_atom_ids_json']);
        $TaskSwInfo = array(); // 任务需求数据
        foreach ($TaskSwInfoTmp as $ProdAttrId => $AtomIds) {
            $ProdAttr = $g_ProdAttrs->ProdAttr->findById($ProdAttrId);
            foreach ($AtomIds as $AtomId) {
                $Atom = $g_Atoms->Atom->findById($AtomId);
                $TaskSwInfo[$ProdAttr['ProdAttr']['alias']][] = $Atom['Atom']['name_sw'];
            }
        }

        $ModeId = $CustomerName;
        if (!empty($ProdModel['ProdModel']['name'])) {
            $ModeId .= '_' . $ProdModel['ProdModel']['name'];
        }
        if (!empty($TaskSwInfo['SW_DefaultCountry'][0])) {
            $ModeId .= '_' . $TaskSwInfo['SW_DefaultCountry'][0];
        }
        if (!empty($TaskSwInfo['SW_Panel'][0])) {
            $ModeId .= '_' . $TaskSwInfo['SW_Panel'][0];
        }
        if (!empty($TaskSwInfo['SW_Tuner'][0])) {
            $ModeId .= '_' . $TaskSwInfo['SW_Tuner'][0];
        }
        if (!empty($TaskSwInfo['SW_RemoteControl'][0])) {
            $ModeId .= '_' . $TaskSwInfo['SW_RemoteControl'][0];
        }
        if (!empty($TaskSwInfo['SW_Logo'][0])) {
            $ModeId .= '_' . $TaskSwInfo['SW_Logo'][0];
        }

        $ModeId = str_replace('-', '_', $ModeId);
        $ModeId = str_replace('.', '_', $ModeId);
        $ModeId = str_replace(' ', '_', $ModeId);
        $ModeId = str_replace('_T_', '_', $ModeId); // 特殊处理
        $ModeId = strtoupper($ModeId);
        return $ModeId;
    }

    // OCS - 产生自动编译需要的Excel文件
    public function generateAutoBuildExcelFromOCS($QueueJobId, $ReqId) {
        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        $Req = $this->Req->findById($ReqId);
        $ExcelAttachmentId = $this->generateAutoBuildExcel($QueueJobId, 'OCS', $Req['Req']);
        return $ExcelAttachmentId;
    }

    // CPS - 产生自动编译需要的Excel文件
    public function generateAutoBuildExcelFromCPS($QueueJobId, $Req) {
        set_time_limit(0);

        global $g_BizId;
        global $g_BizName;
        global $g_BizUrl;
        global $g_Commons;

        $Req = $g_Commons->objectToArray($Req);
        if (isset($Req['Data']['Req']['account_source_type']) && isset($Req['Data']['Req']['account_source_id'])) {
            if ('OCS' == $Req['Data']['Req']['account_source_type']) {
                $Req['Data']['Req']['account_id'] = $Req['Data']['Req']['account_source_id'];
            } else if ('TVCRM' == $Req['Data']['Req']['account_source_type']) {
                $g_Account = $g_Commons->GlobalModel('Account');

                $Account = $g_Account->find('first', array(
                    'conditions' => array(
                        'Account.source_type' => $Req['Data']['Req']['account_source_type'],
                        'Account.source_id' => $Req['Data']['Req']['account_source_id']
                    ),
                    'fields' => array('Account.id')
                ));
                $Req['Data']['Req']['account_id'] = $Account['Account']['id'];
            }
        }
        $ExcelAttachmentId = $this->generateAutoBuildExcel($QueueJobId, 'CPS', $Req['Data']['Req']);
        return $ExcelAttachmentId;
    }

    public function getAutoBuildExcelColMapName($ColName) {
        $n = 0;
        $ColNameNum = strlen($ColName);
        for ($i = 0; $i < $ColNameNum; $i++) {
            if ('-' == $ColName[$i]) {
                $n = $i;
                break;
            }
        }
        if (0 != $n) {
            $ColMapName = substr($ColName, $n + 1, $ColNameNum - $n - 1);
        } else {
            $ColMapName = $ColName;
        }
        if (strstr($ColMapName, 'KEYPAD')) {
            $ColMapName = 'KEYPAD_K';
        }
        return $ColMapName;
    }

    // 产生自动编译需要的Excel文件
    public function generateAutoBuildExcel($QueueJobId = 0, $Source = 'CPS', $Req = null, $DisplayMacro = 0) {
        set_time_limit(0);

        global $g_BizId;
        global $g_FS_options;
        global $g_Commons;
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Atom = $g_Commons->GlobalModel('Atom');
        $g_AtomFile = $g_Commons->GlobalModel('AtomFile');
        $g_AtomImage = $g_Commons->GlobalModel('AtomImage');
        $g_AccountAutobuildData = $g_Commons->GlobalModel('AccountAutobuildData');
        $g_MacroField = $g_Commons->GlobalModel('MacroField');
        $g_MacroMap = $g_Commons->GlobalModel('MacroMap');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');
        $g_ProdModel = $g_Commons->GlobalModel('ProdModel');
        $g_ProdModelDetail = $g_Commons->GlobalModel('ProdModelDetail');
        $g_RdDeptCodePath = $g_Commons->GlobalModel('RdDeptCodePath');
        $g_SwModeId = $g_Commons->GlobalModel('SwModeId');
        $g_SwModeIdRelAtom = $g_Commons->GlobalModel('SwModeIdRelAtom');

        $g_Attachments = $g_Commons->GlobalController('Attachments');
        $g_Attachments->Attachment->recursive = -1;
        $g_ProdModel->ProdModelRelOpt->recursive = -1;
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Products->Product->recursive = -1;
        $g_Depts = $g_Commons->GlobalController('Depts');
        $g_AtomMacros = $g_Commons->GlobalController('AtomMacros');

        $KeyPadSource = 'OCS';
        $LogoSource = 'OCS';
        $PQSource = 'OCS';
        $VolumeCurveSource = 'OCS';
        $ExcelAttachmentId = 0;
        $DefaultLanguage = 'ASIA_PACIFIC';
        $ProjectTeamList = $g_Depts->getProjectTeamList();
        if (isset($Req['prod_model_id'])) {
            $ProdModel = $g_ProdModel->findById($Req['prod_model_id'], array('id', 'name'));
        } else {
            $Product = $g_Products->Product->findById($Req['product_id'], array('prod_model_id'));
            $ProdModel = $g_ProdModel->findById($Product['Product']['prod_model_id'], array('id', 'name'));
            // $ProductDetail = new ProdDetailsController($Req['product_id']);
        }
        if (!empty($Req['account_id'])) {
            $Account = $g_Account->find('first', array(
                'conditions' => array(
                    'Account.id' => $Req['account_id']
                ),
                'fields' => 'Account.id, Account.eng_short_name'
            ));
            // $AccountAutobuildData = $g_AccountAutobuildData->findByAccountIdAndProdModelId($Account['Account']['id'], $ProdModel['ProdModel']['id']);
            $CustomerName = isset($Account['Account']['eng_short_name']) ? $Account['Account']['eng_short_name'] : '';
        } else {
            $account_name = $g_Account->find('first', array(
                'conditions' => array(
                    'Account.source_type' => $Req['account_source_type'],
                    'Account.source_id' => $Req['account_source_id']
                ),
                'fields' => 'Account.name'
            ));
            $account_ids = $g_Account->find('list', array(
                'conditions' => array(
                    'Account.name' => $account_name['Account']['name']
                ),
                'fields' => 'Account.id'
            ));
            $CustomerName = $g_Account->find('first', array(
                'conditions' => array(
                    'Account.id' => $account_ids,
                    'Account.eng_short_name IS NOT NULL',
                    'Account.eng_short_name <>' => ''
                ),
                'fields' => 'Account.eng_short_name'
            ));
            $CustomerName = empty($CustomerName) ? '' : $CustomerName['Account']['eng_short_name'];
            $Req['account_id'] = $account_ids;
        }

        $code_path_id = 0;
        if (!empty($Req['code_path_id'])) {
            $code_path_id = $Req['code_path_id'];
            $AccountAutobuildData = $g_AccountAutobuildData->find('first', array(
                'conditions' => array(
                    'AccountAutobuildData.account_id' => $Req['account_id'],
                    'AccountAutobuildData.prod_model_id' => $ProdModel['ProdModel']['id'],
                    'AccountAutobuildData.rd_dept_code_path_id' => $code_path_id
                ),
                'fields' => 'AccountAutobuildData.*'
            ));
        } else {
            $AccountAutobuildData = $g_AccountAutobuildData->find('first', array(
                'conditions' => array(
                    'AccountAutobuildData.account_id' => $Req['account_id'],
                    'AccountAutobuildData.prod_model_id' => $ProdModel['ProdModel']['id']
                ),
                'fields' => 'AccountAutobuildData.*'
            ));
            $code_path_id = $AccountAutobuildData['AccountAutobuildData']['rd_dept_code_path_id'];
        }
        $CustomerId = isset($AccountAutobuildData['AccountAutobuildData']['customer_id']) ? $AccountAutobuildData['AccountAutobuildData']['customer_id'] : '';

        $code_path_info = $g_RdDeptCodePath->find('first', array(
            'conditions' => array('RdDeptCodePath.id' => $code_path_id),
            'fields' => 'RdDeptCodePath.id, RdDeptCodePath.code_path, RdDeptCodePath.code_env, RdDeptCodePath.branch_name'
        ));

        $SvnUrl = '';
        $code_env = '';
        $branch_name = '';
        if (!empty($code_path_info)) {
            $SvnUrl = !empty($code_path_info['RdDeptCodePath']['code_path']) ? $code_path_info['RdDeptCodePath']['code_path'] : '';
            $code_env = !empty($code_path_info['RdDeptCodePath']['code_env']) ? $code_path_info['RdDeptCodePath']['code_env'] : '';
            $branch_name = !empty($code_path_info['RdDeptCodePath']['branch_name']) ? $code_path_info['RdDeptCodePath']['branch_name'] : '';
        }

        $CustomerHeadFilePath = isset($AccountAutobuildData['AccountAutobuildData']['customer_head_file_path']) ? $AccountAutobuildData['AccountAutobuildData']['customer_head_file_path'] : '';

        $TaskSwInfoTmp = json_decode($Req['sw_atom_ids_json']);
        $TaskSwInfo = array(); // 任务需求数据
        $BootLogoAtomId = 0;
        $PQAtomId = 0;
        $VolumeCurveAtomId = 0;
        $PanelAtomId = 0;
        foreach ($TaskSwInfoTmp as $ProdAttrId => $AtomIds) {
            $ProdAttr = $g_ProdAttr->findById($ProdAttrId);
            foreach ($AtomIds as $AtomId) {
                $Atom = $g_Atom->findById($AtomId);
                $TaskSwInfo[$ProdAttr['ProdAttr']['alias']][] = isset($Atom['Atom']['name_sw']) ? $Atom['Atom']['name_sw'] : $Atom['Atom']['name'];
                if ('SW_KeyboardType' == $ProdAttr['ProdAttr']['alias']) {
                    $KeyPadSource = isset($Atom['Atom']['source']) ? $Atom['Atom']['source'] : 'OCS';
                }
                if ('SW_BootLogo' == $ProdAttr['ProdAttr']['alias']) {
                    $BootLogoAtomId = isset($Atom['Atom']['id']) ? $Atom['Atom']['id'] : 0;
                    $LogoSource = isset($Atom['Atom']['source']) ? $Atom['Atom']['source'] : 'OCS';
                }
                if ('SW_PQ' == $ProdAttr['ProdAttr']['alias']) {
                    $PQAtomId = isset($Atom['Atom']['id']) ? $Atom['Atom']['id'] : 0;
                    $PQSource = isset($Atom['Atom']['source']) ? $Atom['Atom']['source'] : 'OCS';
                }
                if ('SW_VolumeCurve' == $ProdAttr['ProdAttr']['alias']) {
                    $VolumeCurveAtomId = isset($Atom['Atom']['id']) ? $Atom['Atom']['id'] : 0;
                    $VolumeCurveSource = isset($Atom['Atom']['source']) ? $Atom['Atom']['source'] : 'OCS';
                }
                if ('SW_Panel' == $ProdAttr['ProdAttr']['alias']) {
                    $PanelAtomId = isset($Atom['Atom']['id']) ? $Atom['Atom']['id'] : 0;
                }
                if ('SW_DefaultCountry' == $ProdAttr['ProdAttr']['alias']) {
                    $DefaultLanguage = isset($Atom['Atom']['name_sw']) ? $Atom['Atom']['name_sw'] : 'ASIA_PACIFIC';
                }
            }
        }

        $RdDeptId = $g_ProdModel->getProdModelRdDeptId($ProdModel['ProdModel']['id']);
        $Board = '';
        if (isset($Req['hw_opt_ids_json'])) {
            $BasicBoard = '';
            $OptFuncBoard = '';
            $TaskHwInfoTmp = json_decode($Req['hw_opt_ids_json']);
            foreach ($TaskHwInfoTmp as $ProdAttrId => $ProdOptIds) {
                $ProdAttr = $g_ProdAttr->findById($ProdAttrId);
                if ('HW_BasicFunc' == $ProdAttr['ProdAttr']['alias']) {
                    foreach ($ProdOptIds as $ProdOptId) {
                        $ProdModelRelOpt = $g_ProdModel->ProdModelRelOpt->findByProdModelIdAndProdOptId($ProdModel['ProdModel']['id'], $ProdOptId);
                        if (!empty($ProdModelRelOpt['ProdModelRelOpt']['auto_build_note'])) {
                            $BasicBoard = $ProdModelRelOpt['ProdModelRelOpt']['auto_build_note'];
                            break;
                        }
                    }
                } else if ('HW_OptFunc' == $ProdAttr['ProdAttr']['alias']) {
                    foreach ($ProdOptIds as $ProdOptId) {
                        $ProdModelRelOpt = $g_ProdModel->ProdModelRelOpt->findByProdModelIdAndProdOptId($ProdModel['ProdModel']['id'], $ProdOptId);
                        if (!empty($ProdModelRelOpt['ProdModelRelOpt']['auto_build_note'])) {
                            $OptFuncBoard = $ProdModelRelOpt['ProdModelRelOpt']['auto_build_note'];
                            break;
                        }
                    }
                }
                $ProdModelName = isset($ProdModel['ProdModel']['name']) ? $ProdModel['ProdModel']['name'] : '';
                $ProdModelDetail = $g_ProdModelDetail->find('first', array('conditions' => array('prod_model_id' => $ProdModel['ProdModel']['id'], 'use_state != ' => '作废', 'use_state != ' => '已作废'), 'fields' => array('version')));
                if ('' != $ProdModelName) {
                    if (!empty($ProdModelDetail['ProdModelDetail']['version'])) {
                        $Board = $ProdModelName . $ProdModelDetail['ProdModelDetail']['version'] . '_' . $BasicBoard;
                    } else {
                        $Board = $ProdModelName . '_' . $BasicBoard;
                    }
                }
                if (!empty($OptFuncBoard)) {
                    $Board .= '_' . $OptFuncBoard;
                }
                $Board = str_replace('.', '_', $Board);
            }
        }

        $SwNames = array();
        if (isset($Req['sw_name_json']) && !empty($Req['sw_name_json']) && '' != $Req['sw_name_json']) {
            $SwNames = $g_Commons->objectToArray(json_decode($Req['sw_name_json']));
        }

        $excelCols['BASE-SID'] = 'BASE-SID';
        $excelCols['MACRO-_MANTIS_NO_'] = 'MACRO-_MANTIS_NO_';
        $excelCols['BASE-CPS_NO'] = 'BASE-CPS_NO';
        $excelCols['BASE-CUSTOMER'] = 'BASE-CUSTOMER';
        $excelCols['BASE-CUSTOMER_ID'] = 'BASE-CUSTOMER_ID';
        $excelCols['BASE-PLATFORM'] = 'BASE-PLATFORM';
        $excelCols['BASE-BOARD'] = 'BASE-BOARD';
        $excelCols['MACRO-BOARD_NAME_DETAIL'] = 'MACRO-BOARD_NAME_DETAIL';
        $excelCols['BASE-MODE_ID'] = 'BASE-MODE_ID';
        $excelCols['BASE-AUTO_MODE_ID'] = 'BASE-AUTO_MODE_ID';
        $excelCols['BASE-CONFIG'] = 'BASE-CONFIG';
        $excelCols['BASE-WHAT'] = 'BASE-WHAT';
        $excelCols['BASE-WHY'] = 'BASE-WHY';
        $excelCols['BASE-HOW'] = 'BASE-HOW';
        $excelCols['BASE-FILES'] = 'BASE-FILES';
        $excelCols['BASE-URL'] = 'BASE-URL';
        $excelCols['MACRO-PANEL_ID'] = 'MACRO-PANEL_ID';
        if (isset($SwNames['SW_Panel'])) {
            $excelCols['MACRO-PANEL_NAME'] = (0 == $SwNames['SW_Panel']) ? 'MACRO_ONLY-PANEL_NAME' : 'MACRO_NAME-PANEL_NAME';
        } else {
            $excelCols['MACRO-PANEL_NAME'] = 'MACRO-PANEL_NAME';
        }
        if (isset($Req['panel_label']) && !empty($Req['panel_label']) && '' != $Req['panel_label']) {
            $excelCols['MACRO-PANEL_FAC_MODEL'] = 'MACRO-PANEL_FAC_MODEL';
        }
        if (isset($Req['menu_version']) && !empty($Req['menu_version']) && '' != $Req['menu_version']) {
            $excelCols['MACRO-MENU_VERSION'] = 'MACRO-MENU_VERSION';
        }
        if (isset($Req['menu_version2']) && !empty($Req['menu_version2']) && '' != $Req['menu_version2']) {
            $excelCols['MACRO-MENU_VERSION2'] = 'MACRO-MENU_VERSION2';
        }
        $excelCols['MACRO-IR_ID'] = 'MACRO-IR_ID';
        $excelCols['MACRO-KEYPAD_ID'] = 'MACRO-KEYPAD_ID';
        $excelCols['MACRO-KEYPAD_NAME'] = 'MACRO-KEYPAD_NAME';
        if ('CPS' == $KeyPadSource) {
            $excelCols['MACRO-KEYPAD_K0'] = 'MACRO-KEYPAD_K0';
            $excelCols['MACRO-KEYPAD_K1'] = 'MACRO-KEYPAD_K1';
            $excelCols['MACRO-KEYPAD_K2'] = 'MACRO-KEYPAD_K2';
            $excelCols['MACRO-KEYPAD_K3'] = 'MACRO-KEYPAD_K3';
            $excelCols['MACRO-KEYPAD_K4'] = 'MACRO-KEYPAD_K4';
            $excelCols['MACRO-KEYPAD_K5'] = 'MACRO-KEYPAD_K5';
            $excelCols['MACRO-KEYPAD_K6'] = 'MACRO-KEYPAD_K6';
            $excelCols['MACRO-KEYPAD_K7'] = 'MACRO-KEYPAD_K7';
            $excelCols['MACRO-KEYPAD_K8'] = 'MACRO-KEYPAD_K8';
            $excelCols['MACRO-KEYPAD_K9'] = 'MACRO-KEYPAD_K9';
        }
        $excelCols['MACRO-LOGO_ID'] = 'MACRO-LOGO_ID';
        $excelCols['MACRO-LOGO_NAME'] = 'MACRO-LOGO_NAME';
        if (!empty($TaskSwInfo['SW_VolumeCurve'][0]) && 'VC_NONE' != $TaskSwInfo['SW_VolumeCurve'][0] && 'NONE' != $TaskSwInfo['SW_VolumeCurve'][0]) {
            $excelCols['MACRO-VOLUME_CURVE'] = 'MACRO-VOLUME_CURVE';
            $excelCols['NEW-VOLUME_CURVE'] = 'NEW-VOLUME_CURVE';
        }
        $excelCols['NEW-LOGO_ID'] = 'NEW-LOGO_ID';
        $excelCols['RETURN-COMPILE'] = 'RETURN-COMPILE';
        if (isset($TaskSwInfo['SW_Language'])) {
            foreach ($TaskSwInfo['SW_Language'] as $One) {
                $LanguageRow = 'MACRO-OSD_MENU_LANGUAGE_' . $One;
                $excelCols[$LanguageRow] = $LanguageRow;
            }
        }
        // ModeID中的语言列
        if (isset($Req['mode_id_id'])) {
            $SwModeIdRelAtoms = $g_SwModeIdRelAtom->find('all', array('conditions' => array('mode_id_id' => $Req['mode_id_id'], 'prod_attr_id' => SW_Language), 'fields' => array('atom_id')));
            if (!empty($SwModeIdRelAtoms)) {
                foreach ($SwModeIdRelAtoms as $SwModeIdRelAtom) {
                    $Atom = $g_Atom->find('first', array('conditions' => array('id' => $SwModeIdRelAtom['SwModeIdRelAtom']['atom_id']), 'fields' => array('name_sw')));
                    if (!empty($Atom) && !empty($Atom['Atom']['name_sw'])) {
                        $LanguageRow = 'MACRO-OSD_MENU_LANGUAGE_' . $Atom['Atom']['name_sw'];
                        $excelCols[$LanguageRow] = $LanguageRow;
                    }
                }
            }
        }
        if (isset($SwNames['SW_DefaultLanguage'])) {
            $excelCols['MACRO-OSD_MENU_DEFAULT_LANGUAGE'] = (0 == $SwNames['SW_DefaultLanguage']) ? 'MACRO_ONLY-OSD_MENU_DEFAULT_LANGUAGE' : 'MACRO_NAME-OSD_MENU_DEFAULT_LANGUAGE';
        } else {
            $excelCols['MACRO-OSD_MENU_DEFAULT_LANGUAGE'] = 'MACRO-OSD_MENU_DEFAULT_LANGUAGE';
        }
        $excelCols['MACRO-BACKLIGHT_TYPE'] = 'MACRO-BACKLIGHT_TYPE';
        $excelCols['MACRO-BACKLIGHT_VALUE'] = 'MACRO-BACKLIGHT_VALUE';
        $excelCols['MACRO-PWM_FREQ'] = 'MACRO-PWM_FREQ';
        $excelCols['MACRO-120HZ_BOARD_TYPE'] = 'MACRO-120HZ_BOARD_TYPE';
        $excelCols['MACRO-MIRROR'] = 'MACRO-MIRROR';
        if (isset($SwNames['SW_LvdsMap'])) {
            $excelCols['MACRO-LVDSMAP'] = (0 == $SwNames['SW_LvdsMap']) ? 'MACRO_ONLY-LVDSMAP' : 'MACRO_NAME-LVDSMAP';
        } else {
            $excelCols['MACRO-LVDSMAP'] = 'MACRO-LVDSMAP';
        }
        $excelCols['MACRO-3D_TYPE'] = 'MACRO-3D_TYPE';
        $excelCols['MACRO-POWER_CURRENT'] = 'MACRO-POWER_CURRENT';
        if (isset($TaskSwInfo['SW_PQ'][0]) && 'PQ_NONE' != $TaskSwInfo['SW_PQ'][0] && 'NONE' != $TaskSwInfo['SW_PQ'][0]) {
            $excelCols['MACRO-PQ_TYPE'] = 'MACRO-PQ_TYPE';
            $excelCols['NEW-PQ_TYPE'] = 'NEW-PQ_TYPE';
        }
        if (isset($TaskSwInfo['SW_OverScan'][0]) && 'OVERSCAN_NONE' != $TaskSwInfo['SW_OverScan'][0] && 'NONE' != $TaskSwInfo['SW_OverScan'][0]) {
            $excelCols['MACRO-CAPTURE_WIN_TYPE'] = 'MACRO-CAPTURE_WIN_TYPE';
        }
        if (isset($TaskSwInfo['SW_TV_CaptureLogo'][0]) && 'CaptureLogo_NONE' != $TaskSwInfo['SW_TV_CaptureLogo'][0] && 'NONE' != $TaskSwInfo['SW_TV_CaptureLogo'][0]) {
            $excelCols['MACRO-CAPTURE_LOGO'] = 'MACRO-CAPTURE_LOGO';
        }
        if (isset($TaskSwInfo['SW_PowerStatus'][0]) && 'POWERON_MODE_NONE' != $TaskSwInfo['SW_PowerStatus'][0] && 'NONE' != $TaskSwInfo['SW_PowerStatus'][0]) {
            $excelCols['MACRO-DEFAULT_POWER_STATUS'] = 'MACRO-DEFAULT_POWER_STATUS';
        }
        if (isset($TaskSwInfo['SW_DefaultInputSource'][0]) && 'UI_INPUT_SOURCE_OFF' != $TaskSwInfo['SW_DefaultInputSource'][0] && 'NONE' != $TaskSwInfo['SW_DefaultInputSource'][0]) {
            $excelCols['MACRO-INPUT_SOURCE_TYPE'] = 'MACRO-INPUT_SOURCE_TYPE';
        }
        if (isset($TaskSwInfo['SW_FreeRun'][0]) && 'FreeRun_NONE' != $TaskSwInfo['SW_FreeRun'][0] && 'NONE' != $TaskSwInfo['SW_FreeRun'][0]) {
            $excelCols['MACRO-FREERUN'] = 'MACRO-FREERUN';
        }
        if (isset($TaskSwInfo['SW_DefaultVolume'][0]) && 'Volume_NONE' != $TaskSwInfo['SW_DefaultVolume'][0] && 'NONE' != $TaskSwInfo['SW_DefaultVolume'][0]) {
            $excelCols['MACRO-DEFAULT_VOLUME'] = 'MACRO-DEFAULT_VOLUME';
        }
        if (isset($TaskSwInfo['SW_TVColorSystem'][0]) && 'TV_COLOR_SYSTEM_NONE' != $TaskSwInfo['SW_TVColorSystem'][0] && 'NONE' != $TaskSwInfo['SW_TVColorSystem'][0]) {
            $excelCols['MACRO-TV_COLOR_SYSTEM'] = 'MACRO-TV_COLOR_SYSTEM';
        }
        if (isset($TaskSwInfo['SW_TVSoundSystem'][0]) && 'TV_SOUND_SYSTEM_NONE' != $TaskSwInfo['SW_TVSoundSystem'][0] && 'NONE' != $TaskSwInfo['SW_TVSoundSystem'][0]) {
            $excelCols['MACRO-TV_SOUND_SYSTEM'] = 'MACRO-TV_SOUND_SYSTEM';
        }
        if (isset($TaskSwInfo['SW_Teletext'][0]) && 'NONE' != $TaskSwInfo['SW_Teletext'][0]) {
            $excelCols['MACRO-TELETEXT'] = 'MACRO-TELETEXT';
        }
        if (isset($TaskSwInfo['SW_TTLang'][0]) && 'TT_LANG_NONE' != $TaskSwInfo['SW_TTLang'][0] && 'NONE' != $TaskSwInfo['SW_TTLang'][0]) {
            $excelCols['MACRO-TT_LANG'] = 'MACRO-TT_LANG';
        }
        if (isset($TaskSwInfo['SW_NICAM'][0]) && 'NICAM_NONE' != $TaskSwInfo['SW_NICAM'][0] && 'NONE' != $TaskSwInfo['SW_NICAM'][0]) {
            $excelCols['MACRO-NICAM'] = 'MACRO-NICAM';
        }
        if (isset($TaskSwInfo['SW_HashKeyType'][0])) {
            $excelCols['MACRO-HASHKEY_TYPE'] = 'MACRO-HASHKEY_TYPE';
        }
        if (isset($TaskSwInfo['SW_BlueScreen'][0]) && 'BlueScreen_NONE' != $TaskSwInfo['SW_BlueScreen'][0] && 'NONE' != $TaskSwInfo['SW_BlueScreen'][0]) {
            $excelCols['MACRO-BLUE_SCREEN'] = 'MACRO-BLUE_SCREEN';
        }
        if (isset($TaskSwInfo['SW_TV_LCN'][0]) && 'LCN_NONE' != $TaskSwInfo['SW_TV_LCN'][0] && 'NONE' != $TaskSwInfo['SW_TV_LCN'][0]) {
            $excelCols['MACRO-DEFAULT_LCN'] = 'MACRO-DEFAULT_LCN';
        }
        if (isset($TaskSwInfo['SW_TV_SPDIF'][0]) && 'SPDIF_NONE' != $TaskSwInfo['SW_TV_SPDIF'][0] && 'NONE' != $TaskSwInfo['SW_TV_SPDIF'][0]) {
            $excelCols['MACRO-CVT_EN_SPDIF'] = 'MACRO-CVT_EN_SPDIF';
        }
        if (isset($TaskSwInfo['SW_OptFunc_CIPlus'][0]) && 'CI_PLUS_NONE' != $TaskSwInfo['SW_OptFunc_CIPlus'][0] && 'NONE' != $TaskSwInfo['SW_OptFunc_CIPlus'][0]) {
            $excelCols['MACRO-CVT_EN_CI_PLUS'] = 'MACRO-CVT_EN_CI_PLUS';
        }
        if (isset($TaskSwInfo['SW_OptFunc_CI'][0]) && 'CI_NONE' != $TaskSwInfo['SW_OptFunc_CI'][0] && 'NONE' != $TaskSwInfo['SW_OptFunc_CI'][0]) {
            $excelCols['MACRO-CVT_EN_CI'] = 'MACRO-CVT_EN_CI';
        }
        if (isset($TaskSwInfo['SW_TV_DVB_C'][0]) && 'DVB_C_NONE' != $TaskSwInfo['SW_TV_DVB_C'][0] && 'NONE' != $TaskSwInfo['SW_TV_DVB_C'][0]) {
            $excelCols['MACRO-CVT_EN_DVBC'] = 'MACRO-CVT_EN_DVBC';
        }
        if (isset($TaskSwInfo['SW_ChipSeries'][0])) {
            $excelCols['MACRO-CHIP_ID'] = 'MACRO-CHIP_ID';
        }
        $ItemNum = count($excelCols);

        $StatementDatas = array();
        $StatementData = array();
        $StatementData[$excelCols['BASE-SID']] = $QueueJobId;
        $StatementData[$excelCols['MACRO-_MANTIS_NO_']] = !empty($Req['ocs_task_id']) ? '"OCS' . $Req['ocs_task_id'] . '"' : '';
        if ('' == $StatementData[$excelCols['MACRO-_MANTIS_NO_']]) {
            $BillNo = '';
            if (isset($Req['bill_no'])) {
                $BillNo = '"' . str_replace('TVSWB-', 'CPS', $Req['bill_no']) . '"';
            }
            $StatementData[$excelCols['MACRO-_MANTIS_NO_']] = $BillNo;
        }
        $StatementData[$excelCols['BASE-CPS_NO']] = empty($Req['bill_no']) ? '' : '"' . str_replace('TVSWB-', 'CPS', $Req['bill_no']) . '"';
        $StatementData[$excelCols['BASE-CUSTOMER']] = $CustomerName;
        $StatementData[$excelCols['BASE-CUSTOMER_ID']] = $CustomerId;
        if (!empty($Task) && isset($ProjectTeamList[$Task['Task']['rd_dept_id']])) {
            $StatementData[$excelCols['BASE-PLATFORM']] = $ProjectTeamList[$Task['Task']['rd_dept_id']];
        } else {
            if (isset($ProjectTeamList[$RdDeptId])) {
                $StatementData[$excelCols['BASE-PLATFORM']] = $ProjectTeamList[$RdDeptId];
            } else {
                $StatementData[$excelCols['BASE-PLATFORM']] = '';
            }
        }
        // 软件名字上的板卡命名
        $BoardSwName = '';
        $BoardSwCode = '';
        $BoardMacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $Board, 'macro_group' => 'BOARD'), 'fields' => array('macro', 'sw_name')));
        if (!empty($BoardMacroMap)) {
            $BoardSwName = isset($BoardMacroMap['MacroMap']['sw_name']) ? $BoardMacroMap['MacroMap']['sw_name'] : $Board;
            $BoardSwCode = isset($BoardMacroMap['MacroMap']['macro']) ? $BoardMacroMap['MacroMap']['macro'] : $Board;
        }
        if (empty($BoardSwName) || '' == $BoardSwName) {
            $BoardSwName = $Board;
        }
        if (empty($BoardSwCode) || '' == $BoardSwCode) {
            $BoardSwCode = $Board;
        }
        switch ($DefaultLanguage) {
            case 'SOUTH_AMERICA':
                $Board = $this->TVBoardReplace($Board, 'CH', 'US');
                $BoardSwName = $this->TVBoardReplace($BoardSwName, 'CH', 'US');
                $BoardSwCode = $this->TVBoardReplace($BoardSwCode, 'CH', 'US');
                break;
        }
        if (!empty($Board)) {
            $StatementData[$excelCols['BASE-BOARD']] = $BoardSwCode;
        } else {
            $StatementData[$excelCols['BASE-BOARD']] = isset($ProdModel['ProdModel']['name']) ? $ProdModel['ProdModel']['name'] : '';
        }
        $StatementData[$excelCols['MACRO-BOARD_NAME_DETAIL']] = $BoardSwName;
        $StatementData[$excelCols['BASE-MODE_ID']] = '';
        // 如果从旧的软件复制到新的软件，则BASE-MODE_ID为就的软件的MODE_ID
        if (isset($Req['mode_id_id'])) {
            $SwModeId = $g_SwModeId->find('first', array('conditions' => array('id' => $Req['mode_id_id']), 'fields' => array('mode_id')));
            if (!empty($SwModeId)) {
                $StatementData[$excelCols['BASE-MODE_ID']] = $SwModeId['SwModeId']['mode_id'];
            }
        }
        if (isset($Req['model_id_label']) && !empty($Req['model_id_label']) && '' != $Req['model_id_label']) {
            $StatementData[$excelCols['BASE-AUTO_MODE_ID']] = $Req['model_id_label'];
        } else {
            $StatementData[$excelCols['BASE-AUTO_MODE_ID']] = 'CVTE_AutoCompile';
        }
        $StatementData[$excelCols['BASE-CONFIG']] = '';
        $StatementData[$excelCols['BASE-WHAT']] = isset($Req['bill_no']) ? $Req['bill_no'] : '';
        $StatementData[$excelCols['BASE-WHY']] = '';
        $StatementData[$excelCols['BASE-HOW']] = '';
        $StatementData[$excelCols['BASE-FILES']] = $CustomerHeadFilePath;
        $StatementData[$excelCols['BASE-URL']] = $SvnUrl;

        $old_dept_ids = array(17, 50, 48, 43, 74);

        if (isset($Req['panel_label']) && !empty($Req['panel_label']) && '' != $Req['panel_label']) {
            $StatementData[$excelCols['MACRO-PANEL_FAC_MODEL']] = $Req['panel_label'];
        }
        if (isset($Req['menu_version']) && !empty($Req['menu_version']) && '' != $Req['menu_version']) {
            $StatementData[$excelCols['MACRO-MENU_VERSION']] = $Req['menu_version'];
        }
        if (isset($Req['menu_version2']) && !empty($Req['menu_version2']) && '' != $Req['menu_version2']) {
            $StatementData[$excelCols['MACRO-MENU_VERSION2']] = $Req['menu_version2'];
        }

        if (in_array($RdDeptId, $old_dept_ids)) {
            // 59旧的方案沿用老的方式生成excel
            if (isset($TaskSwInfo['SW_Panel'][0])) {
                $PanelMacro = $g_AtomMacros->getAtomMacro($PanelAtomId, $RdDeptId, $Req['account_id']);
                $StatementData[$excelCols['MACRO-PANEL_ID']] = !empty($PanelMacro) ? $PanelMacro : $TaskSwInfo['SW_Panel'][0];
            } else {
                $StatementData[$excelCols['MACRO-PANEL_ID']] = '';
            }
            $StatementData[$excelCols['MACRO-PANEL_NAME']] = isset($TaskSwInfo['SW_Panel'][0]) ? $TaskSwInfo['SW_Panel'][0] : '';
            // PANEL_FAC_MODEL
            $StatementData[$excelCols['MACRO-IR_ID']] = isset($TaskSwInfo['SW_RemoteControl'][0]) ? $TaskSwInfo['SW_RemoteControl'][0] : '';
            if ('CPS' == $KeyPadSource) {
                $StatementData[$excelCols['MACRO-KEYPAD_ID']] = 'KEYPAD_AUTOCOMPILE';
                $StatementData[$excelCols['MACRO-KEYPAD_NAME']] = isset($TaskSwInfo['SW_KeyboardType'][0]) ? $TaskSwInfo['SW_KeyboardType'][0] : '';
                if (isset($TaskSwInfo['SW_KeyBoard'][0])) {
                    $K0MacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_KeyBoard'][0]), 'fields' => array('macro', 'sw_name')));
                }
                if (isset($TaskSwInfo['SW_KeyBoard'][1])) {
                    $K1MacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_KeyBoard'][1]), 'fields' => array('macro', 'sw_name')));
                }
                if (isset($TaskSwInfo['SW_KeyBoard'][2])) {
                    $K2MacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_KeyBoard'][2]), 'fields' => array('macro', 'sw_name')));
                }
                if (isset($TaskSwInfo['SW_KeyBoard'][3])) {
                    $K3MacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_KeyBoard'][3]), 'fields' => array('macro', 'sw_name')));
                }
                if (isset($TaskSwInfo['SW_KeyBoard'][4])) {
                    $K4MacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_KeyBoard'][4]), 'fields' => array('macro', 'sw_name')));
                }
                if (isset($TaskSwInfo['SW_KeyBoard'][5])) {
                    $K5MacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_KeyBoard'][5]), 'fields' => array('macro', 'sw_name')));
                }
                if (isset($TaskSwInfo['SW_KeyBoard'][6])) {
                    $K6MacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_KeyBoard'][6]), 'fields' => array('macro', 'sw_name')));
                }
                if (isset($TaskSwInfo['SW_KeyBoard'][7])) {
                    $K7MacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_KeyBoard'][7]), 'fields' => array('macro', 'sw_name')));
                }
                if (isset($TaskSwInfo['SW_KeyBoard'][8])) {
                    $K8MacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_KeyBoard'][8]), 'fields' => array('macro', 'sw_name')));
                }
                if (isset($TaskSwInfo['SW_KeyBoard'][9])) {
                    $K9MacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_KeyBoard'][9]), 'fields' => array('macro', 'sw_name')));
                }
                if (!empty($K0MacroMap)) {
                    $StatementData[$excelCols['MACRO-KEYPAD_K0']] = isset($K0MacroMap['MacroMap']['macro']) ? $K0MacroMap['MacroMap']['macro'] : '';
                } else {
                    $StatementData[$excelCols['MACRO-KEYPAD_K0']] = isset($TaskSwInfo['SW_KeyBoard'][0]) ? $this->changKeypadButton($TaskSwInfo['SW_KeyBoard'][0]) : '';
                }
                if (!empty($K1MacroMap)) {
                    $StatementData[$excelCols['MACRO-KEYPAD_K1']] = isset($K1MacroMap['MacroMap']['macro']) ? $K1MacroMap['MacroMap']['macro'] : '';
                } else {
                    $StatementData[$excelCols['MACRO-KEYPAD_K1']] = isset($TaskSwInfo['SW_KeyBoard'][1]) ? $this->changKeypadButton($TaskSwInfo['SW_KeyBoard'][1]) : '';
                }
                if (!empty($K2MacroMap)) {
                    $StatementData[$excelCols['MACRO-KEYPAD_K2']] = isset($K2MacroMap['MacroMap']['macro']) ? $K2MacroMap['MacroMap']['macro'] : '';
                } else {
                    $StatementData[$excelCols['MACRO-KEYPAD_K2']] = isset($TaskSwInfo['SW_KeyBoard'][2]) ? $this->changKeypadButton($TaskSwInfo['SW_KeyBoard'][2]) : '';
                }
                if (!empty($K3MacroMap)) {
                    $StatementData[$excelCols['MACRO-KEYPAD_K3']] = isset($K3MacroMap['MacroMap']['macro']) ? $K3MacroMap['MacroMap']['macro'] : '';
                } else {
                    $StatementData[$excelCols['MACRO-KEYPAD_K3']] = isset($TaskSwInfo['SW_KeyBoard'][3]) ? $this->changKeypadButton($TaskSwInfo['SW_KeyBoard'][3]) : '';
                }
                if (!empty($K4MacroMap)) {
                    $StatementData[$excelCols['MACRO-KEYPAD_K4']] = isset($K4MacroMap['MacroMap']['macro']) ? $K4MacroMap['MacroMap']['macro'] : '';
                } else {
                    $StatementData[$excelCols['MACRO-KEYPAD_K4']] = isset($TaskSwInfo['SW_KeyBoard'][4]) ? $this->changKeypadButton($TaskSwInfo['SW_KeyBoard'][4]) : '';
                }
                if (!empty($K5MacroMap)) {
                    $StatementData[$excelCols['MACRO-KEYPAD_K5']] = isset($K5MacroMap['MacroMap']['macro']) ? $K5MacroMap['MacroMap']['macro'] : '';
                } else {
                    $StatementData[$excelCols['MACRO-KEYPAD_K5']] = isset($TaskSwInfo['SW_KeyBoard'][5]) ? $this->changKeypadButton($TaskSwInfo['SW_KeyBoard'][5]) : '';
                }
                if (!empty($K6MacroMap)) {
                    $StatementData[$excelCols['MACRO-KEYPAD_K6']] = isset($K6MacroMap['MacroMap']['macro']) ? $K6MacroMap['MacroMap']['macro'] : '';
                } else {
                    $StatementData[$excelCols['MACRO-KEYPAD_K6']] = isset($TaskSwInfo['SW_KeyBoard'][6]) ? $this->changKeypadButton($TaskSwInfo['SW_KeyBoard'][6]) : '';
                }
                if (!empty($K7MacroMap)) {
                    $StatementData[$excelCols['MACRO-KEYPAD_K7']] = isset($K7MacroMap['MacroMap']['macro']) ? $K7MacroMap['MacroMap']['macro'] : '';
                } else {
                    $StatementData[$excelCols['MACRO-KEYPAD_K7']] = isset($TaskSwInfo['SW_KeyBoard'][7]) ? $this->changKeypadButton($TaskSwInfo['SW_KeyBoard'][7]) : '';
                }
                if (!empty($K8MacroMap)) {
                    $StatementData[$excelCols['MACRO-KEYPAD_K8']] = isset($K8MacroMap['MacroMap']['macro']) ? $K8MacroMap['MacroMap']['macro'] : '';
                } else {
                    $StatementData[$excelCols['MACRO-KEYPAD_K8']] = isset($TaskSwInfo['SW_KeyBoard'][8]) ? $this->changKeypadButton($TaskSwInfo['SW_KeyBoard'][8]) : '';
                }
                if (!empty($K9MacroMap)) {
                    $StatementData[$excelCols['MACRO-KEYPAD_K9']] = isset($K9MacroMap['MacroMap']['macro']) ? $K9MacroMap['MacroMap']['macro'] : '';
                } else {
                    $StatementData[$excelCols['MACRO-KEYPAD_K9']] = isset($TaskSwInfo['SW_KeyBoard'][9]) ? $this->changKeypadButton($TaskSwInfo['SW_KeyBoard'][9]) : '';
                }
            } else {
                $StatementData[$excelCols['MACRO-KEYPAD_ID']] = isset($TaskSwInfo['SW_KeyboardType'][0]) ? $TaskSwInfo['SW_KeyboardType'][0] : '';
                $StatementData[$excelCols['MACRO-KEYPAD_NAME']] = isset($TaskSwInfo['SW_KeyboardType'][0]) ? $TaskSwInfo['SW_KeyboardType'][0] : '';
            }
            if ('OCS' == $VolumeCurveSource) {
                if (!empty($TaskSwInfo['SW_VolumeCurve'][0]) && 'VC_NONE' != $TaskSwInfo['SW_VolumeCurve'][0] && 'NONE' != $TaskSwInfo['SW_VolumeCurve'][0]) {
                    $StatementData[$excelCols['MACRO-VOLUME_CURVE']] = $TaskSwInfo['SW_VolumeCurve'][0];
                    $StatementData[$excelCols['NEW-VOLUME_CURVE']] = '';
                }
            } else if ('CPS' == $VolumeCurveSource) {
                if (isset($TaskSwInfo['SW_VolumeCurve'][0]) && 'VC_NONE' != $TaskSwInfo['SW_VolumeCurve'][0] && 'NONE' != $TaskSwInfo['SW_VolumeCurve'][0]) {
                    $StatementData[$excelCols['MACRO-VOLUME_CURVE']] = $TaskSwInfo['SW_VolumeCurve'][0];
                    $AtomFile = $g_AtomFile->find('first', array('conditions' => array('atom_id' => $VolumeCurveAtomId, 'code_path_id' => $code_path_id), 'fields' => array('url')));
                    if (!empty($AtomFile) && !empty($AtomFile['AtomFile']['url'])) {
                        $StatementData[$excelCols['NEW-VOLUME_CURVE']] = $g_FS_options['url'] . 'getFile.php?uuid=' . $AtomFile['AtomFile']['url'];
                    } else {
                        $StatementData[$excelCols['NEW-VOLUME_CURVE']] = '';
                    }
                }
            }
            if ('OCS' == $LogoSource) {
                if (isset($TaskSwInfo['SW_BootLogo'][0])) {
                    $BootLogoMacro = $g_AtomMacros->getAtomMacro($BootLogoAtomId, $RdDeptId, $Req['account_id']);
                    $StatementData[$excelCols['MACRO-LOGO_ID']] = !empty($BootLogoMacro) ? $BootLogoMacro : $TaskSwInfo['SW_BootLogo'][0];
                } else {
                    $StatementData[$excelCols['MACRO-LOGO_ID']] = 'LOGO_NONE';
                }
                $StatementData[$excelCols['MACRO-LOGO_NAME']] = $StatementData[$excelCols['MACRO-LOGO_ID']];
                $StatementData[$excelCols['NEW-LOGO_ID']] = '';
            } else if ('CPS' == $LogoSource) {
                if (isset($TaskSwInfo['SW_BootLogo'][0])) {
                    $BootLogoMacro = $g_AtomMacros->getAtomMacro($BootLogoAtomId, $RdDeptId, $Req['account_id']);
                    $StatementData[$excelCols['MACRO-LOGO_NAME']] = !empty($BootLogoMacro) ? $BootLogoMacro : $TaskSwInfo['SW_BootLogo'][0];
                } else {
                    $StatementData[$excelCols['MACRO-LOGO_NAME']] = 'LOGO_NONE';
                }
                //$StatementData[$excelCols['MACRO-LOGO_ID']] = 'LOGO_AUTOCOMPILE'; // 改成上传LOGO图片的形式 2014-06-06
                $StatementData[$excelCols['MACRO-LOGO_ID']] = $StatementData[$excelCols['MACRO-LOGO_NAME']];
                $AtomImage = $g_AtomImage->find('first', array('conditions' => array('atom_id' => $BootLogoAtomId), 'fields' => array('url')));
                if (!empty($AtomImage) && !empty($AtomImage['AtomImage']['url'])) {
                    $StatementData[$excelCols['NEW-LOGO_ID']] = $g_FS_options['url'] . 'getFile.php?uuid=' . $AtomImage['AtomImage']['url'] . '&size=source';
                } else {
                    $StatementData[$excelCols['NEW-LOGO_ID']] = '';
                }
            }
            $StatementData[$excelCols['RETURN-COMPILE']] = 'N';
            // ModeID中的语言列
            if (isset($Req['mode_id_id'])) {
                $SwModeIdRelAtoms = $g_SwModeIdRelAtom->find('all', array('conditions' => array('mode_id_id' => $Req['mode_id_id'], 'prod_attr_id' => SW_Language), 'fields' => array('atom_id')));
                if (!empty($SwModeIdRelAtoms)) {
                    foreach ($SwModeIdRelAtoms as $SwModeIdRelAtom) {
                        $Atom = $g_Atom->find('first', array('conditions' => array('id' => $SwModeIdRelAtom['SwModeIdRelAtom']['atom_id']), 'fields' => array('name_sw')));
                        if (!empty($Atom) && !empty($Atom['Atom']['name_sw'])) {
                            $LanguageRow = 'MACRO-OSD_MENU_LANGUAGE_' . $Atom['Atom']['name_sw'];
                            $StatementData[$excelCols[$LanguageRow]] = 0;
                        }
                    }
                }
            }
            if (isset($TaskSwInfo['SW_Language'])) {
                foreach ($TaskSwInfo['SW_Language'] as $One) {
                    $LanguageRow = 'MACRO-OSD_MENU_LANGUAGE_' . $One;
                    $StatementData[$excelCols[$LanguageRow]] = 1;
                }
            }
            $LanguageMacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_DefaultLanguage'][0]), 'fields' => array('macro', 'sw_name')));
            if (!empty($LanguageMacroMap)) {
                $StatementData[$excelCols['MACRO-OSD_MENU_DEFAULT_LANGUAGE']] = isset($LanguageMacroMap['MacroMap']['macro']) ? $LanguageMacroMap['MacroMap']['macro'] : '';
            } else {
                $StatementData[$excelCols['MACRO-OSD_MENU_DEFAULT_LANGUAGE']] = isset($TaskSwInfo['SW_DefaultLanguage'][0]) ? $TaskSwInfo['SW_DefaultLanguage'][0] : '';
            }
            $StatementData[$excelCols['MACRO-BACKLIGHT_TYPE']] = isset($TaskSwInfo['SW_Backlight'][0]) ? $TaskSwInfo['SW_Backlight'][0] : '';
            $StatementData[$excelCols['MACRO-BACKLIGHT_VALUE']] = isset($TaskSwInfo['SW_Backlight_Default'][0]) ? $TaskSwInfo['SW_Backlight_Default'][0] : 0;
            $StatementData[$excelCols['MACRO-PWM_FREQ']] = isset($TaskSwInfo['SW_PWM_Freq'][0]) ? $TaskSwInfo['SW_PWM_Freq'][0] : 200000;
            if (isset($TaskSwInfo['SW_120HzBoardType'][0])) {
                $BoardType120HZMacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_120HzBoardType'][0]), 'fields' => array('macro', 'sw_name')));
            }
            if (!empty($BoardType120HZMacroMap)) {
                $StatementData[$excelCols['MACRO-120HZ_BOARD_TYPE']] = isset($BoardType120HZMacroMap['MacroMap']['macro']) ? $BoardType120HZMacroMap['MacroMap']['macro'] : '';
            } else {
                $StatementData[$excelCols['MACRO-120HZ_BOARD_TYPE']] = isset($TaskSwInfo['SW_120HzBoardType'][0]) ? $TaskSwInfo['SW_120HzBoardType'][0] : '';
            }
            $MirrorMacroMap = $g_MacroMap->find('first', array('conditions' => array('rd_dept_id' => $RdDeptId, 'atom_name' => $TaskSwInfo['SW_Mirror'][0]), 'fields' => array('macro', 'sw_name')));
            if (!empty($MirrorMacroMap)) {
                $StatementData[$excelCols['MACRO-MIRROR']] = isset($MirrorMacroMap['MacroMap']['macro']) ? $MirrorMacroMap['MacroMap']['macro'] : '';
            } else {
                $StatementData[$excelCols['MACRO-MIRROR']] = isset($TaskSwInfo['SW_Mirror'][0]) ? $TaskSwInfo['SW_Mirror'][0] : '';
            }
            $StatementData[$excelCols['MACRO-LVDSMAP']] = isset($TaskSwInfo['SW_LvdsMap'][0]) ? $TaskSwInfo['SW_LvdsMap'][0] : '';
            $StatementData[$excelCols['MACRO-3D_TYPE']] = isset($TaskSwInfo['SW_3DType'][0]) ? $TaskSwInfo['SW_3DType'][0] : '';
            $StatementData[$excelCols['MACRO-POWER_CURRENT']] = isset($TaskSwInfo['SW_PowerCurrent'][0]) ? $TaskSwInfo['SW_PowerCurrent'][0] : 0;
            if ('OCS' == $PQSource) {
                if (isset($TaskSwInfo['SW_PQ'][0]) && 'PQ_NONE' != $TaskSwInfo['SW_PQ'][0] && 'NONE' != $TaskSwInfo['SW_PQ'][0]) {
                    $StatementData[$excelCols['MACRO-PQ_TYPE']] = $TaskSwInfo['SW_PQ'][0];
                    $StatementData[$excelCols['NEW-PQ_TYPE']] = '';
                }
            } else if ('CPS' == $PQSource) {
                if (isset($TaskSwInfo['SW_PQ'][0]) && 'PQ_NONE' != $TaskSwInfo['SW_PQ'][0] && 'NONE' != $TaskSwInfo['SW_PQ'][0]) {
                    $StatementData[$excelCols['MACRO-PQ_TYPE']] = $TaskSwInfo['SW_PQ'][0];
                    $AtomFile = $g_AtomFile->find('first', array('conditions' => array('atom_id' => $PQAtomId, 'code_path_id' => $code_path_id), 'fields' => array('url')));
                    if (!empty($AtomFile) && !empty($AtomFile['AtomFile']['url'])) {
                        $StatementData[$excelCols['NEW-PQ_TYPE']] = $g_FS_options['url'] . 'getFile.php?uuid=' . $AtomFile['AtomFile']['url'];
                    } else {
                        $AtomFile = $g_AtomFile->find('first', array('conditions' => array('atom_id' => $PQAtomId, 'code_path_id' => 0), 'fields' => array('url')));
                        if (!empty($AtomFile) && !empty($AtomFile['AtomFile']['url'])) {
                            $StatementData[$excelCols['NEW-PQ_TYPE']] = $g_FS_options['url'] . 'getFile.php?uuid=' . $AtomFile['AtomFile']['url'];
                        } else {
                            $StatementData[$excelCols['NEW-PQ_TYPE']] = '';
                        }
                    }
                }
            }
            if (isset($TaskSwInfo['SW_OverScan'][0]) && 'OVERSCAN_NONE' != $TaskSwInfo['SW_OverScan'][0] && 'NONE' != $TaskSwInfo['SW_OverScan'][0]) {
                $StatementData[$excelCols['MACRO-CAPTURE_WIN_TYPE']] = $TaskSwInfo['SW_OverScan'][0];
            }
            if (isset($TaskSwInfo['SW_TV_CaptureLogo'][0]) && 'CaptureLogo_NONE' != $TaskSwInfo['SW_TV_CaptureLogo'][0] && 'NONE' != $TaskSwInfo['SW_TV_CaptureLogo'][0]) {
                $StatementData[$excelCols['MACRO-CAPTURE_LOGO']] = $TaskSwInfo['SW_TV_CaptureLogo'][0];
            }
            if (isset($TaskSwInfo['SW_OverScan'][0]) && 'OVERSCAN_NONE' != $TaskSwInfo['SW_OverScan'][0] && 'NONE' != $TaskSwInfo['SW_OverScan'][0]) {
                $StatementData[$excelCols['MACRO-CAPTURE_WIN_TYPE']] = $TaskSwInfo['SW_OverScan'][0];
            }
            if (isset($TaskSwInfo['SW_PowerStatus'][0]) && 'POWERON_MODE_NONE' != $TaskSwInfo['SW_PowerStatus'][0] && 'NONE' != $TaskSwInfo['SW_PowerStatus'][0]) {
                $StatementData[$excelCols['MACRO-DEFAULT_POWER_STATUS']] = $TaskSwInfo['SW_PowerStatus'][0];
            }
            if (isset($TaskSwInfo['SW_DefaultInputSource'][0]) && 'UI_INPUT_SOURCE_OFF' != $TaskSwInfo['SW_DefaultInputSource'][0] && 'NONE' != $TaskSwInfo['SW_DefaultInputSource'][0]) {
                $StatementData[$excelCols['MACRO-INPUT_SOURCE_TYPE']] = $TaskSwInfo['SW_DefaultInputSource'][0];
            }
            if (isset($TaskSwInfo['SW_FreeRun'][0]) && 'FreeRun_NONE' != $TaskSwInfo['SW_FreeRun'][0] && 'NONE' != $TaskSwInfo['SW_FreeRun'][0]) {
                $StatementData[$excelCols['MACRO-FREERUN']] = isset($TaskSwInfo['SW_FreeRun'][0]) ? $TaskSwInfo['SW_FreeRun'][0] : '';
            }
            if (isset($TaskSwInfo['SW_DefaultVolume'][0]) && 'Volume_NONE' != $TaskSwInfo['SW_DefaultVolume'][0] && 'NONE' != $TaskSwInfo['SW_DefaultVolume'][0]) {
                $StatementData[$excelCols['MACRO-DEFAULT_VOLUME']] = isset($TaskSwInfo['SW_DefaultVolume'][0]) ? $TaskSwInfo['SW_DefaultVolume'][0] : '';
            }
            if (isset($TaskSwInfo['SW_TVColorSystem'][0]) && 'TV_COLOR_SYSTEM_NONE' != $TaskSwInfo['SW_TVColorSystem'][0] && 'NONE' != $TaskSwInfo['SW_TVColorSystem'][0]) {
                $StatementData[$excelCols['MACRO-TV_COLOR_SYSTEM']] = $TaskSwInfo['SW_TVColorSystem'][0];
            }
            if (isset($TaskSwInfo['SW_TVSoundSystem'][0]) && 'TV_SOUND_SYSTEM_NONE' != $TaskSwInfo['SW_TVSoundSystem'][0] && 'NONE' != $TaskSwInfo['SW_TVSoundSystem'][0]) {
                $StatementData[$excelCols['MACRO-TV_SOUND_SYSTEM']] = $TaskSwInfo['SW_TVSoundSystem'][0];
            }
            if (isset($TaskSwInfo['SW_Teletext'][0]) && 'NONE' != $TaskSwInfo['SW_Teletext'][0]) {
                $StatementData[$excelCols['MACRO-TELETEXT']] = $TaskSwInfo['SW_Teletext'][0];
            }
            if (isset($TaskSwInfo['SW_TTLang'][0]) && 'TT_LANG_NONE' != $TaskSwInfo['SW_TTLang'][0] && 'NONE' != $TaskSwInfo['SW_TTLang'][0]) {
                $StatementData[$excelCols['MACRO-TT_LANG']] = $TaskSwInfo['SW_TTLang'][0];
            }
            if (isset($TaskSwInfo['SW_NICAM'][0]) && 'NICAM_NONE' != $TaskSwInfo['SW_NICAM'][0] && 'NONE' != $TaskSwInfo['SW_NICAM'][0]) {
                $StatementData[$excelCols['MACRO-NICAM']] = $TaskSwInfo['SW_NICAM'][0];
            }
            if (isset($TaskSwInfo['SW_HashKeyType'][0])) {
                $StatementData[$excelCols['MACRO-HASHKEY_TYPE']] = $TaskSwInfo['SW_HashKeyType'][0];
            }
            if (isset($TaskSwInfo['SW_BlueScreen'][0]) && 'BlueScreen_NONE' != $TaskSwInfo['SW_BlueScreen'][0] && 'NONE' != $TaskSwInfo['SW_BlueScreen'][0]) {
                $StatementData[$excelCols['MACRO-BLUE_SCREEN']] = $TaskSwInfo['SW_BlueScreen'][0];
            }
            if (isset($TaskSwInfo['SW_TV_LCN'][0]) && 'LCN_NONE' != $TaskSwInfo['SW_TV_LCN'][0] && 'NONE' != $TaskSwInfo['SW_TV_LCN'][0]) {
                $StatementData[$excelCols['MACRO-DEFAULT_LCN']] = $TaskSwInfo['SW_TV_LCN'][0];
            }
            if (isset($TaskSwInfo['SW_TV_SPDIF'][0]) && 'SPDIF_NONE' != $TaskSwInfo['SW_TV_SPDIF'][0] && 'NONE' != $TaskSwInfo['SW_TV_SPDIF'][0]) {
                $StatementData[$excelCols['MACRO-CVT_EN_SPDIF']] = $TaskSwInfo['SW_TV_SPDIF'][0];
            }
            if (isset($TaskSwInfo['SW_OptFunc_CIPlus'][0]) && 'CI_PLUS_NONE' != $TaskSwInfo['SW_OptFunc_CIPlus'][0] && 'NONE' != $TaskSwInfo['SW_OptFunc_CIPlus'][0]) {
                $StatementData[$excelCols['MACRO-CVT_EN_CI_PLUS']] = $TaskSwInfo['SW_OptFunc_CIPlus'][0];
            }
            if (isset($TaskSwInfo['SW_OptFunc_CI'][0]) && 'CI_NONE' != $TaskSwInfo['SW_OptFunc_CI'][0] && 'NONE' != $TaskSwInfo['SW_OptFunc_CI'][0]) {
                $StatementData[$excelCols['MACRO-CVT_EN_CI']] = $TaskSwInfo['SW_OptFunc_CI'][0];
            }
            if (isset($TaskSwInfo['SW_TV_DVB_C'][0]) && 'DVB_C_NONE' != $TaskSwInfo['SW_TV_DVB_C'][0] && 'NONE' != $TaskSwInfo['SW_TV_DVB_C'][0]) {
                $StatementData[$excelCols['MACRO-CVT_EN_DVBC']] = $TaskSwInfo['SW_TV_DVB_C'][0];
            }
            if (isset($TaskSwInfo['SW_ChipSeries'][0])) {
                $StatementData[$excelCols['MACRO-CHIP_ID']] = $TaskSwInfo['SW_ChipSeries'][0];
            }
            foreach ($excelCols as $key => $value) {
                if ('NULL' == $StatementData[$excelCols[$key]] && 0 != $StatementData[$excelCols[$key]]) {
                    $StatementData[$excelCols[$key]] = '';
                }
            }

            $StatementDatas[] = $StatementData;

            if (!empty($StatementDatas)) {
                App::import('Vendor', 'PHPExcel/PHPExcel/IOFactory');
                App::import('Vendor', 'PHPExcel/PHPExcel');
                $objPHPExcel = new PHPExcel();
                for ($i = 0; $i < $ItemNum; $i++) {
                    $objPHPExcel->getActiveSheet()->getColumnDimension($g_Commons->ExcelCharArr[$i])->setWidth('12');
                }
                $objPHPExcel->getActiveSheet()->setTitle('AutoBuild');

                $objActSheet = $objPHPExcel->getActiveSheet();

                $i = 0;
                foreach ($excelCols as $key => $value) {
                    $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setSize(11);
                    $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setName('宋体');
                    if (1 == $DisplayMacro) {
                        $MacroGroup = $this->getAutoBuildExcelColMapName($excelCols[$key]);
                        $MacroField = $g_MacroField->find('first', array('conditions' => array('macro_group' => $MacroGroup), 'fields' => array('macro_field')));
                        if (!empty($MacroField) && !empty($MacroField['MacroField']['macro_field'])) {
                            $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i++, 1, $MacroField['MacroField']['macro_field']);
                        } else {
                            $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i++, 1, $excelCols[$key]);
                        }
                    } else {
                        $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i++, 1, $excelCols[$key]);
                    }
                }

                $row = 2;
                foreach ($StatementDatas as $StatementData) {
                    $data = array();
                    $i = 0;
                    foreach ($excelCols as $key => $value) {
                        $data[$i]['key'] = $key;
                        $data[$i]['value'] = $StatementData[$excelCols[$key]];
                        $i++;
                    }

                    for ($i = 0; $i < $ItemNum; $i++) {
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $row)->getFont()->setSize(11);
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $row)->getFont()->setName('宋体');
                        if (1 == $DisplayMacro) {
                            $MacroGroup = $this->getAutoBuildExcelColMapName($data[$i]['key']);
                            $MacroMap = $g_MacroMap->find('first', array('conditions' => array('macro_group' => $MacroGroup, 'atom_name' => $data[$i]['value']), 'fields' => array('macro')));
                            if (!empty($MacroMap) && !empty($MacroMap['MacroMap']['macro'])) {
                                $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, $row, $MacroMap['MacroMap']['macro']);
                            } else {
                                $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, $row, $data[$i]['value']);
                            }
                        } else {
                            $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, $row, $data[$i]['value']);
                        }
                    }
                    $row++;
                }

                $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
                $FileName = 'AutoBuild_' . $Req['bill_no'] . '.xls';
                $FilePath = 'cache/attach/' . $FileName;
                $objWriter->save($FilePath);

                $file = array();
                $file['error'] = 0;
                $file['size'] = filesize($FilePath);
                $file['type'] = 'application/vnd.openxmlformats-o';
                $file['name'] = $FileName;
                $file['tmp_name'] = $FilePath;
                $ExcelAttachmentId = $g_Attachments->upload_attachment($file, Req, 0);
            }
        } else {
            // 新的方案按新的框架生成excel
            $StatementData['BASE-BRANCH'] = $branch_name;
            $StatementData['BASE-CTRL_SYS'] = $code_env;
            // 处理新增声音曲线
            if ('CPS' == $VolumeCurveSource) {
                if (isset($TaskSwInfo['SW_VolumeCurve'][0]) && 'VC_NONE' != $TaskSwInfo['SW_VolumeCurve'][0] && 'NONE' != $TaskSwInfo['SW_VolumeCurve'][0]) {
                    $AtomFile = $g_AtomFile->find('first', array('conditions' => array('atom_id' => $VolumeCurveAtomId, 'code_path_id' => $code_path_id), 'fields' => array('url')));
                    if (!empty($AtomFile) && !empty($AtomFile['AtomFile']['url'])) {
                        $StatementData['NEW-SW_VolumeCurve'] = $g_FS_options['url'] . 'getFile.php?uuid=' . $AtomFile['AtomFile']['url'];
                    } else {
                        $StatementData['NEW-SW_VolumeCurve'] = '';
                    }
                }
            }
            // 处理新增LOGO
            if ('CPS' == $LogoSource) {
                $AtomImage = $g_AtomImage->find('first', array('conditions' => array('atom_id' => $BootLogoAtomId), 'fields' => array('url')));
                if (!empty($AtomImage) && !empty($AtomImage['AtomImage']['url'])) {
                    $StatementData['NEW-SW_BootLogo'] = $g_FS_options['url'] . 'getFile.php?uuid=' . $AtomImage['AtomImage']['url'] . '&size=source';
                }
            }
            // 处理新增PQ
            if ('CPS' == $PQSource) {
                if (isset($TaskSwInfo['SW_PQ'][0]) && 'PQ_NONE' != $TaskSwInfo['SW_PQ'][0] && 'NONE' != $TaskSwInfo['SW_PQ'][0]) {
                    $AtomFile = $g_AtomFile->find('first', array('conditions' => array('atom_id' => $PQAtomId, 'code_path_id' => $code_path_id), 'fields' => array('url')));
                    if (!empty($AtomFile) && !empty($AtomFile['AtomFile']['url'])) {
                        $StatementData['NEW-SW_PQ'] = $g_FS_options['url'] . 'getFile.php?uuid=' . $AtomFile['AtomFile']['url'];
                    } else {
                        $AtomFile = $g_AtomFile->find('first', array('conditions' => array('atom_id' => $PQAtomId, 'code_path_id' => 0), 'fields' => array('url')));
                        if (!empty($AtomFile) && !empty($AtomFile['AtomFile']['url'])) {
                            $StatementData['NEW-SW_PQ'] = $g_FS_options['url'] . 'getFile.php?uuid=' . $AtomFile['AtomFile']['url'];
                        } else {
                            $StatementData['NEW-SW_PQ'] = '';
                        }
                    }
                }
            }
            // 处理新增按键
            if ('CPS' == $KeyPadSource) {
                $StatementData['NEW-SW_KeyboardType'] = isset($TaskSwInfo['SW_KeyboardType'][0]) ? $TaskSwInfo['SW_KeyboardType'][0] : '';;
            }
            $ItemNum = count($StatementData);
            foreach ($TaskSwInfo as $key => $atoms) {
                if ('SW_KeyBoard' == $key) {
                    $ItemNum += count($atoms);
                    continue;
                }
                if ('SW_Language' == $key) {
                    $ItemNum += count($atoms);
                    continue;
                }
                if ('SW_Country' == $key) {
                    $ItemNum += count($atoms);
                    continue;
                }
                $ItemNum++;
            }

            App::import('Vendor', 'PHPExcel/PHPExcel/IOFactory');
            App::import('Vendor', 'PHPExcel/PHPExcel');
            $objPHPExcel = new PHPExcel();
            for ($i = 0; $i < $ItemNum; $i++) {
                $objPHPExcel->getActiveSheet()->getColumnDimension($g_Commons->ExcelCharArr[$i])->setWidth('12');
            }
            $objPHPExcel->getActiveSheet()->setTitle('AutoBuild');

            $objActSheet = $objPHPExcel->getActiveSheet();

            $i = 0;
            $value_row = 2;
            foreach ($StatementData as $key => $value) {
                $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setSize(11);
                $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setName('宋体');
                $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getFont()->setSize(11);
                $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getFont()->setName('宋体');
                $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, 1, $key);
                $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, $value_row, $value);
                $i++;
            }
            foreach ($TaskSwInfo as $key => $atoms) {
                if ('SW_KeyBoard' == $key) {
                    foreach ($atoms as $key_num => $value) {
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setSize(11);
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setName('宋体');
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getFont()->setSize(11);
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getFont()->setName('宋体');
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, 1, 'MACRO-' . $key.'_K'.$key_num);
                        $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, $value_row, $value);
                        $i++;
                    }
                    continue;
                }

                if ('SW_Language' == $key) {
                    foreach ($atoms as $value) {
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setSize(11);
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setName('宋体');
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getFont()->setSize(11);
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getFont()->setName('宋体');
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, 1, 'LANG-' . $value);
                        $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, $value_row, 1);
                        $i++;
                    }
                    continue;
                }

                if ('SW_Country' == $key) {
                    foreach ($atoms as $value) {
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setSize(11);
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setName('宋体');
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getFont()->setSize(11);
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getFont()->setName('宋体');
                        $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, 1, 'COUNTRY-' . $value);
                        $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, $value_row, 1);
                        $i++;
                    }
                    continue;
                }
                $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setSize(11);
                $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . '1')->getFont()->setName('宋体');
                $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getFont()->setSize(11);
                $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getFont()->setName('宋体');
                $objPHPExcel->getActiveSheet()->getStyle($g_Commons->ExcelCharArr[$i] . $value_row)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, 1, 'MACRO-' . $key);
                $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($i, $value_row, $atoms[0]);
                $i++;
            }

            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
            $FileName = 'AutoBuild_' . $Req['bill_no'] . '.xls';
            $FilePath = 'cache/attach/' . $FileName;
            $objWriter->save($FilePath);

            $file = array();
            $file['error'] = 0;
            $file['size'] = filesize($FilePath);
            $file['type'] = 'application/vnd.openxmlformats-o';
            $file['name'] = $FileName;
            $file['tmp_name'] = $FilePath;
            $ExcelAttachmentId = $g_Attachments->upload_attachment($file, Req, 0);
        }

        return $ExcelAttachmentId;
    }

    public function TVBoardReplace($Str, $Search, $Replace) {
        $Str = str_replace('_' . $Search . '_', '_' . $Replace . '_', $Str);
        $Str = str_replace($Search . '_', $Replace . '_', $Str);
        $Str = str_replace('_' . $Search, '_' . $Replace, $Str);
        return $Str;
    }

    public function changKeypadButton($Key) {
        $NewKey = $Key;
        switch ($Key) {
            case 'UP':
                $NewKey = 'CH+';
                break;
            case 'DOWN':
                $NewKey = 'CH-';
                break;
            case 'LEFT':
                $NewKey = 'VOL-';
                break;
            case 'RIGHT':
                $NewKey = 'VOL+';
                break;
            case 'HOME':
                $NewKey = 'MENU';
                break;
            default:
                break;
        }
        return $NewKey;
    }

    // 将自动编译的Excel文件发送到自动编译服务器
    public function sendAutoBuildExcelToServer($ExcelAttachmentId = 0, $OcaABAUrl = null) {
        global $g_BizId;
        global $g_Commons;
        $g_Attachment = $g_Commons->GlobalModel('Attachment');

        global $g_WebServices;
        $g_WebServices->OCS_get_ws_client_config();
        global $globalAutoBuildWebServiceUrls;
        if (0 == $globalAutoBuildWebServiceUrls['connect'] || 0 == $ExcelAttachmentId) {
            return;
        }

        try {

            $excel_file_info = $g_Attachment->getAttachmentFileInfo($ExcelAttachmentId);
            if (!$excel_file_info['success']) {
                throw new Exception($excel_file_info['message'], 1);
            }

            if (empty($OcaABAUrl)) {
                $client = new soap_client($globalAutoBuildWebServiceUrls['AutoBuild']['url']);
            } else {
                $client = new soap_client($OcaABAUrl);
            }
            $client->soap_defencoding = 'utf-8';
            $client->decode_utf8 = false;
            $client->xml_encoding = 'utf-8';
            $client->response_timeout = 600;

            global $g_OCS_options;
            $destinationile_path = 'cache/attach/' . $excel_file_info['datas']['hash_name'];
            copy($excel_file_info['datas']['file_path'], $destinationile_path);

            $params = array(
                'Verify' => $globalAutoBuildWebServiceUrls['AutoBuild']['hashes']['GetExtendAttachment'],
                'path' => $g_OCS_options['url'] . 'cache/attach/',
                'file_name' => $excel_file_info['datas']['hash_name']
            );
            $result = $client->call('GetAutoBuildExcel', $params);

            if (empty($result)) {
                throw new Exception("传云编译EXCEL报错", 1);
            }

            return json_decode($result, true);

        } catch (Exception $e) {
            // 传入发起的URL路径
            $WSUrl = empty($OcaABAUrl) ? $globalAutoBuildWebServiceUrls['AutoBuild']['url'] : $OcaABAUrl;
            $params['URL'] = $WSUrl;
            // $g_Commons->send_error_email($e, __FUNCTION__, json_encode($params));
            return null;
        }

    }

    // 通过需求ID生成Excel并发送到自动编译服务器 - OCS
    public function sendAutoBuildExcelToServerByReqId($QueueJobId, $ReqId) {
        global $g_BizId;
        global $g_Commons;

        $ExcelAttachmentId = $this->generateAutoBuildExcelFromOCS($QueueJobId, $ReqId);
        $result = $this->sendAutoBuildExcelToServer($ExcelAttachmentId);
        return $result['hash_name'];
    }

    // 通过需求内容生成Excel并发送到自动编译服务器 - CPS
    public function sendAutoBuildExcelToServerByReq($QueueJobId, $Req, $OcaABAUrl = null) {
        global $g_BizId;
        global $g_Commons;

        $ExcelAttachmentId = $this->generateAutoBuildExcelFromCPS($QueueJobId, $Req);
        $result = $this->sendAutoBuildExcelToServer($ExcelAttachmentId, $OcaABAUrl);
        return $result['hash_name'];
    }

    // 通过model_def_id和rel_obj_id获取reqIds
    function getReqIdsByModelDefIdAndRelObjIds($ModelDefId = null, $RelObjIds = null) {
        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        $ReqIds = array();
        if (null == $RelObjIds || '' == $RelObjIds || empty($RelObjIds)) {
            return $ReqIds;
        }
        $Reqs = $this->Req->find('all', array('conditions' => array('Req.model_def_id' => $ModelDefId, 'Req.rel_obj_id' => $RelObjIds),
                    'fields' => array('Req.id')));
        if (!empty($Reqs)) {
            foreach ($Reqs as $Req) {
                $ReqIds[] = $Req['Req']['id'];
            }
        }
        return $ReqIds;
    }

    // 将订单改为待审核状态,但如果原来已经>待审核状态，则不作修改；
    function setReqAuditStageToStartById($ReqId) {
        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        $Req = $this->Req->findById($ReqId);
        if (!empty($Req) && 0 == $Req['Req']['audit_stage']) {
            $Req['Req']['audit_stage'] = OCS_PRODMODEL_REL_AUDIT_USER_STAGE_OWNER;
            $this->Req->save($Req['Req']);
        }
        return $this->Req->id;
    }

    //设定reqs的审核状态为指定的状态;
    function setReqAuditStageByIdAndStage($ReqId, $Stage) {
        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        $Req = $this->Req->findById($ReqId);
        if (!empty($Req)) {
            $Req['Req']['audit_stage'] = $Stage;
            $Req['Req']['update_time'] = date('Y-m-d H:i:s');
            $this->Req->save($Req['Req']);

            // ##确认书审核完成##
            if (OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE == $Req['Req']['audit_stage']) {
                //根据相关条件自动生成“已回签”确认书
                $this->Req->autoGenerateAccountSignatureCfm($ReqId);

                //更新BOM任务是否及时
                $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
                $g_MfPlanBill->setBomTaskTimelinessRate($ReqId);
            }
        }
        return $this->Req->id;
    }

    // 获取各req的当前审核人
    function getReqRelCurrentAuditUser(&$ReqRelAuditStages) {
        global $g_BizId;
        global $g_Commons;

        $result = array();
        if (!empty($ReqRelAuditStages)) {
            foreach ($ReqRelAuditStages as $ReqId => $AuditStages) {
                $result[$ReqId] = 0;
                foreach ($AuditStages as $Stage => $AuditStage) {
                    if ($AuditStage['AuditStageRelObj']['is_audit']['value'] != 1 && 0 != $AuditStage['AuditStageRelObj']['pending_audit_user_id']['value']
                            && '' != $AuditStage['AuditStageRelObj']['pending_audit_user_id']['value']) {
                        $result[$ReqId] = $AuditStage['AuditStageRelObj']['pending_audit_user_id']['value'];
                        break;
                    }
                }
            }
        }
        return $result;
    }

    // crm比量分派确认书审核时，由于没有req_id通过crm_id来跳转url
    function pop_goto_batch_start_audit() {
        global $g_BizId;
        global $g_Commons;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $CrmIds = explode(',', $AllParams['P']['crm_ids']);
        $ReqIds = array();
        if (!empty($CrmIds)) {
            $Contracts = $g_Contract->find('all', array(
                'conditions' => array('Contract.crm_contract_id' => $CrmIds),
                'fields' => array('Contract.id')
            ));
            $ContractIds = array();
            if (!empty($Contracts)) {
                foreach ($Contracts as $Contract) {
                    $ContractIds[] = $Contract['Contract']['id'];
                }
            }
            $Reqs = $this->Req->find('all', array('conditions' => array('Req.model_def_id' => Contract, 'Req.rel_obj_id' => $ContractIds, 'Req.parent_id' => 0),
                        'fields' => array('Req.id')));
            if (!empty($Reqs)) {
                foreach ($Reqs as $Req) {
                    $ReqIds[] = $Req['Req']['id'];
                }
            }
        }
        $ReqIdsStr = implode(',', $ReqIds);
        $this->redirect(array('action' => 'batch_start_audit/P:ids=' . $ReqIdsStr));
    }

    // 注：表AuditStageRelObj，如果pending_audit_user_id=0，则表示此阶段不需审核。
    function pop_batch_start_audit($Modeldef = ''){
        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        $g_TodoWork = $g_Commons->GlobalModel('TodoWork');
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_ProdModelRelAuditUser = $g_Commons->GlobalModel('ProdModelRelAuditUser');
        $g_User = $g_Commons->GlobalModel('User');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_ReqRdModifyBill = $g_Commons->GlobalModel('ReqRdModifyBill');

        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AuditStageRelObjs = $g_Commons->GlobalController('AuditStageRelObjs');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_AuditStageRelObjs->AuditStageRelObj->recursive = -1;
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);
        $is_start_audit_confirm = 0;

        $reqIds = explode(',', $AllParams['P']['ids']);
        //判断是否为需求更改单 2015-6-30 ziying
        $isReqRdModifyBill = ($Modeldef == 'ReqRdModifyBill') ? true : false;
        if($isReqRdModifyBill){
            foreach ($reqIds as $idx => $reqId) {
                $ReqRdModifyBillIds[$idx] = $g_ReqRdModifyBill->find('first', array(
                    'conditions' => array(
                        'ReqRdModifyBill.id' => $reqId,
                    ),
                    'fields' =>'ReqRdModifyBill.rel_obj_id'
                ));
            }
            foreach ($ReqRdModifyBillIds as $idx => $ReqRdModifyBillId) {
                $reqIds[$idx] = $ReqRdModifyBillId['ReqRdModifyBill']['rel_obj_id'];
                foreach ($reqIds as $idx => $reqId) {
                    $Reqs[$idx] = $this->Req->find('first', array(
                        'conditions' => array('Req.id' => $reqId),
                        'fields' => array('Req.id', 'Req.name', 'Req.model_def_id', 'Req.rel_obj_id', 'Req.product_id','Req.audit_stage','Req.is_semi')
                    ));
                }
            }
            $title_for_layout = '分派需求更改单各阶段审核人';
        } else {
            $Reqs = $this->Req->find('all', array(
                'conditions' => array('Req.id' => $reqIds),
                'fields' => array('Req.id', 'Req.name', 'Req.model_def_id', 'Req.rel_obj_id', 'Req.product_id', 'Req.audit_stage', 'Req.is_semi')
            ));
            $title_for_layout = '分派确认书各阶段审核人';
            $is_start_audit_confirm = 1;
        }
        $RelAuditUsers = array();
        $AuditStages = array();
        $this->set('title_for_layout', $title_for_layout);

        if (!empty($Reqs)) {
            foreach ($Reqs as $idx => $Req) {
                $Product = $g_Product->find('first', array(
                    'conditions' => array('Product.id' => $Req['Req']['product_id']),
                    'fields' => array('Product.prod_model_id', 'Product.name')
                ));
                $ProductId = $Req['Req']['product_id'];
                $Req['Req']['product_id'] = array();
                $Req['Req']['product_id']['value'] = $ProductId;
                $Req['Req']['product_id']['label'] = $Product['Product']['name'];
                $ProdModelRelAuditUsers = $g_ProdModelRelAuditUser->find('all', array(
                    'conditions' => array(
                        'ProdModelRelAuditUser.prod_model_id' => $Product['Product']['prod_model_id'],
                        'ProdModelRelAuditUser.type' => OCS_PRODMODEL_REL_AUDIT_USER_TYPE_CFM
                    )
                ));

                $formatProdModelRelAuditUsers = $g_AttrDics->formatModelData($ProdModelRelAuditUsers, 'ProdModelRelAuditUser');
                $idxProdModelRelAuditUsers = array();
                if (!empty($formatProdModelRelAuditUsers)) {
                    foreach ($formatProdModelRelAuditUsers as $ProdModelRelAuditUser) {//以阶段为下标
                        //TV事业部下，软件审核，默认都为“无需审核” 不管是否有设置
                        if (OCS_BIZ_TYPE_TV == $g_BizId && OCS_PRODMODEL_REL_AUDIT_USER_STAGE_SW == $ProdModelRelAuditUser['ProdModelRelAuditUser']['stage']['value']) {
                            $ProdModelRelAuditUser['ProdModelRelAuditUser']['audit_user_id']['value'] = 0;
                            $ProdModelRelAuditUser['ProdModelRelAuditUser']['audit_user_id']['label'] = '无需审核';
                        }
                        $idxProdModelRelAuditUsers[$ProdModelRelAuditUser['ProdModelRelAuditUser']['stage']['value']] = $ProdModelRelAuditUser;
                    }
                }
                $RelAuditUsers[$Req['Req']['id']] = $idxProdModelRelAuditUsers; //以Req ID作为下标。
                if($isReqRdModifyBill){
                    $req_rd_modify_bill_ids = explode(',', $AllParams['P']['ids']);
                    $AuditStageRelObjs = $g_AuditStageRelObjs->AuditStageRelObj->find('all', array('conditions' => array('AuditStageRelObj.model_def_id' => ReqRdModifyBill, 'AuditStageRelObj.rel_obj_id' => $req_rd_modify_bill_ids[$idx])));
                }else{
                    $AuditStageRelObjs = $g_AuditStageRelObjs->AuditStageRelObj->find('all', array('conditions' => array('AuditStageRelObj.model_def_id' => Req, 'AuditStageRelObj.rel_obj_id' => $Req['Req']['id'])));
                }
                $formatAuditStageRelObjs = $g_AttrDics->formatModelData($AuditStageRelObjs, 'AuditStageRelObj');
                $idxAuditStageRelObjs = array();
                $miniAuditStage = $this->getMiniAuditStage($AuditStageRelObjs);
                if (!empty($formatAuditStageRelObjs)) {
                //以阶段为下标
                    foreach ($formatAuditStageRelObjs as $formatAuditStageRelObj){
                        $formatAuditStageRelObj['AuditStageRelObj']['is_can_modify'] = 0;
                        if($isReqRdModifyBill){
                            $miniAuditStage = $g_ReqRdModifyBill->getCurrentAuditStage($formatAuditStageRelObj['AuditStageRelObj']['rel_obj_id']);
                        }
                        if ($formatAuditStageRelObj['AuditStageRelObj']['audit_stage']['value'] > $miniAuditStage) {//小于已审核环节的环节不可再修改该环节审核人.
                            $formatAuditStageRelObj['AuditStageRelObj']['is_can_modify'] = 1;
                        }else{
                            if($formatAuditStageRelObj['AuditStageRelObj']['pending_audit_user_id']['value'] == 0 && $isReqRdModifyBill){
                                $formatAuditStageRelObj['AuditStageRelObj']['is_can_modify'] = 0;
                            }
                        }
                        $idxAuditStageRelObjs[$formatAuditStageRelObj['AuditStageRelObj']['audit_stage']['value']] = $formatAuditStageRelObj;
                    }
                }
                $AuditStages[$Req['Req']['id']] = $idxAuditStageRelObjs; //以Req ID作为下标。

                $Contract = $g_Contract->find('first', array(
                    'conditions' => array('Contract.id' => $Req['Req']['rel_obj_id']),
                    'fields' => array('Contract.id', 'Contract.account_mno', 'Contract.account_cno', 'Contract.crm_contract_id')
                ));
                $Req['Contract'] = !empty($Contract) ? $Contract['Contract'] : $Contract;
                $Reqs[$idx] = $Req;
            }
        }
        $this->set('Reqs', $Reqs);
        $this->set('RelAuditUsers', $RelAuditUsers);
        $this->set('AuditStages', $AuditStages);

        $AuthorResult = array();
        $AuthorResult['is_has_auth'] = 1;
        $AuthorResult['message'] = '';
        $ReqRelCurrentAuditUsers = $this->getReqRelCurrentAuditUser($AuditStages); //获取订单对应的当前审核人
        $this->set('ReqRelCurrentAuditUsers', $ReqRelCurrentAuditUsers);
        if (!empty($ReqRelCurrentAuditUsers)) {
            $msg = '订单';
            foreach ($ReqRelCurrentAuditUsers as $ReqId => $UserId) {
                if ($UserId != $g_UserId && 0 != $UserId) {//说明当前审核人不是自己，无权修改审核人。
                    $msg .= ' #' . $ReqId . '，';
                    $AuthorResult['is_has_auth'] = 0;
                }
            }
            $msg .= ' 未分派或当前审核非本人，您无权修改各环节的审核人，如有需要请联系内勤修改。';
            $AuthorResult['message'] = $msg;
        }
        $this->set('AuthorResult', $AuthorResult);
        switch ($g_BizId) {
            case OCS_BIZ_TYPE_TV:
            case OCS_BIZ_TYPE_SCS:
                $AllStages = array(
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_OWNER => '内勤审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_POWER => '电源审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_HW => '硬件审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_SW => '软件审核人',
                ); //, OCS_PRODMODEL_REL_AUDIT_USER_STAGE_SW
            break;
            case OCS_BIZ_TYPE_CE:
                $AllStages = array(
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_ETR => '电声审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_OWNER => '内勤审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_SALER => '销售审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_HW => '硬件审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_PKM => '包材审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_ST => '结构审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_SW => '软件审核人',
                );
            break;
            default:
                $AllStages = array(
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_OWNER => '内勤审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_SALER => '销售审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_HW => '硬件审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_PKM => '包材审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_ST => '结构审核人',
                    OCS_PRODMODEL_REL_AUDIT_USER_STAGE_SW => '软件审核人',
                );
            break;
        }
        //需求更改单分派审核人
        if ($isReqRdModifyBill) {
            $AllStages = array(
                OCS_REQRDMODIFY_BILL_AUDIT_STATUS_OWNER => '内勤审核人', // 需求更改单审核状态--内勤审核环节
                OCS_REQRDMODIFY_BILL_AUDIT_STATUS_POWER => '电源审核人', // 需求更改单审核状态--电源审核环节
                OCS_REQRDMODIFY_BILL_AUDIT_STATUS_HW => '硬件审核人', // 需求更改单审核状态--硬件审核环节
                OCS_REQRDMODIFY_BILL_AUDIT_STATUS_SW => '软件审核人', // 需求更改单审核状态--软件审核环节
            );
        }
        $this->set('AllStages', $AllStages);

        $NotExitUsers = array();

        $this->set('saveComplete', 0);
        $this->set('setJump', 0);
        $this->set('RemovedReqIds', array());

        $g_Enum = $g_Commons->GlobalModel('Enum');
        $audit_stage_list = $g_Enum->getEnumListByDictName('Req.audit_stage');

        //提交
        if ($this->request->is('post')) {
            $submitData = $this->request->data;
            $AuditReqIds = array();
            if (!empty($submitData)) {

                //验证是否条件发货日期条件
                $error_msg = array();
                foreach ($submitData as $req_str => $temp) {
                    $req_id = preg_replace('/req_/', '', $req_str);
                    $req = $this->Req->find('first', array(
                        'conditions' => array(
                            'Req.id' => $req_id,
                        ),
                        'fields' => array(
                            'Req.id',
                            'Req.ebs_order_number',
                        )
                    ));
                    $result = $this->Req->isDelivetyTimeOk($req_id);
                    if (!$result['success']) {
                        $this->set('set_flash', 1);
                        $this->set('setJump', 1);
                        $this->set('error_req_id', $req['Req']['id']);
                        $error_msg[$req['Req']['id']] = $req['Req']['ebs_order_number'] . $result['message'];
                        continue;
                    }
                }
                $this->set('error_msg', $error_msg);
                if (!empty($error_msg)) {
                    return;
                }
                foreach ($submitData as $req_str => $auditUsers) {
                    $reqId = preg_replace('/req_/', '', $req_str);
                    $tmpReq = $this->Req->find('first', array(
                        'conditions' => array('Req.id' => $reqId),
                        'fields' => array('Req.audit_stage')
                    ));
                    if (empty($tmpReq) || ($tmpReq['Req']['audit_stage'] == OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE && OCS_BIZ_TYPE_TV != $g_BizId)) {//已经审核完成的，不可再分派
                        continue;
                    }
                    if($isReqRdModifyBill){
                        $ReqRdModifyBillId =  $g_ReqRdModifyBill->find('first', array(
                            'conditions' => array(
                                'ReqRdModifyBill.rel_obj_id' => $reqId,
                                'ReqRdModifyBill.status' => OCS_REQRDMODIFY_BILL_STATUS_NEW
                            ),
                            'fields' => 'ReqRdModifyBill.id'
                        ));
                        if (empty($ReqRdModifyBillId)) {
                            continue;
                        }
                        $reqId = $ReqRdModifyBillId['ReqRdModifyBill']['id'];
                    }
                    $AuditReqIds[] = $reqId;
                    $ConfigAuditData = array();
                    foreach ($auditUsers as $stage_str => $userName) {
                        $stageValue = preg_replace('/stage_/', '', $stage_str);
                        $userName = trim($userName);
                        $User = $g_User->find('first', array(
                            'conditions' => array('User.realname' => $userName, 'User.is_valid' => 1),
                            'fields' => array('User.id')
                        ));
                        $pendingAuditUserId = 0;
                        if (!empty($User)) {
                            $pendingAuditUserId = $User['User']['id'];
                        }
                        if (0 == $pendingAuditUserId) {
                            if ('无需审核' != $userName) {
                                $NotExitUsers[$reqId][$stageValue] = $userName;
                                continue;
                            } else {
                                // if (OCS_PRODMODEL_REL_AUDIT_USER_STAGE_SW == $stageValue) {//软件环节不允许填写“无需审核”
                                //     $NotExitUsers[$reqId][$stageValue] = $userName;
                                //     continue;
                                // }
                            }
                        }
                        $ConfigAuditData[$reqId][$stageValue] = $pendingAuditUserId;
                    }//endof foreach $auditUsers
                    //保存各环节审核人
                    if (empty($NotExitUsers[$reqId]) && !empty($ConfigAuditData[$reqId])) {//如果存在非法审核人，则不保存此确认书审核人
                        foreach ($ConfigAuditData[$reqId] as $stageValue => $pendingAuditUserId) {
                            $need_send_email = 0;
                            $stage_label = isset($audit_stage_list[$stageValue]) ? $audit_stage_list[$stageValue] : '';
                            if($isReqRdModifyBill){
                                $AuditStageRelObj = $g_AuditStageRelObjs->AuditStageRelObj->find('first', array(
                                    'conditions' => array(
                                        'AuditStageRelObj.model_def_id' => ReqRdModifyBill,
                                        'AuditStageRelObj.rel_obj_id' => $reqId,
                                        'AuditStageRelObj.audit_stage' => $stageValue,
                                        'AuditStageRelObj.is_audit' => 0
                                    )
                                ));
                                $ReqRdModifyBillId =  $g_ReqRdModifyBill->find('first', array(
                                    'conditions' => array(
                                        'ReqRdModifyBill.id' => $reqId,
                                        'ReqRdModifyBill.status' => OCS_REQRDMODIFY_BILL_STATUS_NEW
                                    ),
                                    'fields' => 'ReqRdModifyBill.rel_obj_id'
                                ));
                                $req_id = $ReqRdModifyBillId['ReqRdModifyBill']['rel_obj_id'];
                            }
                            else{
                                $AuditStageRelObj = $g_AuditStageRelObjs->AuditStageRelObj->find('first', array(
                                    'conditions' => array(
                                        'AuditStageRelObj.model_def_id' => Req,
                                        'AuditStageRelObj.rel_obj_id' => $reqId,
                                        'AuditStageRelObj.audit_stage' => $stageValue,
                                        'AuditStageRelObj.is_audit' => 0
                                    )
                                ));
                            }
                            if(!empty($AuditStageRelObj)){
                                $old_audit_user_id = $AuditStageRelObj['AuditStageRelObj']['pending_audit_user_id'];
                                $AuditStageRelObj['AuditStageRelObj']['pending_audit_user_id'] = $pendingAuditUserId;
                                $AuditStageRelObj['AuditStageRelObj']['create_time'] = date('Y-m-d H:i:s'); //如果内勤点击了重新分派，则以最新的分派时间为准
                                $AuditStageRelObj['AuditStageRelObj']['create_user_id'] = $g_UserId;
                                $g_AuditStageRelObjs->AuditStageRelObj->save($AuditStageRelObj['AuditStageRelObj']);
                                //写LOG
                                $string = '将';
                                $string .= '“' . $stage_label . '人：”' . $g_User->findMainField($old_audit_user_id);
                                $string .= '=>' . $g_User->findMainField($pendingAuditUserId);
                                $string .= $isReqRdModifyBill ? '(需求更改)' : '(确认书审核)';
                                if ($old_audit_user_id != $pendingAuditUserId) {
                                    $need_send_email = 1;
                                    // $g_Logs->write_log('AuditStageRelObjs', $g_AuditStageRelObjs->AuditStageRelObj->id, 'info', $string);
                                }
                                $g_Logs->write_log('Reqs', $isReqRdModifyBill ? $req_id : $reqId, 'info', $string);
                            }
                            else{
                                $need_send_email = 1;
                                $AuditStageRelObj = array();
                                $AuditStageRelObj['model_def_id'] = $isReqRdModifyBill?ReqRdModifyBill:Req;
                                $AuditStageRelObj['rel_obj_id'] = $reqId;
                                $AuditStageRelObj['audit_stage'] = $stageValue;
                                $AuditStageRelObj['pending_audit_user_id'] = $pendingAuditUserId;
                                $AuditStageRelObj['create_time'] = date('Y-m-d H:i:s');
                                $AuditStageRelObj['create_user_id'] = $g_UserId;
                                $g_AuditStageRelObjs->AuditStageRelObj->create();
                                $g_AuditStageRelObjs->AuditStageRelObj->save($AuditStageRelObj);
                                // Log
                                $string = '分派';
                                $string .= '“' . $stage_label . '：”' . $g_User->findMainField($pendingAuditUserId);
                                // $g_Logs->write_log('AuditStageRelObjs', $g_AuditStageRelObjs->AuditStageRelObj->id, 'info', $string);
                                $g_Logs->write_log('Reqs', $isReqRdModifyBill ? $req_id : $reqId, 'info', $string);
                            }


                            //TV全并行审核，通知各环节审核人
                            if (OCS_BIZ_TYPE_TV == $g_BizId && $need_send_email) {
                                $Options = array();
                                $notifyUserEmail = $g_User->getUserEmailById($pendingAuditUserId);
                                if (null != $notifyUserEmail && '' != $notifyUserEmail) {
                                    global $g_UserRealName;
                                    global $g_UserEmail;
                                    global $g_OCS_options;
                                    global $g_BizUrl;
                                    $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
                                    $toUsers = array();
                                    $toUsers[] = $notifyUserEmail;
                                    $Options['Email']['ToUsers'] = $toUsers;
                                    $Options['Field']['login_user_realname'] = $g_UserRealName;
                                    $Options['Field']['login_user_email'] = $g_UserEmail;
                                    $Options['Field']['ocs_biz_url'] = $g_OCS_options['url'] . $g_BizUrl;
                                    $Options['Email']['CcUsers'] = array($g_UserEmail);
                                    $g_QueueJobs->AddNoticeJob(array('Email'), Req, $reqId, 'StartRequestAudit', $Options);
                                }
                            }
                        }
                        if (1 == $is_start_audit_confirm) {
                            //添加待办记录
                            $g_TodoWork->addTodoWorkByAction('start_audit_confirm', $reqId);
                        }
                    }
                }
            }
            // 邮件通知下一环节审核人
            $AuditReqIds = array_unique($AuditReqIds);
            if($isReqRdModifyBill){
                foreach ($AuditReqIds as $idx => $AuditReqId) {
                    $AuditReqId = $g_ReqRdModifyBill->find('first', array(
                        'conditions' => array(
                            'ReqRdModifyBill.id' => $AuditReqId
                        ),
                        'fields' => 'ReqRdModifyBill.rel_obj_id'
                    ));
                    $AuditReqIds[$idx] = $AuditReqId['ReqRdModifyBill']['rel_obj_id'];
                }
            }
            if (!empty($AuditReqIds)) {
                foreach ($AuditReqIds as $AuditReqId) {
                    if (empty($AuditReqId)) {
                        continue;
                    }
                    //TV的审核，单独处理
                    if (OCS_BIZ_TYPE_TV == $g_BizId && !$isReqRdModifyBill) {
                        $this->Req->setCfmAuditStage($AuditReqId);
                        continue;
                    }

                    if($isReqRdModifyBill){
                        //$g_ReqRdModifyBill->getCurrentAuditStage
                        $TmpReqRd = $g_ReqRdModifyBill->find('first', array(
                            'conditions' => array(
                                'ReqRdModifyBill.rel_obj_id' => $AuditReqId,
                                'ReqRdModifyBill.status' => OCS_REQRDMODIFY_BILL_STATUS_NEW
                            ),
                            'fields' => array('ReqRdModifyBill.id','ReqRdModifyBill.audit_stage')
                        ));
                        if ($TmpReqRd['ReqRdModifyBill']['audit_stage'] ==OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE) {//已经审核完成，不可再修改
                            continue;
                        }
                    }else{
                        $TmpReq = $this->Req->find('first', array('conditions' => array('Req.id' => $AuditReqId), 'fields' => array('Req.audit_stage')));
                        if ($TmpReq['Req']['audit_stage'] == OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE) {//已经审核完成，不可再修改
                            continue;
                        }
                    }
                    // MID的审核
                    // if (OCS_BIZ_TYPE_MID == $g_BizId) {
                    //     $this->setReqAuditStageByIdAndStage($AuditReqId, OCS_PRODMODEL_REL_AUDIT_USER_STAGE_MID_AUDIT);
                    //     continue;
                    // }
                    // 设置reqs的审核状态。
                    // 判断当前审核阶段是否不需审核，如果是才跳至下一阶段

                    if($isReqRdModifyBill){
                        $req_rd_modify_bill = $g_ReqRdModifyBill->find('first', array(
                            'conditions' => array(
                                'ReqRdModifyBill.model_def_id' => Req,
                                'ReqRdModifyBill.rel_obj_id' => $AuditReqId,
                                'ReqRdModifyBill.status' => OCS_REQRDMODIFY_BILL_STATUS_NEW,
                            ),
                            'fields' => array(
                                'ReqRdModifyBill.id',
                                'ReqRdModifyBill.audit_stage',
                                'ReqRdModifyBill.status',
                            )
                        ));
                        if (empty($req_rd_modify_bill)) {
                            continue;
                        }
                        //获取下一审核阶段
                        $next_audit_stage = $g_AuditStageRelObjs->AuditStageRelObj->getMultiNextAuditStage(ReqRdModifyBill, $req_rd_modify_bill['ReqRdModifyBill']['id']);
                        $req_rd_modify_bill['ReqRdModifyBill']['audit_stage'] = $next_audit_stage;

                        //审核完成
                        if (OCS_REQRDMODIFY_BILL_AUDIT_STATUS_DONE == $next_audit_stage) {
                            $req_rd_modify_bill['ReqRdModifyBill']['status'] = OCS_REQRDMODIFY_BILL_STATUS_DONE; //状态也设置为完成
                        }
                        $g_ReqRdModifyBill->save($req_rd_modify_bill['ReqRdModifyBill']);
                        continue;
                    }else{
                        if (OCS_BIZ_TYPE_TV != $g_BizId) {
                            // //获取当前最小未审阶段，如是重新分派有可能将之前“无需审核”的环节，设置为某人审核人，则相应阶段也应回调
                            // $mini_unaudit_stage = $g_AuditStageRelObjs->AuditStageRelObj->getMultiNextAuditStage(Req, $AuditReqId);
                            // $mini_unaudit_stage = !empty($mini_unaudit_stage) ? $mini_unaudit_stage : $TmpReq['Req']['audit_stage'];

                            // $nextStage = $g_AuditStageRelObjs->getNextAuditStage(Req, $AuditReqId, $mini_unaudit_stage);
                            // if (0 != $nextStage) {
                            //     $this->setReqAuditStageByIdAndStage($AuditReqId, $nextStage);
                            // }

                            //获取审核表 未审数据的阶段最小值 作为下一待审阶段
                            //注意事项：如果后续添加审核环节（串行），设置枚举值时一定要按审核顺序来设置对应值的大小（约定规则），不然获取下一阶段值会错乱！
                            $next_audit_stage = $g_AuditStageRelObjs->AuditStageRelObj->getMultiNextAuditStage(Req, $AuditReqId);

                            //设置订单当前的审核阶段
                            $this->setReqAuditStageByIdAndStage($AuditReqId, $next_audit_stage);
                        }
                    }
                    $CurrentAuditStageRelObj = $g_AuditStageRelObjs->getCurrentAuditStageRelObj($isReqRdModifyBill?ReqRdModifyBill:Req, $AuditReqId);
                    if (empty($CurrentAuditStageRelObj) || 0 == $CurrentAuditStageRelObj['AuditStageRelObj']['pending_audit_user_id']) {
                        continue;
                    }
                    $Options = array();
                    //非TV，才需邮件通知下一环节审核人
                    if (OCS_BIZ_TYPE_TV != $g_BizId) {
                        $notifyUserEmail = $g_User->getUserEmailById($CurrentAuditStageRelObj['AuditStageRelObj']['pending_audit_user_id']);
                        if (null != $notifyUserEmail && '' != $notifyUserEmail) {
                            global $g_UserRealName;
                            global $g_UserEmail;
                            global $g_OCS_options;
                            global $g_BizUrl;
                            $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
                            $toUsers = array();
                            $toUsers[] = $notifyUserEmail;
                            $Options['Email']['ToUsers'] = $toUsers;
                            $Options['Field']['login_user_realname'] = $g_UserRealName;
                            $Options['Field']['login_user_email'] = $g_UserEmail;
                            $Options['Field']['ocs_biz_url'] = $g_OCS_options['url'] . $g_BizUrl;
                            $Options['Email']['CcUsers'] = array($g_UserEmail);
                            $g_QueueJobs->AddNoticeJob(array('Email'), Req, $AuditReqId, 'StartRequestAudit', $Options);
                        }
                    }

                }
            }

            $RemovedReqIds = array_diff($reqIds, $AuditReqIds);
            $this->set('RemovedReqIds', $RemovedReqIds);
            if (empty($NotExitUsers)) {
                $this->set('saveComplete', 1);
            }
        }
        $this->set('NotExitUsers', $NotExitUsers);
    }

    // 获取已审核的最小环节值
    function getMiniAuditStage(&$AuditStageRelObjs) {
        global $g_BizId;
        global $g_Commons;

        $miniAuditStage = 0;
        if (!empty($AuditStageRelObjs)) {
            foreach ($AuditStageRelObjs as $AuditStageRelObj) {
                if ($AuditStageRelObj['AuditStageRelObj']['is_audit'] == 1) {
                    if (0 != $miniAuditStage && $AuditStageRelObj['AuditStageRelObj']['audit_stage'] < $miniAuditStage) {
                        $miniAuditStage = $AuditStageRelObj['AuditStageRelObj']['audit_stage'];
                    }
                    if (0 == $miniAuditStage) {
                        $miniAuditStage = $AuditStageRelObj['AuditStageRelObj']['audit_stage'];
                    }
                }
            }
        }
        return $miniAuditStage;
    }

    function getAuditReqsInfoByModelDefIdAndIsAudit($params) {
        global $g_BizId;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        global $g_UserId;
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_Product = $g_Commons->GlobalModel('Product');
        $this->Req->recursive = -1;

        $params = base64_decode($params);
        $params = json_decode($params);
        $ModelDefId = $params->ModelDefId;
        $IsAudit = $params->IsAudit;
        $Range = $params->Range;
        $qValue = $params->qValue;
        $sort = $params->sort;
        $direction = $params->direction;
        $SearchCond = isset($params->SearchCond) ? $params->SearchCond : null;

        $start_date = $params->start_date;
        $end_date = $params->end_date;

        $view = new View($this, false);
        $Paginator = $view->loadHelper('Paginator');

        $this->paginate['limit'] = $params->limit;
        $this->paginate['page'] = $params->page;
        $joins = array();
        $joins[] = array(
            'table' => 'audit_stage_rel_objs',
            'alias' => 'AuditStageRelObj',
            'type' => 'LEFT',
            'conditions' => array('AuditStageRelObj.model_def_id= ' . Req, 'AuditStageRelObj.rel_obj_id = Req.id'),
        );
        $joins[] = array(
            'table' => 'contracts',
            'alias' => 'Contract',
            'type' => 'LEFT',
            'conditions' => array('Req.model_def_id= ' . Contract, 'Contract.id = Req.rel_obj_id'),
        );
        // $joins[] = array(
        //     'table' => 'req_rd_modify_bills',
        //     'alias' => 'ReqRdModifyBill',
        //     'type' => 'LEFT',
        //     'conditions' => array('ReqRdModifyBill.model_def_id= ' . Req, 'ReqRdModifyBill.rel_obj_id = Req.id'),
        // );
        if ('my' == $Range) {
            if (0 == $IsAudit) {//查询正在审核的订单
                //TV全并行审核
                if (1) {
                    if ($g_RolePrivs->get_priv_level('Reqs', 'common_owner_priv')) {//内勤
                        $this->paginate['conditions'] = array('Req.audit_stage != 0', 'Req.audit_stage != ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE,
                            //'Req.audit_stage != ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_RESET,
                            'Req.model_def_id' => $ModelDefId,
                            'AuditStageRelObj.is_audit' => 0,
                            'AuditStageRelObj.pending_audit_user_id !=' . 0,
                            array(
                                'OR' => array('AuditStageRelObj.pending_audit_user_id' => $g_UserId
                                , 'AuditStageRelObj.create_user_id' => $g_UserId
                                , 'Req.owner_user_id' => $g_UserId)
                                )
                            );
                    } else {
                        $this->paginate['conditions'] = array('Req.audit_stage != 0', 'Req.audit_stage != ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE,
                            'Req.audit_stage != ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_RESET,
                            'Req.model_def_id' => $ModelDefId,
                            'AuditStageRelObj.is_audit' => 0,
                            'AuditStageRelObj.pending_audit_user_id !=' . 0,
                            array(
                                'OR' => array('AuditStageRelObj.pending_audit_user_id' => $g_UserId
                                , 'AuditStageRelObj.create_user_id' => $g_UserId
                                , 'Req.owner_user_id' => $g_UserId)
                                )
                            );
                    }
                } else {
                    $this->paginate['conditions'] = array('Req.audit_stage != 0', 'Req.audit_stage != ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE,
                        'Req.audit_stage != ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_RESET,
                        'Req.model_def_id' => $ModelDefId,
                        array(
                            'OR' => array('AuditStageRelObj.pending_audit_user_id' => $g_UserId, 'AuditStageRelObj.create_user_id' => $g_UserId, 'Req.owner_user_id' => $g_UserId)
                            )
                        );
                    $joins[0]['conditions'][] = 'AuditStageRelObj.audit_stage=Req.audit_stage';
                }
            } else if (1 == $IsAudit) {//查询已经审核的订单
                //TV全并行审核
                if (1) {
                    if ($g_RolePrivs->get_priv_level('Reqs', 'common_owner_priv')) {//内勤
                        $this->paginate['conditions'] = array(
                            'Req.audit_stage != 0'
                            , 'Req.model_def_id' => $ModelDefId
                            , array(
                                'OR' => array(
                                    array(
                                        'AuditStageRelObj.final_audit_user_id' => $g_UserId
                                        , 'Req.is_owner_print' => 0)
                                    , array(
                                        'Req.owner_user_id' => $g_UserId
                                        , 'Req.is_owner_print' => 0
                                        , 'Req.audit_stage' => OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE)
                                    , array(
                                        'AuditStageRelObj.create_user_id' => $g_UserId
                                        , 'Req.is_owner_print' => 0
                                        , 'Req.audit_stage' => OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE)
                                )
                            )
                        );
                    } else {
                        $this->paginate['conditions'] = array(
                            'Req.audit_stage != 0'
                            , 'Req.model_def_id' => $ModelDefId
                            , array(
                                'OR' => array(
                                    array(
                                        'AuditStageRelObj.final_audit_user_id' => $g_UserId
                                    )
                                    , array(
                                        'Req.owner_user_id' => $g_UserId
                                        , 'Req.audit_stage' => OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE
                                    )
                                    , array(
                                        'AuditStageRelObj.create_user_id' => $g_UserId
                                        , 'Req.audit_stage' => OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE
                                    )
                                )
                            )
                        );
                    }
                } else {
                    if ($g_RolePrivs->get_priv_level('Reqs', 'common_owner_priv')) {//内勤
                        $this->paginate['conditions'] = array(
                            'Req.audit_stage != 0',
                            'Req.model_def_id' => $ModelDefId,
                            array(
                                'OR' => array(
                                    array('AuditStageRelObj.final_audit_user_id' => $g_UserId, 'Req.is_owner_print' => 0),
                                    array('Req.owner_user_id' => $g_UserId, 'Req.is_owner_print' => 0, 'Req.audit_stage' => OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE),
                                    array('AuditStageRelObj.create_user_id' => $g_UserId, 'Req.is_owner_print' => 0, 'Req.audit_stage' => OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE)
                                )
                            )
                        );
                    } else {
                        $this->paginate['conditions'] = array(
                            'Req.audit_stage != 0',
                            'Req.model_def_id' => $ModelDefId,
                            array(
                                'OR' => array(
                                    array('AuditStageRelObj.final_audit_user_id' => $g_UserId),
                                    array('Req.owner_user_id' => $g_UserId, 'Req.audit_stage' => OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE),
                                    array('AuditStageRelObj.create_user_id' => $g_UserId, 'Req.audit_stage' => OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE)
                                )
                            )
                        );
                    }
                }
            } else if (2 == $IsAudit) {//查询已经打印的订单(内勤)
                $this->paginate['conditions'] = array(
                    'Req.audit_stage != 0',
                    'Req.model_def_id' => $ModelDefId,
                    array(
                        'OR' => array(
                        array('AuditStageRelObj.final_audit_user_id' => $g_UserId, 'Req.is_owner_print' => 1),
                        array('AuditStageRelObj.create_user_id' => $g_UserId, 'Req.is_owner_print' => 1),
                        array('Req.owner_user_id' => $g_UserId, 'Req.is_owner_print' => 1, 'Req.audit_stage' => OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE)
                        )
                    )
                );
            }
        } else if ('all' == $Range) {
            if (0 == $IsAudit) {//查询未完成的订单
                $this->paginate['conditions'] = array('Req.audit_stage != 0', 'Req.audit_stage != ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE, 'Req.audit_stage != ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_STOP,
                    'Req.model_def_id' => $ModelDefId);
            } else if (1 == $IsAudit) {//查询已完成的订单
                $this->paginate['conditions'] = array('Req.audit_stage != 0', 'Req.audit_stage = ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE,
                    'Req.model_def_id' => $ModelDefId);
            } else if (2 == $IsAudit) {//已经撤消的订单
                $this->paginate['conditions'] = array('Req.audit_stage != 0', 'Req.audit_stage = ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_STOP,
                    'Req.model_def_id' => $ModelDefId);
            }
        } else if ('dept' == $Range) {
            global $g_Privs;
            $g_Dept = $g_Commons->GlobalModel('Dept');
            $ChargeRdDeptIds = $g_Dept->getChargeRdDeptIds($g_UserId);
            $MyDeptIds = array();
            $MyDeptIds = explode(',', $g_Privs['UserDepts']['DeptIds']);
            $MyDeptIds = array_merge($MyDeptIds, explode(',', $g_Privs['UserDepts']['ChildDeptIds']));
            if (!empty($ChargeRdDeptIds)) {
                $MyDeptIds = array_merge($MyDeptIds, $ChargeRdDeptIds);
            }
            $MyDeptIds = array_unique($MyDeptIds);
            if (!empty($MyDeptIds)) {
                $temp = array();
                foreach ($MyDeptIds as $MyDeptId) {
                    if ('' != $MyDeptId && $MyDeptId > 0) {
                        $temp[] = $MyDeptId;
                    }
                }
                $MyDeptIds = $temp;
            }

            if (0 == $IsAudit) {//未完成
                $this->paginate['conditions'] = array('Req.audit_stage != 0', 'Req.audit_stage != ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE,
                    'Req.model_def_id' => $ModelDefId);
            } else {//已完成的订单
                $this->paginate['conditions'] = array('Req.audit_stage != 0', 'Req.audit_stage = ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE,
                    'Req.model_def_id' => $ModelDefId);
            }
            if (OCS_BIZ_TYPE_TV == $g_BizId && !empty($MyDeptIds)) {
                $this->paginate['conditions'][] = '(Req.rd_dept_id IN (' . implode(",", $MyDeptIds) . ') OR Req.com_dept_id IN (' . implode(",", $MyDeptIds) . '))';
            }
        }
        if ('' != trim($qValue)) {
            $initOrCond = array();
            //$this->paginate['conditions']['OR'] = array();
            $counter = $this->Req->find('count', array('conditions' => array("Req.name LIKE '%" . $qValue . "%'")));
            if ($counter > 0) {
                $initOrCond['OR'][] = "Req.name LIKE '%" . $qValue . "%'";
            }
            $counter = $this->Req->find('count', array('conditions' => array("Req.ebs_order_number LIKE '%" . $qValue . "%'")));
            if ($counter > 0) {
                $initOrCond['OR'][] = "Req.ebs_order_number LIKE '%" . $qValue . "%'";
            }
            $g_Contract = $g_Commons->GlobalModel('Contract');
            $g_Contract->recursive = -1;
            $counter = $g_Contract->find('count', array('conditions' => array("Contract.account_mno LIKE '%" . $qValue . "%'")));
            if ($counter > 0) {
                $initOrCond['OR'][] = "Contract.account_mno LIKE '%" . $qValue . "%'";
            }
            $counter = $g_Contract->find('count', array('conditions' => array("Contract.account_cno LIKE '%" . $qValue . "%'")));
            if ($counter > 0) {
                $initOrCond['OR'][] = "Contract.account_cno LIKE '%" . $qValue . "%'";
            }
            $g_Users->User->recursive = -1;
            $user_id = $g_Users->User->find('list', array(
                        'conditions' => array('User.realname LIKE' => '%' . $qValue . '%'),
                        'fields' => 'User.id',
                        'order' => ''
                    ));
            if (!empty($user_id)) {
                $initOrCond['OR']['AuditStageRelObj.pending_audit_user_id'] = $user_id;
                $initOrCond['OR']['AuditStageRelObj.final_audit_user_id'] = $user_id;
                $initOrCond['OR']['Req.owner_user_id'] = $user_id;
            }
            if (gmdate(strtotime($qValue)) != null && '' != gmdate(strtotime($qValue))) {//当是时间格式时，才进行时间的查询
                $initOrCond['OR'][] = "AuditStageRelObj.create_time LIKE '%" . $qValue . "%'";
                $initOrCond['OR'][] = "AuditStageRelObj.audit_time LIKE '%" . $qValue . "%'";
            }
            $this->paginate['conditions'][] = $initOrCond;
        }
        if ('all' != $Range && 2 != $IsAudit) {
            $this->paginate['conditions'][] = 'Req.audit_stage != ' . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_STOP; //已经“撤消”的确认书不显示
        }
        if (null == $sort) {
            $sort = 'AuditStageRelObj.create_time';
            $direction = 'DESC';
        }
        if (!empty($SearchCond)) {
            $SearchCond = json_decode(json_encode($SearchCond), true);
            if ('' != $SearchCond['conditions']) {
                $this->paginate['conditions'][] = $SearchCond['conditions'];
            }
            foreach ($SearchCond['joins'] as $join) {
                $joins[] = $join;
            }
        }
        $joins[] = array('table'=>'products','alias'=>'Product','type'=>'inner','conditions'=>'Product.id = Req.product_id');
        $this->paginate['conditions'][] = "Req.parent_id=0"; //不能是虚拟订单
        $this->paginate['conditions'][] = "Req.biz_id=$g_BizId";

        //时间过滤
        $this->paginate['conditions'][] = "AuditStageRelObj.create_time >= '" . $start_date . "'";
        $this->paginate['conditions'][] = "AuditStageRelObj.create_time <= '" . $end_date . "'";

        if (isset($params->todo_ids)) {
            $this->paginate['conditions']['Req.id'] = explode(',', $params->todo_ids);
        }

        $this->paginate['joins'] = $joins;
        $this->paginate['order'] = array($sort => $direction);
        $this->paginate['group'] = array('Req.id');
        $this->paginate['fields'] = array('Req.id', 'Req.audit_stage', 'Req.name', 'Req.ebs_order_number', 'Req.product_id', 'Req.owner_user_id', 'Req.is_has_task', 'Req.sw_atom_ids_json','Product.code', 'Contract.other_board',
            'Req.account_id', 'Req.quantity', 'Req.price', 'Contract.account_mno', 'Contract.id', 'Contract.cfm_reset_reason_sort', 'Contract.cps_cfm_status', 'Contract.cps_cfm_audit_status', 'Contract.account_cno', 'Contract.account_prod_name', 'Contract.cfm_reset_counts','Contract.cfm_reset_reason');

        if(isset($params->export) && 'excel' == $params->export){
            $result = $this->Req->find('all', array(
                        'conditions' => $this->paginate['conditions'],
                        'joins' => $this->paginate['joins'],
                        'fields' => $this->paginate['fields'],
                        'group' => $this->paginate['group'],
                    ));
        }else{
            $result = $this->paginate();
        }

        if (null != $sort) {
            $sortArr = explode('.', $sort);
            if (!empty($sortArr)) {
                $Paginator->request->params['paging']['Req']['options']['order'] = array($sort => $direction);
            }
        }
        $formatData = $g_AttrDics->formatModelData($result, 'Req');
        $formatData = $g_AttrDics->formatModelData($formatData, 'Contract');
        if (!empty($formatData)) {
            $g_ReqRdModifyBills = $g_Commons->GlobalController('ReqRdModifyBills');
            $g_ReqRdModifyBills->ReqRdModifyBill->recursive = -1;
            foreach ($formatData as $idx => $temp) {
                $temp['Req']['sw_atom_ids_json_detail'] = $g_ReqRdModifyBills->getSwAttrsRelAtoms($temp['Req']['sw_atom_ids_json']);
                $temp['Contract']['other_board_name'] = $g_Product->getProductNameByProductCode($temp['Contract']['other_board']);
                $formatData[$idx] = $temp;
                $formatData[$idx]['ReqRdModifyBillCounter'] = $g_ReqRdModifyBills->ReqRdModifyBill->find('count', array('conditions' => array('ReqRdModifyBill.model_def_id' => Req,
                                'ReqRdModifyBill.rel_obj_id' => $temp['Req']['id'], 'ReqRdModifyBill.status !=' => OCS_REQRDMODIFY_BILL_STATUS_STOP)));
            }
        }
        return array('Paginator' => $Paginator, 'result' => $formatData, 'conds' => $this->paginate);
    }

    function getReqsRelNextAuditUsers(&$Reqs) {
        global $g_BizId;
        global $g_Commons;
        $g_AuditStageRelObjs = $g_Commons->GlobalController('AuditStageRelObjs');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_AuditStageRelObjs->AuditStageRelObj->recursive = -1;

        $ReqRelNextAuditUsers = array();
        if (!empty($Reqs)) {
            foreach ($Reqs as $Req) {
                $NextAuditStage = $g_AuditStageRelObjs->getNextAuditStage(Req, $Req['Req']['id'], $Req['Req']['audit_stage']['value']);
                $AuditStageRelObj = $g_AuditStageRelObjs->AuditStageRelObj->find('first', array('conditions' => array('AuditStageRelObj.model_def_id' => Req,
                                'AuditStageRelObj.rel_obj_id' => $Req['Req']['id'], 'AuditStageRelObj.audit_stage' => $NextAuditStage), 'fields' => array('AuditStageRelObj.pending_audit_user_id')));
                $ReqRelNextAuditUsers[$Req['Req']['id']]['next_audit_stage'] = $NextAuditStage;
                if (!empty($AuditStageRelObj)) {
                    $ReqRelNextAuditUsers[$Req['Req']['id']]['pending_audit_user'] = $g_Users->getUserRealNameById($AuditStageRelObj['AuditStageRelObj']['pending_audit_user_id']);
                }
            }
        }
        return $ReqRelNextAuditUsers;
    }

    function getReqRelVersions($ReqIds = array()) {
        global $g_BizId;
        global $g_Commons;
        $g_ReqVersions = $g_Commons->GlobalController('ReqVersions');

        $result = array();
        if (!empty($ReqIds)) {
            foreach ($ReqIds as $ReqId) {
                $ReqVersion = $g_ReqVersions->getLastReqVersion(Req, $ReqId);
                if (!empty($ReqVersion)) {
                    $result[$ReqId] = $ReqVersion['ReqVersion']['id'];
                }
            }
        }
        return $result;
    }

    function pop_goto_print_reqs() {
        global $g_BizId;
        global $g_Commons;
        global $g_BizName;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $CrmIds = explode(',', $AllParams['P']['crm_ids']);
        $ReqIds = array();
        if (!empty($CrmIds)) {
            $Contracts = $g_Contract->find('all', array(
                'conditions' => array('Contract.crm_contract_id' => $CrmIds),
                'fields' => array('Contract.id')
            ));
            $ContractIds = array();
            if (!empty($Contracts)) {
                foreach ($Contracts as $Contract) {
                    $ContractIds[] = $Contract['Contract']['id'];
                }
            }
            $Reqs = $this->Req->find('all', array('conditions' => array('Req.model_def_id' => Contract, 'Req.rel_obj_id' => $ContractIds, 'Req.parent_id' => 0),
                        'fields' => array('Req.id')));
            if (!empty($Reqs)) {
                foreach ($Reqs as $Req) {
                    $ReqIds[] = $Req['Req']['id'];
                }
            }
        }
        $ReqIdsStr = implode(',', $ReqIds);
        unset($AllParams['P']['crm_ids']);
        $params = 'ReqIds=' . $ReqIdsStr . '&';
        foreach ($AllParams['P'] as $key => $value) {
            $params .= $key . '=' . $value . '&';
        }
        $params = rtrim($params, '&');
        $this->redirect(array(BizMark => $g_BizName, 'action' => 'print_reqs/biz:/P:' . $params));
    }

    // 打印确认书
    // CPS客户查看确认书也同样使用此函数，修改时要注意 by wuhuashan
    function pop_print_reqs() {
        $this->layout = 'pdf';

        global $g_BizId;
        global $g_Commons;
        $g_Atom = $g_Commons->GlobalModel('Atom');
        $g_AtomRelInfoLog = $g_Commons->GlobalModel('AtomRelInfoLog');
        $g_Dic = $g_Commons->GlobalModel('Dic');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_ProdModel = $g_Commons->GlobalModel('ProdModel');
        $g_PrintTmpl = $g_Commons->GlobalModel('PrintTmpl');
        $g_ReqRelObj = $g_Commons->GlobalModel('ReqRelObj');
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Patent = $g_Commons->GlobalModel('Patent');

        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AuditStageRelObjs = $g_Commons->GlobalController('AuditStageRelObjs');
        $this->Req->recursive = -1;

        //获取打印模板
        $printTmpls = $g_PrintTmpl->find('all', array(
            'joins' => array(
                array(
                    'table' => 'attachments',
                    'alias' => 'Attachment',
                    'type' => 'LEFT',
                    'conditions' => 'Attachment.id=PrintTmpl.attachment_id'
                ),
            ),
            'conditions' => array('PrintTmpl.model_def_id' => AuditStageRelObj),
            'fields' => 'PrintTmpl.name, PrintTmpl.output_file_name, Attachment.id, Attachment.hash_name, Attachment.path',
            'order' => 'PrintTmpl.name ASC'
        ));
        $this->set('printTmpls', $printTmpls);

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $Lang = isset($AllParams['P']['Lang']) ? $AllParams['P']['Lang'] : 'cn';
        $IsFormal = isset($AllParams['P']['IsFormal']) ? $AllParams['P']['IsFormal'] : 0;
        $Action = isset($AllParams['P']['action']) ? $AllParams['P']['action'] : '';
        $TmplName = isset($AllParams['P']['TmplName']) ? $AllParams['P']['TmplName'] : '';
        $ViewType = isset($AllParams['P']['ViewType']) ? $AllParams['P']['ViewType'] : '';
        $AllLangs = array('cn' => '中文', 'en' => 'English');
        $CpsView = isset($AllParams['P']['cps_view']) ? $AllParams['P']['cps_view'] : 0;

        if (isset($AllParams['P']['ReqIds'])) {
            $ReqIds = isset($AllParams['P']['ReqIds']) ? $AllParams['P']['ReqIds'] : array();
            $ReqIds = explode(',', $ReqIds);
        } else if (isset($AllParams['P']['ContractIds'])) {
            $ContractIds = isset($AllParams['P']['ContractIds']) ? $AllParams['P']['ContractIds'] : array();
            $ReqIds = $this->getReqIdsByModelDefIdAndRelObjIds(Contract, $ContractIds);
        }
        $this->set('ReqIds', $ReqIds);

        $ReqRelVersions = $this->getReqRelVersions($ReqIds);
        $this->set('ReqRelVersions', $ReqRelVersions);

        $Reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id',
                ),
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'left',
                    'conditions' => 'RelReq.req_id = Req.id',
                ),
            ),
            'conditions' => array(
                'Req.id' => $ReqIds, 'Req.parent_id' => 0
            ),
            'fields' => array(
                'Req.id', 'Req.biz_id', 'Req.product_id', 'Req.ebs_order_number', 'Req.is_has_task',
                'Req.name', 'Req.account_id', 'Req.model_def_id', 'Req.rel_obj_id', 'Req.bill_no', 'Req.sw_atom_ids', 'Req.audit_stage',
                'Req.sw_atom_ids_json', 'Req.owner_user_id', 'Req.ext_3rd_party_prods', 'Req.quantity', 'Req.extend_sw_atom_ids', 'Req.hw_rel_sw_atom_ids',
                'Req.audit_stage', 'Req.remark', 'Contract.other_board',
                'RelReq.auth_account_ids',
            )
        ));

        $g_Product = $g_Commons->GlobalModel('Product');
        // 如果传入模板名为空，则调用业务默认模板
        if (empty($TmplName)) {
            switch ($g_BizId) {
                case OCS_BIZ_TYPE_TV:
                case OCS_BIZ_TYPE_SCS:
                    $TmplName = 'cfm_tv';
                    break;
                case OCS_BIZ_TYPE_CE:
                    $prod_id = 0;
                    foreach ($Reqs as $req_item) {
                        if (!empty($req_item['Req']['product_id'])) {
                            $prod_id = $req_item['Req']['product_id'];
                            break;
                        }
                    }
                    $prod_model_type = $g_Product->getProdModelTypeByProdId($prod_id);

                    if (1 == $prod_model_type) {
                        // 整机使用整机的确认书模版
                        $TmplName = 'cfm_ce_prod';
                    } else {
                        $TmplName = 'cfm_ce';
                    }
                    break;
                case OCS_BIZ_TYPE_STB:
                    $TmplName = 'cfm_stb';
                    break;
                default:
                    $TmplName = 'cfm_mid';
                    break;
            }
        }
        $this->set('AllLangs', $AllLangs);
        $this->set('TmplName', $TmplName);
        $this->set('Lang', $Lang);
        $this->set('Action', $Action);
        $this->set('ViewType', $ViewType);
        $this->set('CpsView', $CpsView);

        $formatReqs = $g_AttrDics->formatModelData($Reqs, 'Req');
        //获取订单对应的下一个环节审核人
        $ReqRelNextAuditUsers = $this->getReqsRelNextAuditUsers($formatReqs);
        $this->set('ReqRelNextAuditUsers', $ReqRelNextAuditUsers);

        //检查当前用户是否有权审核该订单。
        $this->set('isFlash', 0);
        if ('print_cfm' != $Action) {
            $result = $this->checkAuditUser($formatReqs);
            if (0 == $result['is_success']) {
                $this->set('isFlash', 1);
                $this->set('FlashMsg', $result['message']);
                return;
            }
        }

        // 查询已经审核的人
        $AllAudittedUsers = array();
        if (!empty($ReqIds)) {
            foreach ($ReqIds as $ReqId) {
                $AllAudittedUsers[$ReqId] = $g_AuditStageRelObjs->getAllAudittedUsers(Req, $ReqId);
            }
        }
        $this->set('AllAudittedUsers', $AllAudittedUsers);

        $fields_needless = array('id', 'contract_id', 'status', 'create_time', 'create_user_id', 'update_time', 'update_user_id', 'prod_sw_atom_ids', 'sw_atom_ids_json');
        $package_type = $g_Dic->getEnableDicByType('package_type');
        $tbl = array('ProdAttr', 'Contract', 'Req');
        $label_temp = $g_AttrDics->AttrDic->find('all', array('conditions' => array('AttrDic.tbl_name' => $tbl, 'AttrDic.biz_id' => $g_BizId)));
        $LabelAll = array();
        foreach ($label_temp as $value) {
            $LabelAll[$value['AttrDic']['fld_name']] = $value['AttrDic']['label'];
        }
        $params = array();
        $params['Lang'] = $Lang;
        $params['fields_needless'] = $fields_needless;
        $params['package_type'] = $package_type;
        $params['LabelAll'] = $LabelAll;
        if (isset($AllParams['P']['tmpl_path']) && 'cfm_print_detail' == $AllParams['P']['tmpl_path']) {
            $params['IsJoinCpsInfo'] = true;
        }

        $IdxFormatReqs = array();
        $ModelDatas = array();
        $is_dolby_chipset = array();
        if (!empty($formatReqs)) {
            foreach ($formatReqs as $formatReq) {
                $req_id = $formatReq['Req']['id'];
                $product_id = is_array($formatReq['Req']['product_id']) ? $formatReq['Req']['product_id']['value'] : $formatReq['Req']['product_id'];
                $is_sckd_order = $this->Req->isSCKDReqOrder($req_id);
                if ($is_sckd_order) {
                    $product_id = $g_Product->getProductIdByCode($formatReq['Contract']['other_board']);
                }
                $IdxFormatReqs[$req_id] = $formatReq;
                $ModelDatas[$req_id]['SwDetails'] = $this->getSwDetailsInfo($formatReq, $params);
                $ModelDatas[$req_id]['ProductDetails'] = $this->getProductDetailsInfo($product_id, $Lang);
                $ModelDatas[$req_id]['AuditStageRelObjs'] = $this->getAuditStageRelObjsByModelDefIdAndObjId(Req, $req_id);
                $ModelDatas[$req_id]['ProdModel'] = $g_ProdModel->getProdModelTypeFieldByProdModelId($ModelDatas[$req_id]['ProductDetails']['prod_model_id']);
                $ModelDatas[$req_id]['ProductDetails']['specified_materials_val'] = '';
                $specified_val = $ModelDatas[$req_id]['ProductDetails']['is_specified_materials'];
                $specified_val = $g_Enum->getLabelByDictNameAndValue('Product.is_specified_materials', $specified_val);
                $ModelDatas[$req_id]['ProductDetails']['specified_val'] = (int) $specified_val;

                //专利授权客户
                $ModelDatas[$req_id]['RelReq']['patent_account_names'] = $g_Patent->getNamesByPatentAccountIdsStr($formatReq['RelReq']['auth_account_ids']);

                // hardocde 特殊处理TV端子的关联
                if (OCS_BIZ_TYPE_TV == $ModelDatas[$req_id]['ProductDetails']['biz_id'] && !empty($ModelDatas[$req_id]['SwDetails']['hw_rel_sw_atom_ids']['value'])) {
                    if (!empty($ModelDatas[$req_id]['ProductDetails']['detail']['HW_BasicFunc'])) {
                        $old_basic_funcs = $ModelDatas[$req_id]['ProductDetails']['detail']['HW_BasicFunc'];
                        $basic_funcs = explode(',', $old_basic_funcs);
                        foreach ($basic_funcs as $basic_funcs_key => $basic_func) {
                            if ('TV' == $basic_func) {
                                $basic_funcs[$basic_funcs_key] = $ModelDatas[$req_id]['SwDetails']['hw_rel_sw_atom_ids']['label'];
                                break;
                            }
                        }
                        $basic_funcs = implode(',', $basic_funcs);
                        if (!empty($ModelDatas[$req_id]['ProductDetails']['index_notes']['HW_BasicFunc']['common_note'][$old_basic_funcs])) {
                            $ModelDatas[$req_id]['ProductDetails']['index_notes']['HW_BasicFunc']['common_note'][$basic_funcs] = $ModelDatas[$req_id]['ProductDetails']['index_notes']['HW_BasicFunc']['common_note'][$old_basic_funcs];
                        }
                        $ModelDatas[$req_id]['ProductDetails']['detail']['HW_BasicFunc'] = $basic_funcs;
                    }
                }

                // 判断如果客户是杜比客户且产品是带杜比芯片，在显示主方案时后面加上"(带杜比功能)"
                $is_dolby_account = $g_Account->get_by_id($ModelDatas[$req_id]['SwDetails']['account_id']['value'], 'is_dolby_custom');
                if (1 == $is_dolby_account && $g_Product->isWithDolbyByProductid($product_id)){
                    $is_dolby_chipset[$req_id] = true;
                }
                //杜比方案主芯片历史数据展示
                if (isset($ModelDatas[$req_id]['ProductDetails']['detail']['HW_ChipSeries'])) {
                    $chip_name = $ModelDatas[$req_id]['ProductDetails']['detail']['HW_ChipSeries'];
                    $chip_id = $g_Atom->getAtomIdByName($chip_name);
                    $chip_history = $g_AtomRelInfoLog->getChipsetHistoryNameByAtomId($chip_id);
                    if (!empty($chip_history)) {
                        if ($chip_history['AtomRelInfoLog']['create_time'] > $ModelDatas[$req_id]['SwDetails']['order_time']) {
                            $ModelDatas[$req_id]['ProductDetails']['detail']['ChipsetHistoryName'] = $chip_history['AtomRelInfoLog']['old_info'];
                        }
                    }
                }
            }
        }
        if (!empty($ModelDatas)) {
            foreach ($ModelDatas as $ModelData) {
                //日期＋客户＋订单号＋板卡＋配屏＋特殊需求（如带DVD）＋数量
                $titleContent = date('Ymd') . '-' . $ModelData['SwDetails']['account_id']['label'] . '-' . $ModelData['SwDetails']['contract_no'] . '-' . $g_ProdModel->findMainField($ModelData['ProductDetails']['prod_model_id']);
                $titleContent .= ( isset($ModelData['SwDetails']['sw_detail']['SW_Panel']) && null != $ModelData['SwDetails']['sw_detail']['SW_Panel']) ? ('-' . $ModelData['SwDetails']['sw_detail']['SW_Panel']) : null . (isset($ModelData['SwDetails']['quantity']) && null != $ModelData['SwDetails']['quantity']) ? ('-' . $ModelData['SwDetails']['quantity'] . '(pcs)') : null;
                $this->set('title_for_layout', $titleContent);
                break;
            }
        }

        //针对非TV事业部，将对应软件属性的KEY改为TV的属性名
        if (!empty($ModelDatas)) {
            foreach ($ModelDatas as $idx => $temp) {
                if (!empty($temp['SwDetails']['sw_detail'])) {
                    foreach ($temp['SwDetails']['sw_detail'] as $sw_alias => $value) {
                        $sw_alias = 'SW_' . preg_replace('/^SW\_(.*)\_/', '', $sw_alias);
                        $temp['SwDetails']['sw_detail'][$sw_alias] = $value;
                    }
                    foreach ($temp['SwDetails']['label'] as $sw_alias => $value) {
                        $sw_alias = 'SW_' . preg_replace('/^SW\_(.*)\_/', '', $sw_alias);
                        $temp['SwDetails']['label'][$sw_alias] = $value;
                    }
                    $ModelDatas[$idx] = $temp;
                }
            }
        }

        $this->set('is_dolby_chipset', $is_dolby_chipset);
        $this->set('IdxFormatReqs', $IdxFormatReqs);
        $this->set('ModelDatas', $ModelDatas);

        $is_ckd_list = $g_Enum->getEnumListByDictName('Product.is_ckd');
        $this->set('is_ckd_list', $is_ckd_list);

        // 获取用户签名
        global $g_UserId;
        global $g_UserRealName;
        global $g_FS_options;
        $FsFileInfoPaths = array();
        $g_UserPrefImage = $g_Commons->GlobalModel('UserPrefImage');
        $g_Attachment = $g_Commons->GlobalModel('Attachment');

        if (!empty($AllAudittedUsers)) {
            foreach ($AllAudittedUsers as $req_id => $Users) {
                foreach ($Users as $User) {
                    $UserId = $User['value'];
                    $UserPrefImage = $g_UserPrefImage->find('first', array(
                        // 'joins' => array(
                        //     array(
                        //         'table' => 'attachments',
                        //         'alias' => 'Attachment',
                        //         'type' => 'LEFT',
                        //         'conditions' => 'Attachment.id=UserPrefImage.attachment_id'
                        //     )
                        // ),
                        'conditions' => array(
                            'UserPrefImage.type' => OCS_USER_PREF_IMAGE_TYPE_CH,
                            'UserPrefImage.user_id' => $UserId,
                            'UserPrefImage.status' => OCS_USER_PREF_IMAGE_STATUS_AUDIT_PASSED
                        ),
                        'fields' => 'UserPrefImage.attachment_id'//, Attachment.path, Attachment.hash_name
                    ));
                    $temp = array();
                    $temp['audit_time'] = $User['audit_time'];
                    $temp['audit_realname'] = $User['label'];
                    if (!empty($UserPrefImage)) {
                        // $temp['url'] = $g_FS_options['url'] . 'getFile.php?uuid=' . $UserPrefImage['UserPrefImage']['fs_file_id'];
                        $temp['url'] = '/Attachments/download_attachment/' . $UserPrefImage['UserPrefImage']['attachment_id'];

                        $img_file_info = $g_Attachment->getAttachmentFileInfo($UserPrefImage['UserPrefImage']['attachment_id']);
                        if ($img_file_info['success']) {
                            $temp['img_src'] = base64_encode(file_get_contents($img_file_info['datas']['file_path']));
                        }
                    }
                    $FsFileInfoPaths[$req_id][] = $temp;
                }
            }
        }
        if ('print_cfm' != $Action) {
            $UserPrefImage = $g_UserPrefImage->find('first', array(
                // 'joins' => array(
                //     array(
                //         'table' => 'attachments',
                //         'alias' => 'Attachment',
                //         'type' => 'LEFT',
                //         'conditions' => 'Attachment.id=UserPrefImage.attachment_id'
                //     )
                // ),
                'conditions' => array(
                    'UserPrefImage.type' => OCS_USER_PREF_IMAGE_TYPE_CH,
                    'UserPrefImage.user_id' => $g_UserId,
                    'UserPrefImage.status' => OCS_USER_PREF_IMAGE_STATUS_AUDIT_PASSED
                ),
                'fields' => 'UserPrefImage.attachment_id'//, Attachment.path, Attachment.hash_name
            ));
            $temp = array();
            $temp['audit_time'] = date('Y-m-d H:i:s');
            $temp['audit_realname'] = $g_UserRealName;
            if (!empty($UserPrefImage)) {
                // $temp['url'] = $g_FS_options['url'] . 'getFile.php?uuid=' . $UserPrefImage['UserPrefImage']['fs_file_id'];
                $temp['url'] = '/Attachments/download_attachment/' . $UserPrefImage['UserPrefImage']['attachment_id'];

                $img_file_info = $g_Attachment->getAttachmentFileInfo($UserPrefImage['UserPrefImage']['attachment_id']);
                if ($img_file_info['success']) {
                    $temp['img_src'] = base64_encode(file_get_contents($img_file_info['datas']['file_path']));
                }
            }
            $FsFileInfoPaths[$req_id][] = $temp;
        }
        $this->set('FsFileInfoPaths', $FsFileInfoPaths);

        // 判断是否需要显示打回原因
        if (!empty($AllParams['P']['show_audit_reason'])) {
            $g_Log = $g_Commons->GlobalModel('Log');
            $g_Log->recursive = -1;
            $fail_reason = array();
            foreach ($Reqs as $req) {
                if (OCS_PRODMODEL_REL_AUDIT_USER_STAGE_RESET == $req['Req']['audit_stage']) {
                    $log = $g_Log->find('first', array(
                        'conditions' => array(
                            'Log.model_def_id' => Req,
                            'Log.rel_id' => $req['Req']['id'],
                            'Log.content LIKE' => '打回确认书%'
                        ),
                        'fields' => 'Log.content',
                        'order' => 'Log.id DESC'
                    ));
                    $fail_reason[$req['Req']['id']] = $log['Log']['content'];
                }
            }
            $this->set('fail_reason', $fail_reason);
        }

        // TV下,增加CPS选配硬件信息对比栏 add by GUOCAI
        if (OCS_BIZ_TYPE_TV == $g_BizId) {
            $g_CpsContractCfm = $g_Commons->GlobalModel('CpsContractCfm');
            // 通过OCS red id 获取CPS选配的软、硬件信息
            $hw_prod_attrs = $g_CpsContractCfm->getOcsAndCpsHwOptsGroupByReqIds($ReqIds);
            $this->set('hw_prod_attrs', $hw_prod_attrs);
            $sw_prod_attrs = $g_CpsContractCfm->getOcsAndCpsSwOptsGroupByReqIds($ReqIds);
            $this->set('sw_prod_attrs', $sw_prod_attrs);
        }

        // 获取客户签名
        $g_CpsContract = $g_Commons->GlobalModel('CpsContract');
        $account_user_signature_img = $g_CpsContract->getCpsAccountUserSignatureByReqId($ReqId);
        $this->set('account_user_signature_img', $account_user_signature_img);

        //定义显示不分类的产品属性事业部
        $is_show_no_group_attr = in_array($g_BizId, $g_Product->defNoGroupAttrBiz());
        $this->set('is_show_no_group_attr', $is_show_no_group_attr);
    }

    /**
     * 合同审核查看打印界面
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-01-26T11:17:54+0800
     *
     * @return   [type]                   [description]
     */
    function pop_audit_contracts() {
        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        $this->Req->recursive = -1;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
        $g_AttrDics->AttrDic->recursive = -1;
        $g_ERPWsClients = $g_Commons->GlobalController('ERPWsClients');
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');

        // 分派信息
        $contract_tmpl_opts = $this->Req->getContractTmplOpts();
        $this->set('contract_tmpl_opts', $contract_tmpl_opts);

        // 获取URL参数
        $all_params = $g_Commons->getUrlParams($this->params->params);
        $this->set('all_params', $all_params);

        // 打印or审核
        $type = !empty($all_params['P']['type']) ? $all_params['P']['type'] : 'print';
        $this->set('type', $type);

        // 打印页基础 Layout
        $title_for_layout = ('print' == $type) ? '合同打印' : '合同审核';
        $this->set('title_for_layout', $title_for_layout);

        // 整理并删除重复的订单ID
        if (isset($all_params['P']['ids'])) {//根据订单ID获取订单信息及合同信息
            $ids = !empty($all_params['P']['ids']) ? explode(',', $all_params['P']['ids']) : array();
            $ids = array_unique($ids);
            $orders = $this->Req->getContractReqsByReqId($ids);
        } else if (isset($all_params['P']['contract_no'])) {//根据订单ID获取订单信息及合同信息
            $contract_nos = !empty($all_params['P']['contract_no']) ? explode(',', $all_params['P']['contract_no']) : array();
            $contract_nos = array_unique($contract_nos);
            $orders = $this->Req->getContractReqsByContractNo($contract_nos);
        } else {
            $orders = array();
        }

        // 获取默认选项
        $opt_result = $this->Req->filterContractOpt($all_params['P']);
        if (empty($opt_result['success'])) {
            $this->set('cannot_view_message', $opt_result['message']);
            return;
        }
        $opts = $opt_result['datas'];

        // 根据订单信息,获取可见的合同模板,并重写当前加载的合同选项
        $opts['activity_tmpl_names'] = $g_ContractRelTmpl->getTmplsByOrders($orders);


        //判断是否为物料订单（只取其中一个单）
        if (!empty($orders)) {
            $order = current($orders);
            $is_ckd_order = $this->Req->isMtlReqOrder(null, $order['Req']['req_type']);
        } else {
            $is_ckd_order = false;
        }
        $this->set('is_ckd_order', $is_ckd_order);

        // 字典解析字段
        $orders = $g_AttrDics->formatModelData($orders, 'Req');
        $orders = $g_AttrDics->formatModelData($orders, 'Contract');

        // 记录订单上的客户ID(包含第三方)
        $order_account_ids = array();
        $req_ids = array();
        foreach ($orders as $order) {
            $account_id = !empty($order['Req']['account_id']['value']) ? $order['Req']['account_id']['value'] : 0;
            $mid_account_id = !empty($order['Contract']['mid_account_id']['value']) ? $order['Contract']['mid_account_id']['value'] : 0;
            if (0 < $account_id) {
                $order_account_ids[$account_id] = $account_id;
            }
            if (0 < $mid_account_id) {
                $order_account_ids[$mid_account_id] = $mid_account_id;
            }
            $req_ids[] = $order['Req']['id'];
        }
        $this->set('req_ids', $req_ids);

        // 权限控制
        $can_view_money = $g_RolePrivs->get_priv_level('Reqs', 'can_view_money');
        $can_view_current = 0;
        switch ($can_view_money) {
            case OCS_PRIV_TYPE_NONE:// 权限类型：无
                break;
            case OCS_PRIV_TYPE_RESP_STAFF:// 权限类型：负责员工
            case OCS_PRIV_TYPE_RELATED_STAFF:// 权限类型：相关员工
            case OCS_PRIV_TYPE_RESP_DEPT:// 权限类型：负责部门
            case OCS_PRIV_TYPE_RELATED_DEPT:// 权限类型：相关部门
                $self_account_ids = $g_Account->getSelftChargeAccountIds();
                if (0 == count(array_diff($order_account_ids, $self_account_ids))) {
                    $can_view_current = 1;
                }
                break;
            case OCS_PRIV_TYPE_ALL:// 权限类型：全部
                $can_view_current = 1;
                break;
            default:
                break;
        }
        if (0 == $can_view_current) {
            $this->set('cannot_view_message', '权限不足，不能查看合同或只能查看自己负责客户的订单的合同');
            return;
        }

        // 合并合同订单清单
        $contracts = array();
        $contract_nos = array();
        $is_has_mtl_order = false; //所有合同号订单，是否包括物料订单
        if (!empty($orders)) {

            // 获取客户信息及EBS客户定金比 add by GUOCAI
            $ebs_account_ids = $g_Account->getEbsAccountIdsByIds($order_account_ids);
            $order_account_ids = array_flip($ebs_account_ids);
            // 通过OCS客户ID获取EBS客户定金比例
            $deposit_rates = array();
            $deposit_rates_group = $g_ERPWsClients->getEbsDepositRates($ebs_account_ids);
            foreach ($deposit_rates_group as $ebs_account_id => $rates) {
                if (empty($order_account_ids[$ebs_account_id])) {
                    continue;
                }
                $deposit_rates[$order_account_ids[$ebs_account_id]] = $rates;
            }

            // 记录客户的定金比例或用户选择的定金比例
            // 记录该合同下的订单是否全部是物料订单
            foreach ($orders as $key => $order) {
                if (empty($order['Contract']['contract_no'])) {
                    continue;
                }
                $contract_no = $order['Contract']['contract_no'];
                $contract_nos[] = $contract_no;

                // 获取定金比例
                // 如果用户在页面上选择了定金比例,则以用户选择的为准
                // 如果用户没有选择,那么从ebs中带出客户的定金比例
                // $opts['deposit_rate']
                $order_account_id = (!empty($order['Req']['account_id']) && is_array($order['Req']['account_id'])) ? $order['Req']['account_id']['value'] : null;
                $deposit_rate = !empty($deposit_rates[$order_account_id]) ? $deposit_rates[$order_account_id] : array();
                // 仅当客户有且只有一个客户定金比例时,默认使用客户定金比例,否则默认为空
                $deposit_rate = (is_array($deposit_rate) && 1 == count($deposit_rate)) ? current($deposit_rate) : null;
                // 如果当前所选的模板的定金比例为空,则默认显示客户的定金比例
                $contract_data = !empty($contracts[$contract_no]) ? $contracts[$contract_no] : array();
                $contract_data['deposit_rate'] = !empty($opts['deposit_rate']) ? $opts['deposit_rate'] : $deposit_rate;
                $contract_data['account_name'] = $order['Req']['account_id']['label'];
                $contract_data['Req'][] = $order['Req'];
                $contract_data['RelReq'][] = isset($order['RelReq']) ? $order['RelReq'] : array();

                // 记录是否全部是物料订单
                $contract_data['is_all_material'] = isset($contract_data['is_all_material']) ? $contract_data['is_all_material'] : true;
                if (empty($order['Req']['is_material'])) {
                    $contract_data['is_all_material'] = false;
                }
                // 是否包含物料订单
                if (!isset($contract_data['has_material'])) {
                    $contract_data['has_material'] = false;
                }
                if (!empty($order['Req']['is_material'])) {
                    $contract_data['has_material'] = true;
                    $is_has_mtl_order = true;
                }

                // 重新记录合同
                $contracts[$contract_no] = $contract_data;
            }
        }
        $this->set('contracts', $contracts);
        $this->set('is_has_mtl_order', $is_has_mtl_order);

        // 合同审核信息
        $contract_rel_tmpls = $g_ContractRelTmpl->GetAuditInfoByContractNos($contract_nos);
        $this->set('contract_rel_tmpls', $contract_rel_tmpls);

        // 如果只有一个订单,那么获取该订单已分派的模板
        if (!empty($contracts) && 1 == count($contracts)) {
            $contract_nos = array_keys($contracts);
            $contract_no = !empty($contract_nos) ? current($contract_nos) : '';
            $contract_rel_tmpl = !empty($contract_rel_tmpls[$contract_no]) ? $contract_rel_tmpls[$contract_no] : '';
            $opts['tmpl_alias'] = !empty($contract_rel_tmpl['ContractRelTmpl']['item_json']['tmpl_alias']) ? $contract_rel_tmpl['ContractRelTmpl']['item_json']['tmpl_alias'] : '';
        }

        // 显示选项
        $this->set('opts', $opts);

        // OCS-628 开发审核人列表设置的模板 add by GUOCAI
        // 存在配置的情况下,才限制查询的范围
        $approval_users = $g_ObjRelObj->getCommonApprovalUsersByAlias(Req, 'CONTRACT_APPROVAL');
        if (!empty($approval_users)) {
            $approval_users = !empty($approval_users['user_lists']) ? $approval_users['user_lists'] : array();

            //http://jira.cvte.com/browse/OCS-2048，不能给自己分派合同审核
            if (array_key_exists($g_UserId, $approval_users) && !$g_RolePrivs->get_priv_level('Reqs', 'can_assign_contract_to_selft')) {
                unset($approval_users[$g_UserId]);
            }
        }
        $this->set('approval_users', $approval_users);

        // 获取需要进行合同、报价单价差的事业部
        $result_data = $this->Req->getReqQuoteDiffAuditBizs();
        $req_quote_diff_audit_bizs = !empty($result_data['success']) ? $result_data['datas'] : array();
        $this->set('req_quote_diff_audit_bizs', $req_quote_diff_audit_bizs);

        // [OCS-2054]订单管理：新增合同模板“视源通用模板V1.1 201609”
        // 新版本上线切换临时限制
        if ('print' == $type) {
            $limit_result = $this->{$this->modelClass}->newContractSetLimit('get');
            if (empty($limit_result['success'])) {
                $this->set('cannot_view_message', $limit_result['message']);
            }
        }
    }

    /**
     * 一次性将订单审批合同并同步至EBS
     *
     * @Author   lishirong
     *
     * @DateTime 2016-04-21T09:34:56+0800
     *
     * @return   [type]                   [description]
     */
    function audit_contracts_to_ebs_json($req_ids = null) {
        global $g_Commons;
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $result = $g_Commons->initResult();
        $this->autoRender = false;

        if (!$g_RolePrivs->get_priv_level($this->name, 'can_audit_contract')) {
            $result['message'] = '没有审核权限 “Reqs,can_audit_contract”';
            echo json_encode($result);
            return;
        }

        if (empty($req_ids) && empty($_POST['req_ids'])) {
            $result['message'] = '参数错误，req_ids不允许为空';
            echo json_encode($result);
            return;
        }
        $req_ids = !empty($_POST['req_ids']) ? $_POST['req_ids'] : explode(',', $req_ids);

        //如果全部订单都是CKD订单，则不进行合同检查
        $is_all_ckd_order = $this->Req->isCkdOrderByReqIds($req_ids);
        if (!$is_all_ckd_order) {
            // 根据订单ID获取对应的合同下的订单是否已经全部进行对比检查
            $req_quote_check = $this->Req->getContractReqQuoteDiffCheck($req_ids);
            if (empty($req_quote_check['success'])) {
                echo json_encode($req_quote_check);
                return;
            }
        }

        // 记录执行耗时
        // $req_ids = array_slice($req_ids, 0, 50);
        $start_time = microtime(true);
        $result = $this->Req->auditContractByReqIds($req_ids);

        $end_time = microtime(true);
        $result['time'] = '耗时' . round($end_time - $start_time, 3) . '秒';
        echo json_encode($result);
        return;
    }

    // 打印订单合同 add by GUOCAI 2014-04-30
    function pop_print_contracts() {
        $this->layout = 'pdf';
        $this->pop_audit_contracts();
    }

    // 根据合同号及相应的参数加载合同
    function load_contracts() {
        global $g_BizId;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Products->Product->recursive = -1;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdAttrs->ProdAttr->recursive = -1;
        $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
        $g_ContractRelTmpl->recursive = -1;
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_ERPWsClients = $g_Commons->GlobalController('ERPWsClients');

        /** test case */
        // $this->request->data = array(
        //     'deposit_rate'=> '30',
        //     'send_day'=> '-1',
        //     'tmplName'=> 'tv_common_full_payment_tmpl',
        //     'tmpl_key'=> 'tv_common_full_payment',
        //     'show_invc_name'=> 'on',
        //     'show_account_cno'=> 'on',
        //     'show_account_mno'=> 'on',
        //     'isCustomParam'=> '1',
        //     // 'contract_no'=> 'SYBCTV-16001863',
        //     'contract_no'=> 'SYBCTV-16001862',
        //     'type'=> 'print',
        // );
        // 接收参数并重构
        $post_data = (!empty($this->request->data)) ? $this->request->data : array();
        if (empty($post_data)) {
            $this->Session->setFlash('缺少参数。');
            $this->set('setFlash', 1);
            return;
        }

        $result = $this->Req->getContractReqDatas($post_data);
        if (empty($result['success'])) {
            $this->Session->setFlash($result['message']);
            $this->set('setFlash', 1);
            return;
        }
        if (!empty($result['contract_rel_tmpl']['status']) && OCS_CONTRACT_REL_TMPL_STATUS_RESET == $result['contract_rel_tmpl']['status']) {
            $this->set('float_tip', '合同已被打回,请勿套打该合同');
        }

        // 格式化合同内容，合并相同内容等
        $contracts = $this->Req->mergeContractForAudits($result['set']['Contract'], $result['set']['Opt'], $result['ContractOptsJson']);


        $result['set']['Contract'] = $contracts;
        $this->set('Money', $result['Money']);
        $this->set('ContractOptsJson', $result['ContractOptsJson']);
        $this->set('FsFileInfoPath', $result['FsFileInfoPath']);
        $this->set('contract_signature', $result['contract_signature']);
        $this->set('set', $result['set']);

        // 新的处理方式 add by GUOCAI 20160127
        // 后续要将老版本的合同模板修改过来
        global $g_ContractOptsJson;
        $g_ContractOptsJson = $result['ContractOptsJson'];

        // $result['set']['Opt']['test_num'] = 40;//测试模式
        $format_contract = $this->Req->formatContractForPrint($contracts, $result['set']['Opt']);
        if (!isset($format_contract['success']) || true != $format_contract['success']) {
            $this->set('verify_result', $format_contract['message']);
            $this->Session->setFlash($format_contract['message']);
            $this->set('setFlash', 1);
            return;
        }

        $this->set('opts', $format_contract['datas']['opts']);
        $this->set('contract_head', $format_contract['datas']['contract_head']);
        $this->set('contracts', $format_contract['datas']['contracts']);

        // 根据选项显示的动态字段
        $show_fields = array(
            'show_invc_name' => array('label' => '货物名称', 'field' => 'Req.invc_prod_name.label'),
            'show_account_cno' => array('label' => '客户单号', 'field' => 'Contract.account_cno'),
            'show_account_mno' => array('label' => '客户料号', 'field' => 'Contract.account_mno'),
            'show_account_bno' => array('label' => '客户批号', 'field' => 'Contract.account_bno'),
        );
        $this->set('show_fields', $show_fields);
    }

    /**
     * 将合同转换成PDF(生成pdf需要免登录)
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-02-15T16:07:09+0800
     *
     * @param    [type]                   $contract_no [合同号]
     * @param    [type]                   $token       [密钥]
     *
     * @return   [type]                                [description]
     */
    function print_contract_pdf($contract_no = null, $token = null) {
        global $g_Commons;

        $this->layout = 'content';

        // 验证关键信息
        if (empty($contract_no) || empty($token)) {
            $this->Session->setFlash('关键参数不能为空.');
            $this->set('setFlash', 1);
            return;
        }

        // 验证key,防止关键参数被串改
        $md5_token = $g_Commons->md5Token($contract_no);
        if ($md5_token !== $token) {
            $this->Session->setFlash('传入的数据存在问题.');
            $this->set('setFlash', 1);
            return;
        }

        // 获取相应的订单信息
        $req = $this->Req->find('first', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Req.model_def_id' => Contract,
                        'Req.rel_obj_id = Contract.id',
                    )
                )
            ),
            'conditions' => array('Contract.contract_no' => $contract_no),
            'fields' => array('Contract.contract_no')
        ));
        if (empty($req['Contract']['contract_no'])) {
            $this->Session->setFlash('没找到相应的合同信息.');
            $this->set('setFlash', 1);
            return;
        }

        // 获取合同关键信息
        $data = array();
        $data['type'] = 'view'; //显示方式
        $data['view_type'] = 'pdf';
        $data['contract_no'] = $contract_no; //合同号
        $this->request->data = $data;

        // 返回合同页面信息
        $this->load_contracts();
    }

    // 批量计算合同总金额 add by GUOCAI 2014-05-13
    function batch_contract_price_json() {
        global $g_BizId;
        global $g_Commons;
        $this->autoRender = false;
        $this->Req->recursive = -1;

        // 获取URL参数
        $data = ($this->request->is('post')) ? $this->request->data : null;
        if (!isset($data['ids'])) {
            return false;
        }

        $ids = $data['ids'];
        $ids = $this->Req->getCanCalcContractReqIds($ids);

        // 整理并删除重复的订单ID
        $selCount = 0; // 选中的数目
        $reqCount = 0; // 实际订单数
        if (!empty($ids)) {
            $selCount = 1;
            $reqCount = 1;
            if (is_array($ids) == false) {
                $ids = explode(',', $ids);
            }
        }
        if (is_array($ids)) {
            $selCount = count($ids);
            $ids = array_unique($ids);
            $reqCount = count($ids);
        }

        /**
          根据订单ID获取订单信息及合同信息
         * **************************** */
        $getOrders = $this->Req->getContractReqsByReqId($ids);

        // 合并合同订单清单
        $table = '未找到合同！或权限不足，只能计算自己负责客户的订单的合同';
        $Temp = array();
        if (!empty($getOrders)) {
            foreach ($getOrders as $key => $Order) {
                $contract_no = $Order['Contract']['contract_no'];
                // 提取被选中的订单
                if (in_array($Order['Req']['id'], $ids)) {
                    $Temp[$contract_no]['Reqs'][] = $Order['Req'];
                    $Temp[$contract_no]['freeSpareQty'] = (!empty($Order['Contract']['free_spare_qty'])) ? $Order['Contract']['free_spare_qty'] : 0;
                }
                // 记录合同包含的订单总数
                if (!empty($contract_no)) {
                    if (!isset($Temp[$contract_no]['reqCountAll'])) {
                        $Temp[$contract_no]['reqCountAll'] = 0;
                    }
                    $Temp[$contract_no]['reqCountAll']++;
                }
            }
        }

        // 计算合同信息
        if (!empty($Temp)) {

            // 初始化总数量
            $ContractAll['count'] = count($Temp);
            $ContractAll['reqCount'] = 0;
            $ContractAll['proCount'] = 0;
            $ContractAll['reqPrice'] = 0;
            $ContractAll['freeSpareQty'] = 0; // 备品数
            $ContractAll['reqCountAll'] = 0;
            $ContractAll['reqForeignPrice'] = 0; //外币总额
            foreach ($Temp as $key => $Contract) {

                $reqCount = 0; // 订单行数
                $proCount = 0; // 产品数
                $reqPrice = 0; // 订单费用
                $reqForeignPrice = 0;//外币费用
                $reqCountAll = $Contract['reqCountAll']; // 合同对应的订单总行数
                $freeSpareQty = $Contract['freeSpareQty']; // 备品数

                $Reqs = $Contract['Reqs'];
                if (!empty($Reqs)) {
                    // 统计当前合同订单数
                    $reqCount = count($Reqs);
                    foreach ($Reqs as $Req) {
                        // 计算当前订单产品数
                        $proCount += $Req['quantity'];
                        // 计算当前订单总金额
                        $reqPrice += $Req['price'] * $Req['quantity'];
                        //$reqPrice += $Req['amount'];
                        $reqForeignPrice += $Req['foreign_price'] * $Req['quantity'];
                    }
                }

                // 本行合同
                $Contracts[$key]['reqs'] = $Reqs;
                $Contracts[$key]['reqCount'] = $reqCount;
                $Contracts[$key]['proCount'] = $proCount;
                $Contracts[$key]['reqPrice'] = $reqPrice;
                $Contracts[$key]['reqForeignPrice'] = $reqForeignPrice;
                $Contracts[$key]['freeSpareQty'] = $freeSpareQty;
                $Contracts[$key]['reqCountAll'] = $reqCountAll;

                // 统计当前合同总金额(各订单金额总和)
                $ContractAll['reqCount'] += $reqCount;
                $ContractAll['proCount'] += $proCount;
                $ContractAll['reqPrice'] += $reqPrice;
                $ContractAll['freeSpareQty'] += $freeSpareQty;
                $ContractAll['reqCountAll'] += $reqCountAll;
                $ContractAll['reqForeignPrice'] +=$reqForeignPrice;
            }

            // 合同总数
            $contractCount = count($Contracts);

            $table = '只能查看权限范围内订单金额<br>';
            $table.= '<table class="table table-striped table-bordered">';
            $table.= '<thead>
            <tr>
            <th>合同</th>
            <th>产品数</th>
            <th>金额(RMB)</th>
            <th>金额(USD)</th>
            <th>备品数</th>
            <th>订单行数</th>
            </tr>
            <tr class="label label-success">
            <th>' . '  <span class="badge badge-warning">' . $ContractAll['count'] . '</span> 张合同' . '</th>
            <th>' . number_format($ContractAll['proCount']) . '</th>
            <th>' . $ContractAll['reqPrice'] . '</th>
            <th>' . $ContractAll['reqForeignPrice'] . '</th>
            <th>' . $ContractAll['freeSpareQty'] . '</th>
            <th>' . $ContractAll['reqCount'] . ' / ' . $ContractAll['reqCountAll'] . '</th>
            </tr>
            </thead>';

            $table.= '<tbody>';
            foreach ($Contracts as $key => $Contract) {
                $table.= '
                <tr>
                <td><a href="javascript:" class="REQBTN" target="REQROW' . $key . '"><i class="icon-gray icon-chevron-right"></i> ' . $key . '</a></td>
                <td>' . number_format($Contract['proCount']) . '</td>
                <td>' . $Contract['reqPrice'] . '</td>
                <td>' . $Contract['reqForeignPrice'] . '</td>
                <td>' . number_format($Contract['freeSpareQty']) . '</td>
                <td>' . $Contract['reqCount'] . ' / ' . $Contract['reqCountAll'] . '</td>
                </tr>';
                $table.= '<tr class="REQROW" id="REQROW' . $key . '"><td colspan=6 class="alert">';

                // 合同下被选中的相应订单清单
                $table.= '<table class="table table-striped table-condensed table-bordered">';
                $table.= '<thead><tr><th>订单清单</th><th>产品数</th><th>单价(RMB)</th><th>合计(RMB)</th><th>单价(USD)</th><th>合计(USD)</th><th>汇率</th></tr></thead><tbody>';
                if (!empty($Contract['reqs'])) {
                    $reqs = $Contract['reqs'];
                    foreach ($reqs as $key => $req) {
                        //<td>' . $this->Html->link($req['name'], array('controller' => 'Reqs', 'action' => 'view', $req['id'])) . '</td>
                        $table.= '<tr>
                        <td>' . $req['name'] . '</td>
                        <td>' . $req['quantity'] . '</td>
                        <td>' . $req['price'] . '</td>
                        <td>' . $req['quantity'] * $req['price'] . '</td>';
                        if (empty($req['foreign_price'])) {
                            $table.= '<td>0</td>';
                        } else {
                            $table.= '<td>'. $req['foreign_price'] .'</td>';
                        }
                        $table.=
                        '<td>' . $req['foreign_price'] * $req['quantity'] .'</td>
                        <td>'. $req['exchange_ratio'].'</td>
                        </tr>';
                    }
                }
                $table.= '</tbody></table>';

                $table.= '</td></tr>';
            }
            $table.= '</tbody>';
            $table.= '</table>';
        }


        $result['cmd'] = true;
        $result['info'] = $table;
        echo json_encode($result);
        exit;
    }

    // 批量修改合同号功能,并在修改后同步到EBS add by GUOCAI 2014-06-03
    function pop_batch_modify_contracts_no() {
        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        $this->Req->recursive = -1;
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_CkdOrderSet = $g_Commons->GlobalModel('CkdOrderSet');

        // 获取URL参数
        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        // 打印页基础 Layout
        $this->set('title_for_layout', '批量修改合同号');

        // // 整理并删除重复的订单ID
        // $ids = (empty($AllParams['P']['ids'])) ? '' : $AllParams['P']['ids'];

        // $selCount = 0; // 选中的数目
        // $reqCount = 0; // 实际订单数
        // if (!empty($ids)) {
        //     $selCount = 1;
        //     $reqCount = 1;
        //     if (is_array($ids) == false) {
        //         $ids = explode(',', $ids);
        //     }
        // }
        // if (is_array($ids)) {
        //     $selCount = count($ids);
        //     $ids = array_unique($ids);
        //     $reqCount = count($ids);
        // }

        $ids = explode(',', $AllParams['P']['ids']);
        if (empty($ids)) {
            $this->set('error_msg', '参数错误，请勾选操作的订单');
            return;
        }

        /**
          根据订单ID获取订单信息及合同信息
         * **************************** */
        $getOrders = $this->Req->getContractReqsByReqId($ids);

        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        $formatModelData = $g_AttrDics->formatModelData($getOrders, 'Req');
        $getOrders = $g_AttrDics->formatModelData($formatModelData, 'Product');

        // 修改合同号权限
        $g_RolePriv = $g_RolePrivs->get_priv_level($this->name, 'can_modify_contract_no');

        // 合并合同订单清单
        $table = '未找到合同！';
        $Temp = array();
        $modifyTip = array();
        if (!empty($getOrders)) {
            foreach ($getOrders as $key => $Order) {
                // 判断订单的客户、第三方支付平台、币种是否一致
                $temp_account_id = (empty($temp_account_id)) ? $Order['Req']['account_id']['value'] : $temp_account_id;
                if (empty($temp_account_id)) {
                    $modifyTip[] = '<li>订单#' . $Order['Req']['id'] . ' 未选定客户</li>';
                }
                if ($temp_account_id != $Order['Req']['account_id']['value']) {
                    $modifyTip[] = '<li>订单#' . $Order['Req']['id'] . ' 存在不同的客户</li>';
                }
                $temp_mid_account_id = (empty($temp_mid_account_id)) ? $Order['Contract']['mid_account_id'] : $temp_mid_account_id;
                if ($temp_mid_account_id != $Order['Contract']['mid_account_id']) {
                    $modifyTip[] = '<li>订单#' . $Order['Req']['id'] . ' 的第三方支付平台和其他合同的不一致</li>';
                }
                $temp_currency_id = (empty($temp_currency_id)) ? $Order['Req']['currency_id']['value'] : $temp_currency_id;
                if ($temp_currency_id != $Order['Req']['currency_id']['value']) {
                    $modifyTip[] = '<li>订单#' . $Order['Req']['id'] . ' 存在不同的币种</li>';
                }

                //配料清单，需打回EBS配料清单才允许修改
                if ($this->Req->isMtlReqOrder($Order['Req']['id'])) {
                    $is_can_modify = $g_CkdOrderSet->isCanModifyOrderInfo($Order['Contract']['contract_no']);
                    if (!$is_can_modify) {
                        $modifyTip[] = $Order['Contract']['contract_no'] . '对应的EBS配料清单未打回，不允许修改合同号，请联系生管处理';
                    }
                }

                // 提取被选中的订单
                if (!empty($Order['Contract']['contract_no'])) {
                    $contract_no = $Order['Contract']['contract_no'];
                    if (in_array($Order['Req']['id'], $ids)) {
                        $Order['Req']['prod_model_label'] = $Order['Product']['prod_model_id']['label'];
                        $Temp[$contract_no]['Reqs'][] = $Order['Req'];
                        $Temp[$contract_no]['freeSpareQty'] = (!empty($Order['Contract']['free_spare_qty'])) ? $Order['Contract']['free_spare_qty'] : 0;

                        // 判断是否有权限修改
                        if (1 == $g_RolePriv && $g_UserId != $Order['Req']['owner_user_id']['value']) {
                            $g_RolePriv = 0;
                        }
                    }
                    // 记录合同包含的订单总数
                    if (!isset($Temp[$contract_no]['reqCountAll'])) {
                        $Temp[$contract_no]['reqCountAll'] = 0;
                    }
                    $Temp[$contract_no]['reqCountAll']++;
                } else {
                    $modifyTip[] = '<li>存在空的合同号</li>';
                }

                if (!empty($modifyTip)) {
                    break;
                }
            }
        }
        $this->set('ids', json_encode($ids));
        $this->set('modifyTip', $modifyTip);
        $this->set('rolePriv', $g_RolePriv);

        // 找出带合同附件的订单
        $g_Attachments = $g_Commons->GlobalController('Attachments');
        $attsReqIds = $g_Attachments->Attachment->find('list', array(
            'conditions' => array('Attachment.model_def_id' => Req,
                'Attachment.obj_id' => $ids,
                'Attachment.is_delete' => 0,
                'Attachment.is_lock' => 0,
                'Attachment.attach_type' => OCS_ATTACH_TYPE_CONTRACT,
                'Attachment.rel_attachment_id' => 0), // 为0是普通附件，不为0则为软件包说明的XML文件
            'fields' => array('Attachment.obj_id','Attachment.id')
        ));

        // 整理合同信息
        if (!empty($Temp)) {

            // 初始化总数量
            $ContractAll['count'] = count($Temp);
            $ContractAll['reqCount'] = 0;
            $ContractAll['proCount'] = 0;
            $ContractAll['reqPrice'] = 0;
            $ContractAll['freeSpareQty'] = 0; // 备品数
            $ContractAll['reqCountAll'] = 0; // 备品数

            foreach ($Temp as $key => $Contract) {

                $reqCount = 0; // 订单行数
                $proCount = 0; // 产品数
                $reqPrice = 0; // 订单费用
                $reqCountAll = $Contract['reqCountAll']; // 合同对应的订单总行数
                $freeSpareQty = $Contract['freeSpareQty']; // 备品数

                $Reqs = $Contract['Reqs'];
                if (!empty($Reqs)) {
                    // 统计当前合同订单数
                    $reqCount = count($Reqs);
                    foreach ($Reqs as $ReqKey => $Req) {
                        // 计算当前订单产品数
                        $proCount += $Req['quantity'];
                        // 计算当前订单总金额
                        $reqPrice += $Req['price'] * $Req['quantity'];
                        // 判断当前订单是否挂有合同附件
                        if(!empty($attsReqIds[$Req['id']])){
                            $Reqs[$ReqKey]['contract_tip'] = '当前订单挂有合同附件，修改合同号后，必须要补传合同';
                        } else {
                            $Reqs[$ReqKey]['contract_tip'] = '';
                        }
                    }
                }

                // 本行合同
                $Contracts[$key]['reqs'] = $Reqs;
                $Contracts[$key]['reqCount'] = $reqCount;
                $Contracts[$key]['proCount'] = $proCount;
                $Contracts[$key]['reqPrice'] = $reqPrice;
                $Contracts[$key]['freeSpareQty'] = $freeSpareQty;
                $Contracts[$key]['reqCountAll'] = $reqCountAll;

                // 统计当前合同总金额(各订单金额总和)
                $ContractAll['reqCount'] += $reqCount;
                $ContractAll['proCount'] += $proCount;
                $ContractAll['reqPrice'] += $reqPrice;
                $ContractAll['freeSpareQty'] += $freeSpareQty;
                $ContractAll['reqCountAll'] += $reqCountAll;
            }
        }

        $this->set('Contracts', $Contracts);
        $this->set('ContractAll', $ContractAll);
    }

    // 提交修改合同数据 add by GUOCAI 2014-06-03
    function batch_modify_contracts_no_json() {
        global $g_BizId;
        global $g_Commons;
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Logs->Log->recursive = -1;

        $this->autoRender = false;
        $this->Req->recursive = -1;

        // 初始化返回的结果
        $result = $g_Commons->initResult();

        // 获取URL参数
        $data = ($this->request->is('post')) ? $this->request->data : null;
        if (empty($data['reqId']) || empty($data['contract_no'])) {
            return false;
        }

        $req_id = trim($data['reqId']);
        $contract_no = trim($data['contract_no']);
        $modify_tip = array();

        if ('_T' == substr($contract_no, -2)) {
            $result['message'] = '填写的合同号不允许以 “_T” 结尾';
            echo json_encode($result);
            return;
        }

        // 查找该合同号是否存在
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $contracts = $g_Contract->getContractsByContractNo($contract_no);

        // 获取订单信息
        $req = $this->Req->getContractByReqId($req_id);

        //SCKD物料订单且已传EBS，不允许修改合同编号
        if (!empty($req['Req']['ebs_order_number']) && $this->Req->isSCKDReqOrder(null, $req['Req']['req_type'])) {
            $result['message'] = 'SCKD物料订单#' . $req['Req']['ebs_order_number'] . ' 已传EBS，不允许修改合同号';
            echo json_encode($result);
            return;
        }

        if (empty($req['Req']['id']) || $req_id != $req['Req']['id']) {
            $result['message'] = '订单#' . $req_id . ' 不存在。';
            echo json_encode($result);
            return;
        }

        if (empty($req['Contract']['contract_no'])) {
            $result['message'] = '订单#' . $req_id . ' 的合同号是空的,属于异常情况,无法修改。';
            echo json_encode($result);
            return;
        }

        if ($contract_no == $req['Contract']['contract_no']) {
            $result['message'] = '订单#' . $req_id . ' 合同号一致,不需修改。';
            echo json_encode($result);
            return;
        }

        $old_contract_no = $req['Contract']['contract_no'];
        // 验证当前订单和目标合同的订单中的 关键字段是不是一致的
        $contract_req = current($contracts);
        if (!empty($contract_req['Req']['id'])) {

            // 以下字段必须一致才能修改合同
            $verify_fields = array();
            $verify_fields['Req']['account_id'] = '客户';
            $verify_fields['Req']['currency_id'] = '币种';
            $verify_fields['Contract']['mid_account_id'] = '第三方支付平台';

            $verify_field_tips = array();
            foreach ($verify_fields as $field_model => $fields) {
                foreach ($fields as $field_key => $field_label) {
                    $this_value = !empty($req[$field_model][$field_key]) ? $req[$field_model][$field_key] : null;
                    $target_value = !empty($contract_req[$field_model][$field_key]) ? $contract_req[$field_model][$field_key] : null;

                    if ($this_value != $target_value) {
                        $verify_field_tips[] = $field_label . '不一致(' . $this_value . ', ' . $target_value . ')';
                    }
                }
            }

            if (!empty($verify_field_tips)) {
                $result['message'] = '订单#' . $req_id . ' 的合同和新合同的 ' . implode(',', $verify_field_tips);
                echo json_encode($result);
                return;
            }
        }

        // 执行修改合同
        try {
            $this->Req->query('begin');
            if (!empty($req['Req']['ebs_order_number'])) {
                // 已传EBS的订单合同号修改后，直接同步到EBS ,add by GUOCAI 20140826(经业务经理确认)
                $g_ERPWsClients = $g_Commons->GlobalController('ERPWsClients');
                $update_result = $g_ERPWsClients->updateOrderContractNo($req_id, $contract_no);
                if (isset($update_result['success'])) {
                    if ($update_result['success']) {
                        // 记录新的Contract
                        //$req['Contract']['error_type'] = OCS_CONTRACT_ERROR_TYPE_CONTRACT; //合同待审核
                        $req['Contract']['contract_no'] = $contract_no;
                        //$req['Contract']['is_crm_fail'] = 1;
                        //$req['Contract']['crm_fail_reason'] = '修改合同号，需重新审核';
                        $save_status = $g_Contract->save($req);
                    }
                    $ebs_Log_msg = '传至Ebs' . $update_result['message'];
                } else {
                    $ebs_Log_msg = '传至Ebs失败。';
                }
            } else {
                //未传EBS的订单,允许直接修改
                $req['Contract']['contract_no'] = $contract_no;
                $save_status = $g_Contract->save($req);
                $ebs_Log_msg = '未传EBS，可以直接修改';
            }

            // 验证修改前后的合同,如果已经审核,则打回
            if (!empty($save_status)) {

                // 如果当前订单已经存在审核状态,那么需要将其打回
                if (!empty($req['Req']['status'])) {
                    $req['Req']['status'] = OCS_REQ_STATUS_CONTRACT_RESET;
                    $this->Req->save($req);
                }

                // 将原合同和目标合同的审核状态都打回
                $result_message = '订单#' . $req_id . ' 合同号有修改(' . $old_contract_no . ' >> ' . $contract_no . '),自动打回重审;';
                $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
                $g_ContractRelTmpl->changeContractStatus($old_contract_no, OCS_CONTRACT_REL_TMPL_STATUS_AUDITTING, $result_message);
                $g_ContractRelTmpl->changeContractStatus($contract_no, OCS_CONTRACT_REL_TMPL_STATUS_AUDITTING, $result_message);
            }

            //修改合同号，将新旧的合同号 是否客户盖章都设置为N
            // $this->Req->setContractSignatureByContractNo($old_contract_no, 'N', true);
            // $this->Req->setContractSignatureByContractNo($contract_no, 'N', true);

            // 执行修改合同号相关操作（禁用合同、更新EBS等）
            $g_Contract->afterModifyContractNoRelActions($req_id, $old_contract_no, $contract_no);

            //新合同自动产生合同审签
            $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
            $g_ContractRelTmpl->autoDupContractRelTmpl($old_contract_no, $contract_no);

            // 返回提并写入日志
            if (!empty($save_status)) {
                $result['success'] = true;
                $result['message'] = '订单#' . $req_id . ' <b>合同号</b>修改成功。' . $old_contract_no . ' >> ' . $contract_no . ' (' . $ebs_Log_msg . ')';
                $g_Logs->write_log('Reqs', $req_id, 'info', $result['message']);
            } else {
                $result['success'] = false;
                $result['message'] = '订单#' . $req_id . ' 合同号修改失败 (' . $ebs_Log_msg . ')';
                $g_Logs->write_log('Reqs', $req_id, 'info', $result['message']);
                throw new Exception($result['message'], 1);
            }

            $this->Req->query('commit');
        } catch (Exception $e) {
            $this->Req->query('rollback');
        }

        echo json_encode($result);
        return;
    }

    // 提交批量失效EBS的订单数据
    function batch_scrap_json() {
        global $g_Commons;
        global $g_UserId;
        $this->autoRender = false;
        $g_ERPWsClients = $g_Commons->GlobalController('ERPWsClients');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Logs->Log->recursive = -1;

        $result = $g_Commons->initResult();
        // 获取URL参数
        if (!empty($this->request->data['req_ids']) && is_array($this->request->data['req_ids'])) {
            $ids = $this->request->data['req_ids'];
        } else {
            echo json_encode($result);exit;
        }
        if(!empty($this->request->data['action_type']) && in_array($this->request->data['action_type'], array('Y','N'))){
            $action_type = $this->request->data['action_type'];
        } else {
            echo json_encode($result);exit;
        }

        $ebsLogMsg = array();
        if (is_array($ids)) {
            // 找出这些订单在EBS中的状态
            $EbsOrderStages = $this->getEbsOrderStageByReqIds($ids);

            $Reqs = $this->Req->getReqsByReqIds($ids);
            foreach ($ids as $id) {
                // 只有EBS中已关闭的订单,才能提交失效操作
                if(empty($EbsOrderStages[$id]['STATUS'])){
                    $ebsResult[] = array(
                        'reqId' => $id,
                        'success' => false,
                        'message' => 'ReqId#' . $id . ' 找不到订单状态，可能还没传EBS。',
                    );
                    continue;
                }
                if (empty($EbsOrderStages[$id]['STATUS']) || 'CLOSED' != $EbsOrderStages[$id]['STATUS']) {
                    $ebsResult[] = array(
                        'reqId' => $id,
                        'success' => false,
                        'message' => 'ReqId#' . $id . ' 这个订单在EBS处于' . $EbsOrderStages[$id]['STATUS'] . '状态,不能使用失效功能。',
                    );
                    continue;
                }

                // 判断订单是否已经同步到EBS
                $temp = (!empty($Reqs[$id])) ? $Reqs[$id] : null;
                if (empty($temp)) {
                    $ebsResult[] = array(
                        'reqId' => $id,
                        'success' => false,
                        'message' => 'ReqId#' . $id . ' 这个订单不存在或者未同步到EBS。',
                    );
                    continue;
                }
                // 判断是否是自己的单
                if ($g_UserId != $temp['owner_user_id']) {
                    $ebsResult[] = array(
                        'reqId' => $id,
                        'success' => false,
                        'message' => '订单#' . $temp['ebs_order_number'] . ' 不是你的单，不能操作哦。',
                    );
                    continue;
                }

                // 将失效状态同步到EBS
                $ebsTemps = $g_ERPWsClients->updateScrapStatusByReqId($id, $action_type);
                if (isset($ebsTemps['success'])) {
                    if ($ebsTemps['success']) {
                        // 将失效状态记录到OCS
                        // $updata = array();
                        // $updata['id'] = $id;
                        // $updata['close_status'] = OCS_ORDER_CLOSE_STATUS_CANCEL;
                        // $this->Req->save($updata);

                        // 订单合同操作及字段更新规则
                        $this->Req->setReqStatusAction($id, OCS_ORDER_CLOSE_STATUS_CANCEL);

                        // 写入日志
                        $g_Logs->write_log('Reqs', $id, 'info', '<span class="label">选择报废该订单</span> 并成功将状态同步到EBS。');

                        //订单作废或者关闭，自动释放库存预订数量
                        $g_StockReserveRelReq = $g_Commons->GlobalModel('StockReserveRelReq');
                        $g_StockReserveRelReq->autoReleaseReserveQty($id);
                    }
                    $ebsResult[] = array(
                        'reqId' => $id,
                        'success' => $ebsTemps['success'],
                        'message' => '订单#' . $temp['ebs_order_number'] . ' 同步' . $ebsTemps['message'],
                    );
                } else {
                    $ebsResult[] = array(
                        'reqId' => $id,
                        'success' => false,
                        'message' => '订单#' . $temp['ebs_order_number'] . ' 同步执行失败。',
                    );
                }
            }
        }
        $result['datas'] = $ebsResult;
        echo json_encode($result);
    }

    //ajax更改订单状态 add by GUOCAI 2014-06-06
    function modify_close_status_ajax($reqId = NULL) {
        $this->autoRender = false;

        global $g_BizId;
        global $g_UserId;
        global $g_Commons;
        $result = array('success' => false, 'message' => '', 'datas' => '');

        // 验证数据
        if (empty($reqId) || is_numeric($reqId) == false) {
            $result['message'] = '订单ID为空, 关闭失败。';
            echo json_encode($result);
            return;
        }

        if ($this->request->is('post') && !empty($this->request->data)) {
            $Req = $this->Req->findById($reqId);
            if (!empty($Req['Req']['id'])) {
                $order_header = $this->Req->GetOrderHeadersByReqIds($Req['Req']['id']);
                if (isset($order_header[$Req['Req']['id']]) && in_array($order_header[$Req['Req']['id']]['FLOW_STATUS_CODE'], array('CLOSED', 'CANCELLED'))) {
                    $result['message'] = 'EBS订单头已经是 #' . $order_header[$Req['Req']['id']]['FLOW_STATUS_CODE'] . ' 不可重新激活。';
                    echo json_encode($result);
                    return;
                }
                $result['success'] = true;
                $result['message'] = '订单已经成功启动。';

                //订单由作废变为“进行中”，BOM任务分派时间重新设置
                $old_status = $Req['Req']['close_status'];
                $new_status = OCS_ORDER_CLOSE_STATUS_RUN;
                if ($old_status == OCS_ORDER_CLOSE_STATUS_CANCEL) {
                    $Req['Req']['bom_assign_time'] = date('Y-m-d H:i:s');
                }
                $Req['Req']['close_status'] = $new_status;

                // 写入日记
                $g_Logs = $g_Commons->GlobalController('Logs');
                $g_Logs->Log->recursive = -1;
                $g_Logs->write_log('Reqs', $reqId, 'info', '订单#' . $reqId . ' 已经成功启动。');

                // 订单合同操作及字段更新规则
                $this->Req->setReqStatusAction($reqId, $new_status);

                // 保存数据
                $this->Req->save($Req['Req']);
                echo json_encode($result);

                return;
            } else {
                $result['message'] = '没有找到相应的订单。';
                echo json_encode($result);
                return;
            }
        }
    }

    //ajax更改下计划状态 add by GUOCAI 2014-06-17
    function planbill_close_status_ajax($id = NULL) {
        $this->autoRender = false;

        global $g_BizId;
        global $g_UserId;
        global $g_Commons;
        $result = array('success' => false, 'message' => '', 'datas' => '');

        // 验证数据
        if (empty($id) || is_numeric($id) == false) {
            $result['message'] = 'ID为空, 关闭失败。';
            echo json_encode($result);
            return;
        }

        if ($this->request->is('post') && !empty($this->request->data)) {
            $g_MfPlanBills = $g_Commons->GlobalController('MfPlanBills');
            $MfPlanBill = $g_MfPlanBills->MfPlanBill->findById($id);
            if (!empty($MfPlanBill['MfPlanBill']['id'])) {

                if (OCS_MF_PLAN_BILL_STATUS_CLOSED == $MfPlanBill['MfPlanBill']['status']) {
                    $MfPlanBill['MfPlanBill']['status'] = OCS_MF_PLAN_BILL_STATUS_PASS_FAILED;
                    // 重新启动的话,则需要重走下计划流程,因此需要清空相关字段
                    $MfPlanBill['MfPlanBill']['sw_audit_status']    = 0;
                    $MfPlanBill['MfPlanBill']['sw_audit_user_id']   = 0;
                    $MfPlanBill['MfPlanBill']['mc_audit_status']    = 0;
                    $MfPlanBill['MfPlanBill']['mc_audit_user_id']   = 0;
                    $MfPlanBill['MfPlanBill']['owner_audit_status'] = 0;
                    $MfPlanBill['MfPlanBill']['owner_audit_user_id']= 0;
                    $message = '下计划成功启动（各角色的审核状态重置到待审核状态）。';
                } else {
                    $MfPlanBill['MfPlanBill']['status'] = OCS_MF_PLAN_BILL_STATUS_CLOSED;
                    $message = '下计划成功关闭。';
                }
                $result['success'] = true;
                $result['message'] = $message;
                // 写入日记
                $g_Logs = $g_Commons->GlobalController('Logs');
                $g_Logs->Log->recursive = -1;
                $g_Logs->write_log('MfPlanBills', $MfPlanBill['MfPlanBill']['id'], 'info', '订单#' . $MfPlanBill['MfPlanBill']['id'] . ' ' . $message);

                // 保存数据
                $g_MfPlanBills->MfPlanBill->save($MfPlanBill['MfPlanBill']);
                echo json_encode($result);
                return;
            } else {
                $result['message'] = '没有找到相应的订单。';
                echo json_encode($result);
                return;
            }
        }
    }

    //ajax设置是否小板软件 add by GUOCAI 2014-06-21
    function planbill_set_sw_type_ajax($id = NULL) {
        $this->autoRender = false;

        global $g_BizId;
        global $g_UserId;
        global $g_Commons;
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Users->User->recursive = -1;
        // 获取当前用户权限
        $myRole = $this->Req->getPlanbillsRoleAlias();
        // 如果登陆用户存在多角色,将在这里重置
        $newRole = $this->planbillsResetRole($myRole);
        $myRole = $newRole['myRole'];

        $result = array(
            'success' => false, //提交是否成功
            'message' => '', //提示语
            'data' => array() //返回数据
        );

        if ($myRole['Owner']) {
            // 整理并验证数据
            $ids = (!empty($_POST['ids'])) ? $_POST['ids'] : array();
            if (!empty($ids) && is_array($ids)) {
                if (!empty($id) && is_numeric($id)) {
                    $ids[] = $id;
                }
            } else {
                $ids[] = $id;
            }
            // 操作类型
            $action = (!empty($_POST['action'])) ? $_POST['action'] : null;
            if (empty($ids) || empty($action)) {
                $result['message'] = '参数不符, 设置失败。';
            } else {
                $result = array();
                if ($this->request->is('post') && !empty($this->request->data)) {
                    $g_MfPlanBills = $g_Commons->GlobalController('MfPlanBills');
                    $g_MfPlanBills->MfPlanBill->recursive = -1;
                    $datas = $g_MfPlanBills->MfPlanBill->setSwTypeById($ids, $action);

                    $temp = null;
                    if (!empty($datas)) {
                        foreach ($datas as $key => $data) {
                            $temp.= "\r" . $data['message'];
                        }
                    }
                    if ('set' == $action) {
                        $result['success'] = true;
                        $result['message'] = '设置小板提交完成:' . $temp;
                    } elseif ('cancel' == $action) {
                        $result['success'] = false;
                        $result['message'] = '取消小板提交完成:' . $temp;
                    }
                }
            }
        } else {
            $result['message'] = '抱歉!非内勤,没有这部分的设置权限。';
        }
        echo json_encode($result);
        return;
    }

    function checkAuditUser(&$formatReqs) {
        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        global $g_UserRealName;
        $g_User = $g_Commons->GlobalModel('User');
        $g_AuditStageRelObj = $g_Commons->GlobalModel('AuditStageRelObj');
        $g_AuditStageRelObj->recursive = -1;

        $result = array();
        $result['is_success'] = 1;
        $result['message'] = '';
        if (empty($formatReqs)) {
            $result['is_success'] = 0;
            $result['message'] = 'Can not found Reqs.';
            return $result;
        }
        foreach ($formatReqs as $formatReq) {
            if (OCS_PRODMODEL_REL_AUDIT_USER_STAGE_RESET == $formatReq['Req']['audit_stage']['value']) {
                $result['is_success'] = 0;
                $result['message'] .= '订单 #' . $formatReq['Req']['id'] . '：确认书被打回，需内勤重新提交才可审核。<br/>';
            } else {
                $AuditStageRelObj = $g_AuditStageRelObj->find('first', array('conditions' => array('AuditStageRelObj.model_def_id' => Req
                                , 'AuditStageRelObj.rel_obj_id' => $formatReq['Req']['id']
                                , 'AuditStageRelObj.pending_audit_user_id' => $g_UserId
                                , 'AuditStageRelObj.is_audit' => 0)));
                if (empty($AuditStageRelObj)) {
                    $result['is_success'] = 0;
                    $result['message'] .= '订单 #' . $formatReq['Req']['id'] . '：您已经审核或非你审核。<br/>';
                }
            }
        }

        return $result;

        // foreach ($formatReqs as $formatReq) {
        //     //TV全并行审核
        //     if (OCS_BIZ_TYPE_TV == $g_BizId) {
        //         if (OCS_PRODMODEL_REL_AUDIT_USER_STAGE_RESET == $formatReq['Req']['audit_stage']['value']) {
        //             $result['is_success'] = 0;
        //             $result['message'] .= '订单 #' . $formatReq['Req']['id'] . '：此审核阶段未分派审核人。<br/>';
        //         } else {
        //             $AuditStageRelObj = $g_AuditStageRelObj->find('first', array('conditions' => array('AuditStageRelObj.model_def_id' => Req
        //                             , 'AuditStageRelObj.pending_audit_user_id' => $g_UserId
        //                             , 'AuditStageRelObj.rel_obj_id' => $formatReq['Req']['id']
        //                             , 'AuditStageRelObj.is_audit' => 0)));
        //             if (empty($AuditStageRelObj)) {
        //                 $result['is_success'] = 0;
        //                 $result['message'] .= '订单 #' . $formatReq['Req']['id'] . '：您已经审核或无权审核。<br/>';
        //             }
        //         }
        //         continue;
        //     }

        //     // if (OCS_BIZ_TYPE_MID == $g_BizId) {
        //     //     $AuditStageRelObj = $g_AuditStageRelObj->find('first', array('conditions' => array('AuditStageRelObj.model_def_id' => Req,
        //     //                 'AuditStageRelObj.rel_obj_id' => $formatReq['Req']['id'], 'AuditStageRelObj.pending_audit_user_id' => $g_UserId)));
        //     // } else {
        //     $AuditStageRelObj = $g_AuditStageRelObj->find('first', array('conditions' => array('AuditStageRelObj.model_def_id' => Req,
        //                     'AuditStageRelObj.rel_obj_id' => $formatReq['Req']['id'], 'AuditStageRelObj.audit_stage' => $formatReq['Req']['audit_stage']['value'])));
        //     // }
        //     if ($formatReq['Req']['audit_stage']['value'] == OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE) {
        //         $result['is_success'] = 0;
        //         $result['message'] .= '订单 #' . $formatReq['Req']['id'] . '：已经审核完成';
        //         continue;
        //     }
        //     if (empty($AuditStageRelObj)) {
        //         $result['is_success'] = 0;
        //         $result['message'] .= '订单 #' . $formatReq['Req']['id'] . '：此审核阶段未分派审核人。<br/>';
        //         continue;
        //     }
        //     if ($AuditStageRelObj['AuditStageRelObj']['pending_audit_user_id'] != $g_UserId && 0 != $AuditStageRelObj['AuditStageRelObj']['pending_audit_user_id']) {//非本人来审核，不允许。
        //         $result['is_success'] = 0;
        //         $result['message'] .= '订单 #' . $formatReq['Req']['id'] . '：此阶段的审核人是 #' . $g_User->findMainField($AuditStageRelObj['AuditStageRelObj']['pending_audit_user_id']) . ',您无权审核。<br/>';
        //         continue;
        //     }
        //     if (0 == $AuditStageRelObj['AuditStageRelObj']['pending_audit_user_id']) {
        //         $result['is_success'] = 0;
        //         $result['message'] .= '订单 #' . $formatReq['Req']['id'] . '：不需审核。';
        //         continue;
        //     }
        // }
        // return $result;
    }

    function getSwDetailsInfo(&$formatReq = array(), $params) {
        global $g_BizId;
        global $g_Commons;
        global $g_BizName;
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');

        $g_Tasks = $g_Commons->GlobalController('Tasks');
        $g_Tasks->Task->recursive = -1;
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;
        $g_Enums = $g_Commons->GlobalController('Enums');
        $IsCkdList = $g_Enums->getEnumListByDictName('Contract.is_ckd');
        $ProductIsCkdList = $g_Enums->getEnumListByDictName('Product.is_ckd');

        $Contract = $g_Contract->findById($formatReq['Req']['rel_obj_id']);
        $Task = $g_Tasks->Task->findByModelDefIdAndRelObjId(Req, $formatReq['Req']['id']);

        $result = array();
        $formatReq['Req']['account_id']['full_name'] = $g_Account->findFullName($formatReq['Req']['account_id']['value']);
        $result = array_merge($Contract['Contract'], $formatReq['Req']);
        $result['sw_detail'] = $this->getSwAtomNamesByAtomIDs($formatReq['Req']['sw_atom_ids_json'], $params['Lang']);
        // 收费软件项
        $prod_attrs = $g_ProdAttr->find('all', array(
            'conditions' => array(
                'ProdAttr.is_fee' => 1
            ),
            'fields' => 'id, alias, name'
        ));
        $sw_fee_itmes = array();
        foreach ($prod_attrs as $prod_attr) {
            $prod_attr_alias = $prod_attr['ProdAttr']['alias'];
            $prod_attr_name = $prod_attr['ProdAttr']['name'];
            if (isset($result['sw_detail'][$prod_attr_alias]) && !empty($result['sw_detail'][$prod_attr_alias])) {
                $sw_fee_itmes[] = $prod_attr_name . '：' . $result['sw_detail'][$prod_attr_alias];
            }
        }
        $sw_fee_itmes = implode('；', $sw_fee_itmes);
        $result['sw_detail']['Sw_Fee_Itme'] = $sw_fee_itmes;

        // 在此特殊处理老产品CKD与新产品CKD问题
        $g_Product = $g_Commons->GlobalModel('Product');
        $product = $g_Product->find('first', array(
            'conditions' => array('Product.id' => $formatReq['Req']['product_id']['value']),
            'fields' => 'Product.id, Product.config_code, Product.is_ckd'
        ));

        $result['extend_sw_fac_notices'] = '';
        // if (!empty($Task)) {
        //     $result['extend_sw_fac_notices'] = $g_Tasks->getSwFacNoticeByTaskId($Task['Task']['id']);
        // }
        $label = array();
        foreach ($result as $key => $val) {
            if (in_array($key, $params['fields_needless'])) {
                unset($result[$key]);
            } else {
                switch ($key) {
                    case 'is_ckd': // 是否CKD
                        if (!empty($product['Product']['config_code'])) {
                            $result[$key] = $ProductIsCkdList[$product['Product']['is_ckd']];
                        } else {
                            if (!isset($IsCkdList[$val])) {
                                $result[$key] = $ProductIsCkdList[$product['Product']['is_ckd']];
                            } else {
                                $result[$key] = $IsCkdList[$val];
                            }
                        }
                        break;
                    case 'is_has_stock ': // 是否出库存
                    case 'is_inc_trans_fee': // 运费
                    case 'is_protective_tariff': // 是否保税
                        if (1 == $val) {
                            $result[$key] = '是';
                        } else {
                            $result[$key] = '否';
                        }
                        break;
                    case 'package_type': // 包装箱
                        if (!isset($params['package_type'][$val])) {
                            break;
                        }
                        $result[$key] = $params['package_type'][$val];
                        break;
                    case 'extend_sw_atom_ids':
                        $extend_sw_atom = explode(',', $result['extend_sw_atom_ids']);
                        $extendAtomNames = $g_Atoms->getAtomCnNamesByAtomIds($extend_sw_atom);
                        $extendAtomNames = implode(',', $extendAtomNames);
                        $result['extend_sw_atom_names'] = $extendAtomNames;
                        $extendAtomRemarks = $g_Atoms->getAtomRemarksByAtomIds($extend_sw_atom);
                        $extendAtomRemarks = implode(';', $extendAtomRemarks);
                        $result['extend_sw_atom_remarks'] = $extendAtomRemarks;
                        break;
                }
                if (isset($params['LabelAll'][$key])) {
                    $label[$key] = $params['LabelAll'][$key];
                }
            }
        }

        //旧方法
        $optProdAttrId = SW_OptFunc;
        $CIPlusAtomNames = '';
        $prod_sw_atom_ids = json_decode($formatReq['Req']['sw_atom_ids_json'], true);
        if (isset($prod_sw_atom_ids[$optProdAttrId]) && !empty($prod_sw_atom_ids[$optProdAttrId])) {//可选模块多选
            //hardcode CI PLUS
            $SW_OptFunc_CI_ID = $g_Atoms->Atom->getAtomIdByName('SW_OptFunc_CI');
            if (in_array($SW_OptFunc_CI_ID, $prod_sw_atom_ids[$optProdAttrId])) {
                $CIPlusAtomNames .= 'SW_OptFunc_CI';
            }
            $SW_OptFunc_CIPlus_ID = $g_Atoms->Atom->getAtomIdByName('SW_OptFunc_CIPlus');
            if (in_array($SW_OptFunc_CIPlus_ID, $prod_sw_atom_ids[$optProdAttrId])) {
                if ('' != $CIPlusAtomNames) {
                    $CIPlusAtomNames .= ',';
                }
                $CIPlusAtomNames .= 'SW_OptFunc_CIPlus';
            }
        }
        $result['ci_plus'] = $CIPlusAtomNames;

        //新方法，CI PLUS改为属性录单
        $biz_rel_alias = 'SW_' . strtoupper($g_BizName) . '_CIPlus';
        if (!empty($result['sw_detail']['SW_CIPlus'])) {
            $result['ci_plus'] = $result['sw_detail']['SW_CIPlus'];
        } else if (!empty($result['sw_detail'][$biz_rel_alias])) {
            $result['ci_plus'] = $result['sw_detail'][$biz_rel_alias];
        }
        $result['ci_plus'] = empty($result['ci_plus']) ? '无' : $result['ci_plus']; //如果为空，默认为“无”值显示

        $ProdAttrs = $g_ProdAttr->find('all', array('conditions' => array('ProdAttr.biz_id' => $g_BizId), 'fields' => array('ProdAttr.alias', 'ProdAttr.name', 'ProdAttr.name_en')));
        $ProdAttrLabel = array();
        foreach ($ProdAttrs as $one) {
            $ProdAttrLabel[$one['ProdAttr']['alias']] = array('name' => $one['ProdAttr']['name'], 'name_en' => $one['ProdAttr']['name_en']);
        }
        foreach ($result['sw_detail'] as $key => $val) {
            if (isset($ProdAttrLabel[$key])) {
                $ProdAttrName = $ProdAttrLabel[$key]['name'];
                if ('en' == $params['Lang'] && '' != $ProdAttrLabel[$key]['name_en']) {
                    $ProdAttrName = $ProdAttrLabel[$key]['name_en'];
                }
                $label[$key] = $ProdAttrName;
            }
        }
        $result['label'] = $label;

        if (isset($params['IsJoinCpsInfo']) && $params['IsJoinCpsInfo']) {
            $g_CpsContractCfms = $g_Commons->GlobalController('CpsContractCfms');
            $result['cps_sw_info'] = $g_CpsContractCfms->getAccountSwInfo($Contract['Contract']['id']);
        }
        return $result;
    }

    function getProductDetailsInfo($productId = null, $Lang = 'cn', $IsFormal = 1) {
        global $g_BizId;
        global $g_Commons;
        $g_Atom = $g_Commons->GlobalModel('Atom');
        $g_ProdModelDetail = $g_Commons->GlobalModel('ProdModelDetail');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');
        $g_ProdModel = $g_Commons->GlobalModel('ProdModel');
        $g_ProdOpt = $g_Commons->GlobalModel('ProdOpt');
        $g_Product = $g_Commons->GlobalModel('Product');

        $g_Products = $g_Commons->GlobalController('Products');
        $g_ProdModel->ProdModelRelOpt->recursive = -1;
        $g_Products->Product->recursive = -1;

        $ProductTemp = $g_Products->Product->find('first', array('conditions' => array('Product.id' => $productId, 'Product.component_type' => OCS_PRODATTR_COMPONENT_TYPE_NONE, 'Product.is_delete' => 0)));
        $ProdDetail = new ProdDetailsController($ProductTemp['Product']['id']);
        $Product = $ProductTemp['Product'];
        $ProdModelDetail = $g_ProdModelDetail->findById($ProductTemp['Product']['pcb_id']);
        $Product['pcb_num'] = $ProdModelDetail['ProdModelDetail']['pcb_num'];
        $Product['pcb_status'] = $ProdModelDetail['ProdModelDetail']['use_state'];

        // 特殊处理 非TV产品的功能
        $no_group_bizs = $g_Product->defNoGroupAttrBiz();
        if (!in_array($ProductTemp['Product']['biz_id'], $no_group_bizs)) {
            $g_Enum = $g_Commons->GlobalModel('Enum');
            $attr_group = $g_Enum->getEnumListByDictName('ProdAttr.attr_group');
            $attr_group[0] = '未分类';
            $prod_detail_array = $g_Commons->objectToArray($ProdDetail->details);
            $prod_attr_group = array();
            $prod_attr_list = array();
            foreach ($prod_detail_array as $attr_alias => $atoms) {
                if (empty($atoms)) {
                    continue;
                }
                $prod_attr_info = $g_ProdAttr->find('first', array(
                    'conditions' => array(
                        'ProdAttr.alias' => $attr_alias,
                        'ProdAttr.biz_id' => $ProductTemp['Product']['biz_id']
                    ),
                    'fields' => 'ProdAttr.attr_group, ProdAttr.name'
                ));
                if (empty($prod_attr_info)) {
                    continue;
                }
                if (!isset($prod_attr_list[$attr_alias])) {
                    $prod_attr_list[$attr_alias] = $prod_attr_info['ProdAttr']['name'];
                }
                $prod_attr_group[$prod_attr_info['ProdAttr']['attr_group']][$attr_alias] = $atoms;
            }

            $Product['attr_group'] = $prod_attr_group;
            $Product['attr_group_label'] = $attr_group;
        }

        if (isset($ProdDetail->details->HW_ChipSeries)) {
            $ProdDetail->details->HW_ChipSeries_Normal = $ProdDetail->details->HW_ChipSeries;
            if (isset($IsFormal) && $IsFormal == 1) {
                $hw_chipset_atom_ids = $g_ProdOpt->getAtomIdsStrByOptId($ProdDetail->detail_ids->HW_ChipSeries);
                $ProdDetail->details->HW_ChipSeries_Formal = $g_Atom->getSequenceAtomNameFormalStrByIds($hw_chipset_atom_ids); //芯片功能元不显示带DD+等信息,使用name_formal作为显示;
            }
        }

        $Product['detail'] = $g_Commons->objectToArray($ProdDetail->details);
        $Product['labels'] = array();
        $Product['note'] = array();
        $Product['index_notes'] = array();
        $ProdOptIds = explode(',', $ProductTemp['Product']['prod_opt_ids']);
        $ProdOpts = array();
        foreach ($ProdOptIds as $ProdOptId) {
            if (!empty($ProdOptId) && 0 != $ProdOptId) {
                $ProdOpts[] = $g_ProdOpt->findById($ProdOptId);
            }
        }
        foreach ($Product['detail'] as $key => $value) {
            $prod_biz_id = $ProductTemp['Product']['biz_id'];
            // 鑫翔上线后TV下不再查看电源数据
            // 鑫翔上线后TV下查看电源的确认书暂时还需要查看到产品数据
            if (OCS_BIZ_TYPE_PS == $prod_biz_id || OCS_BIZ_TYPE_WA == $prod_biz_id || OCS_BIZ_TYPE_SCS == $prod_biz_id) {//电源和TV的事业共用产品属性(防止电源的产品在TV的事业部里找不到的情况)
                $prod_biz_id = array(OCS_BIZ_TYPE_TV, OCS_BIZ_TYPE_WA, OCS_BIZ_TYPE_PS);

                if (!in_array($ProductTemp['Product']['biz_id'], $prod_biz_id)) {
                    $prod_biz_id[] = $ProductTemp['Product']['biz_id'];
                }
            }
            // $ProdAttr = $g_ProdAttr->find('first', array('conditions' => array('ProdAttr.biz_id' => $prod_biz_id, 'ProdAttr.alias' => $key), 'fields' => 'id, name, name_en'));

            //去掉biz_id的条件过滤，因为有些产品是属性tv的，但属性是scs的，如002.022.0000059这个产品。modify by shavene 2017-01-06
            $ProdAttr = $g_ProdAttr->find('first', array('conditions' => array('ProdAttr.alias' => $key), 'fields' => 'id, name, name_en'));
            $prod_name_en = array();
            if (!empty($ProdAttr)) {
                $ProdAttrName = $ProdAttr['ProdAttr']['name'];
                if ('en' == $Lang) {
                    $ProdAttrName = $ProdAttr['ProdAttr']['name_en'];
                }
                $Product['labels'][$key] = $ProdAttrName;

                foreach ($ProdOpts as $ProdOpt) {
                    if (!empty($ProdOpt) && $ProdOpt['ProdOpt']['prod_attr_id'] == $ProdAttr['ProdAttr']['id']) {
                        $ProdModelRelOpt = $g_ProdModel->ProdModelRelOpt->findByProdModelIdAndProdOptId($ProductTemp['Product']['prod_model_id'], $ProdOpt['ProdOpt']['id']);
                        if ('' != $ProdModelRelOpt['ProdModelRelOpt']['remark']) {
                            $Product['note'][$key]['remark_note'][] = $ProdModelRelOpt['ProdModelRelOpt']['remark'];
                            $Product['index_notes'][$key]['remark_note'][$ProdOpt['ProdOpt']['atom_names']] = $ProdModelRelOpt['ProdModelRelOpt']['remark'];
                        }
                        if ('' != $ProdModelRelOpt['ProdModelRelOpt']['common_note']) {
                            $Product['note'][$key]['common_note'][] = $ProdModelRelOpt['ProdModelRelOpt']['common_note'];
                            $Product['index_notes'][$key]['common_note'][$ProdOpt['ProdOpt']['atom_names']] = $ProdModelRelOpt['ProdModelRelOpt']['common_note'];
                        }
                        if ('' != $ProdModelRelOpt['ProdModelRelOpt']['hw_note']) {
                            $Product['note'][$key]['hw_note'][] = $ProdModelRelOpt['ProdModelRelOpt']['hw_note'];
                            $Product['index_notes'][$key]['hw_note'][$ProdOpt['ProdOpt']['atom_names']] = $ProdModelRelOpt['ProdModelRelOpt']['hw_note'];
                        }
                        if ('' != $ProdModelRelOpt['ProdModelRelOpt']['sw_note']) {
                            $Product['note'][$key]['sw_note'][] = $ProdModelRelOpt['ProdModelRelOpt']['sw_note'];
                            $Product['index_notes'][$key]['sw_note'][$ProdOpt['ProdOpt']['atom_names']] = $ProdModelRelOpt['ProdModelRelOpt']['sw_note'];
                        }
                        if ('' != $ProdModelRelOpt['ProdModelRelOpt']['factory_note']) {
                            $Product['note'][$key]['factory_note'][] = $ProdModelRelOpt['ProdModelRelOpt']['factory_note'];
                            $Product['index_notes'][$key]['factory_note'][$ProdOpt['ProdOpt']['atom_names']] = $ProdModelRelOpt['ProdModelRelOpt']['factory_note'];
                        }

                        if ('en' == $Lang) {
                            $json_temp = json_decode($ProdOpt['ProdOpt']['atom_ids_json'], true);
                            $prod_name_en[] = $g_ProdOpt->get_atom_names_by_atom_ids_json($json_temp, $Lang);
                        }
                    }
                }
                if (!empty($Product['note'][$key]['remark_note'])) {
                    $Product['note'][$key]['remark_note'] = implode(';', $Product['note'][$key]['remark_note']);
                }
                if (!empty($Product['note'][$key]['common_note'])) {
                    $Product['note'][$key]['common_note'] = implode(';', $Product['note'][$key]['common_note']);
                }
                if (!empty($Product['note'][$key]['hw_note'])) {
                    $Product['note'][$key]['hw_note'] = implode(';', $Product['note'][$key]['hw_note']);
                }
                if (!empty($Product['note'][$key]['sw_note'])) {
                    $Product['note'][$key]['sw_note'] = implode(';', $Product['note'][$key]['sw_note']);
                }
                if (!empty($Product['note'][$key]['factory_note'])) {
                    $Product['note'][$key]['factory_note'] = implode(';', $Product['note'][$key]['factory_note']);
                }
                if ('en' == $Lang) {
                    $Product['detail'][$key] = implode(',', $prod_name_en);
                }
            }
        }
        $AllNotes = array();
        if (!empty($Product['note'])) {
            foreach ($Product['note'] as $notes) {
                foreach ($notes as $key => $note) {
                    if (!isset($AllNotes[$key])) {
                        $AllNotes[$key] = '';
                    }
                    $AllNotes[$key] .= trim($note) . ';';
                }
            }
        }
        $Product['AllNotes'] = $AllNotes;
        return $Product;
    }

    function getAuditStageByReqIds($ReqIds = array()) {
        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ReqIds),
                    'fields' => array('Req.id', 'Req.audit_stage')));
        $AuditStages = array();
        if (!empty($Reqs)) {
            foreach ($Reqs as $Req) {
                $AuditStages[$Req['Req']['id']] = $Req['Req']['audit_stage'];
            }
        }
        return $AuditStages;
    }

    function pop_req_version_same() {

    }

    function pop_audit_board() {
        global $g_BizId;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AuditStageRelObjs = $g_Commons->GlobalController('AuditStageRelObjs');
        $g_ReqVersions = $g_Commons->GlobalController('ReqVersions');

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);
        $ReqIds = explode(',', $AllParams['P']['ReqIds']);
        $this->set('ReqIds', $ReqIds);

        $Reqs = $this->Req->find('all', array(
            'conditions' => array('Req.id' => $ReqIds),
            'fields' => array('Req.id', 'Req.biz_id', 'Req.product_id', 'Req.name', 'Req.account_id', 'Req.model_def_id', 'Req.rel_obj_id', 'Req.bill_no', 'Req.sw_atom_ids',
                'Req.sw_atom_ids_json', 'Req.owner_user_id', 'Req.quantity', 'Req.extend_sw_atom_ids', 'Req.audit_stage', 'Req.remark')
        ));
        foreach ($Reqs as $req) {
            if (OCS_PRODMODEL_REL_AUDIT_USER_STAGE_RESET == $req['Req']['audit_stage']) {
                $this->set('isFlash', 1);
                $this->set('FlashMsg', '确认书已经被打回，无需审核');
                return;
            }
        }
        $formatReqs = $g_AttrDics->formatModelData($Reqs, 'Req');

        $is_primary_infos = $this->Req->isHasPrimaryInfoBillAndAlterProd($ReqIds);
        $this->set('is_primary_infos', $is_primary_infos);

        // 自动调整业务，避免审核时出错
        if ($g_BizId != $Reqs[0]['Req']['biz_id']) {
            $g_Biz = $g_Commons->GlobalModel('Biz');
            $g_Biz->recursive = -1;
            $biz_url = $g_Biz->get_by_id($Reqs[0]['Req']['biz_id'], 'label');
            $this->redirect(array(BizMark => $biz_url, 'controller' => 'Reqs', 'action' => 'audit_board', 'P' => $this->params->params['named']['P']));
        }

        $LastReqRelVersions = $this->getReqRelVersions($ReqIds);
        $this->set('LastReqRelVersions', $LastReqRelVersions);
        $DiffReqRelVersions = $g_AuditStageRelObjs->getDiffReqRelVersion($ReqIds, $LastReqRelVersions);
        $this->set('DiffReqRelVersions', $DiffReqRelVersions);
        $HistoryReqVersions = $g_ReqVersions->getVersionsByModelDefIdAndRelObjIds(Req, $ReqIds);
        $this->set('HistoryReqVersions', $HistoryReqVersions);

        $this->set('formatReqs', $formatReqs);

        //获取订单对应的下一个环节审核人
        $ReqRelNextAuditUsers = $this->getReqsRelNextAuditUsers($formatReqs);

        $this->set('ReqRelNextAuditUsers', $ReqRelNextAuditUsers);

        //检查当前用户是否有权审核该订单。
        $result = $this->checkAuditUser($formatReqs);
        $this->set('isFlash', 0);
        if (0 == $result['is_success']) {
            $this->set('isFlash', 1);
            $this->set('FlashMsg', $result['message']);
            return;
        }
    }

    function getReqDetailsByReqId($ReqId) {
        global $g_BizId;
        global $g_Commons;
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_ReqRdModifyBills = $g_Commons->GlobalController('ReqRdModifyBills');
        $g_Products = $g_Commons->GlobalController('Products');
        $this->Req->recursive = -1;

        $result = array();
        $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                    'fields' => array('Req.id', 'Req.name', 'Req.product_id', 'Req.sw_atom_ids_json', 'Req.extend_sw_atom_ids', 'Req.remark')));
        if (empty($Req)) {
            return $result;
        }
        $HadConfigSwAttrAtoms = array();
        $ProdAliasRelLabel = array();
        if (!empty($Req)) {
            $idx_prefix = 'atom_';
            $HadConfigSwAttrAtoms = $g_ReqRdModifyBills->getSwAttrsRelAtoms($Req['Req']['sw_atom_ids_json'], $idx_prefix);
            $ExtAtomIds = explode(',', $Req['Req']['extend_sw_atom_ids']);
            $HadConfigSwAttrAtoms['SW_ExtendSwAtoms'] = array();
            if (!empty($ExtAtomIds)) {
                foreach ($ExtAtomIds as $ExtAtomId) {
                    if ('' == $ExtAtomId || null == $ExtAtomId || 0 == $ExtAtomId) {
                        continue;
                    }
                    $HadConfigSwAttrAtoms['SW_ExtendSwAtoms'][$idx_prefix . $ExtAtomId] = $g_Atoms->Atom->findMainField($ExtAtomId);
                }
            }
            foreach ($HadConfigSwAttrAtoms as $alias => $temp) {
                if ('SW_ExtendSwAtoms' != $alias) {
                    //$AttrDic = Cache::read('attr_dic/ProdAttr.' . $alias, 'attr_dic');
                    //$AttrDic = $g_Commons->getDataByAttrDicCache('ProdAttr.' . $alias);
                    $AttrDic = $g_Commons->getDataByCache('ProdAttr.' . $alias,'AttrDic');
                    $ProdAliasRelLabel[$alias] = $AttrDic['AttrDic']['label'];
                } else {
                    $ProdAliasRelLabel[$alias] = '其他软件项';
                }
            }


            $ProductKeys = array('details', 'product');
            $ProductDetails = $g_Products->getProductDetailsByKeys($Req['Req']['product_id'], $ProductKeys);
            foreach ($ProductDetails['details'] as $alias => $temp) {
                if ('PCB' != $alias) {
                    //$AttrDic = Cache::read('attr_dic/ProdAttr.' . $alias, 'attr_dic');
                    //$AttrDic = $g_Commons->getDataByAttrDicCache('ProdAttr.' . $alias);
                    $AttrDic = $g_Commons->getDataByCache('ProdAttr.' . $alias,'AttrDic');
                    $ProdAliasRelLabel[$alias] = $AttrDic['AttrDic']['label'];
                } else {
                    $ProdAliasRelLabel[$alias] = 'PCB周期号';
                }
            }
        }
        $result['ProdAliasRelLabel'] = $ProdAliasRelLabel;
        $result['ProductDetails'] = $ProductDetails;
        $result['SwAttrAtoms'] = $HadConfigSwAttrAtoms;
        $result['Req'] = $Req['Req'];
        return $result;
    }

    function get_req_details_json() {
        global $g_Commons;

        if (!empty($_POST['req_id'])) {
            $ReqId = $_POST['req_id'];
            $result = $this->getReqDetailsByReqId($ReqId);
            $this->set('result', json_encode($result));
        }
    }

    function pop_view_req_details($ReqId = null) {
        global $g_BizId;
        global $g_Commons;

        $ReqDetails = $this->getReqDetailsByReqId($ReqId);
        $this->set('ReqDetails', $ReqDetails);
    }

    function getReqIdByModelDefIdAndRelObjId($ModelDefId = null, $RelObjId = null, $ParentId = 0) {
        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        $Req = $this->Req->find('first', array('conditions' => array('Req.model_def_id' => $ModelDefId, 'Req.rel_obj_id' => $RelObjId, 'Req.parent_id' => $ParentId),
                    'fields' => array('Req.id')));
        if (!empty($Req)) {
            return $Req['Req']['id'];
        }
        return 0;
    }

    function getAuditStageRelObjsByModelDefIdAndObjId($ModelDefId = null, $RelObjId = null) {
        global $g_BizId;
        global $g_Commons;
        $g_AuditStageRelObjs = $g_Commons->GlobalController('AuditStageRelObjs');
        $g_AuditStageRelObjs->AuditStageRelObj->recursive = -1;

        $AuditStageRelObjs = $g_AuditStageRelObjs->AuditStageRelObj->find('all', array('conditions' => array('AuditStageRelObj.model_def_id' => $ModelDefId,
                        'AuditStageRelObj.rel_obj_id' => $RelObjId), 'fields' => array('AuditStageRelObj.id', 'AuditStageRelObj.create_time')));
        return $AuditStageRelObjs;
    }

    function getOptLabels(&$ProductDetails, $alias) {
        $strings = '';
        $atomNames = explode(';', $ProductDetails['detail'][$alias]);
        if (!empty($atomNames)) {
            foreach ($atomNames as $tmp) {
                if (isset($ProductDetails['index_notes'][$alias]['common_note'][$tmp])) {
                    $strings .= '【' . $ProductDetails['index_notes'][$alias]['common_note'][$tmp] . '】' . $tmp . ';';
                } else {
                    $strings .= $tmp . ';';
                }
            }
        }
        $strings = rtrim($strings, ';');
        return $strings;
    }

    function delExtBoardNote($Str) {
        $Str = preg_replace('/\s*|\t|\r|\n/', '', $Str);
        $strArr = explode('】', $Str);
        $Note = '';
        if (!empty($strArr)) {
            foreach ($strArr as $tmp) {
                $Note .= preg_replace('/【.*/', '', $tmp);
            }
        }
        return $Note;
    }

    function goto_excel_export() {
        global $g_BizId;
        global $g_Commons;
        global $g_BizName;
        $g_PrintTmpls = $g_Commons->GlobalController('PrintTmpls');
        $g_PrintTmpls->PrintTmpl->recursive = -1;
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $CrmIds = explode(',', $AllParams['P']['crm_ids']);
        $ReqIds = $this->getReqIdByCRmId($CrmIds);
        if (empty($ReqIds)) {
            return false;
        }

        $attach_name = $AllParams['P']['attach_name'];
        $PrintTmpl = $g_PrintTmpls->PrintTmpl->find('first', array('conditions' => array('PrintTmpl.model_def_id' => AuditStageRelObj, 'PrintTmpl.name' => $attach_name),
                    'fields' => array('PrintTmpl.attachment_id', 'PrintTmpl.output_file_name')));
        $attachment_id = !empty($PrintTmpl) ? $PrintTmpl['PrintTmpl']['attachment_id'] : 0;
        if (0 == $attachment_id) {
            return false;
        }
        $output_file_options = array();
        $conditions = array();
        $conditions['Req.id'] = $ReqIds[0];
        $output_file_options['id'] = $ReqIds[0];
        $output_file_options['output_file_name'] = $PrintTmpl['PrintTmpl']['output_file_name'];
        $output_file_options = json_encode($output_file_options);
        $conditions = json_encode($conditions);

        $this->redirect(array(BizMark => $g_BizName, 'controller' => 'Excels', 'action' => 'export', $attachment_id, $output_file_options, 'Reqs', 'excel_export', $conditions));
    }

    function excel_export($conditions) {
        global $g_BizId;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Dics = $g_Commons->GlobalController('Dics');
        $g_ProdModels = $g_Commons->GlobalController('ProdModels');
        global $g_Commons;
        $g_AuditStageRelObjs = $g_Commons->GlobalController('AuditStageRelObjs');
        $this->Req->recursive = -1;

        $conditions = $g_Commons->objectToArray(json_decode($conditions));

        $Lang = isset($conditions['Lang']) ? $conditions['Lang'] : 'cn';
        $IsFormal = isset($conditions['IsFormal']) ? $conditions['IsFormal'] : 0;
        $TmplName = isset($conditions['TmplName']) ? $conditions['TmplName'] : '';
        $AllLangs = array('cn' => '中文', 'en' => 'English');

        $ReqIds = $conditions['Req.id'];

        $joins = array();
        $joins[] = array(
            'table' => 'contracts',
            'alias' => 'Contract',
            'type' => 'LEFT',
            'conditions' => array('Contract.id = Req.rel_obj_id', 'Req.model_def_id' => Contract)
        );
        $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $conditions['Req.id']), 'joins' => $joins,
                    'fields' => array('Req.id', 'Req.product_id', 'Req.name', 'Req.account_id', 'Req.model_def_id', 'Req.rel_obj_id', 'Req.bill_no', 'Req.sw_atom_ids', 'Contract.is_crm_fail', 'Contract.crm_fail_reason',
                        'Req.sw_atom_ids_json', 'Req.owner_user_id', 'Req.ext_3rd_party_prods', 'Req.quantity', 'Req.extend_sw_atom_ids', 'Req.audit_stage', 'Req.remark')));
        $formatReqs = $g_AttrDics->formatModelData($Reqs, 'Req');

        // 查询已经审核的人
        $AllAudittedUsers = $g_AuditStageRelObjs->getAllAudittedUsers(Req, $conditions['Req.id']);

        $fields_needless = array('id', 'contract_id', 'status', 'create_time', 'create_user_id', 'update_time', 'update_user_id', 'prod_sw_atom_ids', 'sw_atom_ids_json');
        $package_type = $g_Dics->getEnableDicByType('package_type');
        $tbl = array('ProdAttr', 'Contract', 'Req');
        $label_temp = $g_AttrDics->AttrDic->find('all', array('conditions' => array('AttrDic.tbl_name' => $tbl, 'AttrDic.biz_id' => $g_BizId)));
        $LabelAll = array();
        foreach ($label_temp as $value) {
            $LabelAll[$value['AttrDic']['fld_name']] = $value['AttrDic']['label'];
        }
        $params = array();
        $params['Lang'] = $Lang;
        $params['fields_needless'] = $fields_needless;
        $params['package_type'] = $package_type;
        $params['LabelAll'] = $LabelAll;

        $ModelDatas = array();
        if (!empty($formatReqs)) {
            foreach ($formatReqs as $formatReq) {
                $temp = array();
                $temp['SwDetails'] = $this->getSwDetailsInfo($formatReq, $params);
                $temp['ProductDetails'] = $this->getProductDetailsInfo($formatReq['Req']['product_id']['value'], $Lang);
                $temp['AuditStageRelObjs'] = $this->getAuditStageRelObjsByModelDefIdAndObjId(Req, $formatReq['Req']['id']);
                $temp['ProdModel'] = $g_ProdModels->ProdModel->getProdModelTypeFieldByProdModelId($temp['ProductDetails']['prod_model_id']);

                if (isset($formatReq['Contract']['is_crm_fail']) && 1 == $formatReq['Contract']['is_crm_fail']) {
                    $formatReq['Contract']['crm_fail_notice'] = '注意：此订单同步CRM失败，原因：' . $formatReq['Contract']['crm_fail_reason'];
                }
                $temp['Contract'] = $formatReq['Contract'];
                $ModelDatas[] = $temp;
            }
        }
        if (!empty($ModelDatas)) {
            foreach ($ModelDatas as $idx => $ModelData) {
                $ModelData['SwDetails']['ci_plus'] = ('' != trim($ModelData['SwDetails']['ci_plus'])) ? '是' : '否';
                foreach ($ModelData['ProductDetails']['labels'] as $alias => $label) {
                    $strings = $this->getOptLabels($ModelData['ProductDetails'], $alias);
                    if ($alias == 'HW_ChipSeries') {//主方案特殊处理,
                        $alias .= '_Formal'; //书面名称
                        $strings = $this->getOptLabels($ModelData['ProductDetails'], $alias);
                    }
                    $ModelData['ProductDetails']['detail'][$alias] = $strings;
                }
                $ModelData['SwDetails']['ext_3rd_party_prods'] = $this->delExtBoardNote($ModelData['SwDetails']['ext_3rd_party_prods']);
                if (!isset($ModelData['SwDetails']['sw_detail']['SW_PowerCurrent']) || '' == trim($ModelData['SwDetails']['sw_detail']['SW_PowerCurrent'])
                        || null == trim($ModelData['SwDetails']['sw_detail']['SW_PowerCurrent']) || '无' == trim($ModelData['SwDetails']['sw_detail']['SW_PowerCurrent'])) {
                    $ModelData['SwDetails']['sw_detail']['SW_PowerCurrent'] = '';
                }

                if (isset($ModelData['SwDetails']['sw_detail']['SW_KeyBoard'])) {
                    $key_board_str = '';
                    $tmpKeys = trim($ModelData['SwDetails']['sw_detail']['SW_KeyBoard'], ',');
                    $tmpKeys = explode(',', $tmpKeys);
                    $key_board_str = '';
                    if (!empty($tmpKeys)) {
                        $i = 0;
                        foreach ($tmpKeys as $tmpKey) {
                            $key_board_str .= 'K' . ($i++) . '=' . $tmpKey . ',';
                        }
                        $key_board_str = rtrim($key_board_str, ',');
                    }
                    $ModelData['SwDetails']['sw_detail']['SW_KeyBoard'] = $key_board_str;
                }

                if (!empty($AllAudittedUsers)) {
                    foreach ($AllAudittedUsers as $k => $AllAudittedUser) {
                        $AllAudittedUser['label'] = $AllAudittedUser['label'] . '-' . $AllAudittedUser['audit_time'];
                        $AllAudittedUsers[$k] = $AllAudittedUser;
                    }
                }
                $ModelData['AllAudittedUsers'] = $AllAudittedUsers;
                $ModelDatas[$idx] = $ModelData;
            }
        }
        return $ModelDatas;
    }

    function syncAuditStageToCRM($ReqId = null) {
        return false;
        global $g_BizId;
        global $g_Commons;
        $g_Contracts = $g_Commons->GlobalController('Contracts');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $this->Req->recursive = -1;

        $Req = $this->Req->findById($ReqId);
        $result = array();
        $g_Commons->funcExecutionTime(__FUNCTION__, 'start');
        if (!empty($Req) && $Req['Req']['model_def_id'] == Contract) {
            global $g_WebServices;
            $g_WebServices->OCS_get_ws_client_config();
            global $globalCRMWebServiceUrls;
            if (!isset($globalCRMWebServiceUrls['connect']) || $globalCRMWebServiceUrls['connect'] != 1) {
                return;
            }
            $client = new soap_client($globalCRMWebServiceUrls['Contract']['url'], true);
            $client->soap_defencoding = 'utf-8';
            $client->decode_utf8 = false;
            $client->xml_encoding = 'utf-8';
            $CrmContractId = $g_Contracts->getCrmContractIdById($Req['Req']['rel_obj_id']);
            $audit_stage_alias = $g_Enums->getEnumAliasByNameAndValue('Req.audit_stage', $Req['Req']['audit_stage']);
            $params_datas = array('vstr' => $globalCRMWebServiceUrls['Contract']['hashes']['updateCfmAuditStage'],
                'org_str' => 'TVCRM', 'contract_id' => $CrmContractId, 'audit_stage_alias' => $audit_stage_alias);
            $result = $client->call('updateCfmAuditStage', $params_datas);
        }
        $g_Commons->funcExecutionTime(__FUNCTION__, 'end');
        return $result;
    }

    function getReqIdByCRmId($CrmIds = array()) {
        global $g_Commons;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $this->Req->recursive = -1;

        $ReqIds = array();
        if (!empty($CrmIds)) {
            $Contracts = $g_Contract->find('all', array(
                'conditions' => array('Contract.crm_contract_id' => $CrmIds),
                'fields' => array('Contract.id')
            ));
            $ContractIds = array();
            if (!empty($Contracts)) {
                foreach ($Contracts as $Contract) {
                    $ContractIds[] = $Contract['Contract']['id'];
                }
            }
            $Reqs = $this->Req->find('all', array('conditions' => array('Req.model_def_id' => Contract, 'Req.rel_obj_id' => $ContractIds),
                        'fields' => array('Req.id')));
            if (!empty($Reqs)) {
                foreach ($Reqs as $Req) {
                    $ReqIds[] = $Req['Req']['id'];
                }
            }
        }
        return $ReqIds;
    }

    function get_req_data_by_id($id = null, $rel_model = null) {
        $this->autoRender = false;

        global $g_Commons;
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Products->Product->recursive = -1;
        $g_ProdModels = $g_Commons->GlobalController('ProdModels');
        $g_ProdModels->ProdModel->ProdModelDetail->recursive = -1;
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Users->User->recursive = -1;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdAttrs->ProdAttr->recursive = -1;
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;

        $reqs_detail = array();
        $key = 0;
        switch ($rel_model) {
            case 'Contract':
                $req = $this->Req->find('first', array(
                            'joins' => array(
                                array(
                                    'table' => 'contracts',
                                    'alias' => 'Contract',
                                    'type' => 'LEFT',
                                    'conditions' => 'Contract.id = Req.rel_obj_id'
                                )
                            ),
                            'conditions' => array(
                                'Req.id' => $id,
                                'Req.model_def_id' => Contract,
                            ),
                            'fields' => 'Req.product_id, Req.name, Req.sw_atom_ids_json, Req.sw_contact_id, Req.extend_sw_atom_ids, Req.invc_prod_name,Req.prod_lock_type, Req.sw_contact_id,
                                Contract.account_cno, Contract.account_mno, Contract.account_brand, Contract.account_prod_name, Contract.final_account_id, Contract.mtrl_substitute,
                                Contract.package_type' // 切切不可在此处加入Req.id字段，会导致复制返单时保存的req.id错误
                        ));
                if (empty($req)) {
                    echo '';
                    return;
                }
                $prod = $g_Products->Product->find('first', array('conditions' => array('Product.id' => $req['Req']['product_id']), 'fields' => 'Product.name, Product.prod_model_id'));
                $prod_model_detail = $g_ProdModels->ProdModel->ProdModelDetail->findByProdModelId($prod['Product']['prod_model_id']);
                // 获取对应配件信息
                $g_ProdModels->ProdModel->ProdModelWidgetInfo->recursive = -1;
                $Widget = $g_ProdModels->ProdModel->ProdModelWidgetInfo->find('first', array(
                            'conditions' => array('ProdModelWidgetInfo.prod_model_id' => $prod['Product']['prod_model_id']),
                            'fields' => 'ProdModelWidgetInfo.info'
                        ));
                $reqs_detail[$key]['ext_3rd_party_prods_option'] = empty($Widget) ? '' : $Widget['ProdModelWidgetInfo']['info'];
                $all_extend_atom_ids = $g_Atoms->Atom->find('list', array('conditions' => array('Atom.name' => $g_Atoms->ExtendSwAtomNames), 'fields' => array('Atom.id')));

                foreach ($req['Req'] as $field => $val) {
                    $reqs_detail[$key][$field] = $val;
                }

                // $contract_detail[$key]['Contract__is_has_stock'] = 0; // 复制订单时出库存默认改为否 此为计婷提出的需求
                // $reqs_detail[$key]['ext_3rd_party_prods'] = '';
                // $reqs_detail[$key]['price'] = '';
                // $reqs_detail[$key]['amount'] = '';
                // $reqs_detail[$key]['quantity'] = '';
                // $reqs_detail[$key]['reorder_source'] = $this->Req->findMainField($req['Req']['reorder_source_id']);
                $reqs_detail[$key]['product'] = $prod['Product']['name'];
                $reqs_detail[$key]['serie_id'] = $prod_model_detail['ProdModelDetail']['serie_id'];
                if (!empty($req['Req']['remark'])) {
                    $reqs_detail[$key]['remark'] = $req['Req']['remark'];
                }
                if (!empty($req['Req']['sw_atom_ids_json'])) {
                    $sw = array();
                    $sw_ids = json_decode($req['Req']['sw_atom_ids_json']);
                    foreach ($sw_ids as $attr_id => $atom_ids) {
                        $alias = $g_ProdAttrs->findAliasById($attr_id);
//                            $sw[$alias] = array();
                        foreach ($atom_ids as $atom_id) {
                            $atom_name = $g_Atoms->findAtomNameById($atom_id);
                            $sw[$alias][] = $atom_name;
                            if (in_array($atom_id, $all_extend_atom_ids) && !empty($atom_id)) {
                                if (!isset($sw['SW_ExtendSwAtoms'])) {
                                    $sw['SW_ExtendSwAtoms'] = array();
                                }
                                $sw['SW_ExtendSwAtoms'][] = $atom_name;
                            }
                        }
                        if ('SW_OptFunc' == $alias && !empty($sw[$alias]) && in_array('SW_OptFunc_CIPlus', $sw[$alias])) {
                            $alias = 'SW_CIPlus';
                            $sw[$alias][] = 'CI_Plus';
                        }
                    }
                    if (empty($sw['SW_ExtendSwAtoms'])) {
                        $sw['SW_ExtendSwAtoms'] = array('无');
                    }
                    $reqs_detail[$key]['sw'] = $sw;
                }

                $contract_detail = array();
                foreach ($req['Contract'] as $field => $val) {
                    $contract_detail[$key]['Contract__' . $field] = $val;
                }
                $contract_detail[$key]['Contract__mtrl_substitute'] = explode(',', $req['Contract']['mtrl_substitute']);
                if (0 != $req['Contract']['final_account_id']) {
                    $g_Accounts = $g_Commons->GlobalController('Accounts');
                    $g_Accounts->Account->recursive = -1;
                    $contract_detail[$key]['Contract__final_account'] = $g_Accounts->Account->findAlias($req['Contract']['final_account_id']);
                }
                break;
            default:
                break;
        }


        echo json_encode(array('req' => $reqs_detail, 'contract' => $contract_detail));
    }

    // selector调用函数
    function PopValue($Parameters, $str = null) {
        global $g_BizId;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        global $g_Commons;
        $g_ModelDefs = $g_Commons->GlobalController('ModelDefs');
        $g_ModelDefs->ModelDef->recursive = -1;
        $g_Searches = $g_Commons->GlobalController('Searches');
        $g_Searches->Search->recursive = -1;
        $g_UserPrefColumns = $g_Commons->GlobalController('UserPrefColumns');
        $this->Req->recursive = -1;

        $AllParams = array();
        $Parameters = explode('&', $Parameters);
        foreach ($Parameters as $Parameter) {
            $temp = explode('=', $Parameter);
            $AllParams[$temp[0]] = $temp[1];
        }
        if (!isset($AllParams['rel_model'])) {
            $AllParams['rel_model'] = 'Contract';
        }
        $rel_model_def = $g_ModelDefs->ModelDef->find('first', array('conditions' => array('ModelDef.model_name' => $AllParams['rel_model']), 'fields' => 'ModelDef.id, ModelDef.name'));

        // 获取快捷搜索字段
        //$search_fields = $g_Searches->getQuickSearchFields($this->name, $rel_model_def['ModelDef']['name']);

        $view = new View($this, false);
        $Paginator = $view->loadHelper('Paginator');
        // 基础查询
        $this->paginate['limit'] = 3;
        $this->paginate['conditions'][] = array('Req.model_def_id' => $rel_model_def['ModelDef']['id']);
        $this->paginate['conditions'][] = array('Req.parent_id' => 0);
        if (isset($AllParams['account_id'])) {
            $this->paginate['conditions'][] = array('Req.account_id' => $AllParams['account_id']);
        }

        // 搜索2 (go) add by GUOCAI 2014-04-18
        $SearchParams = array('Controller' => $this->name, 'Model' => $this->modelName, 'params' => $AllParams);
        // 取得结果
        $Search = $g_Searches->getSearchInfo($SearchParams);
        // 重写查询条件
        $this->paginate = $g_Searches->getNewPaginate($Search, $this->paginate);
        // 搜索2 (end) -----------------------

        $result = $this->paginate();
        ///////////// 根据用户的自定义字段设置相关数据//////////////
        $UserPrefData = $g_AttrDics->setUserPrefData($result, $this->modelName, array('Req' => $AllParams['rel_model']), 3, 0);

        return array('Paginator' => $Paginator, 'result' => $UserPrefData->modelData, 'Name' => $this->modelName,
            'UserPref' => $UserPrefData->UserPrefColData, 'MainField' => $this->{$this->modelName}->serachField,
            //'search_fields' => $search_fields,
            'RelModelId' => $rel_model_def['ModelDef']['id'], 'Search' => $Search);
    }

    // 将XML文件中的软件需求录入订单需求
    public function generateReqDataByTaskIdAndXMLAttachmentId($TaskId = 0, $XMLAttachmentId = 0, $ProdAttrAlias_Replace = array()) {
        global $g_BizId;
        global $g_UserId;
        global $g_Commons;

        if (empty($TaskId) || empty($XMLAttachmentId)) {
            return;
        }
        $g_Task = $g_Commons->GlobalModel('Task');

        $Task = $g_Task->find('first', array('conditions' => array('id' => $TaskId), 'fields' => array('model_def_id', 'rel_obj_id')));
        if (empty($Task) || Req != $Task['Task']['model_def_id']) {
            return;
        }

        $ProdAttrAlias_Export = array('SW_Logo', 'SW_RemoteControl', 'SW_Language', 'SW_DefaultLanguage', 'SW_KeyBoard'); // 通过XML导入需求的产品属性
        $ProdAttrAlias_AutoCreateAtom = array('SW_Logo'); // 自动创建功能元的产品属性

        $g_Atom = $g_Commons->GlobalModel('Atom');
        $g_Attachment = $g_Commons->GlobalModel('Attachment');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');
        $this->Req->recursive = -1;

        $Req = $this->Req->findById($Task['Task']['rel_obj_id'], array('id', 'sw_atom_ids_json'));
        if (empty($Req)) {
            return;
        }

        $OldSwAtomIdsJson = json_decode($Req['Req']['sw_atom_ids_json'], true);
        $NewSwAtomIdsJson = $OldSwAtomIdsJson;

        $xml_file_info = $g_Attachment->getAttachmentFileInfo($XMLAttachmentId);

        if (!$xml_file_info['success']) {
            return;
        }

        $reader = new XMLReader();
        $reader->open($xml_file_info['datas']['file_path']);
        while ($reader->read()) {
            if ('Attr' == $reader->name) {
                $ProdAttrAlias = $reader->getAttribute('Name');
                $ProdAttrAlias = trim($ProdAttrAlias);
                if (!in_array($ProdAttrAlias, $ProdAttrAlias_Export)) {
                    continue;
                }
                $ProdAttr = $g_ProdAttr->find('first', array('conditions' => array('alias' => $ProdAttrAlias), 'fields' => array('id', 'atom_lib_id')));
                if (!empty($ProdAttr)) {
                    $ProdAttrIdOri = $ProdAttr['ProdAttr']['id'];
                    $ProdAttrId = $ProdAttr['ProdAttr']['id'];
                }
                if (!empty($ProdAttr) && !empty($ProdAttr['ProdAttr']['atom_lib_id'])) {
                    $ProdAttr = $g_ProdAttr->find('first', array('conditions' => array('id' => $ProdAttr['ProdAttr']['atom_lib_id']), 'fields' => array('id')));
                    $ProdAttrId = $ProdAttr['ProdAttr']['id'];
                }
                if (!empty($ProdAttr)) {
                    $OldArray = array();
                    if (isset($OldSwAtomIdsJson[$ProdAttrIdOri])) {
                        $OldArray = $OldSwAtomIdsJson[$ProdAttrIdOri];
                    }
                    if (!isset($OldSwAtomIdsJson[$ProdAttrIdOri]) || in_array($ProdAttrAlias, $ProdAttrAlias_Replace)/* || true */) {
                        $AtomStr = $reader->getAttribute('Atoms');
                        $AtomStr = trim($AtomStr);
                        $AtomStr = trim($AtomStr, ',');
                        $AtomNames = explode(',', $AtomStr);
                        if (!empty($AtomNames)) {
                            $NewSwAtomIdsJson[$ProdAttrIdOri] = array();
                            foreach ($AtomNames as $AtomName) {
                                $AtomName = trim($AtomName);
                                if (!empty($AtomName) && __('none') != $AtomName) {
                                    $Atom = $g_Atom->find('first', array('conditions' => array('prod_attr_id' => $ProdAttrId, 'name_sw' => $AtomName), 'fields' => array('id', 'name')));
                                    if (!empty($Atom)) {
                                        $NewSwAtomIdsJson[$ProdAttrIdOri][] = $Atom['Atom']['id'];
                                    } else {
                                        if (in_array($ProdAttrAlias, $ProdAttrAlias_AutoCreateAtom)) {
                                            // 自动新建功能元
                                            $atom_temp = array();
                                            $atom_temp['name'] = $AtomName;
                                            $atom_temp['prod_attr_id'] = $ProdAttrIdOri;
                                            $atom_temp['name_cn'] = $AtomName;
                                            $atom_temp['name_en'] = $AtomName;
                                            $atom_temp['name_sw'] = $AtomName;
                                            $atom_temp['name_hw'] = $AtomName;
                                            $atom_temp['pinyin'] = $g_Commons->pinyin($atom_temp['name']);
                                            $atom_temp['status'] = 1;
                                            $atom_temp['is_sw_focus'] = 1;
                                            $atom_temp['is_hw_focus'] = 0;
                                            $atom_temp['macro'] = '';
                                            $atom_temp['create_time'] = date("Y-m-d H:i:s");
                                            $atom_temp['create_id'] = $g_UserId;
                                            $atom_temp['update_time'] = date("Y-m-d H:i:s");
                                            $atom_temp['update_id'] = $g_UserId;
                                            $g_Atom->create();
                                            $g_Atom->save($atom_temp);
                                            $atom_id = $g_Atom->id;

                                            $NewSwAtomIdsJson[$ProdAttrIdOri][] = $atom_id;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (empty($NewSwAtomIdsJson[$ProdAttrIdOri])) {
                        $NewSwAtomIdsJson[$ProdAttrIdOri] = $OldArray;
                    }
                }
            }
        }
        if (!empty($NewSwAtomIdsJson)) {
            $SwAtomIds = '0';
            foreach ($NewSwAtomIdsJson as $ProdAttrId => $AtomArr) {
                if (!empty($AtomArr)) {
                    foreach ($AtomArr as $OneId) {
                        $SwAtomIds .= ',' . $OneId;
                    }
                }
            }
            $SwAtomIds .= ',0';
            $Req['Req']['sw_atom_ids'] = $SwAtomIds;
            $Req['Req']['sw_atom_ids_json'] = json_encode($NewSwAtomIdsJson);
            // if (isset($Req['Req']['id']) && isset($Req['Req']['product_id'])) {//检查是否有更改产品代码
            //     $this->CheckAndNotifyProductChange($Req['Req']['id'], $Req['Req']['product_id']);
            // }
            $this->Req->save($Req['Req']);
            $this->saveReqVersion($Req['Req']['id'], true); // 保存Req版本
        }
    }

    // 创建意向订单和任务
    public function CreatePreOrderReqAndTaskFromCPS($CPSReqData, $UserName) {
        global $g_BizId;
        global $g_Commons;
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_Accounts->Account->recursive = -1;
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Products->Product->recursive = -1;
        $g_ProdModelDetails = $g_Commons->GlobalController('ProdModelDetails');
        $g_ProdModelDetails->ProdModelDetail->recursive = -1;
        $g_Series = $g_Commons->GlobalController('Series');
        $g_Series->Series->recursive = -1;
        $g_Depts = $g_Commons->GlobalController('Depts');
        $g_Depts->Dept->recursive = -1;
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Users->User->recursive = -1;
        $this->Req->recursive = -1;

        $ReqData = array();
        $AccountId = 0;
        $AccountAlias = '';
        if ('OCS' == $CPSReqData['account_source_type']) {
            $Account = $g_Accounts->Account->find('first', array('conditions' => array('id' => $CPSReqData['account_source_id']), 'fields' => array('id', 'alias')));
            if (!empty($Account)) {
                $AccountId = $Account['Account']['id'];
                $AccountAlias = $Account['Account']['alias'];
            }
        } else if ('TVCRM' == $CPSReqData['account_source_type']) {
            $Account = $g_Accounts->Account->find('first', array('conditions' => array('source_type' => 'TVCRM', 'source_id' => $CPSReqData['account_source_id']), 'fields' => array('id', 'alias')));
            if (!empty($Account)) {
                $AccountId = $Account['Account']['id'];
                $AccountAlias = $Account['Account']['alias'];
            }
        }
        if (0 == $AccountId) {
            return 0;
        }
        $ReqData['account'] = $AccountAlias;
        $ReqData['account_id'] = $AccountId;

        $Product = $g_Products->Product->find('first', array('conditions' => array('prod_model_id' => $CPSReqData['prod_model_id']), 'fields' => array('id', 'name'), 'order' => array('is_standard DESC')));
        if (!empty($Product)) {
            $ReqData['prod_name'] = $Product['Product']['name'];
            $ReqData['product_id'] = $Product['Product']['id'];
        } else {
            return 0;
        }

        $ReqData['rd_dept'] = '';
        $ReqData['rd_dept_id'] = 0;
        $ProdModelDetail = $g_ProdModelDetails->ProdModelDetail->find('first', array('conditions' => array('prod_model_id' => $CPSReqData['prod_model_id']), 'fields' => array('serie_id')));
        if (!empty($ProdModelDetail) && !empty($ProdModelDetail['ProdModelDetail']['serie_id'])) {
            $Series = $g_Series->Series->find('first', array('conditions' => array('id' => $ProdModelDetail['ProdModelDetail']['serie_id']), 'fields' => array('rd_dept_id')));
            if (!empty($Series) && !empty($Series['Series']['rd_dept_id'])) {
                $Dept = $g_Depts->Dept->find('first', array('conditions' => array('id' => $Series['Series']['rd_dept_id']), 'fields' => array('id', 'name')));
                if (!empty($Dept)) {
                    $ReqData['rd_dept'] = $Dept['Dept']['name'];
                    $ReqData['rd_dept_id'] = $Dept['Dept']['id'];
                }
            }
        }

        $SW = array();
        $SWMatch = array(SW_Panel => 'Confirmation__SW_Panel', SW_Logo => 'Confirmation__SW_Logo',
            SW_RemoteControl => 'Confirmation__SW_RemoteControl', SW_Language => 'Confirmation__SW_Language',
            SW_DefaultLanguage => 'Confirmation__SW_DefaultLanguage', SW_Country => 'Confirmation__SW_Country',
            SW_DefaultCountry => 'Confirmation__SW_DefaultCountry', SW_OptFunc => 'Confirmation__SW_OptFunc');
        $SwAtomIds = $g_Commons->objectToArray(json_decode($CPSReqData['sw_atom_ids_json']));
        if (!empty($SwAtomIds)) {
            foreach ($SwAtomIds as $ProdAttrId => $AtomIds) {
                if (isset($SWMatch[$ProdAttrId])) {
                    if (!empty($AtomIds)) {
                        $Atoms = '';
                        foreach ($AtomIds as $AtomId) {
                            if (!empty($AtomId) && 0 != $AtomId) {
                                $Atom = $g_Atoms->Atom->find('first', array('conditions' => array('id' => $AtomId), 'fields' => array('name')));
                                if (!empty($Atom)) {
                                    if ('' == $Atoms) {
                                        $Atoms .= $Atom['Atom']['name'];
                                    } else {
                                        $Atoms .= ',' . $Atom['Atom']['name'];
                                    }
                                }
                            }
                        }
                    }
                    if (!empty($Atoms) && '' != $Atoms) {
                        $SW[$SWMatch[$ProdAttrId]] = $Atoms;
                    }
                }
            }
        }
        $ReqData['sw'] = $SW;

        $data['req_1__Confirmation__SW_Panel'] = 'on';
        $data['req_1__Confirmation__SW_Logo'] = 'on';
        $data['req_1__Confirmation__SW_RemoteControl'] = 'on';
        $data['req_1__Confirmation__SW_Language'] = 'on';
        $data['req_1__Confirmation__SW_DefaultLanguage'] = 'on';
        $data['req_1__Confirmation__SW_Country'] = 'on';
        $data['req_1__Confirmation__SW_DefaultCountry'] = 'on';
        $data['req_1__Confirmation__SW_OptFunc'] = 'on';
        $data['model'] = 'PreOrder';
        $data['Pname'] = 'undefined';
        $data['Pvalue'] = 'undefined';
        $data['req'][] = $ReqData;

        $User = $g_Users->User->find('first', array('conditions' => array('username' => $UserName), 'fields' => array('id')));
        $UserId = isset($User['User']['id']) ? $User['User']['id'] : 0;
        $TaskSource = 'CPSReq';
        $TaskSourceId = isset($CPSReqData['id']) ? $CPSReqData['id'] : 0;
        $data['Task'][] = array('Task__sw_user_id' => $UserId, 'Task__subject' => '', 'Task__source' => $TaskSource, 'Task__source_id' => $TaskSourceId);

        $TaskId = $this->savePreOrderData($data, 'new', 1, 0);
        return $TaskId;
    }

    //通过ReqId查找CRMID
    function GetCRmIdByReqId($ReqId = null) {
        global $g_Commons;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $this->Req->recursive = -1;
        $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                    'fields' => array('Req.model_def_id', 'Req.rel_obj_id')));
        if (empty($Req) || $Req['Req']['model_def_id'] != Contract) {
            return 0;
        }
        $Contract = $g_Contract->find('first', array(
            'conditions' => array('Contract.id' => $Req['Req']['rel_obj_id']),
            'fields' => array('Contract.crm_contract_id')
        ));
        if (!empty($Contract)) {
            return $Contract['Contract']['crm_contract_id'];
        }
        return 0;
    }

    //检查生产计划清单对应的订单是否有更改产品代码，如果有则记录log并发邮件通知BOM审核人
    function CheckAndNotifyProductChange($ReqId = null, $NewProductId = null) {
        global $g_Commons;
        global $g_UserRealName;
        global $g_OCS_options;
        global $g_UserEmail;
        global $g_BizUrl;
        $g_MfPlanBills = $g_Commons->GlobalController('MfPlanBills');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
        $g_MfPlanBills->MfPlanBill->recursive = -1;
        $this->Req->recursive = -1;

        $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId), 'fields' => array('Req.id', 'Req.product_id')));
        if (!empty($Req) && $Req['Req']['product_id'] != $NewProductId) {//说明产品已经改变
            $OldProductName = $g_Products->Product->findMainField($Req['Req']['product_id']);
            $NewProductName = $g_Products->Product->findMainField($NewProductId);

            $MfPlanBill = $g_MfPlanBills->MfPlanBill->find('first', array('conditions' => array('MfPlanBill.req_id' => $ReqId)));
            if (!empty($MfPlanBill) && $MfPlanBill['MfPlanBill']['hw_audit_status'] >= OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_AUDITTING) {//状态>=硬件审核中，产品有变更，要通知已经BOM工程师重新审核，并清空数据，状态改为“一致通过”
                $MfPlanBill['MfPlanBill']['status'] = OCS_MF_PLAN_BILL_STATUS_PASSED; //一致通过
                $MfPlanBill['MfPlanBill']['hw_audit_status'] = OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_RESET; //新创建，需重新审核
                $bom_audit_user_id = $MfPlanBill['MfPlanBill']['bom_audit_user_id'];
                $bom_name = $MfPlanBill['MfPlanBill']['bom_name'];
                $MfPlanBill['MfPlanBill']['bom_name'] = null;
                $MfPlanBill['MfPlanBill']['hw_audit_user_id'] = 0;
                $MfPlanBill['MfPlanBill']['hw_audit_time'] = NULL;
                $MfPlanBill['MfPlanBill']['power_audit_user_id'] = 0;
                $MfPlanBill['MfPlanBill']['power_audit_time'] = NULL;
                $MfPlanBill['MfPlanBill']['struct_audit_user_id'] = 0;
                $MfPlanBill['MfPlanBill']['struct_audit_time'] = NULL;
                $MfPlanBill['MfPlanBill']['pack_audit_user_id'] = 0;
                $MfPlanBill['MfPlanBill']['pack_audit_time'] = NULL;
                $MfPlanBill['MfPlanBill']['bom_audit_user_id'] = 0;
                $MfPlanBill['MfPlanBill']['bom_audit_time'] = NULL;
                $MfPlanBill['MfPlanBill']['conf_audit_pass_time'] = date('Y-m-d H:i:s');
                $MfPlanBill['MfPlanBill']['last_product_id'] = $Req['Req']['product_id'];//记录变更前的产品
                $MfPlanBill['MfPlanBill']['prod_change_times'] = $MfPlanBill['MfPlanBill']['prod_change_times'] + 1;
                $g_MfPlanBills->MfPlanBill->save($MfPlanBill['MfPlanBill']);

                //清空BOM是否及时
                $g_MfPlanBills->MfPlanBill->clearIsOnTimeFields($ReqId);

                $log_content = '更改产品代码:' . $OldProductName . '=>' . $NewProductName . '，生产计划单BOM编码由#' . $bom_name . '设置为null，硬件审核数据清空。';
                $g_Logs->write_log('MfPlanBills', $g_MfPlanBills->MfPlanBill->id, 'info', $log_content);

                $notifyUserEmail = $g_Users->getUserEmailById($bom_audit_user_id);
                if ('' != $notifyUserEmail) {
                    $common_url = $g_OCS_options['url'] . $g_BizUrl . 'pop/MfPlanBills/print_mf_bills/P:ids=' . $g_MfPlanBills->MfPlanBill->id;
                    $toUsers = array();
                    $toUsers[] = $notifyUserEmail;
                    $Options = array();
                    $Options['Email']['ToUsers'] = $toUsers;
                    $Options['Field']['login_user_realname'] = $g_UserRealName;
                    $Options['Field']['login_user_email'] = $g_UserEmail;
                    $Options['Field']['common_url'] = $common_url;
                    $g_QueueJobs->AddNoticeJob(array('Email'), MfPlanBill, $g_MfPlanBills->MfPlanBill->id, 'ModifyProductNotify', $Options);
                }
            } else {
                if (!empty($MfPlanBill)) {
                    $MfPlanBill['MfPlanBill']['prod_change_times'] = $MfPlanBill['MfPlanBill']['prod_change_times'] + 1;
                    $g_MfPlanBills->MfPlanBill->save($MfPlanBill['MfPlanBill']);
                }
            }
        }
    }

    //通过req_id获取是否存在客户回签确认书
    function getConfirmCfmAttach($ReqId = null) {
        global $g_BizId;
        global $g_Commons;
        $g_Attachments = $g_Commons->GlobalController('Attachments');
        $g_Attachments->Attachment->recursive = -1;
        $Attachments = $g_Attachments->Attachment->find('all', array(
                    'conditions' => array('Attachment.model_def_id' => Req,
                        'Attachment.obj_id' => $ReqId,
                        'Attachment.is_delete' => 0,
                        'Attachment.is_lock' => 0,
                        'Attachment.attach_type' => OCS_ATTACH_TYPE_CONFIRMATION, //确认书(已回签)
                        'Attachment.rel_attachment_id' => 0), // 为0是普通附件，不为0则为软件包说明的XML文件
                    'order' => 'Attachment.create_time DESC'));
        return $Attachments;
    }

    //查看订单统计数据
    function view_req_report() {
        global $g_Commons;
        $this->Req->recursive = -1;
        $this->set('title_for_layout', '导出订单');

        $Date = array();
        $Date['StartDate'] = date('Y-m-d', mktime(0, 0, 0, date("m"), 1, date("Y")));
        $Date['EndDate'] = date('Y-m-d', mktime(0, 0, 0, date("m"), date('t'), date("Y")));
        $this->set('Date', $Date);

        //获取打印模板
        $g_PrintTmpls = $g_Commons->GlobalController('PrintTmpls');
        $g_PrintTmpls->PrintTmpl->recursive = 0;
        $printTmpls = $g_PrintTmpls->PrintTmpl->find('all', array('conditions' => array('PrintTmpl.model_def_id' => Req), 'order' => 'PrintTmpl.name ASC'));
        $this->set('printTmpls', $printTmpls);
    }

    //导订单数据
    function export_reqs($conditions) {
        global $g_BizId;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_Accounts->Account->recursive = -1;
        $this->Req->recursive = -1;

        $conditions = json_decode($conditions, true);
        if (empty($conditions)) {
            return array();
        }
        $StartDate = $conditions['start_date'];
        $EndDate = $conditions['end_date'];
        $AccountAlias = $conditions['account'];
        $Account = $g_Accounts->Account->find('first', array('conditions' => array('Account.alias' => $AccountAlias),
                    'fields' => array('Account.id')));
        if (empty($Account)) {
            return array();
        }

        $joins = array();
        $joins[] = array(
            'table' => 'contracts',
            'alias' => 'Contract',
            'type' => 'LEFT',
            'conditions' => 'Req.model_def_id = ' . Contract . ' AND Contract.id=Req.rel_obj_id'
        );

        $Reqs = $this->Req->find('all', array('conditions' => array("Req.create_time >= '" . $StartDate . "' AND Req.create_time <= '" . $EndDate . "' AND Req.model_def_id=" . Contract . " AND Req.parent_id=0", 'Req.account_id' => $Account['Account']['id']), //, "Req.name LIKE '%研发%'"
                    'fields' => array('Req.id', 'Req.account_id', 'Req.product_id', 'Req.name', 'Req.quantity', 'Req.owner_user_id', 'Req.sales_user_id',
                        'Req.create_user_id', 'Req.create_time', 'Req.remark', 'Req.status', 'Contract.id', 'Contract.contract_no', 'Contract.status', 'Contract.crm_stage', 'Contract.account_cno', 'Contract.account_mno', 'Contract.order_time'),
                    'joins' => $joins));

        $Reqs = $g_AttrDics->formatModelData($Reqs, 'Req');
        $Reqs = $g_AttrDics->formatModelData($Reqs, 'Contract');
        return $Reqs;
    }

    //EBS查看订单的所有附件
    function pub_view_req_attachments($ContractId = null, $ReqId = null) {
        // $ReqId = 23391;
        // $ContractId = 30043;
        $ContractId = base64_decode(base64_decode($ContractId));
        $ReqId = base64_decode(base64_decode($ReqId));
        global $g_Commons;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_SwDeliverBills = $g_Commons->GlobalController('SwDeliverBills');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Dics = $g_Commons->GlobalController('Dics');
        $g_Attachments = $g_Commons->GlobalController('Attachments');
        $g_Users->User->recursive = -1;
        $g_Attachments->Attachment->recursive = -1;
        $this->Req->recursive = -1;

        $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId, 'Req.model_def_id' => Contract),
                    'fields' => array('Req.id', 'Req.rel_obj_id', 'Req.name')));
        $this->set('Req', $Req);
        if (empty($Req)) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('订单不存在');
            return;
        }
        $Contract = $g_Contract->find('first', array(
            'conditions' => array('Contract.id' => $Req['Req']['rel_obj_id']),
            'fields' => array('Contract.id')
        ));
        if (empty($Contract)) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('订单Contract不存在');
            return;
        }
        if ($Contract['Contract']['id'] != $ContractId) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('参数不匹配');
            return;
        }


        $attach_type_all = $g_Dics->getEnableDicByType('attach_type');
        $this->set('attach_type_all', $attach_type_all);
        $Attachments = $g_Attachments->Attachment->find('all', array(
                    'conditions' => array('Attachment.model_def_id' => Req,
                        'Attachment.obj_id' => $ReqId,
                        'Attachment.is_delete' => 0,
                        'Attachment.rel_attachment_id' => 0), // 为0是普通附件，不为0则为软件包说明的XML文件
                    'order' => 'Attachment.create_time DESC'));
        if (!empty($Attachments)) {
            foreach ($Attachments as $idx => $Attachment) {
                $Attachment['Attachment']['create_user'] = $g_Users->User->findMainField($Attachment['Attachment']['create_user_id']);
                $Attachment['Attachment']['file_icon_url'] = $g_Attachments->get_file_icon_url($Attachment['Attachment']['extension']);
                $Attachment['Attachment']['cps_short_url'] = 'http://cps.local/'; //$g_SwDeliverBills->get_cps_short_link($Attachment['Attachment']['id']);
                $Attachments[$idx] = $Attachment;
            }
        }
        $this->set('Attachments', $Attachments);
    }

    // 从CPS获取工厂烧录KEY仓库数据
    function getBurnKeysFromCps() {
        global $g_Commons;
        global $g_CPS_options;
        global $g_BizUrl;

        $BurnKeyStores = array();
        $BurnKeyStores[OCS_BURN_KEY_TYPE_HDCP] = array();
        $BurnKeyStores[OCS_BURN_KEY_TYPE_CIPLUS] = array();
        $BurnKeyStores[OCS_BURN_KEY_TYPE_MAC] = array();
        $BurnKeyStores[OCS_BURN_KEY_TYPE_HDCP20G] = array();

        //return $BurnKeyStores;//由于测试环境未搭好，先直接返回。

        global $g_WebServices;
        $g_WebServices->OCS_get_ws_client_config();
        global $globalCPSWebServiceUrls;

        $g_Commons->funcExecutionTime(__FUNCTION__, 'start');
        if ($globalCPSWebServiceUrls['connect']) {
            $client = new soap_client($globalCPSWebServiceUrls['BurnKey']['url'], true);
            $client->soap_defencoding = 'utf-8';
            $client->decode_utf8 = false;
            $client->xml_encoding = 'utf-8';
            $ws_params = array('VerifyStr' => $globalCPSWebServiceUrls['BurnKey']['hashes']['GetBurnKeyStore'], 'IsAll' => 1);
            $result = $client->call('GetBurnKeyStore', $ws_params);
            if (1 == $result['success']) {
                $result = json_decode($result['datas'], true);
            }
        }
        if (!empty($result['stores'])) {
            foreach ($result['stores'] as $temp) {
                $BurnKeyStores[$temp['key_type_value']][$temp['id']] = $temp['name'];
            }
        }
        $g_Commons->funcExecutionTime(__FUNCTION__, 'end');

        return $BurnKeyStores;
    }

    //获取伪下拉（带分类）
    function getSortFakeBodyData($fakeProdAttrAlias = null) {
        global $g_Commons;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;
        $g_ProdAttrs->ProdAttr->recursive = -1;
        if (empty($fakeProdAttrAlias)) {
            return array();
        }
        $result = array();
        foreach ($fakeProdAttrAlias as $ProdAttrAlias) {
            $ProdAttrId = $g_ProdAttrs->getSourceProdAttrIdByAlias($ProdAttrAlias);

            $conditions = array(
                'Atom.prod_attr_id' => $ProdAttrId,
                'Atom.status !=' => OCS_STATUS_STOP,
                'Atom.is_visible_to_owner' => 1,
                "Atom.name != '无'",
                'OR' => array('Atom.same_atom_id' => 0, 'Atom.same_atom_id is NULL', 'Atom.same_atom_id = Atom.id')
            );
            $Atoms = $g_Atoms->Atom->find('all', array(
                'conditions' => $conditions,
                'joins' => array(
                    array(
                        'table' => 'enums',
                        'alias' => 'Enum',
                        'type' => 'left',
                        'conditions' => "Enum.value=Atom.category_id and Enum.dict_name = 'SW_PowerCurrent.category'"
                    )
                ),
                'fields' => array('Atom.id', 'Atom.name', 'Atom.category_id', 'Enum.label'),
                'order' => 'Atom.sequence'
            ));
            $SortAtoms = array();
            if (!empty($Atoms)) {
                $SortAtoms['未分类'][] = '无';
                foreach ($Atoms as $Atom) {
                    $SortAtoms[$Atom['Enum']['label']][] = $Atom['Atom']['name'];
                }
            }
            $result[$ProdAttrAlias] = $SortAtoms;
        }
        return $result;
    }

    //获取伪下拉功能元
    function getFakeBodyData($fakeProdAttrAlias = null) {
        global $g_Commons;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Atoms->Atom->recursive = -1;
        $g_ProdAttrs->ProdAttr->recursive = -1;
        if (empty($fakeProdAttrAlias)) {
            return array();
        }
        $result = array();

        foreach ($fakeProdAttrAlias as $ProdAttrAlias) {
            if ('SW_ExtendSwAtoms' == $ProdAttrAlias) {
                $ProdAttrId = SW_OptFunc; //可选功能
                $Atoms = $g_Atoms->Atom->find('list', array('conditions' => array('Atom.name' => $g_Atoms->ExtendSwAtomNames, 'Atom.prod_attr_id' => $ProdAttrId), 'fields' => array('Atom.id', 'Atom.name')));
                $Atoms = array_merge(array('无'), $Atoms);
                $result[$ProdAttrAlias] = $Atoms;
                continue;
            }
            $ProdAttrId = $g_ProdAttrs->getSourceProdAttrIdByAlias($ProdAttrAlias);

            $conditions = array(
                'Atom.prod_attr_id' => $ProdAttrId,
                'Atom.status !=' => OCS_STATUS_STOP,
                'Atom.is_visible_to_owner' => 1,
                "Atom.name != '无'",
                'OR' => array('Atom.same_atom_id' => 0, 'Atom.same_atom_id is NULL', 'Atom.same_atom_id = Atom.id')
            );
            $Atoms = $g_Atoms->Atom->find('list', array(
                'conditions' => $conditions,
                'fields' => array('Atom.id', 'Atom.name'),
                'order' => 'Atom.sequence'
            ));
            $Atoms = array_merge(array('无'), $Atoms);
            $result[$ProdAttrAlias] = $Atoms;
        }
        // $result['SW_CIPlus'] = array('无', 'CI_Plus'); //hardcode
        return $result;
    }

    //初始化订单界面数据
    function initReqLayoutData($AllParams) {
        $result = array();
        global $g_BizId;
        global $g_Commons;
        global $g_Order_Type_USD; //美金订单类型
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_Dic = $g_Commons->GlobalModel('Dic');
        $g_Type = $g_Commons->GlobalModel('Type');
        $g_Patent = $g_Commons->GlobalModel('Patent');

        $invc_prod_names = $g_Enum->getEnumListByDictName('Req.invc_prod_name'); // 开票品名枚举值
        $IsCkdList = $g_Enum->getEnumListByDictName('Contract.is_ckd'); //是否CKD
        $ProdLockTypes = $g_Enum->getEnumListByDictName('Req.prod_lock_type'); //产品锁定类型

        $package_types = $g_Dic->getEnableDicByType('package_type'); //包装箱
        $is_or_not = array('0' => '否', '1' => '是');
        if (!empty($package_types) && isset($package_types[1001])) {
            unset($package_types[1001]);
        }

        //RMB订单
        $price_attr = array('field' => 'Req.price', 'label' => '单价', 'class' => 'number required price dup ', 'style' => 'width:80px;');
        $tech_price_attr = array('field' => 'Contract.tech_price', 'label' => '技术服务费', 'class' => 'number required tech_price dup', 'style' => 'width:110px;');
        $amount_attr = array('field' => 'Req.amount', 'label' => '总金额', 'style' => 'width:80px', 'class' => 'amount ', 'attr' => array('readonly' => ''));

        $line_types = array();
        if (isset($AllParams['P']['order_type'])) {
            $TypeId = $g_Type->getIdByCode($AllParams['P']['order_type']);
            $org_id = $g_Enum->find('first', array(
                'conditions' => array(
                    'Enum.dict_name' => 'Ebs.order_type',
                    'Enum.value' => $AllParams['P']['order_type']
                ),
                'fields' => 'Enum.alias'
            ));
            $org_id = $org_id['Enum']['alias'];
            // $line_types = $g_Enum->find('list', array(
            //     'conditions' => array(
            //         'Enum.dict_name' => 'Ebs.order_detail_type',
            //         'Enum.alias' => $org_id
            //     ),
            //     'fields' => 'Enum.value, Enum.label'
            // ));
            $line_types = $g_Enum->getEnumListsByDictNameAndAlias('Ebs.order_detail_type', $org_id);
        }
        //新建时，都设置“一般销售”为默认值
        $line_type_default = '';
        if (!empty($line_types) && 'add' == $AllParams['P']['action']) {
            foreach ($line_types as $value => $label) {
                if (substr_count($label, '-销售') > 0) {
                    $line_type_default = $value;
                    break;
                }
            }
        }
        if (isset($AllParams['P']['currency_type']) && OCS_CURRENCY_USD == $AllParams['P']['currency_type']) {//USD订单
            $price_attr = array('field' => 'Req.foreign_price', 'label' => '外币单价', 'class' => 'number required price dup ', 'style' => 'width:100px;');
            $tech_price_attr = array('field' => 'Contract.tech_price', 'label' => '技术服务费(RMB)', 'class' => 'number required tech_price dup', 'style' => 'width:140px;');
            $amount_attr = array('field' => 'Req.foreign_amount', 'label' => '外币总价', 'style' => 'width:80px', 'class' => 'amount', 'attr' => array('readonly' => ''));
        }

        //是否研发订单
        $IsRdOrder = false;
        $is_stock_order = false;
        $is_sam_order = false;
        if(isset($AllParams['P']['order_type']) && $AllParams['P']['order_type'] > 0){
            $type = $g_Type->find('first', array(
                'conditions' => array(
                    'Type.code' => $AllParams['P']['order_type'],
                ),
                'fields' => array(
                    'Type.id',
                    'Type.name'
                )
            ));
            if(!empty($type) && substr_count($type['Type']['name'], '研发') > 0){//研发订单
                $IsRdOrder = true;
            } else if(!empty($type) && substr_count($type['Type']['name'], '备货') > 0){//备货订单
                $is_stock_order = true;
            } else if(!empty($type) && substr_count($type['Type']['name'], '备货') > 0){//样品订单
                $is_sam_order = true;
            }
        }
        //对于研发订单，作一些特殊处理
        $is_has_stock_default = '';
        $package_type_default = '';
        $free_spare_qty = '';
        $invc_prod_name_required = 'required';
        if ($IsRdOrder) {
            $price_attr['default'] = 0;
            $tech_price_attr['default'] = 0;
            $is_has_stock_default = 0;
            $package_type_default = 1002; //纸箱
            $free_spare_qty = 0;
            $invc_prod_name_required = '';
        }
        if ($is_sam_order) {
            $invc_prod_name_required = '';
        }

        $remark_label = $is_stock_order ? '订单备注/备货原因及风险' : '订单备注';

        /*
          $req_layout参数说明：
          1、具体的type对应的类型，请查看pop_new_ebs_reqs.ctp里的switch说明
          当type=fake_body时，需指定attr里的fake_key，在getFakeBodyData里设置好该key的可用值有哪些
          2、class="dup"表示该属性值在界面可进行一键复制
          3、class="required"表示该属性必填
          4、style可以自定义该属性在界面的展示样式
          5、attr表示界面元素的属性
          #maxNumTags表示该属性最多可输入多少个值
          #tagInputClass设置bootstrap tags input的class,如果是必填则要带上required
         */
        //定义界面属性
        $req_layout = array();

        //备货类型订单，添加真实客户字段\
        if (isset($type) && substr_count($type['Type']['name'], '备货')) {
            $req_layout[] = array('field' => 'Req.stock_account_id', 'label' => '真实客户', 'default' => '', 'class' => 'account_auto_complete stock_account_id required dup', 'style' => 'width:120px;');
        }

        //来自购物车新建订单
        if (isset($AllParams['P']['entry_type']) && 'cart' == $AllParams['P']['entry_type'] && 'add' == $AllParams['P']['action']) {
            $req_layout[] = array('field' => 'View.lot_number', 'label' => '批号', 'style' => 'width:120px', 'type' => 'readonly', 'attr' => array('disabled' => 'disabled'));
            $req_layout[] = array('field' => 'View.ebs_order_number', 'label' => 'EBS订单编号', 'style' => 'width:90px', 'type' => 'readonly', 'attr' => array('disabled' => 'disabled'));
            $req_layout[] = array('field' => 'View.line_number', 'label' => '行号', 'type' => 'readonly', 'style' => 'width:30px', 'attr' => array('disabled' => 'disabled'));
            // $req_layout[] = array('field' => 'View.type', 'label' => '供应类型', 'type' => 'readonly', 'style' => 'width:70px', 'attr' => array('disabled' => 'disabled'));
            // $req_layout[] = array('field' => 'View.total_qoh', 'label' => '即时库存', 'class' => 'total_qoh', 'type' => 'readonly', 'style' => 'width:70px', 'attr' => array('disabled' => 'disabled'));
            $req_layout[] = array('field' => 'View.available_stock_qty', 'label' => '理论库存', 'class' => 'available_stock_qty', 'type' => 'readonly', 'style' => 'width:70px', 'attr' => array('disabled' => 'disabled'));
            // $req_layout[] = array('field' => 'View.reserve_quantity', 'label' => '总保留数', 'class' => 'reserve_quantity', 'type' => 'readonly', 'style' => 'width:70px', 'attr' => array('disabled' => 'disabled'));
            $req_layout[] = array('field' => 'View.cart_quantity', 'label' => '未建交付', 'class' => 'cart_quantity', 'type' => 'readonly', 'style' => 'width:70px', 'attr' => array('disabled' => 'disabled'));
            $req_layout[] = array('field' => 'View.available_reserve_qty', 'label' => '可用数量', 'class' => 'available_reserve_qty', 'type' => 'readonly', 'style' => 'width:70px', 'attr' => array('disabled' => 'disabled'));
            // $req_layout[] = array('field' => 'View.stock_type', 'label' => '备货类型', 'class' => 'stock_type_label', 'type' => 'readonly', 'style' => 'width:90px', 'attr' => array('disabled' => 'disabled'));

            //库存保留相关信息
            // $ReserveRelTyps = $g_Enums->getEnumListByDictName('ReserveRelReq.type');
            // $req_layout[] = array('field' => 'ReserveRelReq.type', 'label' => '备货类型', 'type' => 'select', 'options' => $ReserveRelTyps, 'style' => 'width:100px;', 'class' => 'required stock_type dup hidden', 'attr' => array('readonly' => true));
            $req_layout[] = array('field' => 'ReserveRelReq.available_stock_qty', 'label' => 'available_stock_qty', 'class' => 'hidden', 'attr' => array('readonly' => true));
            $req_layout[] = array('field' => 'ReserveRelReq.available_reserve_qty', 'label' => 'available_reserve_qty', 'class' => 'hidden', 'attr' => array('readonly' => true));
            $req_layout[] = array('field' => 'ReserveRelReq.mto_no', 'label' => 'mto_no', 'class' => 'hidden', 'attr' => array('readonly' => true));
            $req_layout[] = array('field' => 'ReserveRelReq.locator', 'label' => 'locator', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.reserve_id', 'label' => 'reserve_id', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.organization_id', 'label' => 'organization_id', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.inventory_item_id', 'label' => 'inventory_item_id', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.primary_uom_code', 'label' => 'primary_uom_code', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.supply_source_type_id', 'label' => 'supply_source_type_id', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.subinventory_code', 'label' => 'subinventory_code', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.locator_id', 'label' => 'locator_id', 'class' => 'hidden', 'attr' => array('readonly' => true));
            $req_layout[] = array('field' => 'ReserveRelReq.lot_number', 'label' => 'lot_number', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.wip_entity_id', 'label' => 'wip_entity_id', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.batch_no', 'label' => 'batch_no', 'class' => 'hidden', 'attr' => array('readonly' => true));
            $req_layout[] = array('field' => 'ReserveRelReq.ebs_order_number', 'label' => 'ebs_order_number', 'class' => 'hidden', 'attr' => array('readonly' => true));
            $req_layout[] = array('field' => 'ReserveRelReq.total_qoh', 'label' => '即时库存', 'class' => 'total_qoh', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.header_id', 'label' => 'header_id', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.line_id', 'label' => 'line_id', 'class' => 'hidden', 'attr' => array('readonly' => true));
            // $req_layout[] = array('field' => 'ReserveRelReq.line_number', 'label' => 'line_number', 'class' => 'hidden', 'attr' => array('readonly' => true));
        }

        //转换订单
        if (isset($AllParams['P']['entry_type']) && $this->Req->isTransOrder($AllParams['P']['entry_type']) && 'add' == $AllParams['P']['action']) {
            $req_layout[] = array('field' => 'ReqRelStockOrder.rel_stock_req_id', 'label' => '关联备货订单', 'class' => 'total_qoh', 'class' => 'hidden', 'attr' => array('readonly' => true));
        }

        if($IsRdOrder){
            $is_try_produce = '';
            if (isset($AllParams['P']['action']) && 'add' == $AllParams['P']['action']) { //新建时默认为“是”
                $is_try_produce = 1;
            }
            $req_layout[] = array('field' => 'Contract.is_try_produce', 'label' => '是否核料', 'type' => 'select', 'default' => $is_try_produce, 'class' => 'is_try_produce', 'options' => $is_or_not, 'style' => 'width:60px;');
        }

        if (OCS_BIZ_TYPE_MD == $g_BizId) {
            $Atom_Country = 'SW_MD_DefaultCountry';
        }

        switch ($g_BizId) {
            case OCS_BIZ_TYPE_TV:
                $req_layout[] = array('field' => 'Req.prod_lock_type', 'label' => '产品锁定类型', 'type' => 'select', 'class' => 'prod_lock_type', 'options' => $ProdLockTypes, 'style' => 'width:110px;');
                $req_layout[] = array('field' => 'Contract.line_type_id', 'label' => '行类型', 'type' => 'select', 'class' => 'line_type_id required dup', 'default' => $line_type_default, 'options' => $line_types, 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'View.rel_same_product', 'type' => 'readonly', 'label' => '同代码可用数量', 'class' => 'rel-same-product', 'style' => 'width:100px;');
                $req_layout[] = array('field' => 'View.rel_same_prod_model_1month', 'type' => 'readonly', 'label' => '同型号同客户1个月前可用数量', 'class' => 'rel-same-prod-model', 'style' => 'width:170px;');
                $req_layout[] = array('field' => 'View.rel_same_prod_model_2month', 'type' => 'readonly', 'label' => '同型号同客户2个月前可用数量', 'class' => 'rel-same-prod-model', 'style' => 'width:170px;');
                $req_layout[] = array('field' => 'Product.is_ckd', 'label' => 'CKD', 'type' => 'readonly', 'style' => 'width:50px;', 'class' => 'product_ckd', 'attr' => array('disabled' => 'disabled'));
                $req_layout[] = array('field' => 'Req.product_id', 'label' => '产品', 'class' => 'required product product_auto_comlete dup', 'type' => 'pop_select', 'style' => 'width:250px', 'attr' => array());
                $req_layout[] = array('field' => 'RelReq.quote_line_id', 'label' => '报价单行ID', 'class' => 'hidden');
                $req_layout[] = array('field' => 'View.rel_quote_line', 'type' => 'readonly', 'label' => '关联报价单', 'class' => 'rel-quote-line dup', 'style' => 'width:200px;margin-right:20px;');
                if (isset($type) && substr_count($type['Type']['name'], '备货')) {
                    $req_layout[] = array('field' => 'RelReq.stock_limit_days', 'label' => '备货有效天数', 'default' => '', 'class' => 'stock_limit_days required number dup', 'style' => 'width:120px;');
                }
                $req_layout[] = array('field' => 'Contract.delivety_time', 'label' => '计划发运日期', 'class' => 'input-datepicker deliver_date required dup', 'style' => 'width:115px;');
                $req_layout[] = array('field' => 'Req.quantity', 'label' => '数量', 'class' => 'number required quantity', 'style' => 'width:70px;');
                $req_layout[] = $price_attr;
                $req_layout[] = $amount_attr;
                $req_layout[] = $tech_price_attr;
                $req_layout[] = array('field' => 'Contract.free_spare_qty', 'label' => '免费备品数', 'class' => 'dup number required', 'default' => $free_spare_qty, 'style' => 'width:110px;');
                $req_layout[] = array('field' => 'Req.invc_prod_name', 'label' => '货物名称', 'type' => 'select', 'options' => $invc_prod_names, 'style' => 'width:120px;', 'class' => 'chz-select dup ' . $invc_prod_name_required);
                $req_layout[] = array('field' => 'Contract.is_has_stock', 'label' => '出库存', 'type' => 'select', 'default' => $is_has_stock_default, 'class' => 'required dup', 'options' => array('0' => __('No'), '1' => __('Yes')), 'style' => 'width:80px;');
                $req_layout[] = array('field' => 'Atom.SW_CIPlus', 'label' => 'CI PLUS功能', 'type' => 'fake_body', 'style' => 'min-width:120px;', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_CIPlus', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Contract.account_cno', 'label' => '客户单号', 'default' => '无', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_mno', 'label' => '客户料号', 'default' => '无', 'class' => 'dup account_mno', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_bno', 'label' => '客户批号', 'default' => '无', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_prod_name', 'label' => '客户机型名称', 'class' => 'dup', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Contract.review_remark', 'label' => '评审备注', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.package_type', 'label' => '包装箱', 'type' => 'select', 'options' => $package_types, 'default' => $package_type_default, 'style' => 'width:80px;', 'class' => 'dup required');
                $req_layout[] = array('field' => 'Contract.account_brand', 'label' => '品牌', 'class' => 'dup', 'style' => 'width:70px;');
                $req_layout[] = array('field' => 'Atom.SW_Authorization', 'label' => '互联网电视牌照', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_Authorization', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_OSsystem', 'label' => 'OS系统', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_OSsystem', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_Browser', 'label' => '浏览器', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_Browser', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_Appstore', 'label' => '应用商店', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_Appstore', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_OtherApplicationSoftware', 'label' => '其它应用软件', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_OtherApplicationSoftware', 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_PowerCurrent', 'label' => '软件占空比及电流值', 'type' => 'fake_body', 'style' => 'width:200px;', 'class' => 'required dup', 'attr' => array('maxNumTags' => 1, 'fake_key' => 'SW_PowerCurrent', 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_Panel', 'label' => '配屏型号', 'type' => 'normal_tags', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_Panel', 'maxNumTags' => 1, 'tagInputClass' => 'sw_panel_auto_complete required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_KeyboardType', 'label' => '按键类型', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_KeyboardType', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_DefaultCountry', 'label' => '默认国家/区域', 'type' => 'fake_body', 'style' => 'min-width:120px;', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_DefaultCountry', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Req.sw_contact_id', 'label' => '软件需求联系人', 'type' => 'select', 'options' => array(), 'style' => 'width:130px;', 'class' => 'dup sw_contact_user');

                // [OCS-701]加入物料订单的两个特殊字段 -- 高频头物料才需要填 by wuhuashan
                // other_board 填 主板代码，其他事业部用于填 配套板卡
                // rel_ebs_order_number 关联订单EBS单号
                $req_layout[] = array('field' => 'Contract.other_board', 'label' => '主板代码', 'class' => 'dup prod_code_auto_comlete', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Contract.rel_ebs_order_number', 'label' => '关联订单EBS单号', 'default' => '', 'class' => 'dup', 'style' => 'width:150px;');

                $req_layout[] = array('field' => 'Req.ext_3rd_party_prods', 'label' => '其他配件', 'type' => 'select', 'options' => array(), 'class' => 'chz-select dup required', 'attr' => array('multiple' => ''), 'style' => 'width:260px;');
                $req_layout[] = array('field' => 'Req.hw_rel_sw_atom_ids', 'label' => '电视制式', 'type' => 'select', 'class' => 'chz-select dup', 'attr' => array('multiple' => ''), 'style' => 'width:160px;');

                $patent_fee_items = array();
                $parent_account_list = array();
                if (!empty($AllParams['Req']['product_id']) && !empty($AllParams['Req']['account_id'])) {
                    $po_result = $g_Patent->getSalesOrderLayoutOpts($AllParams['Req']['product_id'], $AllParams['Req']['account_id']);
                    $patent_fee_items = !empty($po_result['datas']['patent_fee_items']) ? $po_result['datas']['patent_fee_items'] : array();
                    $parent_account_list = !empty($po_result['datas']['parent_account_list']) ? $po_result['datas']['parent_account_list'] : array();
                }
                $req_layout[] = array('field' => 'RelReq.patent_fee_item_ids', 'label' => '专利收费项', 'type' => 'select', 'options' => $patent_fee_items, 'default' => '', 'class' => 'chz-select dup', 'style' => 'width:150px;', 'attr' => array('multiple' => ''));
                $req_layout[] = array('field' => 'RelReq.auth_account_ids', 'label' => '授权客户', 'type' => 'select', 'options' => $parent_account_list, 'default' => '', 'class' => 'chz-select dup', 'style' => 'width:150px;', 'attr' => array('multiple' => ''));
                $req_layout[] = array('field' => 'Atom.SW_ExtendSwAtoms', 'label' => '其它软件项', 'type' => 'fake_body', 'class' => 'dup sw_extend', 'attr' => array('fake_key' => 'SW_ExtendSwAtoms', 'tagInputClass' => 'required form-control',));
                $req_layout[] = array('field' => 'Atom.SW_AmplifierVoltage', 'label' => '功放供电电压', 'type' => 'fake_body', 'class' => 'dup', 'style' => 'min-width:120px;', 'attr' => array('fake_key' => 'SW_AmplifierVoltage', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_ActualPowerAmplifier', 'label' => '实际功放功率', 'type' => 'fake_body', 'class' => 'dup', 'style' => 'min-width:120px;', 'attr' => array('fake_key' => 'SW_ActualPowerAmplifier', 'maxNumTags' => 1, 'tagInputClass' => 'form-control'));
                // $req_layout[] = array('field' => 'Atom.SW_CIPlus', 'label' => 'CI PLUS', 'type' => 'fake_body', 'class' => 'dup ci_plus', 'style' => 'min-width:90px;', 'attr' => array('fake_key' => 'SW_CIPlus', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                // $req_layout[] = array('field' => 'Req.burn_key_store_ids', 'label' => '工厂烧录Key仓库', 'type' => 'burn_key_sel', 'class' => 'dup', 'style' => 'min-width:200px;'); //需要作特殊处;
                $req_layout[] = array('field' => 'Req.remark', 'label' => $remark_label, 'class' => 'dup form-control', 'type' => 'textarea', 'style' => 'width:180px;');
                $req_layout[] = array('field' => 'Req.mf_remark', 'label' => '下生产备注', 'class' => 'dup form-control mf_remark', 'type' => 'textarea', 'style' => 'width:150px;');
                break;

            case OCS_BIZ_TYPE_SCS:
                $req_layout[] = array('field' => 'Req.prod_lock_type', 'label' => '产品锁定类型', 'type' => 'select', 'class' => 'prod_lock_type', 'options' => $ProdLockTypes, 'style' => 'width:110px;');
                $req_layout[] = array('field' => 'Contract.line_type_id', 'label' => '行类型', 'type' => 'select', 'class' => 'line_type_id required dup', 'default' => $line_type_default, 'options' => $line_types, 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Req.product_id', 'label' => '产品', 'class' => 'required product product_auto_comlete dup', 'type' => 'pop_select', 'style' => 'width:250px', 'attr' => array());
                $req_layout[] = array('field' => 'RelReq.quote_line_id', 'label' => '报价单行ID', 'class' => 'hidden');
                $req_layout[] = array('field' => 'View.rel_quote_line', 'type' => 'readonly', 'label' => '关联报价单', 'class' => 'rel-quote-line dup', 'style' => 'width:200px;margin-right:20px;');
                $req_layout[] = array('field' => 'Product.is_ckd', 'label' => 'CKD', 'type' => 'readonly', 'style' => 'width:50px;', 'class' => 'product_ckd', 'attr' => array('disabled' => 'disabled'));
                if (isset($type) && substr_count($type['Type']['name'], '备货')) {
                    $req_layout[] = array('field' => 'RelReq.stock_limit_days', 'label' => '备货有效天数', 'default' => '', 'class' => 'stock_limit_days required number dup', 'style' => 'width:120px;');
                }
                $req_layout[] = array('field' => 'Contract.delivety_time', 'label' => '计划发运日期', 'class' => 'input-datepicker deliver_date required dup', 'style' => 'width:115px;');
                $req_layout[] = array('field' => 'Req.quantity', 'label' => '数量', 'class' => 'number required quantity', 'style' => 'width:70px;');
                $req_layout[] = $price_attr;
                $req_layout[] = $tech_price_attr;
                $req_layout[] = $amount_attr;
                $req_layout[] = array('field' => 'Contract.free_spare_qty', 'label' => '免费备品数', 'class' => 'dup number required', 'default' => $free_spare_qty, 'style' => 'width:110px;');
                $req_layout[] = array('field' => 'Req.invc_prod_name', 'label' => '货物名称', 'type' => 'select', 'options' => $invc_prod_names, 'style' => 'width:120px;', 'class' => 'chz-select dup ' . $invc_prod_name_required);
                $req_layout[] = array('field' => 'Contract.is_has_stock', 'label' => '出库存', 'type' => 'select', 'default' => $is_has_stock_default, 'class' => 'required dup', 'options' => array('0' => __('No'), '1' => __('Yes')), 'style' => 'width:80px;');
                $req_layout[] = array('field' => 'Contract.account_cno', 'label' => '客户单号', 'default' => '无', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_mno', 'label' => '客户料号', 'default' => '无', 'class' => 'dup account_mno', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_bno', 'label' => '客户批号', 'default' => '无', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_brand', 'label' => '品牌', 'class' => 'dup', 'style' => 'width:70px;');
                $req_layout[] = array('field' => 'Contract.account_prod_name', 'label' => '客户机型名称', 'class' => 'dup', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Req.sw_contact_id', 'label' => '软件需求联系人', 'type' => 'select', 'options' => array(), 'style' => 'width:130px;', 'class' => 'dup sw_contact_user');
                $req_layout[] = array('field' => 'Contract.package_type', 'label' => '包装箱', 'type' => 'select', 'options' => $package_types, 'default' => $package_type_default, 'style' => 'width:80px;', 'class' => 'dup required');

                // [OCS-701]加入物料订单的两个特殊字段 -- 高频头物料才需要填 by wuhuashan
                // other_board 填 主板代码，其他事业部用于填 配套板卡
                // rel_ebs_order_number 关联订单EBS单号
                $req_layout[] = array('field' => 'Contract.other_board', 'label' => '主板代码', 'class' => 'dup prod_code_auto_comlete', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Contract.rel_ebs_order_number', 'label' => '关联订单EBS单号', 'default' => '', 'class' => 'dup', 'style' => 'width:150px;');

                $req_layout[] = array('field' => 'Contract.review_remark', 'label' => '评审备注', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Req.ext_3rd_party_prods', 'label' => '其他配件', 'type' => 'select', 'options' => array(), 'class' => 'chz-select dup required', 'attr' => array('multiple' => ''), 'style' => 'width:260px;');
                $req_layout[] = array('field' => 'Req.hw_rel_sw_atom_ids', 'label' => '硬件关联软件选项', 'type' => 'select', 'class' => 'chz-select dup', 'attr' => array('multiple' => ''), 'style' => 'width:160px;');
                $req_layout[] = array('field' => 'Atom.SW_SCS_PowerCurrent', 'label' => '软件占空比及电流值', 'type' => 'fake_body', 'style' => 'width:200px;', 'class' => 'required dup', 'attr' => array('maxNumTags' => 1, 'fake_key' => 'SW_SCS_PowerCurrent', 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_SCS_ExtendSwAtoms', 'label' => '其它软件项', 'type' => 'fake_body', 'class' => 'dup sw_extend', 'attr' => array('fake_key' => 'SW_ExtendSwAtoms', 'tagInputClass' => 'required form-control',));
                $req_layout[] = array('field' => 'Atom.SW_SCS_AmplifierVoltage', 'label' => '功放供电电压', 'type' => 'fake_body', 'class' => 'dup', 'style' => 'min-width:120px;', 'attr' => array('fake_key' => 'SW_SCS_AmplifierVoltage', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_SCS_Authorization', 'label' => '互联网电视牌照', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_SCS_Authorization', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_SCS_OSsystem', 'label' => 'OS系统', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_SCS_OSsystem', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_SCS_Browser', 'label' => '浏览器', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_SCS_Browser', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_SCS_Appstore', 'label' => '应用商店', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_SCS_Appstore', 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_SCS_OtherApplicationSoftware', 'label' => '其它应用软件', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_SCS_OtherApplicationSoftware', 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_SCS_Panel', 'label' => '配屏型号', 'type' => 'normal_tags', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_SCS_Panel', 'maxNumTags' => 1, 'tagInputClass' => 'sw_panel_auto_complete required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_SCS_KeyboardType', 'label' => '按键类型', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_SCS_KeyboardType', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_SCS_DefaultCountry', 'label' => '默认国家/区域', 'type' => 'fake_body', 'style' => 'min-width:120px;', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_SCS_DefaultCountry', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Atom.SW_SCS_CIPlus', 'label' => 'CI PLUS功能', 'type' => 'fake_body', 'style' => 'min-width:120px;', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_SCS_CIPlus', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                // $req_layout[] = array('field' => 'Atom.SW_SCS_CIPlus', 'label' => 'CI PLUS', 'type' => 'fake_body', 'class' => 'dup ci_plus', 'style' => 'min-width:90px;', 'attr' => array('fake_key' => 'SW_SCS_CIPlus', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                // $req_layout[] = array('field' => 'Req.burn_key_store_ids', 'label' => '工厂烧录Key仓库', 'type' => 'burn_key_sel', 'class' => 'dup', 'style' => 'min-width:200px;'); //需要作特殊处;
                $req_layout[] = array('field' => 'Req.remark', 'label' => $remark_label, 'class' => 'dup form-control', 'type' => 'textarea', 'style' => 'width:180px;');
                $req_layout[] = array('field' => 'Req.mf_remark', 'label' => '下生产备注', 'class' => 'dup form-control mf_remark', 'type' => 'textarea', 'style' => 'width:150px;');

                break;
            case OCS_BIZ_TYPE_PS:

                $product_usage = $g_Enum->getEnumListByDictName('RelReq.product_usage'); // 【OCS-1654】 产品名称 暂时只有电源用
                $req_layout[] = array('field' => 'Contract.line_type_id', 'label' => '行类型', 'type' => 'select', 'class' => 'line_type_id required dup', 'options' => $line_types, 'style' => 'width:140px;');
                $req_layout[] = array('field' => 'Req.product_id', 'label' => '产品', 'class' => 'required product product_auto_comlete dup', 'type' => 'pop_select', 'style' => 'width:250px', 'attr' => array());
                $req_layout[] = array('field' => 'RelReq.quote_line_id', 'label' => '报价单行ID', 'class' => 'hidden');
                $req_layout[] = array('field' => 'View.rel_quote_line', 'type' => 'readonly', 'label' => '关联报价单', 'class' => 'rel-quote-line dup', 'style' => 'width:200px;margin-right:20px;');
                $req_layout[] = array('field' => 'Product.is_ckd', 'label' => 'CKD', 'type' => 'readonly', 'style' => 'width:50px;', 'class' => 'product_ckd', 'attr' => array('disabled' => 'disabled'));
                $req_layout[] = array('field' => 'Contract.delivety_time', 'label' => '交货日期', 'class' => 'input-datepicker deliver_date required dup', 'style' => 'width:95px;');
                $req_layout[] = array('field' => 'Req.quantity', 'label' => '数量', 'class' => 'number required quantity', 'style' => 'width:70px;');
                $req_layout[] = $price_attr;
                $req_layout[] = $tech_price_attr;
                $req_layout[] = $amount_attr;
                $req_layout[] = array('field' => 'Contract.free_spare_qty', 'label' => '免费备品数', 'class' => 'dup number required', 'default' => $free_spare_qty, 'style' => 'width:110px;');
                $req_layout[] = array('field' => 'Req.invc_prod_name', 'label' => '货物名称', 'type' => 'select', 'options' => $invc_prod_names, 'style' => 'width:120px;', 'class' => 'chz-select dup ' . $invc_prod_name_required);
                $req_layout[] = array('field' => 'RelReq.product_usage', 'label' => '产品用途', 'type' => 'select', 'options' => $product_usage, 'style' => 'width:120px;', 'class' => 'chz-select dup required');
                $req_layout[] = array('field' => 'Contract.is_has_stock', 'label' => '出库存', 'type' => 'select', 'default' => $is_has_stock_default, 'class' => 'required dup', 'options' => array('0' => __('No'), '1' => __('Yes')), 'style' => 'width:80px;');
                $req_layout[] = array('field' => 'Contract.account_cno', 'label' => '客户单号', 'default' => '无', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_mno', 'label' => '客户料号', 'default' => '无', 'class' => 'dup account_mno', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_bno', 'label' => '客户批号', 'default' => '无', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_brand', 'label' => '品牌', 'class' => 'dup', 'style' => 'width:70px;');
                $req_layout[] = array('field' => 'Contract.account_prod_name', 'label' => '客户机型名称', 'class' => 'dup', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Contract.package_type', 'label' => '包装箱', 'type' => 'select', 'options' => $package_types, 'default' => $package_type_default, 'style' => 'width:80px;', 'class' => 'dup required');
                $req_layout[] = array('field' => 'Req.ext_3rd_party_prods', 'label' => '其他配件', 'type' => 'select', 'options' => array(), 'class' => 'chz-select dup required', 'attr' => array('multiple' => ''), 'style' => 'width:260px;');
                $req_layout[] = array('field' => 'Req.hw_rel_sw_atom_ids', 'label' => '硬件关联软件选项', 'type' => 'select', 'class' => 'chz-select dup', 'attr' => array('multiple' => ''), 'style' => 'width:160px;');
                $req_layout[] = array('field' => 'Req.remark', 'label' => $remark_label, 'class' => 'dup form-control', 'type' => 'textarea', 'style' => 'width:180px;');
                $req_layout[] = array('field' => 'Req.mf_remark', 'label' => '下生产备注', 'class' => 'dup form-control mf_remark', 'type' => 'textarea', 'style' => 'width:150px;');
                break;
            case OCS_BIZ_TYPE_MID:
                if (OCS_BIZ_TYPE_MID == $g_BizId) {
                    $Atom_Country = 'SW_MID_DefaultCountry';
                    $Atom_BurnReqs = 'SW_MID_BurnReqs';
                }
            case OCS_BIZ_TYPE_ISH:
                if (OCS_BIZ_TYPE_ISH == $g_BizId) {
                    $Atom_Country = 'SW_ISH_DefaultCountry';
                }
            case OCS_BIZ_TYPE_STB:
                if (OCS_BIZ_TYPE_STB == $g_BizId) {
                    $Atom_Country = 'SW_STB_DefaultCountry';
                }
            case OCS_BIZ_TYPE_CE:
                if (OCS_BIZ_TYPE_CE == $g_BizId) {
                    $Atom_Country = 'SW_CE_DefaultCountry';
                    $Atom_BurnReqs = 'SW_CE_BurnReqs';
                }
            case OCS_BIZ_TYPE_TAD:
                if (OCS_BIZ_TYPE_TAD == $g_BizId) {
                    $Atom_Country = 'SW_TAD_DefaultCountry';
                }
            case OCS_BIZ_TYPE_AE:
                if (OCS_BIZ_TYPE_AE == $g_BizId) {
                    $Atom_Country = 'SW_AE_DefaultCountry';
                }
                    // array('field' => 'Req.prod_lock_type', 'label' => '产品锁定类型', 'type' => 'select', 'class' => 'prod_lock_type', 'options' => $ProdLockTypes, 'style' => 'width:110px;'),
                $req_layout[] = array('field' => 'Contract.line_type_id', 'label' => '行类型', 'type' => 'select', 'default' => $line_type_default, 'class' => 'line_type_id required dup', 'options' => $line_types, 'style' => 'width:140px;');
                    //其他事业部：删除是否物料需求字段 2014 11 11
                    //array('field' => 'Contract.is_board_ship', 'label' => '是否物料需求', 'type' => 'select', 'class' => 'is_board_ship required dup', 'options' => $is_or_not, 'style' => 'width:110px;'),
                $req_layout[] = array('field' => 'Req.product_id', 'label' => '产品', 'class' => 'required product product_auto_comlete dup', 'type' => 'pop_select', 'style' => 'width:250px', 'attr' => array());
                $req_layout[] = array('field' => 'Product.is_ckd', 'label' => 'CKD', 'type' => 'readonly', 'style' => 'width:50px;', 'class' => 'product_ckd', 'attr' => array('disabled' => 'disabled'));
                $req_layout[] = array('field' => 'Contract.is_protective_tariff', 'label' => '是否保税', 'type' => 'readonly', 'class' => 'is_protective_tariff', 'style' => 'width:60px;', 'attr' => array('disabled' => 'disabled'));
                $req_layout[] = array('field' => 'Contract.delivety_time', 'label' => '交货日期', 'class' => 'input-datepicker deliver_date required dup', 'style' => 'width:95px;');
                $req_layout[] = array('field' => 'Req.quantity', 'label' => '数量', 'class' => 'number required quantity', 'style' => 'width:70px;');
                $req_layout[] = $price_attr;
                    // $tech_price_attr;
                $req_layout[] = $amount_attr;
                $req_layout[] = array('field' => 'Contract.free_spare_qty', 'label' => '免费备品数', 'class' => 'dup number', 'style' => 'width:110px;');
                $req_layout[] = array('field' => 'Req.invc_prod_name', 'label' => '货物名称', 'type' => 'select', 'options' => $invc_prod_names, 'style' => 'width:120px;', 'class' => 'chz-select dup ' . $invc_prod_name_required);
                $req_layout[] = array('field' => 'Contract.is_has_stock', 'label' => '出库存', 'type' => 'select', 'default' => '', 'class' => 'required dup', 'options' => array('0' => __('No'), '1' => __('Yes')), 'style' => 'width:80px;');
                $req_layout[] = array('field' => 'Contract.account_cno', 'label' => '客户单号', 'default' => '无', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_mno', 'label' => '客户料号', 'default' => '无', 'class' => 'dup account_mno', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_bno', 'label' => '客户批号', 'default' => '无', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_brand', 'label' => '品牌', 'class' => 'dup', 'style' => 'width:70px;');
                $req_layout[] = array('field' => 'Contract.account_prod_name', 'label' => '客户机型名称', 'class' => 'dup', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Contract.package_type', 'label' => '包装箱', 'type' => 'select', 'options' => $package_types, 'default' => $package_type_default, 'style' => 'width:80px;', 'class' => 'dup');
                $req_layout[] = array('field' => 'Contract.review_remark', 'label' => '评审备注', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.pi_remark', 'label' => 'PI描述', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.pi_note', 'label' => 'PI备注', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Atom.SW_ExtendSwAtoms', 'label' => '其它软件项', 'type' => 'fake_body', 'class' => 'dup sw_extend', 'attr' => array('fake_key' => 'SW_ExtendSwAtoms', 'tagInputClass' => 'required form-control',));

                if (OCS_BIZ_TYPE_STB == $g_BizId) {
                    // $req_layout[] = array('field' => 'Atom.SW_STB_Authorization', 'label' => '互联网电视牌照', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_STB_Authorization', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                    // $req_layout[] = array('field' => 'Atom.SW_STB_OSsystem', 'label' => 'OS系统', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_STB_OSsystem', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                    // $req_layout[] = array('field' => 'Atom.SW_STB_Browser', 'label' => '浏览器', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_STB_Browser', 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                    $req_layout[] = array('field' => 'Atom.SW_STB_Appstore', 'label' => '应用商店', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_STB_Appstore', 'tagInputClass' => 'required form-control'));
                    $req_layout[] = array('field' => 'Atom.SW_STB_OtherApplicationSoftware', 'label' => '其它应用软件', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => 'SW_STB_OtherApplicationSoftware', 'tagInputClass' => 'required form-control'));
                }

                $req_layout[] = array('field' => 'Atom.' . $Atom_Country, 'label' => '默认国家/区域', 'type' => 'fake_body', 'style' => 'min-width:120px;', 'class' => 'required dup', 'attr' => array('fake_key' => $Atom_Country, 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                $req_layout[] = array('field' => 'Contract.other_board', 'label' => '配套板卡', 'class' => 'dup', 'type' => 'textarea', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Contract.sw_req_info', 'label' => '软件需求', 'class' => 'dup', 'type' => 'textarea', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Req.remark', 'label' => $remark_label, 'class' => 'dup form-control', 'type' => 'textarea', 'style' => 'width:180px;');
                $req_layout[] = array('field' => 'Req.mf_remark', 'label' => '下生产备注', 'class' => 'dup form-control mf_remark', 'type' => 'textarea', 'style' => 'width:150px;');
                // 烧录需求
                if (isset($Atom_BurnReqs) && !empty($Atom_BurnReqs)) {
                    $req_layout[] = array('field' => 'Atom.'.$Atom_BurnReqs, 'label' => '烧录需求', 'type' => 'fake_body', 'class' => 'required dup', 'attr' => array('fake_key' => $Atom_BurnReqs, 'tagInputClass' => 'required form-control'));
                }
                break;
            default:
                $req_layout[] = array('field' => 'Contract.line_type_id', 'label' => '行类型', 'type' => 'select', 'default' => $line_type_default, 'class' => 'line_type_id required dup', 'options' => $line_types, 'style' => 'width:140px;');
                    //其他事业部：删除是否物料需求字段 2014 11 11
                    //array('field' => 'Contract.is_board_ship', 'label' => '是否物料需求', 'type' => 'select', 'class' => 'is_board_ship required dup', 'options' => $is_or_not, 'style' => 'width:110px;'),
                $req_layout[] = array('field' => 'Req.product_id', 'label' => '产品', 'class' => 'required product product_auto_comlete dup', 'type' => 'pop_select', 'style' => 'width:250px', 'attr' => array());
                $req_layout[] = array('field' => 'Product.is_ckd', 'label' => 'CKD', 'type' => 'readonly', 'style' => 'width:50px;', 'class' => 'product_ckd', 'attr' => array('disabled' => 'disabled'));
                $req_layout[] = array('field' => 'Contract.is_protective_tariff', 'label' => '是否保税', 'type' => 'readonly', 'class' => 'is_protective_tariff', 'style' => 'width:60px;', 'attr' => array('disabled' => 'disabled'));
                $req_layout[] = array('field' => 'Contract.delivety_time', 'label' => '交货日期', 'class' => 'input-datepicker deliver_date required dup', 'style' => 'width:95px;');
                $req_layout[] = array('field' => 'Req.quantity', 'label' => '数量', 'class' => 'number required quantity', 'style' => 'width:70px;');
                $req_layout[] = $price_attr;
                    // $tech_price_attr;
                $req_layout[] = $amount_attr;
                $req_layout[] = array('field' => 'Contract.free_spare_qty', 'label' => '免费备品数', 'class' => 'dup number', 'style' => 'width:110px;');
                $req_layout[] = array('field' => 'Req.invc_prod_name', 'label' => '货物名称', 'type' => 'select', 'options' => $invc_prod_names, 'style' => 'width:120px;', 'class' => 'chz-select dup ' . $invc_prod_name_required);
                $req_layout[] = array('field' => 'Contract.is_has_stock', 'label' => '出库存', 'type' => 'select', 'default' => '', 'class' => 'required dup', 'options' => array('0' => __('No'), '1' => __('Yes')), 'style' => 'width:80px;');
                $req_layout[] = array('field' => 'Contract.account_cno', 'label' => '客户单号', 'default' => '无', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_mno', 'label' => '客户料号', 'default' => '无', 'class' => 'dup account_mno', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_bno', 'label' => '客户批号', 'default' => '无', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.account_brand', 'label' => '品牌', 'class' => 'dup', 'style' => 'width:70px;');
                $req_layout[] = array('field' => 'Contract.account_prod_name', 'label' => '客户机型名称', 'class' => 'dup', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Contract.package_type', 'label' => '包装箱', 'type' => 'select', 'options' => $package_types, 'default' => $package_type_default, 'style' => 'width:80px;', 'class' => 'dup');
                $req_layout[] = array('field' => 'Contract.review_remark', 'label' => '评审备注', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.pi_remark', 'label' => 'PI描述', 'class' => 'dup', 'style' => 'width:120px;');
                $req_layout[] = array('field' => 'Contract.pi_note', 'label' => 'PI备注', 'class' => 'dup', 'style' => 'width:120px;');

                if (!empty($Atom_Country)) {
                    $req_layout[] = array('field' => 'Atom.' . $Atom_Country, 'label' => '默认国家/区域', 'type' => 'fake_body', 'style' => 'min-width:120px;', 'class' => 'required dup', 'attr' => array('fake_key' => $Atom_Country, 'maxNumTags' => 1, 'tagInputClass' => 'required form-control'));
                }
                $req_layout[] = array('field' => 'Contract.other_board', 'label' => '配套板卡', 'class' => 'dup', 'type' => 'textarea', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Contract.sw_req_info', 'label' => '软件需求', 'class' => 'dup', 'type' => 'textarea', 'style' => 'width:150px;');
                $req_layout[] = array('field' => 'Req.remark', 'label' => $remark_label, 'class' => 'dup form-control', 'type' => 'textarea', 'style' => 'width:180px;');
                $req_layout[] = array('field' => 'Req.mf_remark', 'label' => '下生产备注', 'class' => 'dup form-control mf_remark', 'type' => 'textarea', 'style' => 'width:150px;');
                break;
        }

        //确保layout里有设置这些key
        $attr_keys = array('type', 'class', 'style', 'attr', 'default');
        if (!empty($req_layout)) {
            foreach ($req_layout as $idx => $temp) {
                foreach ($attr_keys as $attr) {
                    if (!isset($temp[$attr])) {
                        $temp[$attr] = '';
                    }
                }
                $result[$temp['field']] = $temp;
            }
        }
        return $result;
    }

    //设置订单各字段的默认值
    function setReqLayoutDefaultValue($layout = array(), $data, $AllParams) {
        global $g_Commons;
        global $g_BizId;
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_Contacts = $g_Commons->GlobalController('Contacts');
        $g_ReqRelObj = $g_Commons->GlobalModel('ReqRelObj');
        $g_ReqRelObj->recursive = -1;

        if (empty($layout)) {
            return $layout;
        }
        if (isset($data['Req']['sw_atom_ids_json'])) {
            $SwAtoms = $g_ProdAttrs->getSwAttrsAtoms($data['Req']['sw_atom_ids_json']);
        }

        //获取与产品相关的信息（其他配件、硬件关联软件项）
        if (isset($data['Req']['product_id'])) {
            $product_id = is_array($data['Req']['product_id']) ? $data['Req']['product_id']['value'] : $data['Req']['product_id'];
            $RelProductInfos = $this->Req->getRelProductDatas($product_id);
        }

        //与此客户相关的软件需求联系人
        if (isset($data['Req']['account_id']['value'])) {
            $Contacts = $g_Contacts->Contact->find('list', array('conditions' => array('Contact.account_id' => $data['Req']['account_id']['value'], 'Contact.is_sw_confirmer' => 1)));
        }

        //emptyfields，表示这些字段在批量复制新建时，初始化时需要要重新设置为0
        $emptyFields = array('Req.quantity', 'Req.price', 'Req.foreign_price', 'Req.amount', 'Req.foreign_amount', 'Contract.tech_price', 'Contract.free_spare_qty', 'Contract.is_has_stock');

        //OCS-369 复制新订单时自动清空应用授权信息 add by ziying 2015-9-6
        $clear_app_authorization = array('SW_Authorization','SW_OSsystem','SW_Browser','SW_Appstore','SW_OtherApplicationSoftware');

        $is_import = isset($AllParams['P']['entry_type']) && 'import' == $AllParams['P']['entry_type'];
        foreach ($layout as $idx => $temp) {
            $fields = explode('.', $temp['field']);
            $model = $fields[0];
            $field = $fields[1];
            if ('Atom' == $model) {//软件属性
                if (isset($SwAtoms[$field])) {
                    $temp['default'] = explode(',', $SwAtoms[$field]);
                }
                if (in_array($field, $clear_app_authorization) && 'add' == $AllParams['P']['action'] && !$is_import) { //复制新建订单时，这些属性不复制
                    $temp['default'] = '';
                }
                $layout[$idx] = $temp;
                continue;
            }
            if (!isset($data[$model][$field])) {
                continue;
            }
            if ('Req.ext_3rd_party_prods' == $temp['field'] && isset($RelProductInfos['Widget'])) {
                $temp['options'] = $RelProductInfos['Widget'];
                if (empty($temp['options'])) {
                    $temp['options']['无'] = '无';
                }
            }
            if ('Req.hw_rel_sw_atom_ids' == $temp['field'] && isset($RelProductInfos['hw_rel_sw_atoms'])) {
                $temp['options'] = $RelProductInfos['hw_rel_sw_atoms'];
            }
            if ('Req.sw_contact_id' == $temp['field'] && !empty($Contacts)) {
                $temp['options'] = $Contacts;
            }
            $temp['default'] = $data[$model][$field];
            if ('add' == $AllParams['P']['action'] && in_array($temp['field'], $emptyFields)
                && !isset($AllParams['P']['entry_type']) && !$is_import) {
                $temp['default'] = 0;
                if ('Contract.is_has_stock' == $temp['field']) {
                    $temp['default'] = '';
                }
            }
            $layout[$idx] = $temp;
        }
        return $layout;
    }

    //设置订单分组字段信息
    function setGroupTags() {
        global $g_BizId;
        global $g_Commons;
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');
        $GroupTags = array(
            array(
                'label' => '客户信息',
                'fields' => array(
                    'Req-product_id',
                    'Contract-account_cno',
                    'Contract-account_mno',
                    'Contract-account_bno',
                    'Contract-account_prod_name',
                ),
            ),
            array(
                'label' => '基本信息',
                'fields' => array(
                    'Contract-delivety_time',
                    'Req-quantity',
                    'Req-price',
                    'Req-foreign_price',
                    'Contract-tech_price',
                    'Req-amount',
                    'Req-foreign_amount',
                    'Contract-free_spare_qty',
                    'Req-invc_prod_name',
                    'Product-is_ckd',
                    'Req-is_common_or_custom',
                    'Req-is_recommend_main',
                    'Contract-is_has_stock',
                    'Atom-SW_CIPlus',
                    'Req-burn_key_store_ids',
                ),
            ),
            array(
                'label' => '技术信息',
                'fields' => array(
                    'Req-sw_contact_id',
                    'Atom-SW_DefaultCountry',
                    'Atom-SW_Panel',
                    'Atom-SW_AmplifierVoltage',
                    'Atom-SW_ExtendSwAtoms',
                    'Atom-SW_PowerCurrent',
                    'Atom-SW_KeyboardType',
                    'Req-hw_rel_sw_atom_ids',
                    'Req-ext_3rd_party_prods',
                    'Req-remark',
                ),
            ),
            array(
                'label' => '研发订单',
                'fields' => array(
                    'Contract-is_try_produce',
                    'Req-product_id',
                    'Contract-delivety_time',
                    'Req-quantity',
                    'Req-invc_prod_name',
                    'Req-ext_3rd_party_prods',
                    'Atom-SW_DefaultCountry',
                    'Atom-SW_Panel',
                    'Atom-SW_AmplifierVoltage',
                    'Atom-SW_ExtendSwAtoms',
                    'Atom-SW_PowerCurrent',
                    'Atom-SW_KeyboardType',
                    'Atom-SW_Authorization',
                    'Atom-SW_OSsystem',
                    'Atom-SW_Browser',
                    'Atom-SW_Appstore',
                    'Atom-SW_OtherApplicationSoftware',
                    'Atom-SW_CIPlus',
                    'Req-mf_remark',
                    'Req-hw_rel_sw_atom_ids',
                    'Contract-is_has_stock',
                    'Req-remark',
                ),
            ),
            array(
                'label' => '物料订单',
                'fields' => array(
                    'Contract-is_try_produce',
                    'Contract-line_type_id',
                    'Req-product_id',
                    'Contract-account_cno',
                    'Contract-account_mno',
                    'Contract-account_bno',
                    'Contract-account_prod_name',
                    'Contract-delivety_time',
                    'Req-quantity',
                    'Req-price',
                    'Req-foreign_price',
                    'Contract-tech_price',
                    'Req-amount',
                    'Req-foreign_amount',
                    'Contract-free_spare_qty',
                    'Req-invc_prod_name',
                    'Product-is_ckd',
                    'Req-is_common_or_custom',
                    'Req-is_recommend_main',
                    'Contract-is_has_stock',
                    'Contract-package_type',
                    'Contract-account_prod_name',
                    'Atom-SW_AmplifierVoltage',
                    'Req-remark',
                    'Req-mf_remark',
                    'Contract-other_board',
                    'Req-hw_rel_sw_atom_ids',
                    'Contract-rel_ebs_order_number',
                ),
            ),
            array(
                'label' => '购物车订单',
                'fields' => array(
                    'View-lot_number',
                    'View-ebs_order_number',
                    'View-line_number',
                    // 'View-total_qoh',
                    'View-available_stock_qty',
                    // //'View-reserve_quantity',
                    'View-available_reserve_qty',
                    'View-cart_quantity',
                    'View-rel_quote_line',
                    'RelReq-quote_line_id',
                    'Contract-line_type_id',
                    // 'View-stock_type',
                    'Atom-SW_OSsystem',
                    'Atom-SW_Authorization',
                    // 'Atom-SW_DefaultCountry',
                    'Req-product_id',
                    'Contract-account_cno',
                    'Contract-account_mno',
                    'Contract-delivety_time',
                    'Req-quantity',
                    'Req-price',
                    'Req-foreign_price',
                    'Req-amount',
                    'Req-foreign_amount',
                    'Req-invc_prod_name',
                    'Product-is_ckd',
                    'Req-is_common_or_custom',
                    'Atom-SW_AmplifierVoltage',
                    'Req-is_recommend_main',
                    'Contract-is_has_stock',
                    'Req-hw_rel_sw_atom_ids',
                    //'Req-remark',
                    'Req-mf_remark',
                ),
            ),
            array(
                'label' => '其他信息',
                'fields' => array(
                    'Contract-is_try_produce',
                    'Contract-package_type',
                    'Contract-review_remark',
                    'Req-mf_remark',
                ),
            ),
            array(
                'label' => '备货信息',
                'fields' => array(
                    'Req-stock_account_id',
                    'Req-product_id',
                    'Product-is_ckd',
                    'Req-is_common_or_custom',
                    'Req-is_recommend_main',
                    'Contract-delivety_time',
                    'RelReq-stock_limit_days',
                    'Req-quantity',
                    'Req-price',
                    'Req-foreign_price',
                    'Contract-tech_price',
                    'Req-amount',
                    'Atom-SW_DefaultCountry',
                    'Atom-SW_Panel',
                    'Atom-SW_PowerCurrent',
                    'Atom-SW_KeyboardType',
                    'Atom-SW_Authorization',
                    'Atom-SW_OSsystem',
                    'Atom-SW_Browser',
                    'Atom-SW_Appstore',
                    'Atom-SW_OtherApplicationSoftware',
                    'Atom-SW_AmplifierVoltage',
                    'Req-foreign_amount',
                    'Contract-free_spare_qty',
                    'Contract-is_has_stock',
                    'Contract-account_cno',
                    'Contract-account_mno',
                    'Contract-package_type',
                    'Req-hw_rel_sw_atom_ids',
                    'Req-remark',
                ),
            ),
        );

        switch ($g_BizId) {
            case OCS_BIZ_TYPE_TV:
                $GroupTags = $GroupTags;
            break;
            default:
                //非TV事业部，通过属性别名命名来查找对应属性，如果未找到，则使用原来的
                foreach ($GroupTags as $idx => $tag) {
                    foreach ($tag['fields'] as $key => $dic) {
                        if (preg_match('/^Atom\-.*/', $dic)) {
                            list($model, $alias) = explode('-', $dic);
                            $alias = str_replace('SW_', '', $alias);
                            $prod_attr = $g_ProdAttr->find('first', array(
                                'conditions' => array(
                                    'ProdAttr.biz_id' => $g_BizId,
                                    'ProdAttr.alias LIKE' => '%' . $alias,
                                ),
                                'fields' => array(
                                    'ProdAttr.alias',
                                )
                            ));
                            if (!empty($prod_attr)) {
                                $rel_alias = $prod_attr['ProdAttr']['alias'];
                                $tag['fields'][$key] = 'Atom-' . $rel_alias;
                            }
                        }
                    }
                    $GroupTags[$idx] = $tag;
                }
            break;
        }
        return $GroupTags;
    }

    //设置非必填字段
    function setInvalidFields($layout = array(), $type = null) {
        if (empty($layout)) {
            return $layout;
        }
        switch ($type) {
            case 'material'://物料订单
            case 'cart'://购物车
                foreach ($layout as $idx => $temp) {
                    if ('fake_body' == $temp['type'] || 'normal_tags' == $temp['type']) {
                        if ('cart' == $type && in_array($temp['field'], array('Atom.SW_OSsystem', 'Atom.SW_Authorization'))) {
                            continue;
                        }
                        $temp['class'] = preg_replace('/required/', '', $temp['class']);
                    }
                    if ('cart' == $type && in_array($temp['field'], array('Contract.tech_price'))) {
                        $temp['class'] = preg_replace('/required/', '', $temp['class']);
                    }
                    $layout[$idx] = $temp;
                }
                break;
            default:break;
        }
        return $layout;
    }

    //设置保留相关字段
    function getReserveFieldsValue($data = array()) {
        $result = array();
        $result['type'] = $data['STOCK_TYPE'];
        $result['reserve_id'] = $data['RESERVATION_ID'];
        $result['available_stock_qty'] = isset($data['available_stock_qty']) ? $data['available_stock_qty'] : null;
        $result['available_reserve_qty'] = isset($data['available_reserve_qty']) ? $data['available_reserve_qty'] : null;
        $result['organization_id'] = $data['ORGANIZATION_ID'];
        $result['inventory_item_id'] = $data['INVENTORY_ITEM_ID'];
        $result['primary_uom_code'] = $data['PRIMARY_UOM_CODE'];
        $result['supply_source_type_id'] = $data['SUPPLY_SOURCE_TYPE_ID'];
        $result['subinventory_code'] = $data['SUBINVENTORY_CODE'];
        $result['locator_id'] = $data['LOCATOR_ID'];
        $result['lot_number'] = $data['LOT_NUMBER'];
        $result['wip_entity_id'] = $data['WIP_ENTITY_ID'];
        $result['batch_no'] = $data['LOT_NUMBER'];
        $result['ebs_order_number'] = $data['ORDER_NUMBER'];
        $result['header_id'] = $data['ORDER_HEADER_ID'];
        $result['line_id'] = $data['ORDER_LINE_ID'];
        $result['line_number'] = $data['LINE_NAME'];
        return $result;
    }

    //购物车订单，新建订单前需先选择订单类型
    function pop_select_order_type_before_new_req() {
        global $g_Commons;
        global $g_UserId;
        global $g_BizName;

        $this->set('title_for_layout', '购物车订单选择订单类型');

        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_Enum->recursive = -1;

        //库存组织与购物车订单类型映射关系
        $organizations = $g_Enum->find('all', array(
            'conditions' => array(
                'Enum.dict_name' => 'Ebs.organization',
            ),
            'fields' => array('Enum.value','Enum.label')
        ));
        $organization_rel_order_types = array();
        foreach ($organizations as $enum){
            $organization_label = $enum['Enum']['label'];
            $organization_id = $enum['Enum']['value'];
            switch ($organization_label) {
                case 'SY': //TV
                    $tv_order_type = $g_Enum->find('first', array(
                        'conditions' => array(
                            'Enum.dict_name' => 'Ebs.order_type',
                            'Enum.label' => 'SY-BT3' //默认
                        ),
                        'fields' => array('Enum.value')
                    ));
                    $organization_rel_order_types[$organization_id] = $tv_order_type['Enum']['value'];
                    break;
                case 'RE': //RE
                    $order_type_codes = $g_Enum->find('list', array(
                        'conditions' => array(
                            'Enum.dict_name' => 'Ebs.order_type',
                            'Enum.label' => array('RE-智能音频')
                        ),
                        'fields' => array('Enum.value')
                    ));
                    $organization_rel_order_types[$organization_id] = $order_type_codes;
                    break;
            }
        }
        $all_params = $g_Commons->getUrlParams($this->params->params);

        if ($this->Session->check('Auth.Req.Reserve.' . $g_UserId)) {
            $Cart = $this->Session->read('Auth.Req.Reserve.' . $g_UserId);
            $organization_id = 0;
            foreach ($Cart as $temp) {
                if (0 != $organization_id && $organization_id != $temp['ORGANIZATION_ID']) {
                    $this->set('set_flash', 1);
                    $this->Session->setFlash('不同库存组织的库存，请分别创建订单');
                    return;
                }
                $organization_id = $temp['ORGANIZATION_ID'];
            }
            if (!isset($organization_rel_order_types[$organization_id])) {
                $this->set('set_flash', 1);
                $this->Session->setFlash('该库存组织未设置映射关系，不能创建订单');
                return;
            }
            if (!is_array($organization_rel_order_types[$organization_id]) || 1 == count($organization_rel_order_types[$organization_id])) {//只有一个订单类型，则直接跳转
                if (!is_array($organization_rel_order_types[$organization_id])) {
                    $order_type_code = $organization_rel_order_types[$organization_id];
                } else {
                    foreach ($organization_rel_order_types[$organization_id] as $order_type) {
                        $order_type_code = $order_type;
                    }
                }
                $all_params['P']['order_type'] = $order_type_code;

                $url_params = $g_Commons->getUrlParamsStr($all_params);
                $redirect_url = array(BizMark => $g_BizName,'action' => 'new_ebs_reqs/' . $url_params);
                $this->redirect($redirect_url);
            } else { //对应多个订单类型，则需先选择订单类型
                $order_types = $g_Enum->find('list', array(
                    'conditions' => array(
                        'Enum.dict_name' => 'Ebs.order_type',
                        'Enum.value' => $organization_rel_order_types[$organization_id]
                    ),
                    'fields' => array('Enum.value','Enum.label')
                ));
                $this->set('order_types', $order_types);
            }
        } else {
            $this->set('set_flash', 1);
            $this->Session->setFlash('购物车为空，请先将库存订单加入购物车。');
            return;
        }

        //选择对应订单类型后，跳转至新建订单界面
        if ($this->request->is('post') && !empty($this->request->data)) {
            $order_type = $this->request->data['order_type'];
            $all_params['P']['order_type'] = $order_type;

            $url_params = $g_Commons->getUrlParamsStr($all_params);
            $redirect_url = array(BizMark => $g_BizName,'action' => 'new_ebs_reqs/' . $url_params);
            $this->redirect($redirect_url);
        }
    }

    //EBS订单录入
    function pop_new_ebs_reqs() {
        global $g_Commons;
        global $g_BizId;
        global $g_Order_Type_USD;
        global $g_WebServices;
        global $g_UserId;
        $g_WebServices->OCS_get_ws_client_config();
        global $globalEBSWebServiceUrls;

        $this->layout = 'newworld';
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Contact = $g_Commons->GlobalModel('Contact');
        $g_Currency = $g_Commons->GlobalModel('Currency');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_ReserveRelReq = $g_Commons->GlobalModel('ReserveRelReq');
        $g_StockApplyHeader = $g_Commons->GlobalModel('StockApplyHeader');
        $g_Type = $g_Commons->GlobalModel('Type');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AccountAddresses = $g_Commons->GlobalController('AccountAddresses');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $g_ReqVersion = $g_Commons->GlobalModel('ReqVersion');
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_Products->Product->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);
        $Action = $AllParams['P']['action'];
        $this->set('Action', $Action);

        $this->Req->recursive = -1;
        $this->set('title_for_layout', '订单录入');
        $ReqType = 0;
        $EntryType = null; //入口类型
        $CurrencyType = isset($AllParams['P']['currency_type']) ? $AllParams['P']['currency_type'] : OCS_CURRENCY_RMB; //货币类型
        $this->set('CurrencyType', $CurrencyType);
        $AllOrderTypes = $g_Type->find('list', array(
            'conditions' => array('Type.model_def_id' => Contract, 'Type.biz_id' => $g_BizId),
            'fields' => array('Type.code', 'Type.name')
        ));
        $this->set('AllOrderTypes', $AllOrderTypes);

        $ship_from_org_ids = $g_Enum->find('all', array(
            'conditions' => array(
                'Enum.dict_name' => 'Ebs.organization',
            ),
            'fields' => 'value, alias, label'
        ));
        // $ShipFromOrgIds = array();
        $OrgIdMaping = array();
        foreach ($ship_from_org_ids as $ship_org) {
            // $ShipFromOrgIds[$ship_org['Enum']['value']] = $ship_org['Enum']['label'];
            $OrgIdMaping[$ship_org['Enum']['alias']] = $ship_org['Enum']['value'];
        }
        $ship_from_org_id = null;
        // $this->set('ShipFromOrgIds', $ShipFromOrgIds);

        $org_list = $g_ObjRelObj->getAvailableOrgList();
        $this->set('org_list', $org_list);

        //获取物料订单类别
        $mtl_req_type_list = $this->{$this->modelClass}->getMtlReqTypeList();
        $this->set('mtl_req_type_list', $mtl_req_type_list);

        //组织界面展示的layout
        $ReqLayout = array();
        $layout = $this->initReqLayoutData($AllParams);
        if ('add' == $AllParams['P']['action']) {
            $OrderType = $g_Type->find('first', array(
                'conditions' => array('Type.code' => $AllParams['P']['order_type'], 'Type.biz_id' => $g_BizId),
                'fields' => array('Type.id', 'Type.name', 'Type.code')
            ));
            $this->set('OrderType', $OrderType);

            //todo_recommend_main
            global $g_recommend_main_order_types;
            $g_recommend_main_order_types = $g_Enum->getRecommendMainOrderTypes();
            if (isset($OrderType['Type']['code']) && isset($g_recommend_main_order_types[$OrderType['Type']['code']])) {
                $need_recommend_main_order = 1;
            } else {
                $need_recommend_main_order = 0;
            }

            // // 根据订单类型获取对应的org_id，用于非TV的业务
            // $org_id = $g_Enum->find('first', array(
            //     'conditions' => array(
            //         'Enum.dict_name' => 'Ebs.order_type',
            //         'Enum.value' => $OrderType['Type']['code']
            //     ),
            //     'fields' => 'Enum.alias'
            // ));
            // $this->set('OrgId', $org_id['Enum']['alias']);
            // if (!isset($OrgIdMaping[$org_id['Enum']['alias']])) {
            //     $this->set('setFlash', 1);
            //     $this->Session->setFlash('订单类型匹配失败，订单类型未同步或该事业部下没有对应订单类型。');
            //     return;
            // }
            // $ship_from_org_id = $OrgIdMaping[$org_id['Enum']['alias']];

            // 统一获取业务实体的ID add by GUOCAI
            $org_id = $this->Req->getOrgIdByOrderTypeId($OrderType['Type']['id']);
            $this->set('OrgId', $org_id);
            if (!isset($OrgIdMaping[$org_id])) {
                $this->set('setFlash', 1);
                $this->Session->setFlash('订单类型匹配失败，订单类型未同步或该事业部下没有对应订单类型。');
                return;
            }
            $ship_from_org_id = $OrgIdMaping[$org_id];

            // 睿欣的出货全部默认RX，其他事业部默认SY 袁慧君需要 by wuhuashan 2014/10/13
            switch ($g_BizId) {
                //TV的出货组织默认为SY，可选HK add by ziying 2015/11/20
                case OCS_BIZ_TYPE_TV:
                case OCS_BIZ_TYPE_STB:
                case OCS_BIZ_TYPE_AE:
                // case OCS_BIZ_TYPE_SCS:
                    // if(OCS_BIZ_TYPE_CE == $g_BizId &&  substr_count($OrderType['Type']['name'], 'RE-') > 0){//RE-智能音频 的订单类型
                    //     $ship_from_org_id = 0;
                    //     break;
                    // }
                    $ship_from_org_id = 86;
                    break;
                case OCS_BIZ_TYPE_MID:
                    $ship_from_org_id = 87;
                    break;
                case OCS_BIZ_TYPE_CE: //RE事业部，默认都不选择发货组织，由人选择 modify by shavene 2015/02/04
                    $ship_from_org_id = 0;
                    break;
                case OCS_BIZ_TYPE_ISH: //XK
                    $ship_from_org_id = 234;
                    break;
            }

            // $AllParams['P']['material'] 以这个字段区分物料订单及SKD物料订单: 1代表物料订单；2代表SKD物料订单
            if (isset($AllParams['P']['req_type'])) {//物料订单，有些字段非必填
                $layout = $this->setInvalidFields($layout, 'material');
                // if (1 == $AllParams['P']['material']) {
                //     $ReqType = OCS_REQ_TYPE_MATERIAL;
                // }
                // if (2 == $AllParams['P']['material']) {
                //     $ReqType = OCS_REQ_TYPE_SKD;
                // }
                $ReqType = $AllParams['P']['req_type'];
            } else if (isset($AllParams['P']['entry_type'])) {
                $layout = $this->setInvalidFields($layout, $AllParams['P']['entry_type']);
            }
        }

        $header = array();
        if ('add' == $AllParams['P']['action'] && !isset($AllParams['P']['ids']) && !isset($AllParams['P']['entry_type'])) {//新建
            $ProductId = isset($AllParams['P']['product_id']) ? $AllParams['P']['product_id'] : 0;
            if ($ProductId > 0) {//基于产品新建订单
                $PreProduct = $g_Products->Product->find('first', array(
                    'conditions' => array('Product.id' => $ProductId),
                    'fields' => array('Product.id', 'Product.name', 'Product.account_id')
                ));
                if (!empty($PreProduct)) {
                    $account_id = $PreProduct['Product']['account_id'];
                    $PreProduct['Product']['account_id'] = array();
                    $PreProduct['Product']['account_id']['value'] = $account_id;
                    $PreProduct['Product']['account_id']['label'] = $g_Account->get_by_id($account_id, 'short_name');
                    $layout['Req.product_id']['default'] = $PreProduct['Product']['name'];
                }
                $this->set('PreProduct', $PreProduct);
            }

            //检查是否为导入订单方式，如是则直接读取缓存数据载入
            $redis_key = base64_encode($this->params->url . $g_UserId);
            $import_datas = $g_Commons->getRedisCache($redis_key);
            if (!empty($import_datas)) {
                $g_Commons->clearRedisCache($redis_key); //用完即燓
                $import_datas = json_decode($import_datas, true);
                $AllParams['P']['entry_type'] = 'import'; //导入订单
                $this->set('AllParams', $AllParams);
                foreach ($import_datas as $datas) {
                    $po_layout = $this->setReqLayoutDefaultValue($layout, $datas, $AllParams);
                    $ReqLayout[] = $po_layout;
                }
            } else {
                $is_dev_order = false === strpos($OrderType['Type']['name'], '研发') ? 0 : 1;
                $is_sam_order = false === strpos($OrderType['Type']['name'], '样品') ? 0 : 1;
                $is_semi_order = false === strpos($OrderType['Type']['name'], '备货') ? 0 : 1;
                if ('add' == $AllParams['P']['action'] && (!isset($AllParams['P']['req_type']) || !isset($mtl_req_type_list[$AllParams['P']['req_type']])) && !$is_dev_order && !$is_sam_order && !$is_semi_order) { //非物料订单，货物名称必填
                    $required_fields = array(
                        'Req.invc_prod_name',
                    );
                    $layout = $this->setLayoutRequiredFields($layout, $required_fields);
                }
                $ReqLayout[] = $layout;
            }
        } else if (!empty($AllParams['P']['ids'])) {//编辑或者批量复制新建
            $ReqIds = explode(',', $AllParams['P']['ids']);
            $is_trans_order = !empty($AllParams['P']['entry_type']) ? $this->Req->isTransOrder($AllParams['P']['entry_type']) : false;
            if ($is_trans_order) { //转正式订单、转备货订单
                $po_result = $this->Req->checkToOrderInfo($ReqIds, $AllParams['P']['entry_type']);
                if (!$po_result['success']) {
                    $this->set('setFlash', 1);
                    $this->Session->setFlash($po_result['message']);
                    return;
                }
            }

            $select_fields = array('Req.id', 'Contract.id');
            //获取EBS订单行数据
            $OrderLineDetails = $this->Req->GetOrderLinesByReqIds($ReqIds);
            $this->set('OrderLineDetails',$OrderLineDetails);

            //行类型
            $OrderLineTypeList = $g_Enum->getEnumListByDictName('Ebs.order_detail_type');
            $this->set('OrderLineTypeList', $OrderLineTypeList);

            foreach ($layout as $temp) {//查找所有需要select的字段
                if (preg_match('/Contract\.|Req\.|RelReq\./', $temp['field'])) {
                    $select_fields[] = $temp['field'];
                }
            }
            //注意，需要用到的字段要在other_fields里指定(只select用到的字段)。
            $other_fields = array('Req.account_id', 'Req.sw_atom_ids_json', 'Req.ebs_order_number', 'Contract.mid_account_id', 'Req.owner_user_id', 'Req.sales_user_id','Contract.is_try_produce', 'Req.status',
                'Contract.order_time', 'Req.com_dept_id', 'Contract.address', 'Req.ship_site_use_id', 'Contract.bill_site_use_id', 'Req.is_sync_ebs', 'Req.req_type','Req.exchange_ratio','Contract.line_type_id',
                'Contract.type_id', 'Contract.ship_from_org_id', 'Req.foreign_price', 'Req.foreign_amount', 'Req.amount', 'Req.currency_id', 'Req.account_id', 'Contract.invoice_to_contact_id','Req.stock_account_id', 'RelReq.ship_to_contact_ids',
                'Contract.dolby_account_name', 'Contract.is_with_dolby', 'Contract.dolby_account_id', 'RelReq.stock_limit_days', 'RelReq.is_cart_order', 'RelReq.quote_line_id', 'Req.alter_audit_status');
            $select_fields = array_merge($select_fields, $other_fields);
            $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ReqIds),
                'joins' => array(
                    array(
                        'table' => 'contracts',
                        'alias' => 'Contract',
                        'type' => 'LEFT',
                        'conditions' => 'Contract.id = Req.rel_obj_id AND Req.model_def_id=' . Contract
                    ),
                    array(
                        'table' => 'rel_reqs',
                        'alias' => 'RelReq',
                        'type' => 'LEFT',
                        'conditions' => 'RelReq.req_id = Req.id'
                    ),
                ),
                'fields' => $select_fields
            ));
            $Reqs = $g_AttrDics->formatAllModelData($Reqs);
            $AllSumData = array('all_quantity' => 0, 'all_amount' => 0);
            $ModelReqs = array();
            if (!empty($Reqs)) {
                $account_id = 0;
                $ship_site_use_id = 0;
                $bill_site_use_id = 0;
                $selected_ship_to_contact_ids = array();
                $selected_bill_to_contact_ids = array(); //收单联系人，目前保持单选，以后可能需改为多选
                foreach ($Reqs as $idx => $Req) {
                    if ('add' != $AllParams['P']['action']) {
                        $OrderType = $g_Type->find('first', array(
                            'conditions' => array('Type.id' => $Req['Contract']['type_id']['value']),
                            'fields' => array('Type.id', 'Type.name', 'Type.code')
                        ));
                    }
                    if (!empty($mtl_req_type_list[$Req['Req']['req_type']['value']])) { //物料订单
                        $AllParams['P']['req_type'] = $Req['Req']['req_type']['value'];
                    }
                    $AllParams['P']['order_type'] = $OrderType['Type']['code'];
                    $AllParams['P']['currency_type'] = isset($AllParams['P']['currency_type'])?$AllParams['P']['currency_type']:$Req['Req']['currency_id']['value'];
                    $AllParams['Req']['product_id'] = is_array($Req['Req']['product_id']) ? $Req['Req']['product_id']['value'] : $Req['Req']['product_id'];
                    $AllParams['Req']['account_id'] = is_array($Req['Req']['account_id']) ? $Req['Req']['account_id']['value'] : $Req['Req']['account_id'];
                    $layout = $this->initReqLayoutData($AllParams);

                    $account_id = is_array($Req['Req']['account_id']) ? $Req['Req']['account_id']['value'] : $Req['Req']['account_id'];
                    $ship_site_use_id = $Req['Req']['ship_site_use_id'];
                    $bill_site_use_id = $Req['Contract']['bill_site_use_id'];

                    if ('edit' == $AllParams['P']['action']) {
                        if (!empty($Req['RelReq']['ship_to_contact_ids'])) {
                            $selected_ship_to_contact_ids = array_merge($selected_ship_to_contact_ids, explode(',', $Req['RelReq']['ship_to_contact_ids']));
                        }
                        if (!empty($Req['Contract']['invoice_to_contact_id'])) {
                            // $selected_bill_to_contact_ids = array_merge($selected_bill_to_contact_ids, explode(',', $Req['Contract']['invoice_to_contact_id']));
                            $invoice_to_contact_id = is_array($Req['Contract']['invoice_to_contact_id']) ? $Req['Contract']['invoice_to_contact_id']['value'] : $Req['Contract']['invoice_to_contact_id'];
                            $selected_bill_to_contact_ids = array($invoice_to_contact_id);
                        }
                    }

                    //判断该订单类别是否为物料订单
                    $is_mtl_order = !empty($mtl_req_type_list[$Req['Req']['req_type']['value']]) ? true : false;
                    if ($is_mtl_order) { //物料订单，设置某些字段非必填
                        $layout = $this->setInvalidFields($layout, 'material');
                        $ReqType = $Req['Req']['req_type']['value'];
                    } else if (1 == $Req['RelReq']['is_cart_order']['value'] && 'edit' == $Action) {//购物车，库存订单
                        $layout = $this->setInvalidFields($layout, 'cart');
                        $ReqType = OCS_REQ_TYPE_CART_STOCK;
                        //设置disablec字段
                        $DisabledFields = array();
                        // $DisabledFields[] = 'Req.product_id';
                        $DisabledFields[] = 'Req.quantity';
                        $layout = $this->setLayoutDisabledFields($layout, $DisabledFields);
                    }

                    if ('add' == $AllParams['P']['action']) {
                        if (preg_match('/TCL/', $Req['Req']['account_id']['label'])) {//特殊处理，对于TCL的单复制新建时，不复制包装方式
                            $Req['Contract']['package_type'] = '';
                        }
                    }

                    // 根据OCS订单类型ID获取业务实体ID
                    $account_org_id = $this->Req->getOrgIdByOrderTypeId($Req['Contract']['type_id']['value']);

                    $Req['Req']['ship_to_list'] = $g_AccountAddresses->getAccountAddressesByAccountIdAndCode($Req['Req']['account_id']['value'], 'SHIP_TO', $account_org_id);
                    $bill_account_id = $Req['Req']['account_id']['value'];
                    if ($Req['Contract']['mid_account_id']['value'] > 0) {
                        $bill_account_id = $Req['Contract']['mid_account_id']['value'];
                    }
                    $Req['Contract']['bill_to_list'] = $g_AccountAddresses->getAccountAddressesByAccountIdAndCode($bill_account_id, 'BILL_TO', $account_org_id);

                    //转换订单，
                    if ($is_trans_order) {
                        //新建时默认带出订单头相关信息
                        if (empty($header['Req']['account_id'])) { //订单头只需设置一次即可
                            $header['Req']['account_id'] = $Req['Req']['account_id'];
                            if ('to_order' == $AllParams['P']['entry_type']) { //转正式，正式订单收货客户使用备货订单的真实客户
                                $header['Req']['account_id'] = $Req['Req']['stock_account_id'];
                            }

                            $header['Contract']['mid_account_id'] = $Req['Contract']['mid_account_id'];

                            //收货地址
                            $header['Req']['ship_site_use_id']['value'] = $ship_site_use_id;

                            //收单地址
                            $header['Contract']['bill_site_use_id']['value'] = $bill_site_use_id;;

                            $ship_to_list = $Req['Req']['ship_to_list'];
                            $bill_to_list = $Req['Contract']['bill_to_list'];
                            if ($header['Req']['account_id'] != $Req['Req']['account_id']['value']) { //真实客户与收货客户不一致，地址使用真实客户的
                                $ship_to_list = $g_AccountAddresses->getAccountAddressesByAccountIdAndCode($header['Req']['account_id'], 'SHIP_TO', $account_org_id);
                                if (empty($Req['Contract']['mid_account_id']['value'])) {
                                    $bill_to_list = $g_AccountAddresses->getAccountAddressesByAccountIdAndCode($header['Req']['account_id'], 'BILL_TO', $account_org_id);
                                }
                            }
                            $header['Req']['ship_site_use_id']['options'] = $ship_to_list;
                            $header['Contract']['bill_site_use_id']['options'] = $bill_to_list;
                        }

                        //关联备货订单
                        $Req['ReqRelStockOrder']['rel_stock_req_id'] = $Req['Req']['id'];
                    }

                    $req_product_id = is_array($Req['Req']['product_id']) ? $Req['Req']['product_id']['value'] : $Req['Req']['product_id'];
                    $Req['Product']['is_ckd'] = $g_Products->getIsCkdByProductId($req_product_id);
                    if ('edit' == $Action) {
                        $AllSumData['all_quantity'] += $Req['Req']['quantity'];
                        $AllSumData['all_amount'] += $Req['Req']['amount'];
                        if (OCS_CURRENCY_USD == $Req['Req']['currency_id']['value']) {//美金
                            $this->set('CurrencyType', $Req['Req']['currency_id']['value']);
                        }

                        $Contacts = $g_Contact->find('list', array(
                            'conditions' => array(
                                'Contact.account_id' => $Req['Req']['account_id']['value'],
                                'Contact.is_stop' => 0
                            ),
                            'fields' => 'Contact.id, Contact.name'
                        ));

                        $this->set('Contacts', $Contacts);
                        $this->set('OrderType', $OrderType);
                        $this->set('OrgId', $account_org_id);

                        $ship_from_org_id = 0 == $Req['Contract']['ship_from_org_id'] ? $OrgIdMaping[$account_org_id] : $Req['Contract']['ship_from_org_id'];

                        //关联报价行
                        if (!empty($Req['RelReq']['quote_line_id'])) {
                            $g_QuoteLine = $g_Commons->GlobalModel('QuoteLine');
                            $po_result = $g_QuoteLine->getRelReqDisplayName($Req['RelReq']['quote_line_id']);
                            $Req['View']['rel_quote_line'] = !empty($po_result['name']) ? $po_result['name'] : '';
                            if (!empty($po_result['status']) && OCS_QUOTE_LINE_STATUS_CANCELLED == $po_result['status']) { //作废报价单，添加背景色提示
                                $attr = array(
                                    'View.rel_quote_line' => array('style' => 'background-color:#fd9edb', 'attr' => array('title' => '该报价单已经作废，请重新关联新报价')),
                                );
                                $layout = $this->setLayoutAppendAttrFields($layout, $attr);
                            }
                        }
                    }

                    //如果存在关键信息变更未审，则产品字段使用未审变更单的产品 https://jira.cvte.com/browse/OCS-2186
                    if (!empty($Req['Req']['alter_audit_status']['value']) && OCS_REQ_ALTER_AUDIT_STATUS_NEW == $Req['Req']['alter_audit_status']['value']) {
                        $last_tmp_req_version = $g_ReqVersion->getLastTmpReqVersion(Req, $Req['Req']['id']);
                        if (!empty($last_tmp_req_version)) {
                            $Req['Req']['product_id']['value'] = $last_tmp_req_version['ReqVersion']['product_id'];
                            $Req['Req']['product_id']['label'] = $g_Product->findMainField($last_tmp_req_version['ReqVersion']['product_id']);
                            $Req['Req']['price'] = $last_tmp_req_version['ReqVersion']['price'];
                            $Req['Req']['foreign_price'] = $last_tmp_req_version['ReqVersion']['foreign_price'];
                            $Req['Req']['quantity'] = $last_tmp_req_version['ReqVersion']['quantity'];
                            $Req['Contract']['is_has_stock']['value'] = $last_tmp_req_version['ReqVersion']['is_has_stock'];
                            $Req['Req']['sw_atom_ids_json'] = $last_tmp_req_version['ReqVersion']['sw_atom_ids_json'];
                            // $Req['Req']['ext_3rd_party_prods'] = $last_tmp_req_version['ReqVersion']['ext_3rd_party_prods']; //其他配件不从变更里取 直接保存在订单上了
                        }
                    }

                    //新建复制订单是，不需要复制的字段
                    if (isset($Action) && 'add' == $Action) {
                        $Req['Req']['mf_remark'] = ''; //下生产备注
                        $Req['Contract']['delivety_time'] = '';//计划发运日期
                        $Req['RelReq']['quote_line_id'] = 0;
                    }
                    // if ('edit' == $AllParams['P']['action'] && isset($AllParams['P']['ebs_new_line']) && 1 == $AllParams['P']['ebs_new_line']) {
                    //     //是否开工单, 如为“Y”，则是否出库存，默认为"是"且不允许修改（以免产生重复采购需求）
                    //     $is_had_wip = $this->Req->getLastCancelledOrderLineAttribute13($Req['Req']['id']);
                    //     if ('Y' == $is_had_wip) {
                    //         $Req['Contract']['is_has_stock'] = 1; //强制改为“是” 出库存
                    //     } else {
                    //         $Req['Contract']['is_has_stock'] = NULL;  //强制设置为“空”，需内勤确认
                    //     }
                    // }

                    $is_dev_order = false === strpos($OrderType['Type']['name'], '研发') ? 0 : 1;
                    $is_sam_order = false === strpos($OrderType['Type']['name'], '样品') ? 0 : 1;
                    $is_semi_order = false === strpos($OrderType['Type']['name'], '备货') ? 0 : 1;

                    $is_not_prod_order = !$is_dev_order && !$is_sam_order && !$is_semi_order;
                    $required_fields = array();
                    //非物料订单，货物名称必填
                    if ('add' == $Action && (!isset($AllParams['P']['req_type']) || !isset($mtl_req_type_list[$AllParams['P']['req_type']])) && $is_not_prod_order) {
                        $required_fields = array(
                            'Req.invc_prod_name',
                        );
                    } else if ('edit' == $Action && !in_array($Req['Req']['req_type']['value'], $this->Req->getDefMtlTypes()) && $is_not_prod_order) {
                        $required_fields = array(
                            'Req.invc_prod_name',
                        );
                    }

                    if (!empty($required_fields)) {
                        $layout = $this->setLayoutRequiredFields($layout, $required_fields);
                    }

                    $Reqs[$idx] = $Req;
                    $ModelReqs[$Req['Req']['id']] = $Req;
                    $ReqLayout[$Req['Req']['id']] = $this->setReqLayoutDefaultValue($layout, $Req, $AllParams);
                }

                if ('edit' == $AllParams['P']['action']) {
                    //客户+收货地址 获取对应的收货联系人列表
                    $ship_contact_list = $g_Contact->getRelContactList($account_id, $ship_site_use_id, 'SHIP_TO');
                    $this->set('ship_contact_list', $ship_contact_list);

                    //客户+收单地址 获取对应的收货联系人列表
                    $bill_contact_list = $g_Contact->getRelContactList($account_id, $bill_site_use_id, 'BILL_TO');
                    $this->set('bill_contact_list', $bill_contact_list);

                    $this->set('selected_ship_to_contact_ids', $selected_ship_to_contact_ids);
                    $this->set('selected_bill_to_contact_ids', $selected_bill_to_contact_ids);
                }
            }
            $this->set('AllSumData', $AllSumData);
            $this->set('Reqs', $Reqs);

            //todo_recommend_main
            global $g_recommend_main_order_types;
            $g_recommend_main_order_types = $g_Enum->getRecommendMainOrderTypes();
            if (isset($Reqs[0]['Contract']['type_id']['label']) && in_array($Reqs[0]['Contract']['type_id']['label'], $g_recommend_main_order_types)) {
                $need_recommend_main_order = 1;
            } else {
                $need_recommend_main_order = 0;
            }

            //获取库存预订相关数据
            $stock_reserve_rel_reqs = $this->Req->getSimpleStockReserveInfo($ReqIds);
            $this->set('stock_reserve_rel_reqs', $stock_reserve_rel_reqs);
        } else if (isset($AllParams['P']['entry_type']) && 'cart' == $AllParams['P']['entry_type']) {//来自购物车的新建订单
            //获取购物车内容
            $ReqType = OCS_REQ_TYPE_CART_STOCK;
            if ($this->Session->check('Auth.Req.Reserve.' . $g_UserId)) {
                $Cart = $this->Session->read('Auth.Req.Reserve.' . $g_UserId);
            }
            if (empty($Cart)) {
                $this->set('setFlash', 1);
                $this->Session->setFlash('购物车为空，请先将库存订单加入购物车。');
                return;
            }
            $ReserveRelTyps = $g_Enum->getEnumListByDictName('ReserveRelReq.type');
            foreach ($Cart as $temp) {
                $data = array();
                $data['Req']['product_id'] = $g_Products->Product->getProductNameByProductCode($temp['PRODUCT_CODE']);
                $data['View']['lot_number'] = $temp['LOT_NUMBER'];
                $data['View']['ebs_order_number'] = $temp['ORDER_NUMBER'];
                $data['View']['line_number'] = $temp['LINE_NAME'];
                $data['View']['available_stock_qty'] = $temp['AVAILABLE_QUANTYTY'];
                //计算购物车订单数量（包括正常订单的预订数量）
                $cart_quantity = $g_ReserveRelReq->getAllSumQuantityByBatchNo($temp['LOT_NUMBER'], $temp['PROJECT_NUMBER']);
                $data['View']['cart_quantity'] = $cart_quantity;
                if(!empty($cart_quantity)) {
                    $data['View']['cart_quantity'] = '<span class="label label-warning view-undelivered-details" style="cursor: pointer;">' . $cart_quantity . '</span>';
                }
                $data['View']['available_reserve_qty'] = $data['View']['available_stock_qty'] - $cart_quantity; //可用数量＝理论库存-购物车数量


                $data['ReserveRelReq']['lot_number'] = $temp['LOT_NUMBER'];
                $data['ReserveRelReq']['ebs_order_number'] = $temp['ORDER_NUMBER'];
                $data['ReserveRelReq']['mto_no'] = $temp['PROJECT_NUMBER'];
                $data['ReserveRelReq']['locator'] = $temp['LOCATORS'];
                $data['ReserveRelReq']['available_stock_qty'] = $temp['AVAILABLE_QUANTYTY'];
                $data['ReserveRelReq']['available_reserve_qty'] = $data['View']['available_reserve_qty'];

                $data['Contract']['is_has_stock'] = 1; //默认为出库存
                $data['Contract']['package_type'] = 1002; //包装方式默认为纸箱
                $data['Product']['is_ckd'] = $g_Products->getIsCkdByProductName($data['Req']['product_id']);
                // $data['ReserveRelReq'] = $this->getReserveFieldsValue($temp);
                $data['Req']['ext_3rd_party_prods'] = '无';
                $data['Contract']['free_spare_qty'] = 0;

                $tmp_req = $this->Req->find('first', array(
                    'conditions' => array('Req.ebs_order_number' => $temp['ORDER_NUMBER']),
                    'fields' => array('Req.id', 'Req.mf_remark')
                ));
                if (!empty($tmp_req)) {
                    $data['Req']['mf_remark'] = $tmp_req['Req']['mf_remark'];
                }
                //设置disablec字段
                $DisabledFields = array();
                $DisabledFields[] = 'Req.product_id';
                $layout = $this->setLayoutDisabledFields($layout, $DisabledFields);
                $ReqLayout[] = $this->setReqLayoutDefaultValue($layout, $data, $AllParams);
            }
        }

        $this->set('header', $header);

        //根据EBS订单阶段，设置某些字段不可编辑
        if ('edit' == $AllParams['P']['action']) {
            if (1 == $globalEBSWebServiceUrls['connect']) {
                $EbsOrderStages = $this->getEbsOrderStageByReqIds(explode(',', $AllParams['P']['ids'])); //获取订单在EBS阶段
            }
            $this->set('EbsOrderStages', $EbsOrderStages);

            $req_ids = explode(',', $AllParams['P']['ids']);

            //检查确认书是否审核
            $IsCfmAuditted = $this->Req->checkIsCfmAuditted(explode(',', $AllParams['P']['ids']));
            $this->set('IsCfmAuditted', $IsCfmAuditted);

            //登记后，还需修改产品代码。
            //条件：1、工单需取消　2、销售订单行需取消
            if ('edit' == $AllParams['P']['action'] && isset($AllParams['P']['ebs_new_line'])
                    && 1 == $AllParams['P']['ebs_new_line']) {
                // $ReqIds = explode(',', $AllParams['P']['ids']);

                //检查OCS订单对应的EBS工单是否取消
                $WipBillStatus = $this->Req->getWipBillStatusNewByReqIds($req_ids);
                $this->set('WipBillStatus', $WipBillStatus);

                //检查OCS订单对应的EBS订单单是否取消
                $EbsOrderLineStatus = $this->Req->getEbsOrderLineStatus($req_ids);
                $this->set('EbsOrderLineStatus', $EbsOrderLineStatus);
            }
            $is_disabled_bill_account = false;

            //判断是否有处于审核中的下采购申请单
            $g_DepositRatioBill = $g_Commons->GlobalModel('DepositRatioBill');
            $is_auditting_purchase_bill = $g_DepositRatioBill->isHasAudittingBill($req_ids);
            $this->set('is_auditting_purchase_bill', $is_auditting_purchase_bill);
            if (!empty($is_auditting_purchase_bill)) {
                $is_disabled_bill_account = true;
            }

            $this->set('is_disabled_bill_account',$is_disabled_bill_account);
            if (!empty($EbsOrderStages)) {//不为空，则说明合同已经审核，已传至EBS
                foreach ($EbsOrderStages as $OrderStage) {
                    if (!isset($ReqLayout[$OrderStage['OCS_REQ_ID']])) {
                        continue;
                    }
                    $req_id = $OrderStage['OCS_REQ_ID'];

                    $DisabledFields = array();
                    switch ($OrderStage['LOOKUP_CODE']) {
                        case '4'://4-已审采购-提交下生产
                            //$DisabledFields = array('Req.quantity');
                            break;
                        case '6'://6-待生产评审
                            $DisabledFields = array('Req.prod_lock_type', 'Atom.SW_DefaultCountry',
                                'Atom.SW_Panel', 'Atom.SW_PowerCurrent', 'Atom.SW_KeyboardType', 'Req.remark');
                            $this->set('DisabledStage', 1);
                            break;
                        case '7'://7-已下达生产
                            $DisabledFields = array('Req.prod_lock_type',
                                'Atom.SW_ExtendSwAtoms', 'Atom.SW_Panel', 'Atom.SW_AmplifierVoltage', 'Atom.SW_KeyboardType',
                                'Atom.SW_DefaultCountry', 'Req.mf_remark', 'Req.remark');
                            $this->set('DisabledStage', 1);
                            break;
                        default:break;
                    }
                    if ($OrderStage['LOOKUP_CODE'] >= 6) {
                        //判断是否可修改备品
                        $isHasWipBill = $this->Req->isHasWipBill($req_id);
                        if (isset($isHasWipBill[$req_id]) && $isHasWipBill[$req_id]) {
                            $DisabledFields[] = 'Contract.free_spare_qty';
                        }
                    }
                    //确认书已审，这些字段不可更改
                    if ($IsCfmAuditted > 0) {
                        $DisabledFields[] = 'Req.product_id'; //产品代码
                        $DisabledFields[] = 'Atom.SW_DefaultCountry'; //默认国家
                        $DisabledFields[] = 'Atom.SW_Panel'; //配屏
                        $DisabledFields[] = 'Atom.SW_PowerCurrent'; //软件占空比
                        $DisabledFields[] = 'Atom.SW_KeyboardType'; //按键类型
                        $DisabledFields[] = 'Req.remark'; //确认书备注
                        $DisabledFields = array_unique($DisabledFields);
                    }

                    //已经开了工单且发放到工厂，大部分信息都不可更改
                    $IsMfAudited = $this->Req->getIsMfAuditedByReqId($OrderStage['OCS_REQ_ID']);
                    if ($IsMfAudited) {//'生管主管已审核'
                        $DisabledFields = array_merge($DisabledFields, array('Req.product_id', 'Req.prod_lock_type', 'Contract.delivety_time', 'Contract.tech_price',
                            'Atom.SW_ExtendSwAtoms', 'Atom.SW_Panel', 'Atom.SW_AmplifierVoltage', 'Atom.SW_KeyboardType',
                            'Atom.SW_DefaultCountry', 'Req.mf_remark', 'Req.remark'));
                    }
                    //已经登记的订单
                    if ('BOOKED' == $OrderStage['STATUS']) {
                        if (!in_array('Req.product_id', $DisabledFields)) {
                            $DisabledFields[] = 'Req.product_id';
                        }
                        //登记仍需改产品代码
                        if ('edit' == $AllParams['P']['action'] && isset($AllParams['P']['ebs_new_line'])
                                && 1 == $AllParams['P']['ebs_new_line'] && !$IsCfmAuditted) {
                            if (empty($WipBillStatus) && empty($EbsOrderLineStatus)) {//需工单和订单都取消才可改
                                $DisabledFields = array_diff($DisabledFields, array('Req.product_id'));
                                //如果登记后改代码，产品可以修改，则对应的软件占空比、配屏、按键类型、默认国家 也可以修改
                                $DisabledFields = array_diff($DisabledFields, array('Atom.SW_PowerCurrent', 'Atom.SW_Panel', 'Atom.SW_KeyboardType', 'Atom.SW_DefaultCountry'));
                            }
                            // if ('Y' == $is_had_wip) {
                            //     $DisabledFields[] = 'Contract.is_has_stock';
                            // }
                        }

                        // 登记后不允许修改行类型 add by GUOCAI
                        $DisabledFields[] = 'Contract.line_type_id';
                    }

                    if (!$IsCfmAuditted) {//打回确认书后，订单备注可修改。
                        $DisabledFields = array_diff($DisabledFields, array('Req.remark'));
                    }
                    if (in_array('Atom.SW_PowerCurrent', $DisabledFields) && isset($ReqLayout[$OrderStage['OCS_REQ_ID']]['Atom.SW_PowerCurrent']['class'])
                     && substr_count($ReqLayout[$OrderStage['OCS_REQ_ID']]['Atom.SW_PowerCurrent']['class'], 'required')
                            && empty($ReqLayout[$OrderStage['OCS_REQ_ID']]['Atom.SW_PowerCurrent']['default'])) {
                        $DisabledFields = array_diff($DisabledFields, array('Atom.SW_PowerCurrent'));
                    }
                    //编辑时都不可直接修改数量，另有专门入口修改
                    $DisabledFields[] = 'Req.quantity';
                    $DisabledFields[] = 'RelReq.stock_limit_days';
                    if (OCS_BIZ_TYPE_TV == $g_BizId && !preg_match('/研发|样品/', $Reqs[0]['Contract']['type_id']['label'])) { //TV 且非研发、样品订单
                        $DisabledFields[] = 'Contract.delivety_time';
                        $ReqLayout[$OrderStage['OCS_REQ_ID']]['Contract.delivety_time']['class'] = str_replace('input-datepicker', '', $ReqLayout[$OrderStage['OCS_REQ_ID']]['Contract.delivety_time']['class']);
                    }

                    //获取建交货数量
                    $DeliverQty = $this->Req->GetOrderDeliverQty($OrderStage['OCS_REQ_ID']);
                    if($DeliverQty > 0){
                        $DisabledFields[] = 'Req.price';
                        $DisabledFields[] = 'Req.foreign_price';
                    } else { //如果存在未审的发货变更单，则也不可修改单价
                        $is_has_modify_bill_qty = $this->Req->isHasModifyDeliverBill($OrderStage['OCS_REQ_ID']);
                        if ($is_has_modify_bill_qty) {
                            $DisabledFields[] = 'Req.price';
                            $DisabledFields[] = 'Req.foreign_price';
                        }
                    }

                    //赠品行类型不可编辑备品
                    if(isset($ModelReqs[$OrderStage['OCS_REQ_ID']])){
                        $OrderLineTypeCnt = $g_Enum->find('count',array(
                            'conditions' => array('
                                Enum.dict_name'=>'Ebs.order_detail_type',
                                "Enum.label LIKE '%赠品%'",
                                'Enum.value'=>$ModelReqs[$OrderStage['OCS_REQ_ID']]['Contract']['line_type_id']
                            )
                        ));
                        if($OrderLineTypeCnt > 0){
                            $DisabledFields[] = 'Contract.free_spare_qty';
                        }
                    }

                    //备货订单，检查是否有建备货申请单且处于审核状态，如是则不允许修改如下信息
                    // if (substr_count($ModelReqs[$req_id]['Contract']['type_id']['label'], '备货')) {
                    //     $stock_apply_status = $g_StockApplyHeader->getStockApplyStatusByReqIds($req_id);
                    //     if (in_array($stock_apply_status, array(OCS_STOCK_APPLY_HEADER_STATUS_AUDITTING, OCS_STOCK_APPLY_HEADER_STATUS_DONE))) {
                    //         $DisabledFields[] = 'Req.stock_account_id';
                    //         $DisabledFields[] = 'Req.product_id';
                    //         $DisabledFields[] = 'Req.quantity';
                    //         $DisabledFields[] = 'Contract.free_spare_qty';
                    //         $DisabledFields[] = 'Req.price';
                    //     }
                    // }

                    //下采购申请单，审核中不允许修改数量、价格
                    if (isset($is_auditting_purchase_bill[$req_id]) && $is_auditting_purchase_bill[$req_id]) {
                        $DisabledFields[] = 'Req.quantity';
                        $DisabledFields[] = 'Req.price';
                        $DisabledFields[] = 'Req.foreign_price';
                    }

                    //根据EBS配料清单状态，判断是否可变更订单
                    $is_can_modify_ckd_order = $this->Req->isCanModifyCkdOrder(array($req_id));
                    if (empty($is_can_modify_ckd_order[$req_id])) {
                        $DisabledFields[] = '*';
                    }

                    $DisabledFields = array_unique($DisabledFields);
                    //设置字段disabled
                    if (!empty($DisabledFields)) {
                        $ReqLayout[$OrderStage['OCS_REQ_ID']] = $this->setLayoutDisabledFields($ReqLayout[$OrderStage['OCS_REQ_ID']], $DisabledFields);
                    }

                    //订单已传EBS，如需修改第三方，需将所有订单行取消
                    $is_not_cancelled_lines = $this->Req->isCancelledOrderLines($req_id);
                    if (!empty($is_not_cancelled_lines)) { //存在未取消的订单行
                        $is_disabled_bill_account = true;
                    }
                    // if ($OrderStage['STATUS'] == 'BOOKED') {
                    //     if (!$is_disabled_bill_account && isset($OrderLineDetails[$req_id])) {
                    //         foreach ($OrderLineDetails[$req_id] as $order_line) { //是否所有订单行已经取消
                    //             if ($order_line['FLOW_STATUS_CODE'] != 'CANCELLED') {
                    //                 $is_disabled_bill_account = true;
                    //                 break;
                    //             }
                    //         }
                    //     }
                    //     $this->set('is_disabled_bill_account', $is_disabled_bill_account);
                    // }

                    $this->set('is_disabled_bill_account', $is_disabled_bill_account);
                }
            } else {//未传EBS
                $req_ids = explode(',', $AllParams['P']['ids']);
                //确认书已审，这些字段不可更改
                //备货订单，检查是否有建备货申请单且处于审核状态，如是则不允许修改如下信息
                // $stock_apply_status = $g_StockApplyHeader->getStockApplyStatusByReqIds($req_ids);

                //已审合同的订单不允许修改数量
                $req_status_list = $this->Req->find('list', array(
                    'conditions' => array(
                        'Req.id' => $req_ids,
                    ),
                    'fields' => array(
                        'Req.id',
                        'Req.status',
                    )
                ));

                //确认书审核完成的订单，不允许修改如下字段
                if (!empty($IsCfmAuditted)) {
                    $DisabledFields[] = 'Req.product_id'; //产品代码
                    $DisabledFields[] = 'Atom.SW_DefaultCountry'; //默认国家
                    $DisabledFields[] = 'Atom.SW_Panel'; //配屏
                    $DisabledFields[] = 'Atom.SW_PowerCurrent'; //软件占空比
                    $DisabledFields[] = 'Atom.SW_KeyboardType'; //按键类型
                    $DisabledFields[] = 'Req.remark'; //确认书备注
                    $DisabledFields = array_unique($DisabledFields);

                    if (in_array('Atom.SW_PowerCurrent', $DisabledFields)) {
                        $DisabledFields = array_diff($DisabledFields, array('Atom.SW_PowerCurrent'));
                    }
                    if (!empty($DisabledFields)) {
                        foreach ($req_ids as $req_id) {
                            if (isset($req_status_list[$req_id]) && OCS_REQ_STATUS_CONTRACT_AUDIT == $req_status_list[$req_id]
                                 && !in_array('Req.quantity', $DisabledFields)) {
                                $DisabledFields[] = 'Req.quantity';
                            }
                            $ReqLayout[$req_id] = $this->setLayoutDisabledFields($ReqLayout[$req_id], $DisabledFields);
                        }
                    }
                } else {
                    $DisabledFields = !isset($DisabledFields) ? array() : $DisabledFields;
                    foreach ($req_ids as $req_id) {
                        if (isset($req_status_list[$req_id]) && OCS_REQ_STATUS_CONTRACT_AUDIT == $req_status_list[$req_id]) {
                            $tmp_disabled_fields = array_merge($DisabledFields, array('Req.quantity'));
                            $tmp_disabled_fields = array_unique($tmp_disabled_fields);
                            $ReqLayout[$req_id] = $this->setLayoutDisabledFields($ReqLayout[$req_id], $tmp_disabled_fields);
                        }
                    }
                }
            }
        }

        //是否物料订单
        $this->set('ReqType', $ReqType);

        if (isset($need_recommend_main_order) && $need_recommend_main_order) {
            foreach ($ReqLayout as &$one) {
                $one_temp = array();
                foreach ($one as $field => $v) {
                    $one_temp[$field] = $v;
                    if ('Product.is_ckd' == $field) {
                        $one_temp['Req.is_common_or_custom'] = array(
                            'field' => 'Req.is_common_or_custom',
                            'label' => '通用或定制',
                            'type' => 'readonly',
                            'style' => 'width:80px;',
                            'class' => 'req_is_common_or_custom',
                            'attr' => array(
                                    'disabled' => 'disabled',
                            ),
                            'default' => '',
                        );
                        $one_temp['Req.is_recommend_main'] = array(
                            'field' => 'Req.is_recommend_main',
                            'label' => '是否主推',
                            'type' => 'readonly',
                            'style' => 'width:70px;',
                            'class' => 'req_is_recommend_main',
                            'attr' => array(
                                    'disabled' => 'disabled',
                            ),
                            'default' => '',
                        );
                    }
                }
                $one = $one_temp;
            }
        }

        $this->set('ReqLayout', $ReqLayout);

        //设置分组信息
        $GroupTags = $this->setGroupTags();
        $this->set('GroupTags', $GroupTags);

        //货币
        $Currency = $g_Currency->findByName('USD'); //默认只用美元的
        $this->set('Currency', $Currency);
        $CurrencyList[$Currency['Currency']['id']] = $Currency['Currency']['label'];
        $this->set('CurrencyList', $CurrencyList);

        //获取伪下拉的相关数据
        switch ($g_BizId) {
            case OCS_BIZ_TYPE_TV:
                $FakeProdAttrAlias = array('SW_PowerCurrent', 'SW_ExtendSwAtoms', 'SW_AmplifierVoltage', 'SW_KeyboardType', 'SW_DefaultCountry', 'SW_CIPlus');
                break;
            case OCS_BIZ_TYPE_PS:
                $FakeProdAttrAlias = array('SW_XX_PowerCurrent', 'SW_ExtendSwAtoms', 'SW_XX_AmplifierVoltage', 'SW_XX_KeyboardType', 'SW_XX_DefaultCountry', 'SW_XX_Authorization', 'SW_XX_OSsystem', 'SW_XX_Browser', 'SW_XX_Appstore', 'SW_XX_OtherApplicationSoftware');
                break;
            case OCS_BIZ_TYPE_MID:
                $FakeProdAttrAlias = array('SW_MID_DefaultCountry', 'SW_MID_BurnReqs');
                break;
            case OCS_BIZ_TYPE_STB:
                $FakeProdAttrAlias = array('SW_STB_DefaultCountry', 'SW_STB_Authorization', 'SW_STB_OSsystem', 'SW_STB_Browser', 'SW_STB_Appstore', 'SW_STB_OtherApplicationSoftware');
                break;
            case OCS_BIZ_TYPE_ISH:
                $FakeProdAttrAlias = array('SW_ISH_DefaultCountry');
                break;
            case OCS_BIZ_TYPE_CE:
                $FakeProdAttrAlias = array('SW_CE_DefaultCountry', 'SW_CE_BurnReqs');
                break;
            case OCS_BIZ_TYPE_AE:
                $FakeProdAttrAlias = array('SW_AE_DefaultCountry');
                break;
            case OCS_BIZ_TYPE_TAD:
                $FakeProdAttrAlias = array('SW_TAD_DefaultCountry');
                break;
            case OCS_BIZ_TYPE_SCS:
                $FakeProdAttrAlias = array('SW_SCS_DefaultCountry', 'SW_SCS_PowerCurrent', 'SW_ExtendSwAtoms', 'SW_SCS_AmplifierVoltage', 'SW_SCS_KeyboardType', 'SW_SCS_CIPlus');
                break;
            default:
                $FakeProdAttrAlias = array();
                foreach ($ReqLayout as $layout) {
                    foreach ($layout as $item) {
                        if (preg_match('/Atom\.SW\_/', $item['field'])) {
                            $FakeProdAttrAlias[] = str_replace('Atom.', '', $item['field']);
                        }
                    }
                    break;
                }
                break;
        }
        $FakeBodyData = $this->getFakeBodyData($FakeProdAttrAlias);

        // TV下特殊处理收费属性，默认只有无可选，其他选项由产品带出
        if (OCS_BIZ_TYPE_TV == $g_BizId || OCS_BIZ_TYPE_SCS == $g_BizId) {
            $tv_fix_fake_data = array(
                'SW_Authorization' => array('无'),
                'SW_OSsystem' => array('无'),
                'SW_Browser' => array('无'),
                'SW_Appstore' => array('无'),
                'SW_OtherApplicationSoftware' => array('无'),
                'SW_SCS_Authorization' => array('无'),
                'SW_SCS_OSsystem' => array('无'),
                'SW_SCS_Browser' => array('无'),
                'SW_SCS_Appstore' => array('无'),
                'SW_SCS_OtherApplicationSoftware' => array('无'),
            );
            $FakeBodyData = array_merge($FakeBodyData, $tv_fix_fake_data);
        }
        $this->set('FakeBodyData', $FakeBodyData);

        switch ($g_BizId) {
            case OCS_BIZ_TYPE_TV:
                $SortFakeProdAttrAlias = array('SW_PowerCurrent');
            break;
            case OCS_BIZ_TYPE_SCS:
                $SortFakeProdAttrAlias = array('SW_SCS_PowerCurrent');
            break;
            default:
                $SortFakeProdAttrAlias = array('SW_PowerCurrent');
            break;
        }
        $SortFakeBodyData = $this->getSortFakeBodyData($SortFakeProdAttrAlias);
        $this->set('SortFakeBodyData', $SortFakeBodyData);

        //设置可进行复制的字段
        $DupFields = array();
        if (!empty($ReqLayout)) {
            foreach ($ReqLayout as $req_layout) {
                foreach ($req_layout as $Item) {
                    if (isset($Item['class']) && strstr($Item['class'], 'dup')) {
                        $DupFields[] = $Item['field'];
                    }
                }
                break;
            }
        }
        $this->set('DupFields', $DupFields);

        //获取工厂烧录KEY仓库
        $BurnKeyStores = $this->getBurnKeysFromCps();
        $this->set('BurnKeyStores', $BurnKeyStores);

        //设置默认选中的标签
        $this->set('IsDevOrder', 0);
        $this->set('DefaultSelectedTagIdx', array());
        if (false !== strpos($OrderType['Type']['name'], '研发')) {//hardcode,研发订单默认选中"研发订单"Tag
            $this->set('DefaultSelectedTagIdx', array(3));
            $this->set('IsDevOrder', 1);
        } else if (false !== strpos($OrderType['Type']['name'], '备货')) {//hardcode,备货订单默认选中"备货申请"Tag
            $this->set('DefaultSelectedTagIdx', array(7));
        }
        if (!empty($mtl_req_type_list[$ReqType])) {
            $this->set('DefaultSelectedTagIdx', array(4)); //物料订单
        } else if (OCS_REQ_TYPE_CART_STOCK == $ReqType) {
            $this->set('DefaultSelectedTagIdx', array(5)); //购物车订单
        }

        $this->set('ship_from_org_id', $ship_from_org_id);

        //是否对应EBS多个订单行
        if ('edit' == $AllParams['P']['action']) {
            $req_ids = explode(',', $AllParams['P']['ids']);
            $isRelMultiOrderLines = $this->Req->isRelMultiOrderLines($req_ids);
            if (!empty($isRelMultiOrderLines)) {
                foreach ($isRelMultiOrderLines as $req_id => $value) {
                    if ($value) {
                        $this->set('is_disabled_bill_account', true); //第三方不可修改
                        $this->set('disabled_reason', '订单#' . $req_id . '关联EBS多个订单行，不允许修改第三方付款平台');
                    }
                }
            }
        }

        //定义各事业部某些需js处理的属性别名（恶心处理方法）
        switch ($g_BizId) {
            case OCS_BIZ_TYPE_SCS:
                $panel_alias = 'SW_SCS_Panel';
                $amplifier_voltage = 'SW_SCS_AmplifierVoltage';
                $power_current = 'SW_SCS_PowerCurrent';
            break;
            default:
                $panel_alias = 'SW_Panel';
                $amplifier_voltage = 'SW_AmplifierVoltage';
                $power_current = 'SW_PowerCurrent';
            break;
        }
        $this->set('panel_alias', $panel_alias);
        $this->set('amplifier_voltage', $amplifier_voltage);
        $this->set('power_current', $power_current);
    }

    //ajax提交订单信息
    function submit_ebs_req_by_ajax() {
        $this->autoRender = false;

        global $g_BizId;
        global $g_Commons;

        $result = array('success' => false, 'message' => '', 'datas' => '');
        if ($this->request->is('post') && !empty($this->request->data)) {
            $result = $this->saveReqContract($this->request->data);
            echo json_encode($result);
            return;
        }
        $result['message'] = '数据为空，保存失败。';
        echo json_encode($result);
        return;
    }

    //设置指定字段不可修改
    function setLayoutDisabledFields($Layout = null, $DisabledFields = array()) {
        if (empty($DisabledFields)) {
            return $Layout;
        }
        if (in_array('*', $DisabledFields)) {//全部都不可修改
            foreach ($Layout as $field => $temp) {
                $temp['attr']['readonly'] = 'true';
                $Layout[$field] = $temp;
            }
            return $Layout;
        }

        foreach ($DisabledFields as $field) {
            if (isset($Layout[$field])) {
                $Layout[$field]['attr']['readonly'] = 'true';
            }
        }
        return $Layout;
    }

    /**
     * 设置指定字段为必填项
     *
     * @Author   lishirong
     *
     * @DateTime 2016-05-25T21:48:45+0800
     *
     * @param    [type]                   $layout          [description]
     * @param    array                    $required_fields [必填字段]
     */
    function setLayoutRequiredFields($layout = null, $required_fields = array()) {
        if (empty($required_fields)) {
            return $layout;
        }

        foreach ($required_fields as $field) {
            if (!isset($layout[$field])) {
                continue;
            }
            if (!isset($layout[$field]['class']) || !preg_match('/.*(required).*/', $layout[$field]['class'])) {
                if (!isset($layout[$field]['class'])) {
                    $layout[$field]['class'] = '';
                }
                $layout[$field]['class'] .= ' required ';
            }
        }
        return $layout;
    }

    /**
     * 设置指定字段对应属性值，追加在最后，不替换
     *
     * @Author   lishirong
     *
     * @DateTime 2016-12-17T10:18:57+0800
     *
     * @param    array                    $layout [description]
     * @param    array                    $attr   [description]
     */
    function setLayoutAppendAttrFields($layout = array(), $attr = array()) {
        if (empty($attr)) {
            return $layout;
        }

        foreach ($attr as $field => $temp) {
            if (!isset($layout[$field])) {
                continue;
            }
            foreach ($temp as $key => $value) {
                $layout[$field][$key] = isset($layout[$field][$key]) ? $layout[$field][$key] : (('attr' == $key) ? array() : '');
                if (is_array($value)) {
                    foreach ($value as $k => $v) {
                        $layout[$field][$key][$k] = !isset($layout[$field][$key][$k]) ? '' : $layout[$field][$key][$k];
                        $layout[$field][$key][$k] .= ' ' . $v;
                    }
                } else {
                    $layout[$field][$key] .= ' ' . $value;
                }
            }
        }
        return $layout;
    }

    function verifyReqContract($data) {
        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_AccountAddresses = $g_Commons->GlobalController('AccountAddresses');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_ProdModelDetail = $g_Commons->GlobalModel('ProdModelDetail');
        $g_AccountRelObj = $g_Commons->GlobalModel('AccountRelObj');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_Type = $g_Commons->GlobalModel('Type');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $g_Users->User->recursive = -1;
        $g_ProdAttrs->ProdAttr->recursive = -1;
        $g_Accounts->Account->recursive = -1;
        $g_Atoms->Atom->recursive = -1;

        $result = $g_Commons->initResult();

        $action = $data['action'];
        if (!isset($action) || empty($action)) {
            $result['success'] = false;
            $result['message'] = '参数不正确，action不能为空。';
            return $result;
        }
        $data['req_type'] = isset($data['req_type']) ? $data['req_type'] : 0;
        $entry_type = isset($data['entry_type']) ? $data['entry_type'] : '';
        $is_trans_order = $this->Req->isTransOrder($entry_type);

        $mtl_req_type_list = $this->{$this->modelClass}->getMtlReqTypeList();

        if ('add' == $action) {
            if (!isset($data['order_type'])) {
                $result['success'] = false;
                $result['message'] = '订单类型不能为空。';
                return $result;
            }
            $g_Biz = $g_Commons->GlobalModel('Biz');
            $g_SeqRules = $g_Commons->GlobalController('SeqRules');
            $type_code = $data['order_type'];

            $type = $g_Type->findByCode($type_code);
            $typeId = $type['Type']['id'];
            $contract_no = $g_Contract->generateContractNoByTypeId($typeId);
        }

        //客户及资金操作平台的处理
        if (isset($data['head']['Req']['account_name'])) {
            $AccountId = $g_Accounts->getAccountIdByShortNameAndSourceType($data['head']['Req']['account_name'], 'EBS');
            if ($AccountId <= 0) {
                $result['success'] = false;
                $result['message'] = '客户不能为空。' . $data['head']['Req']['account_name'];
                return $result;
            }
            $data['head']['Req']['account_id'] = $AccountId;
        }
        if (isset($data['head']['Req']['ship_site_use_id'])) {//ship_site_use_id
            $ShipSiteUseId = $data['head']['Req']['ship_site_use_id'];
        }
        if (isset($data['head']['Contract']['mid_account_name'])) {
            $MidAccountId = $g_Accounts->getAccountIdByShortNameAndSourceType($data['head']['Contract']['mid_account_name'], 'EBS');
            if ($MidAccountId <= 0 && !empty($data['head']['Contract']['mid_account_name'])) {
                $result['success'] = false;
                $result['message'] = '终端不能为空。' . $data['head']['Contract']['mid_account_name'];
                return $result;
            }
            $data['head']['Contract']['mid_account_id'] = $MidAccountId;
        }
        if (isset($data['head']['Contract']['bill_site_use_id'])) {//bill_site_use_id
            $BillSiteUseId = $data['head']['Contract']['bill_site_use_id'];
        }
        if (!isset($ShipSiteUseId) || $ShipSiteUseId <= 0) {
            $result['success'] = false;
            $result['message'] = 'ShipSiteUseId不能为空';
            return $result;
        }
        if (!isset($BillSiteUseId) || $BillSiteUseId <= 0) {
            $result['success'] = false;
            $result['message'] = 'BillSiteUseId不能为空';
            return $result;
        }

        $is_edit_contract_all = false;
        if ('edit' == $action) {
            $req_ids = array();
            foreach ($data['Contract'] as $idx => $temp) {
                $req_ids[] = $idx;
            }

            //检查是否编辑同一合同号下的全部订单
            $po_result = $this->Req->checkIsAllInContract($req_ids);
            if ($po_result['success']) {
                $is_edit_contract_all = true;
            }

            $old_req = $this->Req->find('first', array(
                'joins' => array(
                    array(
                        'table' => 'contracts',
                        'alias' => 'Contract',
                        'type' => 'inner',
                        'conditions' => 'Contract.id = Req.rel_obj_id',
                    ),
                ),
                'conditions' => array(
                    'Req.id' => $req_ids,
                ),
                'fields' => array(
                    'Contract.type_id',
                )
            ));
            $typeId = !empty($old_req) ? $old_req['Contract']['type_id'] : 0;
        }

        $org_id = !empty($typeId) ? $this->Req->getOrgIdByOrderTypeId($typeId) : 0;

        $billAccountId = $g_AccountAddresses->getAccountIdBySiteUseId($BillSiteUseId, $org_id);
        $shipAcountId = $g_AccountAddresses->getAccountIdBySiteUseId($ShipSiteUseId, $org_id);
        if (isset($data['head']['Contract']['mid_account_name']) && !empty($data['head']['Contract']['mid_account_name'])) {
            if ($data['head']['Contract']['mid_account_id'] != $billAccountId) {
                $result['success'] = false;
                $result['message'] = '收单地点和第三方付款平台不一致';
                return $result;
            }
        }

        if (isset($data['head']['Req']['account_id']) && $data['head']['Req']['account_id'] != $shipAcountId) {
            $result['success'] = false;
            $result['message'] = '收货地址与客户不是同一客户，请重新填写客户。';
            return $result;
        }

        $ebs_new_line = false;
        if ('edit' == $action && isset($data['ebs_new_line']) && 1 == $data['ebs_new_line']) {//登记后仍需改产品代码的情况
            $ebs_new_line = true;
        }

        $SaveDatas = array();
        $alter_contrct_nos = array();
        foreach ($data['Contract'] as $idx => $temp) {
            //整理contracts表数据
            $Contract = array();
            if (OCS_BIZ_TYPE_TV == $g_BizId && !empty($temp['free_spare_qty']) && $temp['free_spare_qty'] > 300) {
                $result['success'] = false;
                $result['message'] = '免费备品数不允许超过 300';
                return $result;
            }

            if ('edit' == $action) {//编辑订单
                $ReqId = $idx;
                if ($ReqId <= 0) {
                    $result['success'] = false;
                    $result['message'] = '编辑订单req_id不能为空';
                    return $result;
                }
                $OldReq = $this->Req->find('first', array(
                    'conditions' => array('Req.id' => $ReqId),
                    'fields' => array('Req.id', 'Req.rel_obj_id', 'Req.product_id', 'Req.name',
                        'Req.sw_atom_ids_json', 'Req.account_id', 'Req.ebs_line_version', 'Req.req_type', 'Req.ebs_order_number',
                        'Req.account_id', 'Req.currency_id',
                    )
                ));
                if (empty($OldReq) || $OldReq['Req']['rel_obj_id'] <= 0) {
                    $result['success'] = false;
                    $result['message'] = '编辑订单contract_id不能为空';
                    return $result;
                }
                //检查备品数：如果原来数量大于0，而现在改为0，则不允许。
                $OldContract = $g_Contract->find('first', array(
                    'conditions' => array('Contract.id' => $OldReq['Req']['rel_obj_id']),
                    'fields' => array('Contract.id', 'Contract.free_spare_qty', 'Contract.order_time', 'Contract.type_id', 'Contract.mid_account_id',
                    'Contract.contract_no', 'Contract.flex_field_json', 'Contract.is_has_stock')
                ));
                if (empty($OldContract)) {
                    $result['success'] = false;
                    $result['message'] = '编辑订单对应的contract不存在，contract_id=' . $OldReq['Req']['rel_obj_id'];
                    return $result;
                }
                if ($OldContract['Contract']['free_spare_qty'] > 0 && $temp['free_spare_qty'] == 0 && !empty($OldReq['Req']['ebs_order_number'])) {//说明原来不为0，现在改为0
                    if (!empty($OldReq['Req']['ebs_order_number'])) {
                        $order_lines = $this->Req->GetOrderLinesByReqId($OldReq['Req']['id']);

                        $ebs_line_version = $OldReq['Req']['ebs_line_version'];
                        $ebs_line_version += 1;
                        $attribute12 = $OldReq['Req']['id'] . '_' . $ebs_line_version;
                        foreach ($order_lines as $order_line) {
                            if ($attribute12 == $order_line['ATTRIBUTE12'] && 'CANCELLED' != $order_line['FLOW_STATUS_CODE']) { //说明关联订单行未取消
                                $result['success'] = false;
                                $result['message'] = '备品数不能由原来的' . $OldContract['Contract']['free_spare_qty'] . '改为0，需先将EBS对应备品行取消。';
                                return $result;
                            }
                        }
                    }
                }

                $ProductId = $OldReq['Req']['product_id'];
                $ContractId = $OldReq['Req']['rel_obj_id'];
                $Contract['id'] = $ContractId;
            }

            $Contract['biz_id'] = $g_BizId;
            if ('add' == $action) {
                if (isset($typeId) && $typeId > 0) {
                    $Contract['type_id'] = $typeId;
                } else {
                    $result['success'] = false;
                    $result['message'] = '订单类型不存在';
                    return $result;
                }
                $Contract['contract_no'] = $contract_no;
            }
            if (isset($data['head']['Req']['account_id'])) {
                $Contract['account_id'] = $data['head']['Req']['account_id'];
            }
            if (isset($data['head']['Contract']['mid_account_id'])) {
                $Contract['mid_account_id'] = $data['head']['Contract']['mid_account_id'];

                //检查该订单的合同号是否全部第三方都相同，如存在不相同第三方的，则不允许修改
                if ('edit' == $action && !$is_edit_contract_all) {
                    $is_can_modify_mid_account = $g_Contract->isCanModifyMidAccount($OldContract['Contract']['id'], $Contract['mid_account_id']);
                    if (!$is_can_modify_mid_account) {
                        $result['success'] = false;
                        $result['message'] = '同一合同号需保持第三方付款平台一致，该订单不允许直接修改，如需变更请先修改该订单合同号。';
                        return $result;
                    }
                }
            }
            if (isset($data['head']['Contract']['invoice_to_contact_id'])) {
                $Contract['invoice_to_contact_id'] = $data['head']['Contract']['invoice_to_contact_id'];
            }
            if (isset($data['head']['Contract']['ship_from_org_id'])) {
                $Contract['ship_from_org_id'] = $data['head']['Contract']['ship_from_org_id'];
            }
            if (isset($BillSiteUseId) && $BillSiteUseId > 0) {
                $Contract['bill_site_use_id'] = $BillSiteUseId;
            }
            if (array_key_exists('delivety_time', $temp)) {
                $time = strtotime($temp['delivety_time']);
                $format_date = date('Y-m-d', $time);
                if (empty($time) || $time < 0 || $format_date !== $temp['delivety_time']) {
                    $result['success'] = false;
                    $result['message'] = '计划发运日期不允许为空，请填写后再提交。';
                    return $result;
                }
                $Contract['delivety_time'] = $temp['delivety_time'];
            }
            if (isset($temp['line_type_id'])) {
                $Contract['line_type_id'] = $temp['line_type_id'];
            }
            if (isset($temp['is_board_ship'])) {
                $Contract['is_board_ship'] = $temp['is_board_ship'];
            }
            if (isset($data['head']['Contract']['order_time'])) {
                $Contract['order_time'] = $data['head']['Contract']['order_time'];
                if ('add' == $action) {
                    $Contract['order_time'] = $data['head']['Contract']['order_time'] . date(' H:i:s');
                } else {
                    if (isset($OldContract) && date('Y-m-d', strtotime($OldContract['Contract']['order_time'])) != date('Y-m-d', strtotime($data['head']['Contract']['order_time']))) {//说明改了接单日期
                        $Contract['order_time'] = $data['head']['Contract']['order_time'] . date(' H:i:s');
                    }
                }
            }
            if (isset($temp['is_ckd'])) {
                $Contract['is_ckd'] = $temp['is_ckd'];
            }

            if (isset($data['head']['Contract']['address'])) {
                $Contract['address'] = $data['head']['Contract']['address'];
            }
            if (isset($data['head']['Contract']['address'])) {
                $Contract['address'] = $data['head']['Contract']['address'];
            }
            //物料订单，是否核料字段默认为“否”，需求：http://jira.cvte.com/browse/OCS-2179
            if (!empty($data['req_type']) && in_array($data['req_type'], $this->Req->getDefMtlTypes())) {
                $Contract['is_try_produce'] = 0;
            }
            if (isset($temp['is_try_produce'])) {
                $Contract['is_try_produce'] = $temp['is_try_produce'];
            }
            if (isset($temp['pi_remark'])) {
                $Contract['pi_remark'] = $temp['pi_remark'];
            }
            if (isset($temp['pi_note'])) {
                $Contract['pi_note'] = $temp['pi_note'];
            }
            if (isset($temp['other_board'])) {
                $Contract['other_board'] = trim($temp['other_board']);
            }
            if (isset($temp['rel_ebs_order_number'])) {
                $Contract['rel_ebs_order_number'] = trim($temp['rel_ebs_order_number']);
            }
            if (isset($temp['sw_req_info'])) {
                $Contract['sw_req_info'] = $temp['sw_req_info'];
            }
            $Contract['tech_price'] = (isset($temp['tech_price']) && !empty($temp['tech_price'])) ? $temp['tech_price'] : 0;
            $Contract['is_has_stock'] = $temp['is_has_stock'];
            $Contract['account_cno'] = $temp['account_cno'];
            $Contract['account_mno'] = $temp['account_mno'];
            $Contract['account_bno'] = $temp['account_bno'];
            $Contract['account_brand'] = $temp['account_brand'];
            $Contract['account_prod_name'] = $temp['account_prod_name'];
            $Contract['free_spare_qty'] = !empty($temp['free_spare_qty']) ? $temp['free_spare_qty'] : 0;
            $Contract['package_type'] = $temp['package_type'];
            $Contract['review_remark'] = isset($temp['review_remark']) ? $temp['review_remark'] : '';

            //登记后改代码，根据是否已开工单，设置attribute13的值
            if ('edit' == $action && isset($ReqId) && $ebs_new_line) {
                $is_had_wip = $this->Req->getLastCancelledOrderLineAttribute13($ReqId);
                $flex_field_json = array();
                if (!empty($OldContract['Contract']['flex_field_json'])) {
                    $flex_field_json = json_decode($OldContract['Contract']['flex_field_json'], true);
                }
                $flex_field_json['attribute13'] = ('Y' == $is_had_wip) ? 1 : 0;
                $Contract['flex_field_json'] = json_encode($flex_field_json);
            }

            //限制相关字段字符长度（为能成功传EBS）
            $limit_fields = array(
                'account_cno' => '客户单号',
                'account_mno' => '客户料号',
                'account_prod_name' => '客户机型',
            );
            foreach ($limit_fields as $limit_field => $label) {
                if (!isset($Contract[$limit_field])) {
                    continue;
                }
                if (strlen($Contract[$limit_field]) > 50) {
                    $result['success'] = false;
                    $result['message'] = '#' . $label . ' 字符长度不能超过50个字符，请修改后再同步。';
                    return $result;
                }
            }

            //OCS-750 注释 by ziying 2016-1-15
            // if ('edit' == $action) {//编辑订单
            //     //检查是否修改第三方付款平台,如有则生产变更单且需审核
            //     if ($OldContract['Contract']['mid_account_id'] != $billAccountId && !empty($OldReq['Req']['ebs_order_number'])) {
            //         $g_ContractRelMidAccount = $g_Commons->GlobalModel('ContractRelMidAccount');
            //         $rel_id = $g_ContractRelMidAccount->saveAlterMidAccount($OldReq['Req']['rel_obj_id'], $BillSiteUseId);
            //         if (!empty($rel_id)) {
            //             $old_contract_no = $OldContract['Contract']['contract_no'];
            //             $alter_contrct_nos[$OldContract['Contract']['type_id']][$old_contract_no][] = $OldReq['Req']['rel_obj_id'];
            //             //不保存第三方付款平台，需审核通过才覆盖
            //             unset($Contract['mid_account_id']);
            //             unset($Contract['bill_site_use_id']);
            //         }
            //     }
            // }

            //是否研发、样品订单
            if ('add' == $action) {
                $OrderType = $g_Type->find('first', array(
                    'conditions' => array('Type.code' => $data['order_type'], 'Type.biz_id' => $g_BizId),
                    'fields' => array('Type.id', 'Type.name', 'Type.code')
                ));
            } else {
                $OrderType = $g_Type->find('first', array(
                    'conditions' => array('Type.id' => $OldContract['Contract']['type_id']),
                    'fields' => array('Type.id', 'Type.name', 'Type.code')
                ));
            }
            if (empty($OrderType)) {
                $result['success'] = false;
                $result['message'] = '订单类型不存在。';
                return $result;
            }
            $is_dev_order = false === strpos($OrderType['Type']['name'], '研发') ? 0 : 1;
            $is_sam_order = false === strpos($OrderType['Type']['name'], '样品') ? 0 : 1;
            $is_semi_order = false === strpos($OrderType['Type']['name'], '备货') ? 0 : 1;


            /* 针对TV事业部（排除研发，样品，备货订单），新建订单时
            1）“否”出库存的情况：交货日期（发运日期） 大于等于 录单日期+5天
            2）“是”出库存的情况：交货日期（发运日期） 大于等于 录单日期
            */
            if ('add' == $action && isset($Contract['delivety_time']) && OCS_BIZ_TYPE_TV == $g_BizId && !$is_dev_order && !$is_sam_order && !$is_semi_order) {
                $current_time = strtotime(date('Y-m-d'));
                $delivety_time = strtotime($Contract['delivety_time']);

                if ($Contract['is_has_stock']) {
                    if ($delivety_time < $current_time) {
                        $result['success'] = false;
                        $result['message'] = '“是”出库存：交货日期须 >= 录单日期';
                        return $result;
                    }
                } else {
                    if (($delivety_time - $current_time) / 86400 < 5) {
                        $result['success'] = false;
                        $result['message'] = '“否”出库存：交货日期须 >= 录单日期+5';
                        return $result;
                    }
                }
            }

            //订单行类型为赠品，不可再录入备品数
            if(isset($Contract['line_type_id']) && !empty($Contract['line_type_id']) && $Contract['free_spare_qty'] > 0){
                $LineType = $g_Enum->find('first',array(
                    'conditions'=>array(
                        'Enum.dict_name'=>'Ebs.order_detail_type',
                        'Enum.value'=>$Contract['line_type_id'],
                        "Enum.label LIKE '%赠品%'"
                    ),
                    'fields'=>array('Enum.id','Enum.label'),
                ));
                if(!empty($LineType)){
                    $result['success'] = false;
                    $result['message'] = '订单行类型为赠品，备品数不可大于0';
                    return $result;
                }
            }
            // $final_account_id = $g_Accounts->findIdByAlias($temp['final_account_id']);
            // if (!empty($temp['final_account_id']) && !($final_account_id > 0)) {
            //     $result['success'] = false;
            //     $result['message'] = '终端客户#' . $temp['final_account_id'] . '，不存在。';
            //     return $result;
            // }
            // $Contract['final_account_id'] = $final_account_id;
            $SaveDatas[$idx]['Contract'] = $Contract; //记录整理好的contract数据
            //整理reqs表数据
            if (!isset($data['Req'][$idx])) {
                $result['success'] = false;
                $result['message'] = '提交的数据contract与req索引#' . $idx . '不一致。';
                return $result;
            }
            $TempReq = $data['Req'][$idx];
            $Req = array();
            if ('edit' == $action && isset($ReqId)) {
                $Req['id'] = $ReqId;
            }
            $Req['biz_id'] = $g_BizId;
            $Req['model_def_id'] = Contract;
            if (isset($data['head']['Req']['owner_user_name']) && !empty($data['head']['Req']['owner_user_name'])) {
                $Req['owner_user_id'] = $g_Users->getUserIdByRealname($data['head']['Req']['owner_user_name']);
                if ($Req['owner_user_id'] <= 0 || empty($Req['owner_user_id'])) {
                    $result['success'] = false;
                    $result['message'] = '负责内勤#' . $data['head']['Req']['owner_user_name'] . '，不存在。';
                    return $result;
                }
            }
            if (isset($data['head']['Req']['sales_user_name']) && !empty($data['head']['Req']['sales_user_name'])) {
                $Req['sales_user_id'] = $g_Users->getUserIdByRealname($data['head']['Req']['sales_user_name']);
                if (empty($Req['sales_user_id'])) {
                    $result['success'] = false;
                    $result['message'] = '负责销售#' . $data['head']['Req']['sales_user_name'] . '，不存在。';
                    return $result;
                }
            }
            if (isset($data['head']['Req']['account_id']) && $data['head']['Req']['account_id'] > 0) {
                $Req['account_id'] = $data['head']['Req']['account_id'];
            }
            if (isset($ShipSiteUseId) && $ShipSiteUseId > 0) {
                $Req['ship_site_use_id'] = $ShipSiteUseId;
            }
            if (isset($data['head']['Req']['currency_id']) && OCS_CURRENCY_USD == $data['head']['Req']['currency_id']) {
                $Req['currency_id'] = $data['head']['Req']['currency_id'];
            } else {
                $Req['currency_id'] = OCS_CURRENCY_RMB;
            }

            if ('add' == $action && isset($Req['account_id']) && isset($Contract['mid_account_id']) && isset($Contract['contract_no'])) {
                $is_exist_contract_no = $this->Req->verifyContractNoIsExist($Contract['contract_no'], $Req['account_id'], $Contract['mid_account_id'], $Req['currency_id']);
                if ($is_exist_contract_no) {
                    $result['success'] = false;
                    $result['message'] = '合同号#' . $Contract['contract_no'] . '冲突，请重新提交保存。';
                    return $result;
                }
            }

            // 判断是否存在本事业部关联其他事业部，若有则可查出关联的所有事业部，没有就使用本事业部产品
            $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
            $biz_rel_bizs = $g_ObjRelObj->find('first', array(
                'conditions' => array(
                    'ObjRelObj.model_def_id' => Biz,
                    'ObjRelObj.rel_obj_id' => $g_BizId,
                    'ObjRelObj.meta_type' => OCS_OBJ_REL_OBJ_META_TYPE_BIZ_REL_OTHER_BIZ_PROD,
                    'ObjRelObj.meta_key' => 'Biz.rel_other_biz_prod'
                ),
                'fields' => 'ObjRelObj.meta_value'
            ));

            if (empty($biz_rel_bizs)) {
                $AllowProdBizs = array($g_BizId);
            } else {
                $AllowProdBizs = json_decode($biz_rel_bizs['ObjRelObj']['meta_value'], true);
                $AllowProdBizs[] = $g_BizId;
            }

            //判断是否为物料订单
            $is_material_order = (isset($mtl_req_type_list[$data['req_type']]) || (isset($OldReq) && in_array($OldReq['Req']['req_type'], $this->Req->getDefMtlTypes())));

            //物料订单产品 不区分事业部
            if ($is_material_order) {
                $AllowProdBizs = array(); //不区分事业部
                // $AllowProdBizs = array(OCS_BIZ_TYPE_TV, OCS_BIZ_TYPE_PS, OCS_BIZ_TYPE_WA, OCS_BIZ_TYPE_STB, OCS_BIZ_TYPE_MID, OCS_BIZ_TYPE_CE, OCS_BIZ_TYPE_AE, OCS_BIZ_TYPE_ISH, OCS_BIZ_TYPE_SCS, OCS_BIZ_TYPE_TAD);
            }

            if (isset($TempReq['product_id'])) {//通过产品名称查找产品
                $conds = array(
                    'Product.name' => $TempReq['product_id'],
                    'Product.is_delete' => 0,
                );
                if (!empty($AllowProdBizs)) {
                    $conds['Product.biz_id'] = $AllowProdBizs;
                }
                $Product = $g_Product->find('first', array(
                    'joins' => array(
                        array(
                            'table' => 'prod_models',
                            'alias' => 'ProdModel',
                            'type' => 'LEFT',
                            'conditions' => 'ProdModel.id = Product.prod_model_id'
                        ),
                    ),
                    'conditions' => $conds,
                    'fields' => 'Product.id, Product.biz_id, Product.prod_model_id, Product.code, Product.name, Product.tmp_code, Product.order_account_id,
                            ProdModel.name, ProdModel.prod_folder_id, Product.account_id, Product.is_semi, Product.pcb_id, Product.status, Product.source_type, Product.type'
                ));
                if (empty($Product)) {
                    $result['success'] = false;
                    $result['message'] = '产品#' . $TempReq['product_id'] . ' 不存在或者是无效产品.';
                    return $result;
                }

                //物料订单不能录非物料产品，正式订单也不能录物料产品
                if ($is_material_order) {//物料订单
                    if (in_array($g_BizId, array(OCS_BIZ_TYPE_TV, OCS_BIZ_TYPE_SCS))) {
                        if ($Product['Product']['type'] != OCS_PRODUCT_TYPE_MATERIAL) {
                            $result['success'] = false;
                            $result['message'] = '物料订单不能录正式的产品';
                            $result['datas'] = $data;
                            return $result;
                        }

                        // [OCS-701]物料订单如果产品名称包含 “高频头” 则 “主板代码” 字段必填
                        $Contract['other_board'] = trim($Contract['other_board']);
                        if ($g_Product->isTunnerMaterial($Product['Product']['id']) && empty($Contract['other_board'])) {
                            $result['success'] = false;
                            $result['message'] = '物料产品包含“高频头”的物料订单“主板代码”必填';
                            $result['datas'] = $data;
                            return $result;
                        }

                        // [OCS-701]必须存在系统的代码
                        $is_exist_code = $g_Product->find('first', array(
                            'conditions' => array(
                                'Product.code' => $Contract['other_board']
                            ),
                            'fields' => 'Product.id'
                        ));
                        if (empty($is_exist_code)) {
                            $result['success'] = false;
                            $result['message'] = '填写的 “主板代码” 在系统中不存在, 请重新确认填写';
                            $result['datas'] = $data;
                            return $result;
                        }
                    } else {
                        $code = empty($Product['Product']['tmp_code']) ? $Product['Product']['code'] : $Product['Product']['tmp_code'];
                        // if ('001' == $code[0]) {
                        //     $result['success'] = false;
                        //     $result['message'] = '物料订单不能录整机产品';
                        //     $result['datas'] = $data;
                        //     return $result;
                        // }
                    }
                } else {//正式订单
                    if ($Product['Product']['type'] == OCS_PRODUCT_TYPE_MATERIAL) {
                        $result['success'] = false;
                        $result['message'] = '正式订单不能录物料的产品';
                        $result['datas'] = $data;
                        return $result;
                    }
                }

                // 非TV订单 保存是否保税字段
                if (OCS_BIZ_TYPE_TV != $g_BizId) {
                    $SaveDatas[$idx]['Contract']['is_protective_tariff'] = $g_Product->is_protective_tariff_product($Product['Product']['id']);
                }
                $Req['product_id'] = $Product['Product']['id'];
                $ProductId = $Req['product_id'];

                if ('edit' == $action && isset($ReqId)) {
                    //登记后改产品代码
                    if ($ebs_new_line && !empty($OldReq)) {// && $Req['product_id'] != $OldReq['Req']['product_id']
                        $is_exist_enable_line = $this->Req->isCancelledOrderLines($ReqId);
                        if ($is_exist_enable_line) {
                            $result['message'] = '订单#' . $OldReq['Req']['ebs_order_number'] . '存在未取消的订单行，不允许登记后改代码。';
                            return $result;
                        }
                        $Req['ebs_line_version'] = $OldReq['Req']['ebs_line_version'] + 10; //#order hardcode,固定每变动一次，版本递增10
                    }
                }

                //查EBS验证产品是否可用
                $ship_from_org_id = isset($Contract['ship_from_org_id']) ? $Contract['ship_from_org_id'] : 0;
                if (empty($ship_from_org_id) && in_array($g_BizId, array(OCS_BIZ_TYPE_TV, OCS_BIZ_TYPE_SCS))) {
                    $ship_from_org_id = 86; //TV默认86
                }
                if (empty($ship_from_org_id)) {
                    $result['message'] = '发货组织为空，无法验证产品是否有效，不允许保存';
                    return $result;
                }
                if (empty($Product['Product']['code'])) {
                    $result['message'] = '产品' . $Product['Product']['name'] . '未传agile，没有产品代码，不允许录单，再先同步产品';
                    return $result;
                }
                $check_product_result = $this->Req->checkProductCodeIsAvailable($Product['Product']['code'], $ship_from_org_id);
                if ('S' != $check_product_result) {
                    $result['message'] = $check_product_result;
                    return $result;
                }

                //检查004001物料库存的数量是否满足条件
                if (OCS_BIZ_TYPE_TV == $g_BizId && empty($temp['is_has_stock']) && (!isset($data['is_confirm_submit']) || 0 == $data['is_confirm_submit'])) {
                    $check_card_product_qty = $this->Req->checkBoardCardQty($Product['Product']['code'], $ship_from_org_id, $TempReq['quantity']);
                    if (!$check_card_product_qty['success']) {
                        $result['code'] = 'check_card_product';
                        $result['message'] = $check_card_product_qty['message'];
                        return $result;
                    }
                }

                // 检查免费备品数量是否大于订单数量的1%
                if (OCS_BIZ_TYPE_TV == $g_BizId && $temp['free_spare_qty'] * 100 > $TempReq['quantity'] && (!isset($data['is_confirm_submit']) || 0 == $data['is_confirm_submit'])) {
                    $result['code'] = 'check_free_spare_qty';
                    $result['message'] = '所填的免费备品数量大于订单数量的1%，请确认是否提交？';
                    return $result;
                }

                //检查是否出库存，由“否”=>“是”，则为软件任务添加评论
                if ('edit' == $action && !empty($OldContract) && empty($OldContract['Contract']['is_has_stock'])
                    && array_key_exists('is_has_stock', $temp) && !empty($temp['is_has_stock'])) {
                    $g_TaskComment = $g_Commons->GlobalModel('TaskComment');
                    $g_Task = $g_Commons->GlobalModel('Task');
                    $task = $g_Task->find('first', array(
                        'conditions' => array(
                            'Task.model_def_id' => Req,
                            'Task.rel_obj_id' => $idx,
                        ),
                        'fields' => array(
                            'Task.id',
                        )
                    ));
                    if (!empty($task)) {
                        if (!isset($data['is_confirm_submit'])) {
                            $result['code'] = 'add_task_comment';
                            $result['message'] = '出库存订单，请确认是否保留软件任务处理？';
                            return $result;
                        }
                        if (array_key_exists('is_confirm_submit', $data) && 0 == $data['is_confirm_submit']) { //不需处理软件，添加如下评论
                            $task_comment = '<p style="margin: 2px;"><span style="color: #000000; background-color: #ffff00;"><strong>直接出库存，无需处理软件。</strong></span></p>';
                            $g_TaskComment->addTaskComment($task['Task']['id'], $task_comment);
                        }
                    }
                }

                // //验证，正式产品不能选择订单上的是否备料为“是”
                // if(isset($TempReq['is_semi']) && $TempReq['is_semi'] == 1 && $Product['Product']['is_semi'] ==0){
                //     $result['success'] = false;
                //     $result['message'] = '正式产品#'.$Product['Product']['name'].'，订单备料选项不能选择为“是”';
                //     $result['datas'] = $Product;
                //     return $result;
                // }
                //检查填写的产品客户与订单的客户是否符合(除公共产品外)
                // 加入第三方平台的判断,产品不只是限制在对应客户
                // if($Product['Product']['account_id'] >0 && $Product['Product']['account_id'] != $Req['account_id'] && $Product['Product']['account_id'] != $Contract['mid_account_id']){
                //     $result['success'] = false;
                //     $result['message'] = '产品#'.$Product['Product']['name'].'对应的客户与订单头的客户#'.$data['head']['Req']['account_name'].' 不一致';
                //     $result['datas'] = $Product;
                //     return $result;
                // }
                //检查产品的状态，只有新创建和审核通过才可以录单
                // 暂时把停用产品也可以保存，下面再验证是否出库存 by wuhuashan
                if (!in_array($Product['Product']['status'], array(OCS_STATUS_NEW, OCS_STATUS_AUDITED, OCS_STATUS_STOP))) {
                    $result['success'] = false;
                    $result['message'] = '保存失败，产品状态#' . $g_Enum->getLabelByDictNameAndValue('Product.status', $Product['Product']['status']) . ',不能保存';
                    $result['datas'] = $Product;
                    return $result;
                }

                if (OCS_BIZ_TYPE_TV == $g_BizId && !$temp['is_has_stock']) {
                    // [OCS-1160]产品管理:订单产品增加录单范围限制
                    $g_ProdModelDetailAccountRange = $g_Commons->GlobalModel('ProdModelDetailAccountRange');
                    $pcb_account_range = $g_ProdModelDetailAccountRange->find('list', array(
                        'conditions' => array(
                            'ProdModelDetailAccountRange.prod_model_detail_id' => $Product['Product']['pcb_id'],
                        ),
                        'fields' => 'ProdModelDetailAccountRange.id, ProdModelDetailAccountRange.account_id'
                    ));
                    if (!empty($pcb_account_range)) {
                        $account_ids = array($data['head']['Req']['account_id']);
                        if (!empty($data['head']['Contract']['mid_account_id'])) {
                            $account_ids[] = $data['head']['Contract']['mid_account_id'];
                        }
                        if (!empty($Product['Product']['account_id'])) {
                            $account_ids[] = $Product['Product']['account_id'];
                        }
                        if (!empty($Product['Product']['order_account_id'])) {
                            $account_ids[] = $Product['Product']['order_account_id'];
                        }
                        $is_in_range = array_intersect($account_ids, $pcb_account_range);
                        if (empty($is_in_range)) {
                            $result['success'] = false;
                            $result['message'] = '保存失败，所选客户没有在对应产品的产品全称客户可用范围内,不能保存';
                            $result['datas'] = $Product;
                            return $result;
                        }
                    }
                }

                // OCS-1693 产品全称（周期号）默认国家/区域限制
                $g_DataRelation = $g_Commons->GlobalModel('DataRelation');
                $country_relation_data = $g_DataRelation->getRelationData('ProdModelDetail.id', $Product['Product']['pcb_id'], 'Atom.SW_DefaultCountry');
                if (!empty($country_relation_data) && !empty($country_relation_data['Atom.SW_DefaultCountry']) && isset($data['Atom'][$idx]['SW_DefaultCountry'])) {
                    $rely_on_countrys = array();
                    $exclude_countrys = array();
                    foreach ($country_relation_data['Atom.SW_DefaultCountry'] as $atom_id => $relation_type) {
                        switch ($relation_type) {
                            case OCS_OPT_REL_RELY_ON:
                                // 包含国家
                                $rely_on_countrys[] = $atom_id;
                                break;
                            case OCS_OPT_REL_EXCLUDE:
                                // 排除国家
                                $exclude_countrys[] = $atom_id;
                                break;
                        }
                    }
                    if (!empty($rely_on_countrys)) {
                        $countrys = $g_Atoms->Atom->find('list', array(
                            'conditions' => array(
                                'Atom.id' => $rely_on_countrys,
                            ),
                            'fields' => 'Atom.id, Atom.name'
                        ));
                        if (!in_array($data['Atom'][$idx]['SW_DefaultCountry'], $countrys)) {
                            $result['success'] = false;
                            $result['message'] = '保存失败，所选默认国家/区域没有在对应产品（'.$Product['Product']['name'].'）的产品全称设置的 “可用范围” 内,不能保存。可选范围：' . implode(',', $countrys);
                            $result['datas'] = $Product;
                            return $result;
                        }
                    } elseif (!empty($exclude_countrys)) {
                        $countrys = $g_Atoms->Atom->find('list', array(
                            'conditions' => array(
                                'Atom.id' => $exclude_countrys,
                            ),
                            'fields' => 'Atom.id, Atom.name'
                        ));
                        if (in_array($data['Atom'][$idx]['SW_DefaultCountry'], $countrys)) {
                            $result['success'] = false;
                            $result['message'] = '保存失败，所选默认国家/区域在对应产品（'.$Product['Product']['name'].'）的产品全称设置的 “不可用范围” 内,不能保存。不可选范围：' . implode(',', $countrys);
                            $result['datas'] = $Product;
                            return $result;
                        }
                    }
                }

                // 旧有杜比录单管控 add by ziying 2015-10-23
                // if (OCS_BIZ_TYPE_TV == $g_BizId || OCS_BIZ_TYPE_STB == $g_BizId || OCS_BIZ_TYPE_SCS == $g_BizId) {
                //     if (0 == $is_dev_order && 0 == $is_sam_order && true == $g_Product->isWithDolbyByProductid($Product['Product']['id'])) {
                //         $account_ids = array();
                //         $account_ids[] = $data['head']['Req']['account_id'];
                //         if (isset($data['head']['Contract']['mid_account_id'])) {
                //             $account_ids[] = $data['head']['Contract']['mid_account_id'];
                //         }
                //         $has_dolby_account = $g_Accounts->Account->find('list', array(
                //             'conditions' => array(
                //                 'Account.id' => $account_ids,
                //                 'Account.is_dolby_custom' => 1
                //             ),
                //             'fields' => 'Account.id, Account.dolby_custom_name'
                //         ));
                //         if (empty($has_dolby_account)) {
                //             $result['success'] = false;
                //             $result['message'] = '产品 ' . $Product['Product']['name'] . ' 带杜比，所选客户并不是杜比会员，无法保存，如有疑问请联系谢超龙.';
                //             return $result;
                //         }
                //         $SaveDatas[$idx]['Contract']['is_with_dolby'] = 1;
                //         $SaveDatas[$idx]['Contract']['dolby_account_id'] = !empty($has_dolby_account[$data['head']['Contract']['mid_account_id']]) ? $data['head']['Contract']['mid_account_id'] : $data['head']['Req']['account_id'];
                //         $SaveDatas[$idx]['Contract']['dolby_account_name'] = !empty($has_dolby_account[$data['head']['Contract']['mid_account_id']]) ? $has_dolby_account[$data['head']['Contract']['mid_account_id']] : $has_dolby_account[$data['head']['Req']['account_id']];
                //     }
                // }

                // OCS-653 杜比方案 - 销售订单录单及发货管控 add by ziying 2015-10-23
                // 后期优化 add by ziying 2016-4-14
                if (OCS_BIZ_TYPE_TV == $g_BizId || OCS_BIZ_TYPE_STB == $g_BizId || OCS_BIZ_TYPE_SCS == $g_BizId) {
                    if (0 == $is_dev_order && 0 == $is_sam_order) {
                        //区分物料订单和普通订单的逻辑判断
                        if ($g_Product->isWithDolbyByProductid($Product['Product']['id'])
                            || ($is_material_order && $g_Product->isWithDolbyMaterial($Product['Product']['id']))) {

                            $g_Atom = $g_Commons->GlobalModel('Atom');
                            $g_DolbyAccountInfo = $g_Commons->GlobalModel('DolbyAccountInfo');

                            /*
                                1.客户、第三方付款平台→杜比客户（以第三方付款平台为准）
                                2.客户→杜比客户、第三方付款平台→非杜比客户（以客户为准）
                                3.客户→非杜比客户、第三方付款平台→杜比客户（以第三方付款平台为准）
                                4.客户、第三方付款平台→非杜比客户（两个客户都要报错）
                            */

                            //判断第三方付款平台和所选客户是否为杜比客户
                            $dolby_account_id = null;
                            if (isset($data['head']['Contract']['mid_account_id']) && !empty($data['head']['Contract']['mid_account_id'])) {
                                if ($g_DolbyAccountInfo->isDolbyAccount($data['head']['Contract']['mid_account_id'])) {
                                    $dolby_account_id = $data['head']['Contract']['mid_account_id'];
                                }
                            }

                            if (null == $dolby_account_id) {
                                if ($g_DolbyAccountInfo->isDolbyAccount($data['head']['Req']['account_id'])) {
                                    $dolby_account_id = $data['head']['Req']['account_id'];
                                } else {
                                    $result['success'] = false;
                                    $result['message'] = ' 产品 ' . $Product['Product']['name'] . ' 含有杜比功能，但是';
                                    if (isset($data['head']['Contract']['mid_account_id'])) {
                                        $result['message'] .= '所选的第三方付款平台 ' . $g_Accounts->getNameById($data['head']['Contract']['mid_account_id']). ' 以及';
                                    }
                                    $result['message'] .= '所选的客户 ' . $g_Accounts->getNameById($data['head']['Req']['account_id']) . ' 不是杜比客户，或者客户状态为不可用，详情请联系谢超龙.';
                                    return $result;
                                }
                            }

                            $dolby_account_auth_infos_result = $g_DolbyAccountInfo->checkDolbyAccountAuth($dolby_account_id, $Product['Product']['id']);

                            if (!$dolby_account_auth_infos_result['success']) {
                                $result['message'] = $dolby_account_auth_infos_result['message'];
                                return $result;
                            }

                            $SaveDatas[$idx]['Contract']['is_with_dolby'] = 1;
                            $SaveDatas[$idx]['Contract']['dolby_account_id'] = $dolby_account_id;
                            $SaveDatas[$idx]['Contract']['dolby_account_name'] = $g_Accounts->getNameById($dolby_account_id);

                        }
                    }
                }

                //验证真实客户
                if (isset($TempReq['stock_account_id']) && !empty($TempReq['stock_account_id'])) {
                    $stock_account_id = $g_Accounts->getAccountIdByShortNameAndSourceType($TempReq['stock_account_id'], 'EBS');
                    if (empty($stock_account_id)) {
                        $result['success'] = false;
                        $result['message'] = '真实客户 #'. $TempReq['stock_account_id'] . '不存在';
                        return $result;
                    }
                    $Req['stock_account_id'] = $stock_account_id;
                }
                $req_stock_account_id = isset($Req['stock_account_id']) ? $Req['stock_account_id'] : 0;
                $req_account_id = isset($Req['account_id']) ? $Req['account_id'] : 0;

                // 检测产品的适用范围 modify by linfangjie 2017.05.15
                $vertify_result = $this->vertifyReqProduct($Product['Product']['id'], $AllowProdBizs, $temp['is_has_stock'], $TempReq['quantity'], $typeId, $req_stock_account_id, $req_account_id);
                if ($vertify_result['success'] == false) {
                    $result['success'] = false;
                    $result['message'] = $vertify_result['message'];
                    $result['datas'] = $vertify_result['datas'];
                    return $result;
                }
            }
            if (!isset($Req['product_id']) || $Req['product_id'] <= 0) {
                $result['success'] = false;
                $result['message'] = '产品不能为空,product_id=' . $Req['product_id'];
                return $result;
            }

            $Req['rd_dept_id'] = 1; //order#hardcode,原来是根据系列获取研发部门，已不适用。
            if (isset($TempReq['quantity'])) {
                $Req['quantity'] = $TempReq['quantity'];
                if ($Req['quantity'] <= 0) {
                    $result['success'] = false;
                    $result['message'] = '数量不能为0';
                    $result['datas'] = $Req['quantity'];
                    return $result;
                }
            }
            if (isset($TempReq['price'])) {
                if ((OCS_BIZ_TYPE_TV == $g_BizId && isset($OrderType) && substr_count($OrderType['Type']['name'], '研发') <= 0
                    && substr_count($OrderType['Type']['name'], '样品') <= 0 && $TempReq['price'] <= 0)  ||
                    ('' == trim($TempReq['price']) || null == $TempReq['price'])) {
                    $result['success'] = false;
                    $result['message'] = '单价不能为空';
                    return $result;
                }
                $Req['price'] = $TempReq['price'];
            }
            // if (isset($TempReq['is_semi'])) {
            //     $Req['is_semi'] = $TempReq['is_semi'];
            // }
            if (isset($TempReq['sw_contact_id'])) {
                $Req['sw_contact_id'] = $TempReq['sw_contact_id'];
            }
            // if (isset($TempReq['amount'])) {
            //     $Req['amount'] = $TempReq['amount'];
            // }
            if (isset($TempReq['foreign_price'])) {//外币单价
                if (OCS_BIZ_TYPE_TV == $g_BizId &&  isset($OrderType) && substr_count($OrderType['Type']['name'], '研发') <= 0
                    && substr_count($OrderType['Type']['name'], '样品') <= 0 && $TempReq['foreign_price'] <= 0
                    || ('' == trim($TempReq['foreign_price']) || null == $TempReq['foreign_price'])) {
                    $result['success'] = false;
                    $result['message'] = '单价不能为空';
                    return $result;
                }
                if(!isset($data['head']['Req']['exchange_ratio'])){
                    $result['success'] = false;
                    $result['message'] = 'exchange_ratio未定义，货币类型错误。';
                    return $result;
                }
                $exchange_ratio = $data['head']['Req']['exchange_ratio'];
                $Req['exchange_ratio'] = $exchange_ratio;
                $Req['foreign_price'] = $TempReq['foreign_price'];
                $Req['foreign_amount'] = $Req['foreign_price'] * $TempReq['quantity'];
                $Req['foreign_amount'] = round($Req['foreign_amount'], 4);

                $Req['price'] = $TempReq['foreign_price'] * $exchange_ratio; //转成人民币
                $Req['amount'] = round($TempReq['foreign_amount'] * $exchange_ratio, 4);
            } else {
                $Req['amount'] = round($TempReq['quantity'] * $TempReq['price'], 4);
                $Req['exchange_ratio'] = 1;
            }
            if (!empty($data['req_type'])) {
                // if (1 == $data['material']) {
                //     $Req['req_type'] = OCS_REQ_TYPE_MATERIAL;
                // } else {
                //     $Req['req_type'] = OCS_REQ_TYPE_SKD;
                // }
                $Req['req_type'] = $data['req_type'];
            } else if (isset($data['entry_type']) && 'cart' == $data['entry_type']) {
                $Req['req_type'] = OCS_REQ_TYPE_CART_STOCK; //购物车（库存）
            }

            // OCS-647 验证背光控制是否需要软件调光
            if (isset($data['Atom'][$idx]['SW_PowerCurrent'])) {
                $verify_power_current = $this->Req->verifyPowerCurrent($ProductId, $data['Atom'][$idx]['SW_PowerCurrent']);
                if (!$verify_power_current['success']) {
                    $result['success'] = false;
                    $result['message'] = $verify_power_current['message'];
                    return $result;
                }
            }

            //用来验证这些配件是否属于这个产品（防止在ajax还没请求完就点击提交的情况）
            // 验证提交的软件占空比是否符合对应的产品的电源及背光

            // if (!empty($RelProductInfos['power_current']) && isset($data['Atom'][$idx]['SW_PowerCurrent']) && '无' != $data['Atom'][$idx]['SW_PowerCurrent']) {
            //     $power_current = $g_Atoms->Atom->find('count', array(
            //         'joins' => array(
            //             array(
            //                 'table' => 'enums',
            //                 'alias' => 'Enum',
            //                 'type' => 'LEFT',
            //                 'conditions' => 'Enum.dict_name=\'SW_PowerCurrent.category\' and Enum.value=Atom.category_id'
            //             )
            //         ),
            //         'conditions' => array(
            //             'Atom.name' => $data['Atom'][$idx]['SW_PowerCurrent'],
            //             'Atom.prod_attr_id' => SW_PowerCurrent,
            //             'Enum.label' => $RelProductInfos['power_current']
            //         ),
            //     ));

            //     if ($power_current <= 0) {
            //         $result['success'] = false;
            //         $result['message'] = '所选的软件占空比与产品背光要求不一致，请重新选择';
            //         return $result;
            //     }
            // }

            $RelProductInfos = $this->Req->getRelProductDatas($ProductId);

            //其他配件
            $Req['ext_3rd_party_prods'] = '无';
            if (isset($TempReq['ext_3rd_party_prods'])) {
                $ext_3rd_party_prods = array();
                if (is_array($TempReq['ext_3rd_party_prods'])) {
                    $TempReq['ext_3rd_party_prods'] = implode(' ; ', $TempReq['ext_3rd_party_prods']);
                    $TempReq['ext_3rd_party_prods'] = $g_Commons->js_unescape($TempReq['ext_3rd_party_prods']);
                    $ext_3rd_party_prods = explode(' ; ', $TempReq['ext_3rd_party_prods']);
                } else {
                    $ext_3rd_party_prods[] = $TempReq['ext_3rd_party_prods'];
                }
                $Req['ext_3rd_party_prods'] = $TempReq['ext_3rd_party_prods'];

                //验证配件
                foreach ($ext_3rd_party_prods as $value) {
                    $value = trim($value);
                    //产品有配件，选择项不在可选范围内，不允许保存
                    if (!in_array($value, $RelProductInfos['Widget']) && !empty($RelProductInfos['Widget'])) {
                        $result['success'] = false;
                        $result['message'] = '产品#' . $ProductId . ' 不存在配件#' . $value;
                        return $result;
                    }
                    //产品无配件，选项值只允许为“无”，否则不允许保存
                    if (empty($RelProductInfos['Widget']) && '无' != $value) {
                        $result['success'] = false;
                        $result['message'] = '产品无配件，其他配件选项只允许选择“无”';
                        return $result;
                    }
                }
            }

            //有配件，不允许为空
            if (!empty($RelProductInfos['Widget']) && empty($Req['ext_3rd_party_prods'])) {
                $result['success'] = false;
                $result['message'] = '产品#' . $ProductId . ' 存在配件，“其他配件”字段不允许为空';
                return $result;
            }

            if (isset($TempReq['hw_rel_sw_atom_ids']) && !empty($TempReq['hw_rel_sw_atom_ids'])) {
                foreach ($TempReq['hw_rel_sw_atom_ids'] as $value) {
                    if (empty($value)) {
                        continue;
                    }
                    $rel_hw_rel_sw_atom_ids = array_keys($RelProductInfos['hw_rel_sw_atoms']);
                    if (!in_array($value, $rel_hw_rel_sw_atom_ids)) {
                        $result['success'] = false;
                        $result['message'] = '产品#' . $ProductId . ' 不存在硬件关联软件项#' . $RelProductInfos['hw_rel_sw_atoms'][$value];
                        return $result;
                    }
                }
                $Req['hw_rel_sw_atom_ids'] = implode(',', $TempReq['hw_rel_sw_atom_ids']);
            } else {
                $Req['hw_rel_sw_atom_ids'] = '';
            }
            if (!empty($TempReq['invc_prod_name'])) {
                $Req['invc_prod_name'] = $TempReq['invc_prod_name'];
            } else {
                if (!$is_dev_order && !$is_sam_order) { //非研发、样品订单，货物名称必填
                    $result['success'] = false;
                    $result['message'] = '货物名称不允许为空，请填写后再提交';
                    return $result;
                }
            }
            $Req['remark'] = $TempReq['remark'];
            if (isset($TempReq['mf_remark'])) {
                $Req['mf_remark'] = $TempReq['mf_remark'];
            }

            $Req['prod_lock_type'] = empty($TempReq['prod_lock_type']) ? 0 : $TempReq['prod_lock_type'];

            //新建时，如果只有一个默认工厂，则直接设置默认工厂
            if ('add' == $action) {
                $g_ProdModelRelAccount = $g_Commons->GlobalModel('ProdModelRelAccount');
                // 获取组织ID
                if (!empty($Contract['ship_from_org_id'])) {
                    $organization_id = $Contract['ship_from_org_id'];
                } elseif (in_array($$g_BizId, array(OCS_BIZ_TYPE_TV, OCS_BIZ_TYPE_SCS))) {//TV事来部,hardcode 86
                    $organization_id = 86;  //#order,hardcode仓库,86--广州视源
                } else {
                    $organization_id = 0;
                }

                $mto_nos = $g_ProdModelRelAccount->GetAvailableMtoNosByAccountIdAndProdModelIdAndOrgId($Req['account_id'], $Product['Product']['prod_model_id'], $organization_id);
                if (!empty($mto_nos) && 1 == count($mto_nos)) { //只有一个
                    foreach ($mto_nos as $mto_no) {
                        $SaveDatas[$idx]['Contract']['mto_no'] = $mto_no;
                    }
                }
            }

            //整理sw_atom_ids
            $SwAtomIds = array(); //记录属性:功能元ids
            $extend_atom_ids = array();
            $TempAtoms = isset($data['Atom'][$idx]) ? $data['Atom'][$idx] : array();
            if (!empty($TempAtoms)) {
                foreach ($TempAtoms as $prod_attr_alias => $AtomName) {
                    if (is_array($AtomName)) {
                        foreach ($AtomName as &$atom_name) {
                            $atom_name = trim($atom_name);
                        }
                    } else {
                        $AtomName = trim($AtomName);
                    }
                    if (empty($AtomName)) {
                        $result['success'] = false;
                        $result['message'] = '属性 #' . $prod_attr_alias . ' 功能元为空。';
                        return $result;
                    }
                    if ('SW_ExtendSwAtoms' == $prod_attr_alias) {//其他软件项
                        foreach ($AtomName as $atom_name) {
                            $opt_prod_attr_id = $g_ProdAttrs->getProdAttrIdByAlias('SW_OptFunc'); //可选功能
                            $Atom = $g_Atoms->Atom->find('first', array(
                                'conditions' => array('Atom.name' => $atom_name, 'Atom.prod_attr_id' => $opt_prod_attr_id),
                                'fields' => array('Atom.id', 'Atom.prod_attr_id')
                            ));
                            if (empty($Atom)) {
                                $result['success'] = false;
                                $result['message'] = '可选功能属性没有此功能元#' . $atom_name;
                                return $result;
                            }
                            $extend_atom_ids[] = $Atom['Atom']['id'];
                            if (!isset($SwAtomIds[$Atom['Atom']['prod_attr_id']])) {
                                $SwAtomIds[$Atom['Atom']['prod_attr_id']] = array();
                            }
                            if (!in_array($Atom['Atom']['id'], $SwAtomIds[$Atom['Atom']['prod_attr_id']])) {
                                $SwAtomIds[$Atom['Atom']['prod_attr_id']][] = $Atom['Atom']['id'];
                            }
                        }
                        continue;
                    }
                    // if ('SW_CIPlus' == $prod_attr_alias) {//CI PLUS特殊处理，如果选择“CI_Plus”则实际使用SW_OptFunc_CIPlus功能元
                    //     $prod_attr_alias = 'SW_OptFunc';
                    //     $AtomName = ('CI_Plus' == $AtomName) ? 'SW_OptFunc_CIPlus' : $AtomName;
                    // }

                    $ProdAttr = $g_ProdAttrs->findByAlias($prod_attr_alias);
                    if (empty($ProdAttr)) {
                        $result['success'] = false;
                        $result['message'] = '属性#' . $prod_attr_alias . '不存在。';
                        return $result;
                    }
                    $ProdAttrId = $ProdAttr['ProdAttr']['id'];
                    if (!isset($SwAtomIds[$ProdAttrId])) {
                        $SwAtomIds[$ProdAttrId] = array();
                    }
                    if (is_array($AtomName)) {//可多选的属性
                        $AtomNames = $AtomName;
                    } else {//only one
                        $AtomNames = array();
                        $AtomNames[] = $AtomName;
                    }

                    //通过功能元名称及属性id查找对应的功能元id
                    foreach ($AtomNames as $AtomName) {
                        $tmpProdAttrId = $ProdAttrId;
                        if (0 != $ProdAttr['ProdAttr']['atom_lib_id']) {//如果是共用功能元库的属性，则使用atom_lib_id作为条件进行查找功能元
                            $tmpProdAttrId = $ProdAttr['ProdAttr']['atom_lib_id'];
                        }
                        $AtomName = trim($AtomName);
                        $AtomName = $g_Commons->enCharToCnChar($AtomName); //将字符串中的英文半角","及";"变为中文全角"，"和"；"。
                        $Atom = $g_Atoms->Atom->find('first', array(
                            'conditions' => array('Atom.name' => $AtomName, 'Atom.prod_attr_id' => $tmpProdAttrId),
                            'fields' => array('Atom.id', 'Atom.is_visible_to_owner')
                        ));
                        if (empty($Atom)) {
                            if (0 == $ProdAttr['ProdAttr']['can_auto_create_atom']) {
                                $result['success'] = false;
                                $result['message'] = '属性#' . $ProdAttr['ProdAttr']['name'] . '对应的功能元#' . $AtomName . '不存在。';
                                return $result;
                            } else {
                                $Atom = array();
                                $Atom['name'] = $AtomName;
                                $Atom['name_cn'] = $AtomName;
                                $Atom['name_sw'] = $AtomName;
                                $Atom['name_hw'] = $AtomName;
                                $Atom['prod_attr_id'] = $tmpProdAttrId;
                                $Atom['pinyin'] = $g_Commons->pinyin($AtomName);
                                $Atom['create_time'] = date("Y-m-d H:i:s");
                                $Atom['create_id'] = $g_UserId;
                                $Atom['remark'] = date('Y-m-d H:i:s') . '创建订单时，由系统自动添加。';
                                $g_Atoms->Atom->create();
                                $Atom = $g_Atoms->Atom->save($Atom);
                            }
                        }

                        if (in_array($prod_attr_alias, array('SW_CIPlus', 'SW_SCS_CIPlus')) && empty($Atom['Atom']['is_visible_to_owner'])) {
                            $result['success'] = false;
                            $result['message'] = '#' . $AtomName . ' 该功能元对内勤不可见，请重新选择其他功能元再提交';
                            return $result;
                        }
                        if (!in_array($Atom['Atom']['id'], $SwAtomIds[$ProdAttrId])) {
                            $SwAtomIds[$ProdAttrId][] = $Atom['Atom']['id'];
                        }
                    }
                }

                if (OCS_BIZ_TYPE_TV == $g_BizId) {
                    // TV 下判断如果出中国，且有关联应用授权，则不允许选“无”
                    if (!empty($TempAtoms['SW_DefaultCountry']) && $TempAtoms['SW_DefaultCountry'] == '中国') {
                        $g_ProdModelRelAtom = $g_Commons->GlobalModel('ProdModelRelAtom');
                        $sw_atoms = $g_ProdModelRelAtom->find('list', array(
                            'joins' => array(
                                array(
                                    'table' => 'atoms',
                                    'alias' => 'Atom',
                                    'type' => 'LEFT',
                                    'conditions' => 'Atom.id=ProdModelRelAtom.atom_id'
                                )
                            ),
                            'conditions' => array(
                                'ProdModelRelAtom.prod_attr_id' => SW_Authorization,
                                'ProdModelRelAtom.prod_model_id' => $Product['Product']['prod_model_id']
                            ),
                            'fields' => 'Atom.id, Atom.name'
                        ));
                        if ($is_dev_order || $is_sam_order) {
                            // OCS-219 研发/样品订单 此情况只能选无
                            // 用户提出不能加此限制，需求变更
                            // if (!empty($TempAtoms['SW_Authorization']) && '无' != $TempAtoms['SW_Authorization']) {
                            //     if (empty($sw_atoms) || (1 == count($sw_atoms) && in_array('无', $sw_atoms))) {

                            //     } else {
                            //         $result['success'] = false;
                            //         $result['message'] = $Product['Product']['name'] . ' 此产品用于研发或样品订单时出中国互联网电视牌照只能选“无”。';
                            //         return $result;
                            //     }
                            // }
                        } else {
                            if (!empty($TempAtoms['SW_Authorization']) && '无' == $TempAtoms['SW_Authorization']) {
                                if (empty($sw_atoms) || (1 == count($sw_atoms) && in_array('无', $sw_atoms))) {

                                } else {
                                    $result['success'] = false;
                                    $result['message'] = $Product['Product']['name'] . ' 此产品出中国时互联网电视牌照不可以选“无”。';
                                    return $result;
                                }
                            }
                        }
                    }
                }

            }

            $sw_atom_ids = array();
            if (!empty($SwAtomIds)) {
                foreach ($SwAtomIds as $atom_ids) {
                    if (!empty($atom_ids) && is_array($atom_ids)) {
                        foreach ($atom_ids as $atom_id) {
                            $sw_atom_ids[] = $atom_id;
                        }
                    } else {
                        $sw_atom_ids[] = $atom_id;
                    }
                }
            }
            //不覆盖原来的其他属性
            if (isset($Req['id']) && $Req['id'] > 0) {//已经存在
                $exist_req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId)));
                $all_extend_atom_ids = $g_Atoms->Atom->find('list', array('conditions' => array('Atom.name' => $g_Atoms->ExtendSwAtomNames), 'fields' => array('Atom.id')));
                $sw_prod_attr = $g_ProdAttrs->getSeriesSWAdvanceAttr(0); // 暂时hardcode,新产品无系列配置
                $sw_prod_attr_list = array();
                foreach ($sw_prod_attr as $one) {
                    $sw_prod_attr_list[] = $one['id'];
                }

                $sw_atom = $this->fixSwAtomData($exist_req['Req']['sw_atom_ids_json'], json_encode($SwAtomIds), $extend_atom_ids, $all_extend_atom_ids, $sw_prod_attr_list);
                $sw_atom_ids = explode(',', $sw_atom['sw_atom_ids']);
                $SwAtomIds = json_decode($sw_atom['sw_atom_ids_json']);
            }

            $Req['extend_sw_atom_ids'] = '0,' . implode(',', $extend_atom_ids) . ',0';
            $Req['sw_atom_ids'] = '0,' . implode(',', $sw_atom_ids) . ',0';
            $Req['sw_atom_ids_json'] = json_encode($SwAtomIds);

            //保存工厂烧录KEY仓库
            // $Req['burn_key_store_ids'] = '';
            // $Req['burn_key_store_ids'] .= OCS_BURN_KEY_TYPE_HDCP . ':' . (empty($TempReq[OCS_BURN_KEY_TYPE_HDCP]) ? 0 : $TempReq[OCS_BURN_KEY_TYPE_HDCP]);
            // $Req['burn_key_store_ids'] .= ',' . OCS_BURN_KEY_TYPE_CIPLUS . ':' . (empty($TempReq[OCS_BURN_KEY_TYPE_CIPLUS]) ? 0 : $TempReq[OCS_BURN_KEY_TYPE_CIPLUS]);
            // $Req['burn_key_store_ids'] .= ',' . OCS_BURN_KEY_TYPE_MAC . ':' . (empty($TempReq[OCS_BURN_KEY_TYPE_MAC]) ? 0 : $TempReq[OCS_BURN_KEY_TYPE_MAC]);
            // $Req['burn_key_store_ids'] .= ',' . OCS_BURN_KEY_TYPE_HDCP20G . ':' . (empty($TempReq[OCS_BURN_KEY_TYPE_HDCP20G]) ? 0 : $TempReq[OCS_BURN_KEY_TYPE_HDCP20G]);

            //生成订单主题
            if (isset($data['head']['Contract']['order_time'])) {
                $name_date = date('md', strtotime($data['head']['Contract']['order_time']));
            } else {
                if (empty($OldReq)) {
                    $result['success'] = false;
                    $result['message'] = '编辑订单，查询结果出错。';
                    $result['datas'] = $OldReq;
                    return $result;
                }
                $name = explode('-', $OldReq['Req']['name']);
                $name_date = $name[1];
            }
            if (!isset($data['head']['Req']['account_id'])) {
                $data['head']['Req']['account_id'] = $OldReq['Req']['account_id'];
            }
            $account = $g_Accounts->Account->find('first', array(
                'conditions' => array('Account.id' => $data['head']['Req']['account_id']),
                'fields' => array('Account.id', 'Account.short_name')
            ));
            $Req['name'] = $account['Account']['short_name'] . '-' . $name_date . '-' . $Product['ProdModel']['name'] . '-' . $TempReq['quantity'];
            if ('add' == $action) {
                $Req['dest_type'] = 'EBS'; //记录目标类型
                $Req['create_time'] = date('Y-m-d H:i:s');
                $Req['create_user_id'] = $g_UserId;
                $Req['update_time'] = date('Y-m-d H:i:s');
                $Req['update_user_id'] = $g_UserId;
            } else {
                $Req['update_time'] = date('Y-m-d H:i:s');
                $Req['update_user_id'] = $g_UserId;
            }

            $SaveDatas[$idx]['Req'] = $Req; //记录整理好的req数据
            //基于购物车（库存保留）创建订单
            if (isset($data['ReserveRelReq'][$idx]) && 'add' == $action) {
                $TempReserve = $data['ReserveRelReq'][$idx];

                $ReserveRelReq = array();
                // $ReserveRelReq['type'] = $TempReserve['type'];
                $ReserveRelReq['available_stock_qty'] = $TempReserve['available_stock_qty'];
                $ReserveRelReq['available_reserve_qty'] = $TempReserve['available_reserve_qty'];
                $ReserveRelReq['mto_no'] = $TempReserve['mto_no'];
                $ReserveRelReq['locator'] = $TempReserve['locator'];;
                $ReserveRelReq['lot_number'] = $TempReserve['lot_number'];
                $ReserveRelReq['ebs_order_number'] = $TempReserve['ebs_order_number'];

                $SaveDatas[$idx]['ReserveRelReq'] = $ReserveRelReq; //记录整理好的req数据
            }

            // begin RelReq
            $rel_req = array();
            if (isset($data['head']['RelReq']['ship_to_contact_ids'])) {
                $rel_req['ship_to_contact_ids'] = !empty($data['head']['RelReq']['ship_to_contact_ids']) ? implode(',', $data['head']['RelReq']['ship_to_contact_ids']) : '';
            }

            //验证备货申请有效天数
            if (isset($data['RelReq'][$idx])) {
                $rel_req_submit = $data['RelReq'][$idx];
                $stock_limit_days = isset($rel_req_submit['stock_limit_days']) ? $rel_req_submit['stock_limit_days'] : 0;
                if (substr_count($OrderType['Type']['name'], '备货') > 0 ) { //备货订单
                    // if (substr_count($account['Account']['short_name'], '备货') == 0) { //客户不为“备货”
                    //     $result['success'] = false;
                    //     $result['message'] = '备货订单，客户也须是备货客户。';
                    //     $result['datas'] = $account;
                    //     return $result;
                    // }
                    if ($stock_limit_days < 7 || $stock_limit_days > 15) {
                        $result['success'] = false;
                        $result['message'] = '备货有效天数有效范围是 7 <= n <= 15，请修改后再提交。';
                        $result['datas'] = $stock_limit_days;
                        return $result;
                    }
                    if ('edit' == $action && isset($ReqId) && !empty($ReqId)) {
                        $rel_req_tmp = $g_RelReq->find('first', array(
                            'conditions' => array(
                                'RelReq.req_id' => $ReqId
                            ),
                            'fields' => array(
                                'RelReq.id',
                                'RelReq.stock_limit_days',
                            )
                        ));
                        $rel_req = $rel_req_tmp['RelReq'];
                    }
                    $rel_req['stock_limit_days'] = $stock_limit_days;

                }

                //关联报价单行
                if (isset($rel_req_submit['quote_line_id']) && !empty($rel_req_submit['quote_line_id'])) {
                    $rel_req['quote_line_id'] = $rel_req_submit['quote_line_id'];

                    //保存时，不校验：https://jira.cvte.com/browse/OCS-2025
                    // //验证关联的报价单
                    // $quote_params = array();
                    // $quote_params['account_id'] = isset($Req['account_id']) ? $Req['account_id'] : $OldReq['Req']['account_id'];
                    // $quote_params['mid_account_id'] = isset($Contract['mid_account_id']) ? $Contract['mid_account_id'] : $OldContract['Contract']['mid_account_id'];
                    // $quote_params['currency_id'] = isset($Req['currency_id']) ? $Req['currency_id'] : $OldReq['Req']['currency_id'];
                    // $quote_params['product_id'] = isset($Req['product_id']) ? $Req['product_id'] : $OldReq['Req']['product_id'];
                    // $po_result = $g_RelReq->verifyRelQuote($rel_req['quote_line_id'], $quote_params);
                    // if (!$po_result['success']) {
                    //     $result['message'] = $po_result['message'];
                    //     return $result;
                    // }
                }

                // [OCS-1654]电源加上产品用途字段
                if (isset($rel_req_submit['product_usage']) && !empty($rel_req_submit['product_usage'])) {
                    $rel_req['product_usage'] = $rel_req_submit['product_usage'];
                }

                if (isset($rel_req_submit['patent_fee_item_ids'])) {
                    $rel_req['patent_fee_item_ids'] = implode(',', $rel_req_submit['patent_fee_item_ids']);
                }

                if (isset($rel_req_submit['auth_account_ids'])) {
                    $rel_req['auth_account_ids'] = implode(',', $rel_req_submit['auth_account_ids']);
                }
            }
            if (!empty($rel_req)) {
                $SaveDatas[$idx]['RelReq'] = $rel_req;
            }

            // end of RelReq

            // OCS-996 订单管理-增加订单类型限制客户选择范围的控制
            // 当订单类型为SY-TV1-TV5、HK-TV1-TV5，客户不能选择%备货%客户
            if ($g_BizId == OCS_BIZ_TYPE_TV && (preg_match("/(SY-TV|HK-TV)[1-9]/is", $OrderType['Type']['name']) || preg_match("/(SY-BT|HK-BT)[1-9]/is", $OrderType['Type']['name']))) {
                if (substr_count($account['Account']['short_name'], '备货') != 0) { //客户不为“备货”
                    $result['success'] = false;
                    $result['message'] = '订单类型为' . $OrderType['Type']['name'] . '，不能选择备货客户。';
                    $result['datas'] = $account;
                    return $result;
                }
            }

            // 保存占用库存数据
            if (isset($data['Reserve'][$idx])) {
                $stock_reserve_rel_req = array();
                foreach ($data['Reserve'][$idx] as $key => $reserve) {
                    $stock_reserve_rel_req[$key]['lot_number'] = $reserve['lot_number'];
                    $stock_reserve_rel_req[$key]['status'] = OCS_STOCK_RESERVE_REL_REQ_STATUS_NORMAL; //新创建
                    $stock_reserve_rel_req[$key]['stock_v_key'] = $reserve['stock_v_key'];
                    $stock_reserve_rel_req[$key]['product_code'] = $reserve['product_code'];
                    $stock_reserve_rel_req[$key]['organization_id'] = $reserve['organization_id'];
                    $stock_reserve_rel_req[$key]['mto_no'] = $reserve['mto_no'];
                    $stock_reserve_rel_req[$key]['stock_qty'] = $reserve['stock_qty'];
                    $stock_reserve_rel_req[$key]['available_qty'] = $reserve['available_qty'];
                    $stock_reserve_rel_req[$key]['reserve_qty'] = $reserve['reserve_qty'];
                    $stock_reserve_rel_req[$key]['update_time'] = date('Y-m-d H:i:s');

                    $g_StockReserveRelReq = $g_Commons->GlobalModel('StockReserveRelReq');
                    if ('edit' == $action && isset($ReqId) && !empty($ReqId)) { //edit
                        $tmp_stock_reserve_rel_req = $g_StockReserveRelReq->find('first', array(
                            'conditions' => array(
                                'StockReserveRelReq.req_id' => $ReqId,
                                'StockReserveRelReq.lot_number' => $reserve['lot_number'],
                                'StockReserveRelReq.stock_v_key' => $reserve['stock_v_key'],
                            ),
                        ));
                        if (!empty($tmp_stock_reserve_rel_req)) {
                            $stock_reserve_rel_req[$key]['id'] = $tmp_stock_reserve_rel_req['StockReserveRelReq']['id'];
                        }
                    }
                }
                $SaveDatas[$idx]['StockReserveRelReq'] = $stock_reserve_rel_req;
            }

            //转换订单
            if ($is_trans_order && 'add' == $action) {
                if (empty($data['ReqRelStockOrder'][$idx]['rel_stock_req_id'])) {
                    $result['message'] = '保存失败，转换订单关联的备货订单rel_stock_req_id字段为空，请联系管理员处理';
                    $result['datas'] = $data;
                    return $result;
                }
                $rel_stock_req_id = $data['ReqRelStockOrder'][$idx]['rel_stock_req_id'];

                //验证新创建的订单产品必须与原备货订单的 产品型号须一致
                $backup_order_product_id = $this->Req->get_by_id($rel_stock_req_id, 'product_id');
                $new_order_product_id = $SaveDatas[$idx]['Req']['product_id'];

                if ($g_Product->get_by_id($new_order_product_id, 'prod_model_id') != $g_Product->get_by_id($backup_order_product_id, 'prod_model_id')) {
                    $result['message'] = '保存失败，#备货req_id=' . $rel_stock_req_id . ' 产品：' . $data['Req'][$idx]['product_id'] . '，修改后的产品型号与原备货订单产品型号不一致，请确保修改前后产品型号一致 再提交';
                    $result['datas'] = $data;
                    return $result;
                }
                $g_ReqRelStockOrder = $g_Commons->GlobalModel('ReqRelStockOrder');
                $linked_req_id = $g_ReqRelStockOrder->getLinkedReqId($rel_stock_req_id);
                if (!empty($linked_req_id)) {
                    $ebs_order_number = $this->Req->get_by_id($linked_req_id, 'ebs_order_number');
                    $result['message'] = '保存失败，#备货req_id=' . $rel_stock_req_id . '已经关联了其他订单 #' . $ebs_order_number . '，不允许再关联新订单';
                    $result['datas'] = $data;
                    return $result;
                }

                $req_rel_stock_order = array();
                $req_rel_stock_order['rel_stock_req_id'] = $rel_stock_req_id;
                $SaveDatas[$idx]['ReqRelStockOrder'] = $req_rel_stock_order;
            }
        }

        //验证占用数量是否合理
        $lot_number_rel_qty = array();
        foreach ($SaveDatas as $reserve_temp) {
            if (!isset($reserve_temp['StockReserveRelReq'])) {
                continue;
            }
            $reserves = $reserve_temp['StockReserveRelReq'];
            foreach ($reserves as $reserve) {
                if (!isset($lot_number_rel_qty[$reserve['stock_v_key']])) {
                    $lot_number_rel_qty[$reserve['stock_v_key']] = 0;
                }
                $lot_number_rel_qty[$reserve['stock_v_key']] += $reserve['reserve_qty'];
                if ($lot_number_rel_qty[$reserve['stock_v_key']] > $reserve['available_qty']) { //同一批号的占用数量不能>可用数量
                    $result['success'] = false;
                    $result['message'] = $reserve['lot_number'] . '(' . $reserve['stock_v_key'] . ')批号预订数量总和不能大于可用数量' . $reserve['available_qty'] . '，请修改预计数量再提交';
                    $result['datas'] = $SaveDatas;
                    return $result;
                }
            }
        }

        // OCS-1718 HCKD关联控制功能
        $SaveDatas = $this->Req->checkAndAddHckdMfRemark($SaveDatas);

        //验证专利相关限制条件
        $g_Patent = $g_Commons->GlobalModel('Patent');
        $po_result = $g_Patent->verifySaveSalesOrder($SaveDatas);
        if (!$po_result['success']) {
            $po_result['datas'] = $SaveDatas;
            return $po_result;
        }

        //检查关键字段信息，如有变更发邮件通知工厂
        if ('edit' == $action) {
            foreach ($SaveDatas as $save_data) {
                if (empty($save_data['Req']['id'])) {
                    continue;
                }
                $req_id = $save_data['Req']['id'];
                $po_result = $this->Req->checkWipFieldAndNotify($save_data, $req_id);
                if (!$po_result['success']) {
                    $po_result['message'] = '保存失败，关键信息变更，通知生管失败：' . $po_result['message'];
                    $g_Logs->write_log('Reqs', $req_id, 'info', $po_result['message']);
                    return $po_result;
                }
            }
        }

        if (!isset($SaveDatas) || empty($SaveDatas)) {
            $result['success'] = false;
            $result['message'] = '订单数据不能为空';
            $result['datas'] = $SaveDatas;
            return $result;
        }
        $result['success'] = true;
        $result['datas'] = $SaveDatas;
        return $result;
    }

    // 保存订单信息
    function saveReqContract($submitData) {
        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        global $g_WebServices;
        $g_WebServices->OCS_get_ws_client_config();
        global $globalEBSWebServiceUrls;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_TodoWork = $g_Commons->GlobalModel('TodoWork');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_rel_req = $g_Commons->GlobalModel('RelReq');
        $g_ReqVersion = $g_Commons->GlobalModel('ReqVersion');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_EbsTool = $g_Commons->GlobalModel('EbsTool');
        $g_ReqRelObj = $g_Commons->GlobalModel('ReqRelObj');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $g_StockApplyHeader = $g_Commons->GlobalModel('StockApplyHeader');
        $g_StockApplyLine = $g_Commons->GlobalModel('StockApplyLine');
        $g_ERPWsClients = $g_Commons->GlobalController('ERPWsClients');
        $g_EbsTool->recursive = -1;
        $g_ReqVersion->recursive = -1;
        $g_ReqRelObj->recursive = -1;

        //验证订单信息
        $result = $this->verifyReqContract($submitData);
        if (!$result['success']) {
            return $result;
        }
        $ReqContractData = $result['datas'];
        $NeedSyncReqIds = array();
        $job_sync_req_ids = array(); //加入任务队列同步
        $auto_add_req_ids = array(); //用于自动创建研发试产数据
        if (!empty($ReqContractData)) {
            //保存订单信息
            $max_count = count($ReqContractData);
            $min_add_job_count = 5; //当一次操作的订单超过5个且是物料订单，则加入队列处理
            foreach ($ReqContractData as $idx => $temp) {//新建时idx无意义，编辑时为idx=req_id
                if ('add' == $submitData['action']) {
                    $g_Contract->create();
                } else if ('edit' == $submitData['action']) {
                    if (1 == $globalEBSWebServiceUrls['connect']) {
                        $EbsOrderStage = $this->getEbsOrderStageByReqIds($idx);
                    }

                    $data = array();
                    $data['Req'] = $temp['Req'];
                    $data['SwAtom'] = json_decode($temp['Req']['sw_atom_ids_json'], true);
                    $data['Contract'] = $temp['Contract'];
                    $data['RelReq'] = !empty($temp['RelReq']) ? $temp['RelReq'] : array();
                    $temp_req = $this->Req->find('first', array(
                        'joins' => array(
                            array(
                                'table' => 'contracts',
                                'alias' => 'Contract',
                                'type' => 'LEFT',
                                'conditions' => 'Req.rel_obj_id=Contract.id'
                            ),
                            array(
                                'table' => 'types',
                                'alias' => 'Type',
                                'type' => 'LEFT',
                                'conditions' => 'Type.id=Contract.type_id'
                            ),
                        ),
                        'conditions' => array(
                            'Req.id' => $idx,
                            'Req.model_def_id' => Contract,
                        ),
                        'fields' => array(
                            'Req.id', 'Req.status','Req.product_id', 'Req.req_type','Req.alter_audit_status', 'Req.owner_user_id', 'Req.ebs_order_number', 'Req.quantity', 'Req.price',
                            'Contract.id', 'Contract.mid_account_id', 'Contract.bill_site_use_id', 'Contract.is_has_stock', 'Contract.delivety_time', 'Contract.is_has_stock',
                            'Contract.type_id',
                            'Type.name',
                        )
                    ));

                    $is_dev = false === strpos($temp_req['Type']['name'], '研发') ? false : true;
                    $is_cart = OCS_REQ_TYPE_CART_STOCK == $temp_req['Req']['req_type'] ? true : false;
                    $req_type = $temp_req['Req']['req_type'];

                    // ocs-2494 linfangjie 备货申请[备货头:状态]不等于 “审核完成”,则同步备货订单的备注信息到备货申请中的备货原因及风险
                    if (OCS_STOCK_APPLY_HEADER_STATUS_DONE != $g_StockApplyHeader->getStockApplyStatusByReqIds($idx)) {
                        $stock_apply_line = $g_StockApplyLine->find('first',array(
                            'conditions' => array(
                                'req_id' => $idx,
                            ),

                        ));
                        if (empty($stock_apply_line['StockApplyLine']) == false && is_array($stock_apply_line['StockApplyLine'])) {
                            $stock_apply_line['StockApplyLine']['remark'] = $temp['Req']['remark'];
                            $g_StockApplyLine->save($stock_apply_line['StockApplyLine']);
                        }
                    }

                    //已经审核合同的单更改关键信息都需要产生变更单，除研发订单外
                    //已经同步EBS的订单，更改关键信息都需要产生变更单，除研发订单和购物车订单外
                    if ( (OCS_REQ_STATUS_CONTRACT_AUDIT == $temp_req['Req']['status'] && !$is_dev)
                      || (!empty($temp_req['Req']['ebs_order_number']) && !$is_dev && !$is_cart) ) {
                        $temp_result = $this->Req->CheckPrimaryInfos($data, $idx); //检查是否有改变关键信息

                        //订单阶段小于待生产评审阶段，如不涉及到关键信息可自动同步至EBS
                        if (isset($EbsOrderStage[$idx]) && ($EbsOrderStage[$idx]['LOOKUP_CODE'] < 6 || empty($EbsOrderStage[$idx]['LOOKUP_CODE']))
                                && $temp_result['success']) {
                            //需求的修改如果还未审核通过，则不允许自动同步
                            if ($temp_req['Req']['alter_audit_status'] == 0 || OCS_REQ_ALTER_AUDIT_STATUS_PASS == $temp_req['Req']['alter_audit_status']) {
                                if ($max_count > $min_add_job_count && in_array($req_type, $this->Req->getDefMtlTypes())) {
                                    $job_sync_req_ids[] = $idx;
                                } else {
                                    $NeedSyncReqIds[] = $idx;
                                }
                            }
                        }

                        //阶段>=待生产评审，产品代码及关键信息不变化，则允许自动同步
                        $is_change_product = 0;
                        if (isset($temp['Req']['product_id'])) {
                            if (!empty($temp_req) && $temp_req['Req']['product_id'] != $temp['Req']['product_id']) {
                                $is_change_product = 1;
                            }
                        }
                        if (isset($EbsOrderStage[$idx]) && $EbsOrderStage[$idx]['LOOKUP_CODE'] >= 6 && $temp_result['success'] && 0 == $is_change_product) {
                            if ($temp_req['Req']['alter_audit_status'] == 0 || OCS_REQ_ALTER_AUDIT_STATUS_PASS == $temp_req['Req']['alter_audit_status']) {
                                if ($max_count > $min_add_job_count && in_array($req_type, $this->Req->getDefMtlTypes())) {
                                    $job_sync_req_ids[] = $idx;
                                } else {
                                    $NeedSyncReqIds[] = $idx;
                                }
                            }
                        }
                        $temp['Contract']['error_type'] = 0;

                        //如果关键信息有变，或者改变了产品代码（阶段>=6），则需提交审核才能同步EBS
                        if (!$temp_result['success'] || (isset($EbsOrderStage[$idx]) && $EbsOrderStage[$idx]['LOOKUP_CODE'] >= 6 && $is_change_product)) {
                            if (isset($EbsOrderStage[$idx]) && $EbsOrderStage[$idx]['LOOKUP_CODE'] >= 6 && $is_change_product) {
                                $temp['Contract']['is_crm_fail'] = 1;
                                $temp['Contract']['crm_fail_reason'] = '订单阶段大于待生产评审，不可改变产品代码需提交审核。';
                            } else if (!$temp_result['success']) {
                                $temp['Contract']['is_crm_fail'] = 1;
                                $temp['Contract']['crm_fail_reason'] = '关键信息变更，需业务经理审核，' . $temp_result['message'];
                            }
                            //关键信息变更，如合同已审，则需重新审核
                            $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
                            if (!empty($temp_result['datas'])) { //当这些信息变更时，才打回
                                $contract_key_fields = array('price', 'quantity', 'mid_account_id', 'account_id', 'HW_ChipSeries', 'pcb_version');
                                $intersect = array_intersect($temp_result['datas'], $contract_key_fields);

                                if (!empty($intersect)) {
                                    $reason = '变更 ' . implode(',', $intersect) . '合同自动打回重新审。';
                                    $g_Logs->write_log('Reqs', $temp_req['Req']['id'], 'info', $reason);
                                    $g_ContractRelTmpl->resetContractAuditByReqIds($temp_req['Req']['id'], $reason);
                                }
                            }

                            $temp['Req']['alter_audit_status'] = OCS_REQ_ALTER_AUDIT_STATUS_NEW; //关键信息变更-待审核

                            //添加关键信息变更记录，统计待办
                            $type_value = $g_Enum->getEnumValueByNameAndAlias('TodoWork.type', 'contract');
                            $task_value = $g_Enum->getEnumValueByNameAndAlias('TodoWork.task', 'contract_audit_change');
                            $todo_new = array(
                                'model_id' => Req,
                                'obj_id' => isset($temp['Req']['id']) ? $temp['Req']['id'] : 0,
                                'type' => $type_value,
                                'task' => $task_value,
                                'owner_user_id' => isset($temp['Req']['owner_user_id']) ? $temp['Req']['owner_user_id'] : 0,
                            );
                            $g_TodoWork->addTodoWorkBegin($todo_new);

                            //获取最新版本的ReqVersion数据
                            $last_req_version = $g_ReqVersion->getLastTmpReqVersion(Req, $temp['Req']['id'] );
                            //如果该版本的数据没有审核就取最新的数据叠加 add by wyq 2014-12-22
                            if (!empty($last_req_version)) {
                                $is_audit = $g_ReqVersion->find('first',array(
                                    'joins' => array(
                                        array(
                                            'table' => 'reqs',
                                            'alias' => 'Req',
                                            'type' => 'LEFT',
                                            'conditions' => array(
                                                'Req.id' => $last_req_version['ReqVersion']['rel_obj_id']
                                            )
                                        )
                                    ),
                                    'conditions' => array(
                                        'ReqVersion.model_def_id' => Req
                                    ),
                                    'fields' => 'ReqVersion.id , Req.alter_audit_status'
                                ));
                            }
                            $TempReqVersion = array();
                            $TempReqVersion['quantity'] = $temp['Req']['quantity'];
                            $TempReqVersion['model_def_id'] = Req;
                            $TempReqVersion['rel_obj_id'] = $temp['Req']['id'];
                            $TempReqVersion['product_id'] = $temp['Req']['product_id'];
                            $TempReqVersion['account_id'] = $temp['Req']['account_id'];
                            $TempReqVersion['price'] = $temp['Req']['price'];
                            $TempReqVersion['mid_account_id'] = isset($temp['Contract']['mid_account_id']) ? $temp['Contract']['mid_account_id'] : 0;
                            $TempReqVersion['bill_site_use_id'] = isset($temp['Contract']['bill_site_use_id']) ? $temp['Contract']['bill_site_use_id'] : 0;
                            $TempReqVersion['foreign_price'] = isset($temp['Req']['foreign_price']) ? $temp['Req']['foreign_price'] : '';
                            $TempReqVersion['is_has_stock'] = $temp['Contract']['is_has_stock'];
                            $TempReqVersion['sw_atom_ids_json'] = $temp['Req']['sw_atom_ids_json'];

                            $TempReqVersion['patent_fee_item_ids'] = isset($temp['RelReq']['patent_fee_item_ids']) ? $temp['RelReq']['patent_fee_item_ids'] : 0;
                            $TempReqVersion['auth_account_ids'] = isset($temp['RelReq']['auth_account_ids']) ? $temp['RelReq']['auth_account_ids'] : 0;
                            if (!empty($last_req_version) && $is_audit['Req']['alter_audit_status'] == OCS_REQ_ALTER_AUDIT_STATUS_NEW) {
                                if ($temp_req['Req']['quantity'] == $temp['Req']['quantity']) { //说明此次未修改数量，则数量使用未审核完成
                                    $TempReqVersion['quantity'] = $last_req_version['ReqVersion']['quantity'];
                                }
                                if (round($temp_req['Req']['price'], 4) == round($temp['Req']['price'], 4) ) {
                                    $TempReqVersion['price'] = $last_req_version['ReqVersion']['price'];
                                    $TempReqVersion['foreign_price'] = isset($last_req_version['ReqVersion']['foreign_price']) ? $last_req_version['ReqVersion']['foreign_price'] : '';
                                }

                                if ($temp_req['Contract']['is_has_stock'] == $temp['Contract']['is_has_stock']) {
                                    $TempReqVersion['is_has_stock'] = $last_req_version['ReqVersion']['is_has_stock'];
                                }

                            }
                            $g_ReqVersion->saveTmpReqVersion($TempReqVersion); //保存修改的快照
                            $temp['Contract']['error_type'] = OCS_CONTRACT_ERROR_TYPE_AUDIT; //更改单待审核(需业务经理审核)

                            //不保存这些关键信息，需更改单审核通过后再覆盖
                            unset($temp['Req']['product_id']);
                            unset($temp['Req']['price']);
                            unset($temp['Req']['foreign_price']);
                            unset($temp['Req']['amount']);
                            unset($temp['Req']['foreign_amount']);
                            unset($temp['Req']['quantity']);
                            unset($temp['Req']['sw_atom_ids_json']);
                            unset($temp['Contract']['mid_account_id']);
                            unset($temp['Contract']['bill_site_use_id']);
                            unset($temp['RelReq']['patent_fee_item_ids']);
                            unset($temp['RelReq']['auth_account_ids']);
                            if(OCS_BIZ_TYPE_TV != $g_BizId){//非TV才此处理
                                unset($temp['Contract']['is_has_stock']);
                            }
                        }
                    }
                } //end of edit case

                if(!empty($EbsOrderStage) && $is_dev){//研发订单，编辑后自动同步
                    $NeedSyncReqIds[] = $idx;
                }
                $save_contract_result = $g_Contract->save($temp['Contract']);
                $temp['Req']['rel_obj_id'] = $g_Contract->id;

                if ('add' == $submitData['action']) {
                    $this->Req->create();
                }
                $save_req_result = $this->Req->save($temp['Req']);
                $req_id = $this->Req->id;

                // 对应修改备货申请负责内勤
                if (isset($temp['Req']['owner_user_id']) && isset($temp_req['Req']['owner_user_id'])
                    && $temp['Req']['owner_user_id'] != $temp_req['Req']['owner_user_id']) {
                    $g_StockApplyHeader->modifyOwnerUser($req_id, $temp['Req']['owner_user_id']);
                }

                if ('add' == $submitData['action'] && isset($save_req_result['Req']) && isset($save_req_result['Req']['id'])) {
                    //添加待办记录
                    $type_value = $g_Enum->getEnumValueByNameAndAlias('TodoWork.type', 'contract');
                    $task_value = $g_Enum->getEnumValueByNameAndAlias('TodoWork.task', 'contract_commit');
                    $todo_new = array(
                        'model_id' => Req,
                        'obj_id' => $save_req_result['Req']['id'],
                        'type' => $type_value,
                        'task' => $task_value,
                        'owner_user_id' => isset($save_req_result['Req']['owner_user_id']) ? $save_req_result['Req']['owner_user_id'] : 0,
                    );
                    $g_TodoWork->addTodoWorkBegin($todo_new);
                    $todo_new['type'] = $g_Enum->getEnumValueByNameAndAlias('TodoWork.type', 'confirm');
                    $todo_new['task'] = $g_Enum->getEnumValueByNameAndAlias('TodoWork.task', 'confirm_send_cps');
                    $g_TodoWork->addTodoWorkBegin($todo_new);
                }

                $this->saveReqVersion($this->Req->id); //保存需求快照

                //to set relreq is_recommend_main
                $g_rel_req->setIsRecommendMain($this->Req->id);

                //OCS-882 库存订单的发运日期不自动变更软件任务的计划完成日期 add by ziying 2015-12-14
                //更新任务软件完成时间
                if (!empty($temp_req) && isset($temp['Contract']['delivety_time']) && 0 == $temp_req['Contract']['is_has_stock']
                    && date('Y-m-d', strtotime($temp_req['Contract']['delivety_time'])) != date('Y-m-d', strtotime($temp['Contract']['delivety_time'])) ) {
                    //自动更新软件任务软件完成时间信息
                    $g_Task = $g_Commons->GlobalModel('Task');
                    $g_Task->autoUpdateSwCompleteDate($this->Req->id);
                }

                $temp['Req']['id'] = $this->Req->id;

                if ('add' == $submitData['action']) {
                    $auto_add_req_ids[] = $this->Req->id;

                    //设置产品的计量单位
                    $this->Req->setProductUnitByReqIds($req_id);
                }

                //判断是否要发起OA新产品评审流程
                if ($this->Req->checkIsCanStartProductAuditOaFlow($req_id)) {
                    //发起 新产品订单评审 流程
                    $oa_result = $this->Req->createNewOaFlowProdReview($req_id);
                }

                //更新备货申请(如果有)总金额
                $g_StockApplyHeader->updateStockApplyAmountByReqId($this->Req->id);

                //CE的购物车订单，新建完后自动同步EBS
                if (in_array($g_BizId, array(OCS_BIZ_TYPE_CE, OCS_BIZ_TYPE_TV, OCS_BIZ_TYPE_SCS)) && 'add' == $submitData['action']
                    && isset($submitData['entry_type']) && 'cart' == $submitData['entry_type']) {
                    $NeedSyncReqIds[] = $this->Req->id;
                }
                //购物车订单，所有新建｜编辑后都直接同步EBS
                if (isset($is_cart) && $is_cart) {
                    $NeedSyncReqIds[] = $req_id;
                }

                if (isset($temp['ReserveRelReq']) && 'add' == $submitData['action']) {
                    $temp['ReserveRelReq']['req_id'] = $this->Req->id;
                    $g_ReserveRelReq = $g_Commons->GlobalModel('ReserveRelReq');
                    $g_ReserveRelReq->recursive = -1;
                    $ReserveRelReq = $g_ReserveRelReq->find('first', array('conditions' => array('ReserveRelReq.req_id' => $this->Req->id)));
                    if (empty($ReserveRelReq)) {
                        $g_ReserveRelReq->create();
                        $g_ReserveRelReq->save($temp['ReserveRelReq']);
                        $temp['ReserveRelReq']['id'] = $g_ReserveRelReq->id;
                    } else {

                    }

                    //根据挪用批号来默认上工厂
                    if (OCS_REQ_TYPE_CART_STOCK == $temp['Req']['req_type'] && !empty($temp['ReserveRelReq']['mto_no'])) {//三部订单（库存），使用工厂编号
                        // $mto_no = preg_replace('/(\d+.*)$/', '', $temp['ReserveRelReq']['lot_number']);
                        $mto_no = $temp['ReserveRelReq']['mto_no'];
                        $contract = $g_Contract->find('first',array(
                            'conditions' => array(
                                'Contract.id' => $g_Contract->id
                            ),
                            'fields' => array('Contract.id,Contract.mto_no')
                        ));
                        if(!empty($contract)){
                            $contract['Contract']['mto_no'] = $mto_no;
                            $g_Contract->save($contract['Contract']);
                        }

                        //设置为发货通知单上能自动带出的批号及数量
                        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
                        $meta_value = array();
                        $wip_info = array();
                        $wip_info[] = $temp['ReserveRelReq']['lot_number'] . ':' . $temp['Req']['quantity'];
                        $meta_value['wip_info'] = $wip_info;
                        $meta_value = json_encode($meta_value);
                        $obj_rel_obj = $g_ObjRelObj->find('first', array(
                            'conditions' => array(
                                'ObjRelObj.model_def_id' => Req,
                                'ObjRelObj.rel_obj_id' => $this->Req->id,
                                'ObjRelObj.meta_type' => OCS_OBJ_REL_OBJ_TYPE_WIP,
                                'ObjRelObj.meta_key' => 'Req.batch_no_info'
                            )
                        ));

                        if (empty($obj_rel_obj)) { //新建
                            $obj_rel_obj = array();
                            $obj_rel_obj['model_def_id'] = Req;
                            $obj_rel_obj['rel_obj_id'] = $this->Req->id;
                            $obj_rel_obj['meta_type'] = OCS_OBJ_REL_OBJ_TYPE_WIP;
                            $obj_rel_obj['meta_key'] = 'Req.batch_no_info';
                            $obj_rel_obj['meta_value'] = $meta_value;
                            $g_ObjRelObj->create();
                            $g_ObjRelObj->save($obj_rel_obj);
                        } else { //编辑
                            $obj_rel_obj['ObjRelObj']['meta_value'] = $meta_value;
                            $g_ObjRelObj->save($obj_rel_obj['ObjRelObj']);
                        }
                    }
                    $log_content = '来自购物车创建订单，挪用批次：' . $temp['ReserveRelReq']['lot_number'] . '，EBS编号：' . $temp['ReserveRelReq']['ebs_order_number'];
                    $log_content .= '，理论数量：' . $temp['ReserveRelReq']['available_stock_qty'] .'，可用数量：' . $temp['ReserveRelReq']['available_reserve_qty'] .'，';
                    $log_content .= '默认工厂：' . $mto_no;
                    $g_Logs->write_log('Reqs', $this->Req->id, 'info', $log_content);
                }

                // //保存产品库存信息
                // $product_stock_info = $this->Req->getProductStockInfoByReqId($req_id);
                // $temp['RelReq']['product_available_qty'] = isset($product_stock_info['product_available_qty']) ? $product_stock_info['product_available_qty'] : 0;
                // $temp['RelReq']['prod_model_available_qty'] = isset($product_stock_info['prod_model_available_qty']) ? $product_stock_info['prod_model_available_qty'] : 0;

                //保存备货有效天数，如有设置
                if (isset($temp['RelReq'])) {
                    $tmp_rel_req = $g_RelReq->find('first', array(
                        'conditions' => array(
                            'RelReq.req_id' => $this->Req->id,
                        ),
                        'fields' => array(
                            'RelReq.id'
                        )
                    ));
                    $rel_req = $temp['RelReq'];
                    $rel_req['req_id'] = $this->Req->id;
                    if (!empty($tmp_rel_req)) {
                        $rel_req['id'] = $tmp_rel_req['RelReq']['id'];
                    }
                    if (!isset($rel_req['id'])) {
                        $g_RelReq->create();
                    }
                    $g_RelReq->save($rel_req);
                }

                //如是购物车订单，则设置购物车字段
                if (isset($temp['Req']['req_type']) && OCS_REQ_TYPE_CART_STOCK == $temp['Req']['req_type']) {
                    $tmp_rel_req = $g_RelReq->find('first', array(
                        'conditions' => array(
                            'RelReq.req_id' => $req_id,
                        ),
                        'fields' => array(
                            'RelReq.id',
                            'RelReq.is_cart_order',
                        )
                    ));
                    if (!empty($tmp_rel_req)) {
                        $tmp_rel_req['RelReq']['is_cart_order'] = 1;
                        $g_RelReq->save($tmp_rel_req['RelReq']);
                    } else {
                        $tmp_rel_req = array();
                        $tmp_rel_req['req_id'] = $req_id;
                        $tmp_rel_req['is_cart_order'] = 1;
                        $g_RelReq->create();
                        $g_RelReq->save($tmp_rel_req);
                    }
                }

                // 保存库存占用数据
                if (isset($temp['StockReserveRelReq'])) {
                    $g_StockReserveRelReq = $g_Commons->GlobalModel('StockReserveRelReq');
                    foreach ($temp['StockReserveRelReq'] as $reserve) {
                        if (!isset($reserve['id'])) {
                            $g_StockReserveRelReq->create();
                        }
                        $reserve['req_id'] = $req_id;

                        $g_StockReserveRelReq->save($reserve);
                    }
                }

                if ('add' == $submitData['action']) {
                    // 如果没有设置“生管承诺日期”, 那么根据规则自动生成“生管承诺日期”
                    $mf_promise_date = $g_RelReq->getFieldByReqId($req_id, 'mf_promise_date');
                    if (empty($mf_promise_date)) {
                        // "研发订单" “生管承诺日期” = "计划发运日期"-3
                        // "物料订单"或者"SKD订单"订单 “生管承诺日期” = "计划发运日期"-2
                        $promise_date = $this->Req->getInitPromiseDateByReqId($req_id);
                        if (!empty($promise_date)) {
                            // 更新OCS订单上的“生管承诺日期”
                            $field_values = array('req_id' => $req_id, 'mf_promise_date' => $promise_date);
                            $g_RelReq->saveRelFieldsAndLog($req_id, $field_values, '通过“创建订单”自动更新了以下信息:');
                            // 更新EBS订单行上的“生管承诺日期”
                            $field_values = array('promise_date' => $promise_date);
                            $save_result = $g_ERPWsClients->updateEbsOrderLineFields('req', $req_id, $field_values);
                            if (empty($save_result['success'])) {
                                $g_Logs->write_log('Reqs', $req_id, 'info', '自动更新EBS“生管承诺日期”失败#' . $save_result['message']);
                            }
                        }
                    }

                    //SCKD类别订单，且为FLASH物料订单
                    $is_sckd_order = $this->Req->isSCKDReqOrder($req_id);
                    $g_RelProduct = $g_Commons->GlobalModel('RelProduct');
                    if ($is_sckd_order && !empty($save_req_result['Req']['product_id'])) {
                        $is_flash_mtl = $g_RelProduct->getFieldValue($save_req_result['Req']['product_id'], 'is_flash_mtl');
                        if ($is_flash_mtl) {
                            $g_Task = $g_Commons->GlobalModel('Task');
                            $g_CkdMfPlanBill = $g_Commons->GlobalModel('CkdMfPlanBill');
                            $g_CkdOrderSet = $g_Commons->GlobalModel('CkdOrderSet');

                            //自动创建软件任务
                            $g_Task->autoCreateTask($req_id);

                            //自动创建下计划记录
                            $g_CkdMfPlanBill->saveRelFields($req_id);

                            //创建OCS配料清单记录
                            if (!empty($save_contract_result['Contract']['contract_no'])) {
                                $g_CkdOrderSet->saveRelFields($save_contract_result['Contract']['contract_no']);
                            }
                        }
                    }
                }

                //转换订单
                if (!empty($temp['ReqRelStockOrder']) && 'add' == $submitData['action']) {
                    $g_ReqRelStockOrder = $g_Commons->GlobalModel('ReqRelStockOrder');
                    $po_result = $g_ReqRelStockOrder->saveReqRelStockOrder($req_id, $temp['ReqRelStockOrder']['rel_stock_req_id'], 'link');
                    if (!$po_result['success'] && 200 != $po_result['code']) {
                        $g_Logs->write_log('Reqs', $req_id, 'info', '自动创建关联备货订单失败，#' . $po_result['message']);
                    }
                }

                $ReqContractData[$idx] = $temp;
            }
        }
        if ('add' == $submitData['action'] && isset($submitData['entry_type']) && 'cart' == $submitData['entry_type']) {//清空购物车
            $this->Session->write('Auth.Req.Reserve.' . $g_UserId, array());
        }
        if (!empty($NeedSyncReqIds)) {//自动同步可以同步的订单
            $NeedSyncReqIds = array_unique($NeedSyncReqIds);
            $this->BatchSyncContractToEbs($NeedSyncReqIds);
        }

        if (!empty($job_sync_req_ids)) { //加入队列同步
            $g_QueueJob = $g_Commons->GlobalModel('QueueJob');
            foreach ($job_sync_req_ids as $job_sync_req_id) {
                $queue_job = array();
                $queue_job['biz_id'] = $g_BizId;
                $queue_job['model_def_id'] = Req;
                $queue_job['rel_obj_id'] = $job_sync_req_id;
                $queue_job['type'] = OCS_QUEUE_TASK_TYPE_SYNC_ORDER;
                $g_QueueJob->addQueue($queue_job);
            }
        }

        if (!empty($auto_add_req_ids)) {
            //自动创建研发试产数据（只针对SY-TV-研发订单）
            $g_RdTrialBill = $g_Commons->GlobalModel('RdTrialBill');
            $g_RdTrialBill->autoCreateRdTrialBillByReqIds($auto_add_req_ids);

            //自动创建备货申请（只针对备货订单）
            $g_StockApplyHeader = $g_Commons->GlobalModel('StockApplyHeader');
            $g_StockApplyHeader->autoCreateStockApplyByReqIds($auto_add_req_ids);
        }
        return $result;
    }

    //批量同步订单到ebs
    function batch_sync_contract_to_ebs_json() {
        $this->autoRender = false;
        global $g_Commons;
        global $g_BizId;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $this->Req->recursive = -1;

        $Result = $g_Commons->initResult();

        $Result['success'] = true;
        if (!empty($_POST['req_ids'])) {
            $ReqIds = $_POST['req_ids'];

            $Reqs = $this->Req->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'contracts',
                        'alias' => 'Contract',
                        'type' => 'LEFT',
                        'conditions' => "Contract.id=Req.rel_obj_id AND Req.model_def_id=" . Contract
                    ),
                    array(
                        'table' => 'types',
                        'alias' => 'Type',
                        'type' => 'LEFT',
                        'conditions' => 'Type.id = Contract.type_id'
                    ),
                ),
                'conditions' => array(
                    'Req.id' => $ReqIds,
                    "Type.name LIKE '%研发%'",
                ),
                'fields' => array('Req.*', 'Contract.*')
            ));
            if (empty($Reqs)) {
                $Result['success'] = false;
                $Result['message'] = '批量同步，只能同步订单类型为“研发”的订单。';
                echo json_encode($Result);
                return;
            }
            if (!empty($Reqs)) {
                foreach ($Reqs as $data) {
                    $tmpresult = $this->SyncContractInfoToEBS($data);
                    $tmpContract = $g_Contract->findById($data['Contract']['id']);
                    if (empty($tmpresult['success']) || !$tmpresult['success'] || '' == $tmpresult['success']) {
                        //在contracts表添加记录传ebs失败
                        if ($data['Contract']['id'] > 0) {
                            if (!empty($tmpContract)) {
                                $tmpContract['Contract']['is_crm_fail'] = 1;
                                $tmpContract['Contract']['crm_fail_reason'] = $tmpresult['message'];
                                $g_Contract->save($tmpContract['Contract']);
                            }
                        }
                        $Result['success'] = false;
                        $Result['message'] = '存在同步失败的订单，请查看失败原因。';
                    } else {
                        if (!empty($tmpContract) && $tmpContract['Contract']['is_crm_fail'] == 1) {
                            $tmpContract['Contract']['is_crm_fail'] = 0;
                            $tmpContract['Contract']['crm_fail_reason'] = '';
                            $g_Contract->save($tmpContract['Contract']);
                        }
                    }
                }
            }
        }
        echo json_encode($Result);
        return;
    }

    //通过req_id同步订单到ebs
    function SyncContractToEBSByReqId($ReqId = null, $ReturnType = 0, $process_mode = 'SCHEDULE', $extend_params = array()) {
        global $g_BizId;
        global $g_Commons;
        if ($ReturnType == 0) {
            $this->autoRender = false;
        }

        $g_Contract = $g_Commons->GlobalModel('Contract');
        $this->Req->recursive = -1;
        $Result = $g_Commons->initResult();

        //设置产品计量单位（方法里已作处理，如已经设置，不需再处理）
        $this->Req->setProductUnitByReqIds($ReqId);

        $data = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'LEFT',
                    'conditions' => "Contract.id=Req.rel_obj_id AND Req.model_def_id=" . Contract
                )
            ),
            'fields' => array('Req.*', 'Contract.*')
        ));
        if (!empty($data['Req']['alter_audit_status']) && !in_array($data['Req']['alter_audit_status'], array(OCS_REQ_ALTER_AUDIT_STATUS_PASS, OCS_REQ_ALTER_AUDIT_STATUS_FAIL))) {
            $Result['success'] = false;
            $Result['message'] = '关键信息变更单未审，请联系销管经理审核。';
            if ($ReturnType == 0) {
                echo json_encode($Result);
                return;
            } else {
                return $Result;
            }
        }

        $tmpresult = $this->SyncContractInfoToEBS($data, $process_mode, $extend_params);
        $tmpContract = $g_Contract->findById($data['Contract']['id']);
        if (empty($tmpresult['success']) || !$tmpresult['success'] || '' == $tmpresult['success']) {
            //在contracts表添加记录传ebs失败
            if ($data['Contract']['id'] > 0) {
                if (!empty($tmpContract)) {
                    $tmpContract['Contract']['is_crm_fail'] = 1;
                    $tmpContract['Contract']['crm_fail_reason'] = $tmpresult['message'];
                    $g_Contract->save($tmpContract['Contract']);
                }
            }
            $Result['success'] = false;
            $Result['message'] = $tmpresult['message'];
        } else {
            if (!empty($tmpContract) && $tmpContract['Contract']['is_crm_fail'] == 1) {
                $tmpContract['Contract']['is_crm_fail'] = 0;
                $tmpContract['Contract']['crm_fail_reason'] = '';
                $g_Contract->save($tmpContract['Contract']);
            }
            $Result['success'] = true;
            $Result['message'] = '';
        }

        if ($ReturnType == 0) {
            echo json_encode($Result);
        } else {
            return $Result;
        }
        return;
    }

    function getProductCodeFromEbs($old_product_code = null) {
        if (empty($old_product_code)) {
            return '';
        }

        $sql = "
            SELECT msi.segment1 new_product_code, msi.DESCRIPTION, msi.Attribute18 old_product_code,mp.organization_code
                FROM apps.mtl_system_items_b msi, apps.mtl_parameters mp
            WHERE
                -- mp.organization_id = '86' and
                mp.organization_code<>'MST' and
                mp.organization_id = msi.organization_id
                and ORGANIZATION_CODE = 'SY'
                and msi.Attribute18  = '" . $old_product_code . "'
            ";
        global $g_Commons;
        $stid = $g_Commons->ebsConnect($sql);

        $ProductCode = '';
        while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
            $ProductCode = $row['NEW_PRODUCT_CODE'];
        }

        return $ProductCode;
    }

    function BatchSyncContractToEbs($ReqIds = null, $extend_params = array()) {
        if (empty($ReqIds) || null == $ReqIds) {
            return false;
        }
        if (!is_array($ReqIds)) {
            $ReqIds = array($ReqIds);
        }

        if (!empty($ReqIds)) {
            foreach ($ReqIds as $ReqId) {
                $ReqId = trim($ReqId);
                $this->SyncContractToEBSByReqId($ReqId, 1, 'SCHEDULE', $extend_params);
            }
        }
    }

    /**
     * 通过合同号，批量将指定订单加入同步订单队列
     *
     * @Author   lishirong
     *
     * @DateTime 2016-11-17T17:29:07+0800
     *
     * @param    [type]                   $contract_nos [description]
     */
    function add_sync_order_queue_job() {
        global $g_Commons;
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $this->set('title_for_layout', '批量同步订单');
        $this->set('contract_nos', '');

        if (!$g_RolePrivs->get_priv_level($this->name, 'can_add_sync_order_queue_job')) {
            $this->set('error_msg', '抱歉，你无权进行此操作，请管理员开通Req.can_add_sync_order_queue_job的权限。');
            return;
        }

        //sumit
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submit_data = $this->request->data;
            $contract_nos = $submit_data['contract_nos'];
            if (empty($contract_nos)) {
                $this->set('error_msg', '请填写合同号');
                return;
            }
            $contract_nos = trim($contract_nos);
            $this->set('contract_nos', $contract_nos);
            $po_result = $this->Req->addSyncOrderQueueJobByContractNo($contract_nos);
            if (!$po_result['success']) {
                $this->set('error_msg', $po_result['message']);
                return;
            }

            $this->set('notice_msg', '加入同步订单队列，成功。');
        }
    }

    //传订单信息到ERP EBS
    function SyncContractInfoToEBS($data = null, $process_mode = 'SCHEDULE', $extend_params = array()) {
        global $g_Commons;
        global $g_BizId;
        global $g_WebServices;
        global $g_Order_Type_USD;
        global $g_CVTOCS;
        $g_WebServices->OCS_get_ws_client_config();
        global $globalEBSWebServiceUrls;
        if (1 == $globalEBSWebServiceUrls['connect']) {
            $client = new soap_client_erp($globalEBSWebServiceUrls['Contract']['PROCESS_SALES_ORDER']['url'], true);
            $client->soap_defencoding = 'utf-8';
            $client->decode_utf8 = false;
        }

        $result = array('success' => false, 'message' => '', 'datas' => '');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Contact = $g_Commons->GlobalModel('Contact');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_WsMonitor = $g_Commons->GlobalModel('WsMonitor');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_OrderLineItem = $g_Commons->GlobalModel('OrderLineItem');
        $g_ProdModelRelAccount = $g_Commons->GlobalModel('ProdModelRelAccount');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');

        $g_Products = $g_Commons->GlobalController('Products');
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_Types = $g_Commons->GlobalController('Types');
        $g_AccountAddresses = $g_Commons->GlobalController('AccountAddresses');
        $g_ProdModelRelObjs = $g_Commons->GlobalController('ProdModelRelObjs');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Dics = $g_Commons->GlobalController('Dics');
        $g_Dics->Dic->recursive = -1;
        $g_Types->Type->recursive = -1;
        $g_Enums->Enum->recursive = -1;
        $this->Req->recursive = -1;
        $g_Products->Product->recursive = -1;
        $Product = $g_Products->Product->find('first', array('conditions' => array('Product.id' => $data['Req']['product_id']),
                    'fields' => array('Product.id', 'Product.name', 'Product.pcb_id', 'Product.code', 'Product.tmp_code', 'Product.is_ckd', 'Product.create_time')));

        $g_Logs->write_log('Reqs', $data['Req']['id'], 'info', '开始调用同步订单方法#' . __FUNCTION__);

        if (OCS_REQ_STATUS_CONTRACT_AUDIT != $data['Req']['status'] && empty($data['Req']['ebs_order_number']) && 'NEED_AUDIT_CONTRACT' == $process_mode) {
            $result['success'] = false;
            $result['message'] = '合同未审核，请联系销管经理审核。';
            return $result;
        }

        if (in_array($data['Req']['close_status'], array(OCS_ORDER_CLOSE_STATUS_CANCELLING, OCS_ORDER_CLOSE_STATUS_CANCEL))) {
            $result['success'] = false;
            $result['message'] = '订单处于“取消中”或者“已作废”状态，不允许同步EBS。';
            return $result;
        }

        if (empty($Product) || empty($Product['Product']['code'])) {
            $result['success'] = false;
            $result['message'] = '产品代码在EBS中不存在，请确认产品列表PLM、ERP按钮颜色，如灰色请点击按钮进行同步，如绿色请联系Agile系统管理员同步产品代码。';
            return $result;
        }
        if ($data['Req']['dest_type'] != 'EBS') {
            $result['success'] = false;
            $result['message'] = '非EBS订单，不能传EBS.';
            return $result;
        }
        $Account = $g_Accounts->getAccountInfoById($data['Req']['account_id']);
        if (empty($Account)) {
            $result['success'] = false;
            $result['message'] = '客户#' . $data['Req']['account_id'] . '不存在，请联系OCS系统管理员。';
            return $result;
        }
        $globalEBSWebServiceUrls['header']['HeadParams'] = array(
            'Responsibility' => 'ORDER_MGMT_SUPER_USER',
            'RespApplication' => 'ONT',
            'SecurityGroup' => 'STANDARD',
            'NLSLanguage' => 'AMERICAN',
            'Org_Id' => '',
        );
        $client->setHeaders($globalEBSWebServiceUrls['header']);
        $SwAtoms = $g_ProdAttrs->getSwAttrsAtoms($data['Req']['sw_atom_ids_json']);

        $params = $g_Commons->initReqWsParams();

        //2014.4.15已经改为由EBS自动检测，根据req_id来判断是否存在，
        //当process_mode = 'SCHEDULE'时，即使EBS已经BOOK状态也可以修改
        $PROCESS_MODE = $process_mode;

        if (!isset($data['Req']['id']) || empty($data['Req']['id']) || $data['Req']['id'] <= 0) {
            $result['success'] = false;
            $result['message'] = 'OCS订单尚未保存成功，请重新提交订单后再操作。';
            return $result;
        }

        $req_id = $data['Req']['id'];
        $Type = $g_Types->Type->findById($data['Contract']['type_id'], array('name', 'code'));

        $is_dev_order = false === strpos($Type['Type']['name'], '研发') ? 0 : 1;
        $is_sam_order = false === strpos($Type['Type']['name'], '样品') ? 0 : 1;

        // 获取订单的关联信息
        $rel_req = $g_RelReq->findByReqId($req_id, array(
            'mf_promise_date',
            'contract_check_status',
            'is_cart_order',
            'is_limit_audit_contract',
        ));

        //OA新产品评审流程返回结果，如果is_limit_audit_contract字段为Y，则表示审合同受限制，为N或者为空则不限制
        //产品PCB状态为“量产”的，不限制审合同
        if (!empty($re_lreq) && 'Y' == $rel_req['RelReq']['is_limit_audit_contract']) {
            $g_ProdModelDetail = $g_Commons->GlobalModel('ProdModelDetail');
            $use_state = $g_ProdModelDetail->get_by_id($Product['Product']['pcb_id'], 'use_state');
            if ('量产' != $use_state) {
                $result['success'] = false;
                $result['message'] = '产品“' . $Product['Product']['name'] . '” 发起的OA新产品评审结果为“不允许审核合同”，请联系项目管理人员处理。';
                return $result;
            }
        }

        // if (empty($Type)) {
        //     $result['success'] = false;
        //     $result['message'] = '订单类型在EBS中不存在，请联系OCS系统管理员同步订单类型。';
        //     return $result;
        // }
        // $ebs_order_type_id = $Type['Type']['code'];
        // $OrderTypeEnum = $g_Enums->Enum->find('first', array('conditions' => array('Enum.dict_name' => 'Ebs.order_type', 'Enum.value' => $ebs_order_type_id)));
        // if (empty($OrderTypeEnum) || $OrderTypeEnum['Enum']['alias'] <= 0 || empty($OrderTypeEnum['Enum']['alias'])) {
        //     $result['success'] = false;
        //     $result['message'] = '订单类型无对应公司，请联系OCS系统管理员维护订单类型。';
        //     return $result;
        // }
        // $OrganizationId = $g_Enums->getEnumValueByDictNameAndAlias('Ebs.organization', $OrderTypeEnum['Enum']['alias']);
        // if ($OrganizationId <= 0 || empty($OrganizationId)) {
        //     $result['success'] = false;
        //     $result['message'] = '仓库EBS中不存在，，请联系OCS系统管理员同步仓库。';
        //     return $result;
        // }

        // 获取业务实体、仓库等 add by GUOCAI
        $org_data = $this->Req->getOrgIdByOrderTypeId($data['Contract']['type_id'], true);
        if (empty($org_data['success']) || false == $org_data['success']) {
            $result['success'] = false;
            $result['message'] = '订单传EBS失败,' . $org_data['message'];
            return $result;
        }
        $Order_OrgId = $org_data['datas']['org_id'];
        $OrganizationId = $org_data['datas']['organization_id'];
        $ebs_order_type_id = $org_data['datas']['ebs_order_type_id'];

        //$ProductCode = $g_Products->getProductCodeById($data['Req']['product_id']);
        // $Product = $g_Products->Product->find('first', array('conditions' => array('Product.id' => $data['Req']['product_id']),
        //             'fields' => array('Product.id', 'Product.code', 'Product.tmp_code', 'Product.create_time')));
        //上线后需修改
        $ebs_time = '2014-05-31';
        if (!empty($Product) && strtotime($Product['Product']['create_time']) < strtotime($ebs_time)) {
            $ProductCode = $this->getProductCodeFromEbs($Product['Product']['code']);
        } else {
            $ProductCode = $Product['Product']['code'];
        }
        if (empty($ProductCode)) {
            $result['success'] = false;
            $result['message'] = '产品代码不存在，请联系OCS系统管理员同步产品代码。';
            return $result;
        }
        //如果资金操作平台为空，则使用客户的ship_site_use_id传到EBS
        $bill_site_use_id = $data['Contract']['bill_site_use_id'];
        if ($data['Contract']['bill_site_use_id'] <= 0 || empty($data['Contract']['bill_site_use_id'])) {
            $bill_site_use_id = $data['Req']['ship_site_use_id'];
        }
        //如果客户料号为“无”或者为空，则此字段使用产品编码传EBS
        if (empty($data['Contract']['account_mno']) || '无' == trim($data['Contract']['account_mno'])) {
            $data['Contract']['account_mno'] = $ProductCode;
        }
        //使用收单方的付款条件
        $PaymentTermId = $g_AccountAddresses->getPaymentTermIdBySiteUseId($data['Contract']['bill_site_use_id']);
        if ($PaymentTermId <= 0) {
            $result['success'] = false;
            $result['message'] = '收单客户付款条件不存在，请到EBS补充客户对应付款条件，再在OCS同步该客户。';
            return $result;
        }

        $curr_code = $this->Req->getCurrCodeById($data['Req']['currency_id']);//获取币种编码
        if (empty($curr_code)) {
            $result['success'] = false;
            $result['message'] = '货币为空，同步失败';
            return $result;
        }

        if (OCS_BIZ_TYPE_TV == $g_BizId || OCS_BIZ_TYPE_SCS == $g_BizId) {//TV事来部,hardcode 86
            $OrganizationId = 86;  //#order,hardcode仓库,86--广州视源
        }
        if (!empty($data['Contract']['ship_from_org_id'])) {
            $OrganizationId = $data['Contract']['ship_from_org_id'];
        }
        //订单是否CKD根据产品上的is_ckd来决定
        // $Product = $g_Products->Product->find('first', array('conditions' => array('Product.id' => $data['Req']['product_id']),
        //             'fields' => array('Product.is_ckd')));
        if (!empty($Product)) {
            $isCKD = (0 == $Product['Product']['is_ckd']) ? 'N' : $g_Enum->getLabelByDictNameAndValue('Product.is_ckd', $Product['Product']['is_ckd']); //CKD
        }
        if (!isset($isCKD) || empty($isCKD)) {
            $result['success'] = false;
            $result['message'] = '产品是否CKD字段为空，请维护产品CKD字段枚举信息。';
            return $result;
        }

        // 如果存在用户保存的工厂ID,那么优先获取用户选择的
        $ProJectId = 0;
        if ('N' == $isCKD) {// 非CKD订单
            if (!empty($data['Contract']['mto_no'])) {
                $enum = $g_Enums->Enum->find('first',array(
                    'conditions' => array('Enum.label' => $data['Contract']['mto_no']),
                    'fields' => array('Enum.id', 'Enum.value')
                ));
                if(!empty($enum)){
                    $ProJectId = $enum['Enum']['value'];
                }
            }
            // 根据reqid获取订单可用工厂,当只有一个有效工厂时,才获取默认工厂 (优化原来的写法)
            if (empty($ProJectId)) {
                $mto_no_lists = $g_ProdModelRelAccount->GetAvailableMtoNosByReqIds($req_id);
                if (!empty($mto_no_lists[$req_id]) && 1 == count($mto_no_lists[$req_id])) {
                    $ProJectId = key($mto_no_lists[$req_id]);
                }
            }
        } else {//OCS-1013 CKD类型的订单自动匹配CKD类型的工厂,CKD订单即使求出的交集只有一个元素，也不自动同步EBS add by ziying
            $ProJectId = '';
        }

        //物料订单，使用维护的工厂传EBS
        $is_ckd_order = $this->Req->isMtlReqOrder($data['Req']['id']);
        if (empty($ProJectId) && $is_ckd_order) {
            $ProJectId = $g_Enum->getProjectIdByMtoNo($data['Contract']['mto_no']);
        }

        // 获取全部的EBS订单行,并按订单行ID分组
        $ebs_order_line_keys = array();
        $ebs_order_lines = $this->Req->GetOrderLinesByReqId($data['Req']['id']);
        foreach ($ebs_order_lines as $key => $ebs_order_line) {
            $ebs_order_line_keys[$ebs_order_line['ATTRIBUTE12']] = $ebs_order_line;
        }

        //BOM工程师确认状态
        $MfPlanBill = $g_MfPlanBill->find('first', array('conditions' => array('MfPlanBill.req_id' => $data['Req']['id'], 'MfPlanBill.rel_idx' => 0),
                    'fields' => array('MfPlanBill.id', 'MfPlanBill.bom_confirm_status')));

        // OCS-901 订单管理-订单同步EBS时价目表和计量单位取值逻辑修改
        $Line_Type_Id = $data['Contract']['line_type_id'];

        switch ($g_BizId) {
            case OCS_BIZ_TYPE_TV:
                $default_country = isset($SwAtoms['SW_DefaultCountry']) ? $SwAtoms['SW_DefaultCountry'] : '';
                break;
            case OCS_BIZ_TYPE_PS:
                $default_country = isset($SwAtoms['SW_XX_DefaultCountry']) ? $SwAtoms['SW_XX_DefaultCountry'] : '';
                break;
            case OCS_BIZ_TYPE_MID:
                $default_country = isset($SwAtoms['SW_MID_DefaultCountry']) ? $SwAtoms['SW_MID_DefaultCountry'] : '';
                break;
            case OCS_BIZ_TYPE_STB:
                $default_country = isset($SwAtoms['SW_STB_DefaultCountry']) ? $SwAtoms['SW_STB_DefaultCountry'] : '';
                break;
            case OCS_BIZ_TYPE_ISH:
                $default_country = isset($SwAtoms['SW_ISH_DefaultCountry']) ? $SwAtoms['SW_ISH_DefaultCountry'] : '';
                break;
            case OCS_BIZ_TYPE_MD:
                $default_country = isset($SwAtoms['SW_MD_DefaultCountry']) ? $SwAtoms['SW_MD_DefaultCountry'] : '';
                break;
            case OCS_BIZ_TYPE_CE:
                $default_country = isset($SwAtoms['SW_CE_DefaultCountry']) ? $SwAtoms['SW_CE_DefaultCountry'] : '';
                break;
            case OCS_BIZ_TYPE_TAD:
                $default_country = isset($SwAtoms['SW_TAD_DefaultCountry']) ? $SwAtoms['SW_TAD_DefaultCountry'] : '';
                break;
            case OCS_BIZ_TYPE_SCS:
                $default_country = isset($SwAtoms['SW_SCS_DefaultCountry']) ? $SwAtoms['SW_SCS_DefaultCountry'] : '';
                break;
            default:
                $default_country = '';
                break;
        }
        //是否物料订单(SKD)
        // $IsSkd = (OCS_REQ_TYPE_SKD == $data['Req']['req_type']) ? 'Y' : 'N';
        $ckd_label = $g_Enum->getEnumAliasByNameAndValue('Req.req_type', $data['Req']['req_type']);
        $ckd_label = !empty($ckd_label) ? $ckd_label : 'NOR';

        //头信息
        $params['P_PROCESS_MODE'] = $PROCESS_MODE; //新增:CREATE，修改:UPDATE
        $params['P_SALES_ORDER']['ORG_ID'] = $Order_OrgId; //$OrderTypeEnum['Enum']['alias']; //根据订单类型来决定
        $params['P_SALES_ORDER']['ORDERED_DATE'] = date('Y/m/d H:i:s', strtotime($data['Contract']['order_time'])); //接单日期(对应EBS的订购日期)
        $params['P_SALES_ORDER']['CREATED_BY_EMAIL'] = $g_Users->getUserEmailById($data['Req']['create_user_id']); //创建者邮箱

        $params['P_SALES_ORDER']['ORDER_TYPE_ID'] = $ebs_order_type_id; //订单类型
        $params['P_SALES_ORDER']['SALESREP_EMAIL'] = $g_Users->getUserEmailById($data['Req']['sales_user_id']); //负责销售(通过email与erp匹配)
        $params['P_SALES_ORDER']['TAX_EXEMPT_FLAG'] = 'S';
        $params['P_SALES_ORDER']['PAYMENT_TERM_ID'] = $PaymentTermId; //付款条件（使用收单方的付款条件）
        $params['P_SALES_ORDER']['SHIP_FROM_ORG_ID'] = $OrganizationId; //$OrganizationId; //#order,hardcode仓库,86--广州视源
        $params['P_SALES_ORDER']['CUST_PO_NUMBER'] = $data['Contract']['account_cno'];  //客户单号
        //$params['P_SALES_ORDER']['SOLD_TO_ORG_ID'] = 4040;//$Account['Account']['source_id'];//cust_account_id(source_id)--EBS内部处理（根据收单地址可找到），不传
        $params['P_SALES_ORDER']['SHIP_TO_ORG_ID'] = $data['Req']['ship_site_use_id']; //AccountAddress.site_use_id字段,收货客户(客户)
        $params['P_SALES_ORDER']['INVOICE_TO_ORG_ID'] = $bill_site_use_id; //AccountAddress.site_use_id字段,收单客户（资金操作平台）

        //限制字符长度不允许超过50
        $limit_fields = array(
            'Contract.account_cno' => '客户单号',
            'Contract.account_mno' => '客户料号',
            'Contract.account_prod_name' => '客户机型',
        );
        foreach ($limit_fields as $limit_field => $label) {
            list($model, $field) = explode('.', $limit_field);
            if (!isset($data[$model][$field])) {
                continue;
            }
            if (strlen($data[$model][$field]) > 50) {
                $result['success'] = false;
                $result['message'] = '#' . $label . ' 字符长度不能超过50个字符，请修改后再同步。';
                return $result;
            }
        }

        $ebs_req_name = $data['Req']['name']; //订单主题
        // if (strlen($ebs_req_name) > 50) {
        //     $result['success'] = false;
        //     $result['message'] = '订单主题过长，请确认是否客户简称已经维护好并且同步到OCS，再重新编辑保存订单。';
        //     return $result;
        // }
        $ebs_req_name = substr($ebs_req_name, 0, 46); //限制50个字符

        $params['P_SALES_ORDER']['ORIG_SYS_DOCUMENT_REF'] = $ebs_req_name; //订单主题
        //$params['P_SALES_ORDER']['ORDER_SOURCE_ID'] = $data['Req']['id']; //订单req_id
        $params['P_SALES_ORDER']['SOLD_FROM_ORG_ID'] = $params['P_SALES_ORDER']['ORG_ID']; //公司,与org_id相同
        $params['P_SALES_ORDER']['TRANSACTIONAL_CURR_CODE'] = $curr_code; //币种,根据订单类型决定
        $params['P_SALES_ORDER']['ATTRIBUTE1'] = $data['Contract']['contract_no']; //合同号
        $params['P_SALES_ORDER']['ATTRIBUTE2'] = $g_Users->getUserRealNameById($data['Req']['owner_user_id']); //负责内勤
        $params['P_SALES_ORDER']['ATTRIBUTE3'] = $default_country; //默认国家
        $params['P_SALES_ORDER']['ATTRIBUTE11'] = $ckd_label; //是否SKD
        if($data['Contract']['ebs_po_line_id'] > 0){//内部交易订单
            $params['P_SALES_ORDER']['ATTRIBUTE12'] = $data['Contract']['ebs_po_line_id']; //采购订单行ID
        }

        //是否为赠品订单
        $params['P_SALES_ORDER']['ATTRIBUTE13'] = 'N';
        if($Line_Type_Id > 0){
            $LineType = $g_Enums->Enum->find('first',array('conditions'=>array(
                'Enum.dict_name'=>'Ebs.order_detail_type',
                'Enum.value'=>$Line_Type_Id,
                "Enum.label LIKE '%赠品%'"
                ),
                'fields'=>array('Enum.id','Enum.label'),
            ));
            if(!empty($LineType)){
                $params['P_SALES_ORDER']['ATTRIBUTE13'] = 'Y';
            }
        }

        // OCS-1103 订单管理：订单“品牌”字段需同步至EBS弹性域
        $params['P_SALES_ORDER']['ATTRIBUTE4'] = $data['Contract']['account_brand']; //终端客户(品牌)

        $params['P_SALES_ORDER']['ATTRIBUTE7'] = $isCKD; //(0 == $data['Contract']['is_ckd'])?'N':$g_Enums->getLabelByDictNameAndValue('Contract.is_ckd', $data['Contract']['is_ckd']); //CKD
        $params['P_SALES_ORDER']['ATTRIBUTE9'] = ($data['Contract']['is_try_produce'] == 1) ? 'Y' : 'N'; //是否试产
        $params['P_SALES_ORDER']['ATTRIBUTE8'] = $data['Req']['id']; //订单req_id
        //已上传确认书
        if (1 == $data['Req']['attach_confirmation_status'] || OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE == $data['Req']['audit_stage']) {
            $params['P_SALES_ORDER']['ATTRIBUTE5'] = 'Y';
        }
        //已上传合同
        if (1 == $data['Req']['attach_contract_status']) {
            $params['P_SALES_ORDER']['ATTRIBUTE6'] = 'Y';
        }
        if (!empty($data['Contract']['invoice_to_contact_id'])) {
            $params['P_SALES_ORDER']['INVOICE_TO_CONTACT_ID'] = $g_Contact->get_by_id($data['Contract']['invoice_to_contact_id'], 'source_id');
        }

        // OCS-1985 把“合同是否检查通过”字段传至EBS
        $contract_check_status = isset($rel_req['RelReq']['contract_check_status']) ? $rel_req['RelReq']['contract_check_status'] : null;
        $params['P_SALES_ORDER']['ATTRIBUTE14'] = (OCS_REL_REQ_CONTRACT_CHECK_STATUS_PASSED == $contract_check_status) ? 'Y' : 'N';

        //订单阶段
        $Enum = $g_Enums->getEnumByDictNameAndValue('Contract.ebs_stage', $data['Contract']['ebs_stage']);
        if (!empty($Enum)) {
            $ebs_stage = preg_replace('/ebs_stage/', '', $Enum['Enum']['alias']);
            if (!empty($ebs_stage) && !empty($data['Req']['ebs_order_number'])) {
                $params['P_SALES_ORDER']['SALES_CHANNEL_CODE'] = $ebs_stage;
                if(isset($extend_params['post_ebs_stage']) && 0 == $extend_params['post_ebs_stage']){//不指定阶段
                    $params['P_SALES_ORDER']['SALES_CHANNEL_CODE'] = '';
                }
            }
        }

        //三部订单，订单的总数量不变，挪用保留时减少的订单数量记录在real_stock_quantity字段
        $ORDERED_QUANTITY = $data['Req']['quantity'];
        // if(!empty($data['Req']['real_stock_quantity']) && (int)$data['Req']['real_stock_quantity'] >0){
        //     $ORDERED_QUANTITY = $data['Req']['real_stock_quantity'];
        // }
        //行信息
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['LINE_TYPE_ID'] = $Line_Type_Id;
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ORDERED_ITEM'] = $data['Contract']['account_mno']; //客户料号
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['INVENTORY_ITEM'] = $ProductCode; //$Product['Product']['code'];//成品编码
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['UNIT_LIST_PRICE'] = ('CNY' == $curr_code) ? $data['Req']['price'] : $data['Req']['foreign_price']; //单价
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['UNIT_SELLING_PRICE'] = ('CNY' == $curr_code) ? $data['Req']['price'] : $data['Req']['foreign_price']; //与单价相同
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ORDERED_QUANTITY'] = $ORDERED_QUANTITY; //数量
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ORG_ID'] = $params['P_SALES_ORDER']['ORG_ID']; //默认与头相同
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['REQUEST_DATE'] = date('Y/m/d H:i:s', strtotime($data['Contract']['delivety_time'])); //交货日期
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['SCHEDULE_SHIP_DATE'] = date('Y/m/d H:i:s', strtotime($data['Contract']['delivety_time'])); //交货日期
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ORDER_QUANTITY_UOM'] = $g_Products->Product->getProductUnitById($data['Req']['product_id']);; //产品计量单位
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['SHIP_TO_ORG_ID'] = $params['P_SALES_ORDER']['SHIP_TO_ORG_ID']; //收货客户
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['INVOICE_TO_ORG_ID'] = $params['P_SALES_ORDER']['INVOICE_TO_ORG_ID']; //收单地址
        //$params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['PAYMENT_TERM_ID'] = $params['P_SALES_ORDER']['PAYMENT_TERM_ID'];//付款条件
        //$params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['SALESREP_ID'] = $params['P_SALES_ORDER']['SALESREP_ID'];//负责销售，默认与头相同
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['SHIP_FROM_ORG_ID'] = $params['P_SALES_ORDER']['SHIP_FROM_ORG_ID'];
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['SOLD_FROM_ORG_ID'] = $params['P_SALES_ORDER']['SOLD_FROM_ORG_ID'];
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['TAX_EXEMPT_FLAG'] = 'S';
        if(!empty($ProJectId)) {
            $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['PROJECT_ID'] = $ProJectId;
        }
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE1'] = $data['Contract']['account_prod_name']; //客户机型
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE2'] = isset($SwAtoms['SW_Panel']) ? $SwAtoms['SW_Panel'] : ''; //配屏型号
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE3'] = $data['Contract']['tech_price']; //软件专利授权金(OCS-技术服务费)
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE5'] = isset($SwAtoms['SW_CIPlus']) ? $SwAtoms['SW_CIPlus'] : ''; //CI PLUS
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE6'] = $data['Contract']['address']; //收货地址,OCS的“送货地址”可手动修改
        $invc_prod_name = $g_Enum->getBizLabelByDictNameAndValue('Req.invc_prod_name', $data['Req']['invc_prod_name']); //货物名称
        if (!empty($data['Req']['invc_prod_name']) && empty($invc_prod_name)) {
            $result['success'] = false;
            $result['message'] = '订单货物名称ID不为空#' . $data['Req']['invc_prod_name'] . '，但获取货物名称为空';
            return $result;
        }
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE7'] = $invc_prod_name;
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['SHIPPING_INSTRUCTIONS'] = $data['Req']['mf_remark']; //下生产备注
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE9'] = ($data['Contract']['is_has_stock'] == 1) ? 'Y' : 'N'; //出库存

        // 包装
        $package_type = !empty($data['Contract']['package_type']) ? $data['Contract']['package_type'] : 0;
        $package_label = $g_Dics->getLabelByTypeAndValue('package_type', $package_type);
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE10'] = $package_label;

        if (empty($data['Req']['ebs_order_number'])) {//只有第一次时传
            $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE11'] = 'N'; //是否有BOM
        }

        // 订单req_id,EBS订单行唯一标识
        if ($data['Req']['ebs_line_version'] > 0) {//说明登记后改过产品代码，需新增行
            $line_idx = $data['Req']['id'] . '_' . $data['Req']['ebs_line_version'];
        } else {
            $line_idx = $data['Req']['id'];
        }
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE12'] = $line_idx; //订单req_id,EBS订单行唯一标识

        //是否已开工单(拆分新订单时，有设置此字段)
        $flex_fields = json_decode($data['Contract']['flex_field_json'], true);
        if(!empty($flex_fields)){
            $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE13'] = (isset($flex_fields['attribute13']) && 1 == $flex_fields['attribute13'])?'Y':'N';
        }
        if(preg_match('/^001.901\..*/', $ProductCode)){//此类型物料默认为N，
            $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE13'] = 'N';
        }

        // MID需求，加入板卡是否单独出货字段
        if (OCS_BIZ_TYPE_TV != $g_BizId && OCS_BIZ_TYPE_SCS != $g_BizId) {
            $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE15'] = 0 == $data['Contract']['is_board_ship'] ? 'N' : 'Y';
        }

        $real_stock_account = $g_Account->findMainField($data['Req']['stock_account_id']);
        $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['ATTRIBUTE16'] = $real_stock_account; //备货真实客户

        //单价不能为0，除研发订单、样品订单外。
        if (OCS_BIZ_TYPE_TV == $g_BizId && 0 == substr_count($Type['Type']['name'], '研发') && 0 == substr_count($Type['Type']['name'], '样品') && ($params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['UNIT_SELLING_PRICE'] <= 0
                || empty($params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['UNIT_SELLING_PRICE']))) {
            $result['success'] = false;
            $result['message'] = '非研发、样品订单，单价不能为0。';
            $result['datas'] = '';
            return $result;
        }

        // 新增行时,同步“生管承诺日期”到ebs(OCS-1747【优先处理】订单操作流程优化-OCS&EBS销售订单)
        // $is_exist_order_line = !empty($ebs_order_line_keys[$line_idx]) ? true : false; //行是否存在
        $promise_date = isset($rel_req['RelReq']['mf_promise_date']) ? $rel_req['RelReq']['mf_promise_date'] : null;
        if (empty($promise_date)) {
            $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['PROMISE_DATE'] = 'null';//如果需要清空ebs的“生管承诺日期”字段,那么需要设定为'null'
        } else {
            $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM']['PROMISE_DATE'] = date('Y-m-d', strtotime($promise_date));
        }

        //如果备品数大于0，则传两个行信息到Ebs(订单头为同一个),且第二个行的单价为0,数量为备品的数量
        $line_idx = $data['Req']['id'] . '_' . ((int) $data['Req']['ebs_line_version'] + 1);//order#hardcode，默认为req_id加下划线1（EBS要求对应的req_id要唯一）
        //$is_exist_order_line = $this->Req->IsExistOrderLine($data['Req']['id'], $line_idx); //备品行是否存在
        $is_exist_order_line = !empty($ebs_order_line_keys[$line_idx]) ? true : false; //备品行是否存在

        $orgin_order_line = $params['P_SALES_ORDER']['ORDER_LINE'];
        $OrderLine = $orgin_order_line;
        //正常订单行
        $params['P_SALES_ORDER']['ORDER_LINE'] = array();
        $params['P_SALES_ORDER']['ORDER_LINE'][] = $OrderLine;

        $free_spare_line_type = (OCS_ORG_ID_GZ == $Order_OrgId) ? 1006 : 1033; //order#hardcode,行类型(1006--SY赠品,1033--HK赠品)
        // 非TV订单按订单类型的ORG_ID对应找到赠品的行类型
        if (OCS_BIZ_TYPE_TV != $g_BizId) {
            $free_spare_line_type = $g_Enums->Enum->find('first', array(
                'conditions' => array(
                    'Enum.dict_name' => 'Ebs.order_detail_type',
                    'Enum.alias' => $Order_OrgId,
                    'Enum.label LIKE' => '%赠品%'
                ),
                'fields' => 'Enum.value'
            ));
            $free_spare_line_type = $free_spare_line_type['Enum']['value'];
        }

        if ($data['Contract']['free_spare_qty'] > 0 || $is_exist_order_line) {
            //备品订单行
            $OrderLine['ORDER_LINE_ITEM']['LINE_TYPE_ID'] = $free_spare_line_type; //order#hardcode,行类型(1006--SY赠品,1033--HK赠品)
            $OrderLine['ORDER_LINE_ITEM']['ORDERED_QUANTITY'] = $data['Contract']['free_spare_qty'];
            $OrderLine['ORDER_LINE_ITEM']['ATTRIBUTE3'] = 0; //备品行，专利费为空
            $OrderLine['ORDER_LINE_ITEM']['UNIT_LIST_PRICE'] = 0;
            $OrderLine['ORDER_LINE_ITEM']['UNIT_SELLING_PRICE'] = 0;
            //$OrderLine['ORDER_LINE_ITEM']['ORIG_SYS_LINE_REF'] = $data['Req']['id'].'_1';//order#hardcode，默认为req_id加下划线1（EBS要求对应的req_id要唯一）
            $OrderLine['ORDER_LINE_ITEM']['ATTRIBUTE12'] = $line_idx;

            //获取并判断新建的备品行Atrribute11和attribute14是否需要设置为Y
            $new_free_line = $this->Req->getNewFreeLineAttributeValue($data['Req']['id'], $OrderLine['ORDER_LINE_ITEM']['ATTRIBUTE12'], $ProductCode);
            if (isset($new_free_line['ATTRIBUTE11']) && 'Y' == $new_free_line['ATTRIBUTE11']) {
                $OrderLine['ORDER_LINE_ITEM']['ATTRIBUTE11'] = $new_free_line['ATTRIBUTE11'];
            }
            if (isset($new_free_line['ATTRIBUTE14']) && 'Y' == $new_free_line['ATTRIBUTE14']) {
                $OrderLine['ORDER_LINE_ITEM']['ATTRIBUTE14'] = $new_free_line['ATTRIBUTE14'];
            }

            // 新增备品行时,同步“生管承诺日期”到ebs(OCS-1747【优先处理】订单操作流程优化-OCS&EBS销售订单)
            if (empty($is_exist_order_line)) {
                if (empty($promise_date)) {
                    $OrderLine['ORDER_LINE_ITEM']['PROMISE_DATE'] = 'null';//如果需要清空ebs的“生管承诺日期”字段,那么需要设定为'null'
                } else {
                    $OrderLine['ORDER_LINE_ITEM']['PROMISE_DATE'] = date('Y-m-d', strtotime($promise_date));
                }
            }

            //新增的行
            $params['P_SALES_ORDER']['ORDER_LINE'][] = $OrderLine;
        }

        // 拆扣行
        if (isset($flex_fields['discount']) && !empty($flex_fields['discount'])) {
            $discounts = $flex_fields['discount'];
            if (!empty($discounts)) {
                foreach ($discounts as $notice_id => $discount) {
                    $line_type_id = $g_Enum->getDiscountOrderTypeId($Order_OrgId);
                    if (empty($line_type_id)) {
                        $result['success'] = false;
                        $result['message'] = '折扣订单行类型不存在，请联系OCS系统管理员同步订单类型。';
                        return $result;
                    }
                    if (!isset($discount['price']) || empty($discount['price'])) {
                        $result['success'] = false;
                        $result['message'] = '折扣行单价不能为0。';
                        return $result;
                    }
                    if (!isset($discount['project_id']) || empty($discount['project_id'])) {
                        $result['success'] = false;
                        $result['message'] = '项目号不能为空，请维护项目号。';
                        return $result;
                    }

                    // 折扣行ID
                    $line_idx = $data['Req']['id'] . '_discount_' . $notice_id;

                    $OrderLine = $orgin_order_line;
                    $OrderLine['ORDER_LINE_ITEM']['ORDERED_ITEM'] = '009.001.0000010'; // hardcode，固定此代码
                    $OrderLine['ORDER_LINE_ITEM']['INVENTORY_ITEM'] = '009.001.0000010';
                    $OrderLine['ORDER_LINE_ITEM']['LINE_TYPE_ID'] = $line_type_id;
                    $OrderLine['ORDER_LINE_ITEM']['PROJECT_ID'] = $discount['project_id']; //项目号
                    $OrderLine['ORDER_LINE_ITEM']['ORDERED_QUANTITY'] = 1;  //固定值，数量为1
                    $OrderLine['ORDER_LINE_ITEM']['UNIT_LIST_PRICE'] = $discount['price']; //折扣单价
                    $OrderLine['ORDER_LINE_ITEM']['UNIT_SELLING_PRICE'] = $discount['price']; //折扣单价
                    $OrderLine['ORDER_LINE_ITEM']['RETURN_REASON_CODE'] = 'TAX_EXEMPT'; //退货原因
                    $OrderLine['ORDER_LINE_ITEM']['LINE_CATEGORY_CODE'] = 'RETURN'; //退货分类
                    $OrderLine['ORDER_LINE_ITEM']['ATTRIBUTE7'] = '折扣'; //货物名称 为“折扣”
                    $OrderLine['ORDER_LINE_ITEM']['ATTRIBUTE12'] = $line_idx;

                    // 新增折扣行时,同步“生管承诺日期”到ebs(OCS-1747【优先处理】订单操作流程优化-OCS&EBS销售订单)
                    $is_exist_order_line = !empty($ebs_order_line_keys[$line_idx]) ? true : false; //折扣行是否存在
                    if (empty($is_exist_order_line)) {
                        if (empty($promise_date)) {
                            $OrderLine['ORDER_LINE_ITEM']['PROMISE_DATE'] = 'null';//如果需要清空ebs的“生管承诺日期”字段,那么需要设定为'null'
                        } else {
                            $OrderLine['ORDER_LINE_ITEM']['PROMISE_DATE'] = date('Y-m-d', strtotime($promise_date));
                        }
                    }

                    //新增的行
                    $params['P_SALES_ORDER']['ORDER_LINE'][] = $OrderLine;
                }
            }
        }

        //根据接口参数顺序逐个设置
        foreach ($params['P_SALES_ORDER'] as $key => $value) {
            if (empty($value)) {
                unset($params['P_SALES_ORDER'][$key]);
                continue;
            }
        }
        if (isset($params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM'])) {
            foreach ($params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM'] as $key => $value) {
                if ('' === $value) {
                    unset($params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM'][$key]);
                    continue;
                }
                // if (!is_array($value)) {
                //     $params['P_SALES_ORDER']['ORDER_LINE']['ORDER_LINE_ITEM'][$key] = htmlentities($value);
                // }
            }
        } else if (!empty($params['P_SALES_ORDER']['ORDER_LINE'])) {
            foreach ($params['P_SALES_ORDER']['ORDER_LINE'] as $idx => $order_line_item) {
                foreach ($order_line_item['ORDER_LINE_ITEM'] as $key => $value) {
                    if ('' === $value) {
                        unset($params['P_SALES_ORDER']['ORDER_LINE'][$idx]['ORDER_LINE_ITEM'][$key]);
                        continue;
                    }
                    // $params['P_SALES_ORDER']['ORDER_LINE'][$idx]['ORDER_LINE_ITEM'][$key] = htmlentities($value);
                }
            }
        }

        //写log
        $ws_data = array();
        $ws_data['func_name'] = 'PROCESS_SALES_ORDER';
        $ws_data['ws_url'] = $globalEBSWebServiceUrls['Contract']['PROCESS_SALES_ORDER']['url'];
        $ws_data['params_json'] = json_encode($params);
        $ws_data['result'] = 'call before';
        $g_WsMonitor->save_ws_monitor($ws_data);

        $OrderResult = $client->call('PROCESS_SALES_ORDER', $params);

        //写log
        $ws_data = array();
        $ws_data['func_name'] = 'PROCESS_SALES_ORDER';
        $ws_data['ws_url'] = $data['Req']['id'];
        $ws_data['params_json'] = json_encode($params);
        $ws_data['is_success'] = (isset($OrderResult['P_RETURN_STATUS']) && 'S' == $OrderResult['P_RETURN_STATUS']) ? 1 : 0;
        $ws_data['result'] = json_encode($OrderResult);
        $g_WsMonitor->save_ws_monitor($ws_data);

        $g_Logs->write_log('Reqs', $data['Req']['id'], 'info', '结束调用同步订单方法#' . __FUNCTION__);

        //BOM工程师确认状态
        $BomAuditStatus = 'N';
        if (!empty($MfPlanBill) && OCS_BOM_CONFIRM_PASS == $MfPlanBill['MfPlanBill']['bom_confirm_status']) {
            $BomAuditStatus = 'Y';
        }
        $this->Req->UpdateEbsOrderBomAuditStatus($data['Req']['id'], $BomAuditStatus, false);

        if (!empty($OrderResult) && isset($OrderResult['P_RETURN_STATUS']) && $OrderResult['P_RETURN_STATUS'] == 'S') {//传EBS成功
            //如果是修改第三方付款平台之前同步失败，则再次同步成功时，需再做相关的操作
            if (isset($flex_fields['alter_mid_account']['attribute12s']) && !empty($flex_fields['alter_mid_account']['attribute12s'])) {
                foreach ($flex_fields['alter_mid_account']['attribute12s'] as $temp_attribute12) {
                    $this->Req->dupOldLineFlexFieldToNewLine($data['Req']['id'], $temp_attribute12['old_attribute12'], $temp_attribute12['new_attribute12']); //复制弹性域
                }
            }
            //更新是否传EBS标志
            $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $data['Req']['id'])));
            if (!empty($Req)) {
                $EbsOrderStage = $this->getEbsOrderStageByReqIds($Req['Req']['id']);
                $log_content = '';
                $first_sync = false;
                if (empty($Req['Req']['ebs_order_number'])) {//说明第一次同步订单到EBS
                    $log_content = '第一次同步订单至EBS，订单编号：';
                    if (!empty($log_content)) {
                        $log_content .= isset($EbsOrderStage[$Req['Req']['id']]['ORDER_NUMBER']) ? $EbsOrderStage[$Req['Req']['id']]['ORDER_NUMBER'] : '';
                        $g_Logs->write_log('Reqs', $Req['Req']['id'], 'info', $log_content);
                    }
                    if($data['Contract']['ebs_po_line_id'] > 0 && $data['Contract']['is_crm_fail'] > 0){
                        $ebs_order_number = (!empty($EbsOrderStage)) ? $EbsOrderStage[$Req['Req']['id']]['ORDER_NUMBER'] : '';
                        $this->Req->UpdatePoNumber($data['Contract']['ebs_po_line_id'], $ebs_order_number);//将EBS编号回写采购订单
                    }
                    //将XXCUS.XXOM_OCS_ORDERS_ALL表对应订单数据表数据同步删除，以免EBS数据时有重复订单（半个钟内）
                    $this->Req->delEbsOrderDataByReqId($Req['Req']['id']);
                    $first_sync = true;

                    //同步客户要求交期
                    $this->Req->SyncClientRequirementDeliveryToEBS($data['Req']['id']);

                    //如果第一同步就有设置工厂，则OCS的order_line_item里也设置对应工厂数据，免去登记订单时，还需填写工厂
                    if (!empty($ProJectId)) {
                        $g_OrderLineItem->autoSetLineMtoNo($Req['Req']['id']);
                    }
                }
                $Req['Req']['is_sync_ebs'] = 1;
                $Req['Req']['ebs_order_number'] = (!empty($EbsOrderStage)) ? $EbsOrderStage[$Req['Req']['id']]['ORDER_NUMBER'] : '';
                $Req['Req']['update_time'] = date('Y-m-d H:i:s');
                $this->Req->save($Req['Req']);

                //首次同步订单，根据相关条件设置初始订单阶段
                if ($first_sync) {
                    $this->Req->advancePurchaseAutoPush($data['Req']['id']);

                    //首次同步，研发订单、样品订单的订单阶段默认为3阶段
                    if ($is_dev_order || $is_sam_order) {
                        $this->Req->RecursiveUpdateEbsStage($Req['Req']['id'], OCS_CONTRACT_EBS_STAGE_NEW, OCS_CONTRACT_EBS_STAGE_TO_PURCHASE);
                    }
                }
            }
            //清空同步失败标志
            if (isset($data['Req']['rel_obj_id'])) {
                $Contract = $g_Contract->find('first', array('conditions' => array('Contract.id' => $data['Req']['rel_obj_id'], 'OR' => array('Contract.is_crm_fail' => 1, 'Contract.error_type > 0'))));
                if (!empty($Contract)) {
                    $Contract['Contract']['is_crm_fail'] = 0;
                    if (in_array($Contract['Contract']['error_type'], array(OCS_CONTRACT_ERROR_TYPE_SYS, OCS_CONTRACT_ERROR_TYPE_SYNC))) {
                        $Contract['Contract']['error_type'] = 0;
                    }
                    if (isset($extend_params['modify_bill']) && 1 == $extend_params['modify_bill']) {
                        $Contract['Contract']['error_type'] = 0;
                    } else if (isset($extend_params['contract_audit']) && 1 == $extend_params['contract_audit']) {
                        $Contract['Contract']['error_type'] = 0;
                    }
                    $Contract['Contract']['crm_fail_reason'] = '';
                    $g_Contract->save($Contract['Contract']);
                }
            }

            //处理减少订单行数量
            $tmp_result = $this->Req->ProcessOrderLineQty($data['Req']['id']);
            if(!$tmp_result['success']){
                $Contract = $g_Contract->find('first', array('conditions' => array('Contract.id' => $data['Req']['rel_obj_id'],'Contract.is_crm_fail'=>0),
                    'fields'=>array('Contract.id','Contract.crm_fail_reason','Contract.is_crm_fail')));
                $Contract['Contract']['is_crm_fail'] = 1;
                $Contract['Contract']['crm_fail_reason'] = '订单行数量同步失败，'.$tmp_result['message'];
                $g_Contract->save($Contract['Contract']);
                $result['success'] = false;
                $result['message'] = $tmp_result['message'];
                $result['datas'] = json_encode($tmp_result);
                return $result;
            }

            //购物车订单处理 （三部），自动登记订单
            if(1 != $data['Contract']['is_book']) {
                // $g_RelReq = $g_Commons->GlobalModel('RelReq');
                // $rel_req = $g_RelReq->find('first', array(
                //     'conditions' => array(
                //         'RelReq.req_id' => $data['Req']['id'],
                //     ),
                //     'fields' => array(
                //         'RelReq.is_cart_order',
                //     )
                // ));
                //if (!empty($rel_req) && 1 == $rel_req['RelReq']['is_cart_order']) { //购物车订单
                if (!empty($rel_req) && 1 == $rel_req['RelReq']['is_cart_order']) { //购物车订单
                    $tmp_result = $this->BookEbsOrderByReqId($data['Req']['id'], true);
                    if (!$tmp_result['success']) {
                        $g_Logs->write_log('Reqs', $data['Req']['id'], 'info', $tmp_result['message']);
                    }
                }
            }

            //如果拆分订单失败，当订单同步成功时，也自动执行拆分系列动作
            if (OCS_HANDLE_RESERVE_STATUS_SPLIT_ORDER_FAILED == $data['Req']['handle_reserve_status']) {
                $this->Req->MarkProcessSplitOrderNew($data['Req']['id'], true);
            }

            $result['success'] = true;
            $result['message'] = 'save success.';
            $result['datas'] = json_encode($OrderResult);
            return $result;
        }

        //同步失败
        $error_msg = '';
        if (!empty($OrderResult)) {
            foreach ($OrderResult as $key => $temp) {
                if ('P_RETURN_STATUS' != $key) {
                    $error_msg = $temp;
                    break;
                }
            }
        }
        $Contract = $g_Contract->find('first', array(
            'conditions' => array('Contract.id' => $data['Req']['rel_obj_id']),
            'fields' => array('Contract.id', 'Contract.is_crm_fail', 'Contract.crm_fail_reason')
        ));

        //订单同步失败，检查是不是常见的情况，如是 则给予相关提示
        $code_verify_msg = $this->Req->checkProductCodeIsAvailable($ProductCode, $OrganizationId);
        if ('S' != $code_verify_msg) {
            $error_msg = $code_verify_msg . $error_msg;
        }

        if (!empty($Contract)) {
            $Contract['Contract']['is_crm_fail'] = 1;
            $Contract['Contract']['crm_fail_reason'] = $error_msg;
            $g_Contract->save($Contract['Contract']);
        }

        $result['success'] = false;
        $result['message'] = '订单传EBS失败,#' . $error_msg;
        $result['datas'] = json_encode($OrderResult);
        return $result;
    }

    //维护客户要求交期
    function pop_edit_client_requirement_delivery() {
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_MfPlanBill->recursive = -1;
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $ReqIds = explode(',', $AllParams['P']['req_ids']);
        if (!isset($AllParams['P']['req_ids']) || empty($ReqIds)) {
            return;
        }

        $Reqs = $this->Req->find('all', array(
            'conditions' => array(
                'Req.id' => $ReqIds
            ),
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ),
            ),
            'fields' => array(
                'Req.id,Req.name,Req.ebs_order_number,Req.account_id,Req.quantity,Req.product_id,Req.remark,Req.mf_remark,Req.client_requirement_delivery',
                'Contract.contract_no,Contract.account_mno,Contract.account_cno,Contract.account_bno,Contract.delivety_time'
            )
        ));
        $Reqs = $g_AttrDics->formatAllModelData($Reqs);
        $this->set('Reqs', $Reqs);

        $MfPlanBillList = array();
        $MfPlanBills = $g_MfPlanBill->find('all', array(
            'conditions' => array(
                'MfPlanBill.req_id' => $ReqIds
            ),
            'fields' => array(
                'MfPlanBill.id',
                'MfPlanBill.req_id',
                'MfPlanBill.erp_lot_number'
            )
        ));
        if (!empty($MfPlanBills)) {
            foreach ($MfPlanBills as $MfPlanBill) {
                if (!empty($MfPlanBill['MfPlanBill']['erp_lot_number'])) {
                    $MfPlanBillList[$MfPlanBill['MfPlanBill']['req_id']][] = $MfPlanBill['MfPlanBill']['erp_lot_number'];
                }
            }
        }
        $this->set('MfPlanBillList', $MfPlanBillList);

        $this->set('saveComplete', 0);
        if ($this->request->is('post')) {
            $g_ebs_model = $g_Commons->GlobalModel('EbsModel');
            $g_user_model = $g_Commons->GlobalModel('User');
            global $g_UserId;
            $user_name = $g_user_model->getUserNameById($g_UserId);

            $submitData = $this->request->data;
            foreach ($submitData as $idx => $temp) {
                $ReqId = preg_replace('/req_/', '', $idx);
                if (empty($ReqId)) {
                    continue;
                }
                $Req = $this->Req->find('first', array(
                    'conditions' => array(
                        'Req.id' => $ReqId
                    ),
                    'fields' => array(
                        'Req.id',
                        'Req.ebs_order_number',
                        'Req.name',
                        'Req.client_requirement_delivery')
                ));
                if (!empty($Req)) {
                    $Req['Req']['client_requirement_delivery'] = $temp['client_requirement_delivery'];
                    $save_result = $this->Req->save($Req['Req']);

                    //实时回写到EBS
                    if (!empty($save_result) && !empty($save_result['Req']['ebs_order_number'])) {
                        $this->Req->SyncClientRequirementDeliveryToEBS($ReqId);
                    }
                }
            }
            $this->set('saveComplete', 1);
        }
    }

    /**
     * [pop_add_client_req_change 发起客户需求变更]
     *
     * @Author   liaomingkai
     *
     * @DateTime 2015-09-13T10:59:03+0800
     *
     */
    function pop_add_client_req_change() {
        global $g_Commons;
        $g_CpsContractCfm = $g_Commons->GlobalModel('CpsContractCfm');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $all_params = $g_Commons->getUrlParams($this->params->params);
        $this->set('all_params', $all_params);
        $req_ids = explode(',', $all_params['P']['req_ids']);
        if (!isset($all_params['P']['req_ids']) || empty($req_ids)) {
            return;
        }
        $reqs = $this->Req->find('all', array(
            'conditions' => array(
                'Req.id' => $req_ids
            ),
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => array(
                        'Contract.id = Req.rel_obj_id',
                        'Req.model_def_id' => Contract,
                    )
                )
            ),
            'fields' => array(
                'Req.id',
                'Req.name',
                'Req.ebs_order_number',
                'Req.product_id',
                'Req.remark',
                'Contract.contract_no',
                'Contract.account_mno',
                'Contract.account_cno',
                'Contract.id'
            )
        ));
        $ocs_contract_ids = array();
        foreach ($reqs as $req) {
            $ocs_contract_ids[] = $req['Contract']['id'];
        }
        $cps_contract_cfm_ids = $g_CpsContractCfm->find('list', array(
            'conditions' => array(
                'CpsContractCfm.ocs_contract_id' => $ocs_contract_ids
            ),
            'fields' => array(
                'CpsContractCfm.ocs_contract_id',
                'CpsContractCfm.id'
            ),
            'order' => 'CpsContractCfm.id asc'
        ));
        $reqs = $g_AttrDics->formatAllModelData($reqs);
        $this->set('reqs', $reqs);
        $this->set('cps_contract_cfm_ids', $cps_contract_cfm_ids);
    }

    public function getNavTabs($startDate = null, $endDate = null, $tab = 'normal_bom_to_do') {
        global $g_BizId;
        global $g_UserId;
        global $g_Commons;
        $g_Users = $g_Commons->GlobalController('Users');

        $navTabs = array();
        $startDate = (null == $startDate) ? date('Y-m-d') : $startDate;
        $endDate = (null == $endDate) ? date('Y-m-d') : $endDate;

        $RoleAlias = $g_Users->getAllUserAliasByUserId($g_UserId);
        $HwRoleAlias = array('HardwareAdmin', 'Hardware', 'HardwareProjectManager', 'Admin','ConstructionEngineer','PackagingDesigner'); //硬件工程师
        $intersect = array_intersect($HwRoleAlias, $RoleAlias);
        if (in_array('BomDept', $RoleAlias) || in_array('Admin', $RoleAlias)) {
            $navTabs['normal_bom_to_do'] = array(
                'active' => '',
                'label' => '我的未做BOM',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=normal_bom_to_do',
            );
            $navTabs['normal_bom_not_audit'] = array(
                'active' => '',
                'label' => '硬件审核中',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=normal_bom_not_audit',
            );
        }
        if (!empty($intersect) && !in_array('BomDept', $RoleAlias)) {//硬件工程师审核
            $navTabs['my_not_audit_bom'] = array(
                'active' => '',
                'label' => '我的未审BOM',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=my_not_audit_bom',
            );
            $navTabs['my_audited_bom'] = array(
                'active' => '',
                'label' => '我的已审BOM',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=my_audited_bom',
            );
        }

        if (in_array('BomDept', $RoleAlias) || in_array('Admin', $RoleAlias)) {
            $navTabs['my_bom_done'] = array(
                'active' => '',
                'label' => '我的硬件审核完成',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=my_bom_done',
            );
        }

        if (in_array('BomDept', $RoleAlias) || !empty($intersect) || in_array('Admin', $RoleAlias)) {
            if(OCS_BIZ_TYPE_TV == $g_BizId){
                $navTabs['backup_bom_to_do'] = array(
                    'active' => '',
                    'label' => '未完成备料BOM',
                    'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=backup_bom_to_do',
                );
                $navTabs['backup_bom_done'] = array(
                    'active' => '',
                    'label' => '已完成备料BOM',
                    'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=backup_bom_done',
                );
                $navTabs['backup_bom_all'] = array(
                    'active' => '',
                    'label' => '全部备料BOM',
                    'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=backup_bom_all',
                );
            }
            $navTabs['not_assign_bom_audit'] = array(
                'active' => '',
                'label' => '未分派BOM审核人',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=not_assign_bom_audit',
            );
            $navTabs['confirm_bom_status_failed'] = array(
                'active' => '',
                'label' => '自动确认失败',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=confirm_bom_status_failed',
            );
        }
        $navTabs['normal_bom_done'] = array(
            'active' => '',
            'label' => '全部正式BOM',
            'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=normal_bom_done',
        );
        if (in_array('OrderOwnerSelf', $RoleAlias) || in_array('RdOrderUser', $RoleAlias) || in_array('Admin', $RoleAlias)) {
            $navTabs['my_req_bom_status'] = array(
                'active' => '',
                'label' => '我的未完成BOM(正式)',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=my_req_bom_status',
            );
            $navTabs['my_b_bom_status'] = array(
                'active' => '',
                'label' => '我的备料BOM(备料)',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=my_b_bom_status',
            );
            $navTabs['my_req_bom_done'] = array(
                'active' => '',
                'label' => '我的已完成BOM',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=my_req_bom_done',
            );
            $navTabs['my_back_forward_bill'] = array(
                'active' => '',
                'label' => '我的被打回订单',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=my_back_forward_bill',
            );
            $navTabs['all_back_forward_bill'] = array(
                'active' => '',
                'label' => '全部被打回订单',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=all_back_forward_bill',
            );
        } else if (in_array('BomDept', $RoleAlias)) {
            $navTabs['my_back_forward_bill'] = array(
                'active' => '',
                'label' => '我的打回订单',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=my_back_forward_bill',
            );
        } else if (in_array('OrderOwnerAdmin', $RoleAlias)) {
            $navTabs['all_back_forward_bill'] = array(
                'active' => '',
                'label' => '全部被打回订单',
                'url' => 'Reqs/bom_assign_index/P:start_date=' . $startDate . '&end_date=' . $endDate . '&tab=all_back_forward_bill',
            );
        }
        if (in_array('BomDept', $RoleAlias)) {
            $navTabs['prod_bom_task_not_assign'] = array(
                'active' => '',
                'label' => '我的未审(报备) <span class="badge badge-warning" id="my_audit_task_count" rel="not_assign">0</span>',
                'url' => 'ProdBomTasks/index/P:tab=not_assign',
            );
        } else {
            $navTabs['prod_bom_task_to_audit'] = array(
                'active' => '',
                'label' => '我的报备BOM <span class="badge badge-warning" id="my_audit_task_count" rel="to_audit">0</span>',
                'url' => 'ProdBomTasks/index/P:tab=to_audit',
            );
            $navTabs['all_bom_task'] = array(
                'active' => '',
                'label' => '全部报备BOM',
                'url' => 'ProdBomTasks/index/P:tab=all',
            );
        }
        if (!empty($navTabs) && isset($navTabs[$tab])) {
            $navTabs[$tab]['active'] = 'active';
        }
        return $navTabs;
    }

    //获取订单对应的产品是否有BOM
    /*
      1、通过req_ids找出产品编码
      2、通过产品编码调PLM接口，更新BOM状态
      3、更新后，再查找判断是否有BOM，joins表返回有（无）BOM的req_ids
     */
    function getBomReqIdsByReqIds($ReqIds = null, $action = 'N') {
        global $g_Commons;
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Products->Product->recursive = -1;
        $this->Req->recursive = -1;
        $ProductIds = $this->Req->find('list', array('conditions' => array('Req.id' => $ReqIds),
                    'fields' => array('Req.product_id')));
        //从PLM同步BOM信息
        $g_Products->SyncProductAgileStatus($ProductIds);

        //同步完后再查找有没有BOM产品对应的订单
        switch ($action) {
            case 'N'://获取BOM为空的
                $cond_str = "(Product.bom_name IS NULL OR Product.bom_name = '' OR Product.bom_name='?' OR Product.bom_name = '初始')";
                break;
            case 'Y'://获取有BOM的
                $cond_str = "(Product.bom_name IS NOT NULL AND Product.bom_name != '' AND Product.bom_name != '?' AND Product.bom_name != '初始')";
                break;
                break;
        }
        $ResultIds = $this->Req->find('list', array('conditions' => array('Req.id' => $ReqIds, $cond_str),
                    'joins' => array(
                        array(
                            'table' => 'products',
                            'alias' => 'Product',
                            'type' => 'LEFT',
                            'conditions' => "Product.id=Req.product_id"
                        ),
                    ),
                    'fields' => array('Req.id')
                ));
        return $ResultIds;
    }

    //通过req_ids同步BOM状态
    function SyncBomStatusByReqIds($ReqIds = array()) {
        global $g_Commons;
        $g_Products = $g_Commons->GlobalController('Products');
        if (empty($ReqIds)) {
            return false;
        }
        $this->Req->recursive = -1;
        $ProductIds = $this->Req->find('list', array('conditions' => array('Req.id' => $ReqIds),
                    'fields' => array('Req.product_id')));
        if (!empty($ProductIds)) {
            $g_Products->SyncProductAgileStatus($ProductIds);
        }
    }

    //自动分派BOM任务
    function bom_assign_index() {
        global $g_Commons;
        global $g_UserId;
        global $g_BizName;
        global $g_BizId;
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Searches = $g_Commons->GlobalController('Searches');
        $g_User = $g_Commons->GlobalModel('User');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_Biz = $g_Commons->GlobalModel('Biz');
        $g_Searches->Search->recursive = -1;
        $this->Req->recursive = -1;
        $this->set('title_for_layout', 'BOM任务');
            //导出
        if (isset($this->params->params['named']['export']) && $this->params->params['named']['export']) {
            $this->autoRender = false;
            if (!$g_RolePrivs->get_priv_level($this->name, 'can_export_bom_task')) {
                throw new Exception("抱歉，你无权导出。", 1);
            }
        }

        $this->set('CurrentBizName',$g_Biz->get_by_id($g_BizId, 'name'));
        $BizList = $g_Biz->find('all', array(
            'joins' => array(
                array(
                    'table' => 'user_rel_bizs',
                    'alias' => 'UserRelBiz',
                    'type' => 'LEFT',
                    'conditions' => 'UserRelBiz.biz_id=Biz.id'
                )
            ),
            'conditions' => array('UserRelBiz.user_id' => $g_UserId, 'UserRelBiz.is_available' => 1),
            'fields' => 'Biz.id, Biz.label, Biz.name'
        ));
        $this->set('BizList',$BizList);

        $biz_name_list = array();
        foreach ($BizList as $item_biz) {
            $biz_name_list[$item_biz['Biz']['id']] = $item_biz['Biz']['name'];
        }

        $ebs_stage = $g_Enum->find('list', array(
            'conditions' => array('Enum.dict_name' => 'Contract.ebs_stage'),
            'fields' => 'Enum.value, Enum.label'
        ));
        $this->set('ebs_stage', $ebs_stage);

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        if ($g_RolePrivs->get_priv_level('Reqs', 'common_owner_priv')) {
            $AllParams['P']['tab'] = isset($AllParams['P']['tab']) ? $AllParams['P']['tab'] : 'my_req_bom_status';
        } else {
            $AllParams['P']['tab'] = isset($AllParams['P']['tab']) ? $AllParams['P']['tab'] : 'normal_bom_to_do';
        }
        $AllParams['P']['ebs_stage'] = isset($AllParams['P']['ebs_stage']) ? $AllParams['P']['ebs_stage'] : '0';
        $this->set('AllParams', $AllParams);

        if (!isset($AllParams['P']['start_date'])) {
            $StartDate = date("Y-m-d", mktime(0, 0, 0, date('n'), date('j') - 30, date('Y')));
        } else {
            $StartDate = $AllParams['P']['start_date'];
        }
        $EndDate = !isset($AllParams['P']['end_date']) ? date('Y-m-d') : $AllParams['P']['end_date'];
        $this->set('StartDate', $StartDate);
        $this->set('EndDate', $EndDate);
        $NavTabs = $this->getNavTabs($StartDate, $EndDate, $AllParams['P']['tab']);
        $this->set('NavTabs', $NavTabs);

        if ($this->request->is('post')) {
            if (isset($this->request->data['search_value'])) {
                $qValue = trim($this->request->data['search_value']);
                $url_params = array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'bom_assign_index');
                if (!empty($this->params->params['named'])) {
                    foreach ($this->params->params['named'] as $key => $p) {
                        $url_params[$key] = $p;
                    }
                }
                $url_params['page'] = 1;
                $url_params['q'] = $qValue;
                $this->redirect($url_params);
            }
        }

        $showing_rows = 50;
        if (isset($AllParams['rows'])) {
            foreach ($AllParams['rows'] as $rows) {
                $showing_rows = $rows;
                break;
            }
        }


        if ((int) date('H') < 5) {
            $EndDate = date('Y-m-d H:i:s', mktime(date('H'), date('i'), date('s'), date('n', strtotime($EndDate)), date('j', strtotime($EndDate)) + 1, date('Y', strtotime($EndDate))));
        } else {
            $EndDate = date('Y-m-d H:i:s', mktime(date('H'), date('i'), date('s'), date('n', strtotime($EndDate)), date('j', strtotime($EndDate)), date('Y', strtotime($EndDate))));
        }
        //筛选当天的
        if (date('Y-m-d', strtotime($StartDate)) == date('Y-m-d', strtotime($EndDate))) {
            $StartDate = date("Y-m-d H:i:s", mktime(0, 0, 0, date('n', strtotime($StartDate)), date('j', strtotime($StartDate)), date('Y', strtotime($StartDate))));
            $EndDate = date("Y-m-d H:i:s", mktime(23, 59, 0, date('n', strtotime($EndDate)), date('j', strtotime($EndDate)), date('Y', strtotime($EndDate))));
        }

        //固定选择的时间段
        $sel_date_scope = array(
            1 => '最近一个月',
            2 => '最近两个月',
            3 => '最近三个月',
            6 => '最近半年',
        );
        $this->set('sel_date_scope', $sel_date_scope);
        $scope_value = floor((strtotime($EndDate) - strtotime($StartDate)) / (86400*30) );
        $this->set('scope_value', $scope_value);


        $conds = array('Req.model_def_id' => Contract, 'Req.dest_type' => 'EBS', 'Req.biz_id' => $g_BizId,
            'Req.close_status NOT IN(' . OCS_ORDER_CLOSE_STATUS_CANCEL . ')');
        //时间段
        if (in_array($AllParams['P']['tab'], array('backup_bom_to_do', 'backup_bom_done', 'backup_bom_all', 'my_b_bom_status'))) { //备料BOM任务，按备料分派时间过滤
            $conds[] = "(Req.semi_bom_assign_time >= '" . $StartDate . "' AND Req.semi_bom_assign_time <= '" . $EndDate . "')";
        } else if(in_array($AllParams['P']['tab'], array('my_back_forward_bill', 'all_back_forward_bill'))) { //被打回，按订单创建时间过滤
            $conds[] = "(Req.create_time >= '" . $StartDate . "' AND Req.create_time <= '" . $EndDate . "')";
        } else {
            $conds[] = "(Req.bom_assign_time >= '" . $StartDate . "' AND Req.bom_assign_time <= '" . $EndDate . "')";
        }

        $joins = array();

        $qValue = '';
        $this->set('qValue', $qValue);
        if (isset($this->params->params['named']['q'])) {
            $qValue = $this->params->params['named']['q'];
            if (!empty($qValue)) {
                $search_cond = "Product.name LIKE '%" . $qValue . "%' OR Product.code LIKE '%" . $qValue . "%' OR Product.tmp_code LIKE '%" . $qValue . "%'
                    OR Req.id='" . $qValue . "' OR Req.name LIKE '%" . $qValue . "%' OR Req.ebs_order_number LIKE '%" . $qValue . "%'";
                $joins[] =
                        array(
                            'table' => 'products',
                            'alias' => 'Product',
                            'type' => 'LEFT',
                            'conditions' => "Product.id=Req.product_id"
                );

                $Enum = $g_Enum->find('first', array('conditions' => array('Enum.dict_name' => 'MfPlanBill.bom_confirm_status',
                                "Enum.label LIKE '%" . $qValue . "%'"), 'fields' => array('Enum.id', 'Enum.value')));
                if (!empty($Enum)) {//查BOM审核状态
                    $search_cond .= " OR MfPlanBill.bom_confirm_status = '" . $Enum['Enum']['value'] . "'";
                }

                $Enum = $g_Enum->find('first', array('conditions' => array('Enum.dict_name' => 'MfPlanBill.hw_audit_status',
                                "Enum.label LIKE '%" . $qValue . "%'"), 'fields' => array('Enum.id', 'Enum.value')));
                if (!empty($Enum)) {//BOM审核状态
                    $search_cond .= " OR MfPlanBill.hw_audit_status = '" . $Enum['Enum']['value'] . "'";
                }

                $user_ids = $g_User->find('list', array('conditions' => array("User.realname LIKE '%" . $qValue . "%'"), 'fields' => 'User.id'));
                if (!empty($user_ids)) {
                    $search_cond .= " OR Req.owner_user_id in (" . implode(',', $user_ids) . ")";
                }
                $conds[] = '(' . $search_cond . ')';
            }
            $this->set('qValue', $qValue);
        }

        $ReqIds = array();
        $otherBizReqIds = array();
        $EbsOrderStages = array();
        //$close_time = date('Y-m-d H:i:s', mktime(date('23'), date('00'), date('00'), date('n', strtotime($EndDate)), date('j', strtotime($EndDate)), date('Y', strtotime($EndDate))));
        switch ($AllParams['P']['tab']) {
            case 'normal_bom_to_do':    //我的未做BOM
                $conds[] = "Req.is_mf = " . OCS_REQ_MF_NEW;
                $conds[] = "MfPlanBill.bom_pending_audit_user_id=" . $g_UserId;
                $conds[] = "MfPlanBill.hw_audit_status < " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_AUDITTING;
                $conds[] = "MfPlanBill.hw_audit_status != " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_NEW;
                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");

                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));

                // 获取其他事业部任务
                $other_biz_conds = $conds;
                $other_biz_conds['Req.biz_id'] = array_keys($biz_name_list);
                $other_biz_conds['Req.biz_id <>'] = $g_BizId;
                $otherBizReqIds = $this->Req->find('list', array('conditions' => $other_biz_conds, 'joins' => $joins, 'fields' => array('Req.id')));

                break;
            case 'normal_bom_not_audit':    //硬件审核中
                $conds[] = "MfPlanBill.bom_audit_user_id=" . $g_UserId;
                $conds[] = "MfPlanBill.hw_audit_status = " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_AUDITTING;
                $conds[] = "Req.is_mf = " . OCS_REQ_MF_NEW;
                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");

                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));

                // 获取其他事业部任务
                $other_biz_conds = $conds;
                $other_biz_conds['Req.biz_id'] = array_keys($biz_name_list);
                $other_biz_conds['Req.biz_id <>'] = $g_BizId;
                $otherBizReqIds = $this->Req->find('list', array('conditions' => $other_biz_conds, 'joins' => $joins, 'fields' => array('Req.id')));

                break;
            case 'my_not_audit_bom'://我的未审BOM(硬件工程师)
                $conds[] = "( (MfPlanBill.hw_pending_audit_user_id=" . $g_UserId . " AND (MfPlanBill.hw_audit_user_id IS NULL OR MfPlanBill.hw_audit_user_id <= 0))
                            OR (MfPlanBill.power_pending_audit_user_id=" . $g_UserId . " AND (MfPlanBill.power_audit_user_id IS NULL OR MfPlanBill.power_audit_user_id <= 0))
                            OR (MfPlanBill.struct_pending_audit_user_id=" . $g_UserId . " AND (MfPlanBill.struct_audit_user_id IS NULL OR MfPlanBill.struct_audit_user_id <= 0))
                            OR (MfPlanBill.pack_pending_audit_user_id=" . $g_UserId . " AND (MfPlanBill.pack_audit_user_id IS NULL OR MfPlanBill.pack_audit_user_id <= 0)) )";
                $conds[] = "MfPlanBill.hw_audit_status = " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_AUDITTING; //硬件审核进行中
                $conds[] = "Req.is_mf = " . OCS_REQ_MF_NEW;

                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");

                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));
                break;
            case 'my_audited_bom'://我的已审BOM(硬件工程师)
                $conds[] = "( (MfPlanBill.hw_audit_user_id = '" . $g_UserId . "')
                            OR (MfPlanBill.power_audit_user_id = '" . $g_UserId . "')
                            OR (MfPlanBill.struct_audit_user_id = '" . $g_UserId . "')
                            OR (MfPlanBill.pack_audit_user_id = '" . $g_UserId . "') )";

                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");

                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));
                break;
            case 'my_bom_done'://我的硬件审核完成(BOM工程师)
                $conds[] = "MfPlanBill.bom_audit_user_id = " . $g_UserId . "";
                $conds[] = "MfPlanBill.hw_audit_status = " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_DONE;

                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");

                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id'),
                            'order' => array('MfPlanBill.bom_confirm_status ASC')));
                break;
            case 'backup_bom_to_do':    //未完成备料BOM
                $conds['Req.is_semi'] = OCS_REQ_SEMI_NEW; //备料
                $conds['Req.model_def_id'] = Contract;
                $conds[] = "MfPlanBill.hw_audit_status != " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_NEW; //被打回任务
                $conds[] = "MfPlanBill.hw_audit_status != " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_MF_CANCEL; //取消任务

                // $conds[] = "(Product.bom_name = '初始' OR Product.bom_name = '初始(无BOM)' OR Product.bom_name = '?'
                // OR Product.bom_name = '' OR Product.bom_name IS NULL OR Product.agile_status = '改板')";
                // $conds[] = "(Product.agile_latest_version IS NULL OR Product.agile_latest_version = ''
                //         OR Product.agile_latest_version = '0' OR Product.agile_latest_version = '初始' OR Product.agile_latest_version LIKE '%无BOM%')";
                $conds[] = "(Product.agile_latest_version NOT REGEXP '^[0-9]+$' OR Product.agile_latest_version IS NULL)"; //无BOM
                $conds[] = "(Product.semi_agile_latest_version NOT REGEXP '^[0-9]+$' OR Product.semi_agile_latest_version IS NULL)"; //无BOM

                // $conds[] = "(Product.semi_bom_version = '初始' OR Product.semi_bom_version = '初始(无BOM)' OR Product.semi_bom_version = '?'
                // OR Product.semi_bom_version = '' OR Product.semi_bom_version IS NULL OR Product.semi_agile_status = '改板')";
                // $conds[] = "(Product.semi_agile_latest_version IS NULL OR Product.semi_agile_latest_version = '' OR Product.semi_agile_latest_version = '0' OR Product.semi_agile_latest_version = '初始')";
                $joins = array(
                    array(
                        'table' => 'products',
                        'alias' => 'Product',
                        'type' => 'LEFT',
                        'conditions' => "Product.id=Req.product_id"
                    ),
                    array(
                        'table' => 'mf_plan_bills',
                        'alias' => 'MfPlanBill',
                        'type' => 'LEFT',
                        'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0"
                    ),
                );
                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'fields' => array('Req.id'), 'joins' => $joins));
                $this->Req->autoAssignBomAuditUser($ReqIds); //分派备料BOM审核人
                break;
            case 'backup_bom_done'://已完成备料
                $conds['Req.is_semi'] = OCS_REQ_SEMI_NEW; //备料
                $conds['Req.model_def_id'] = Contract;
                $conds[] = "(Product.agile_latest_version REGEXP '^[0-9]+$' OR Product.semi_agile_latest_version REGEXP '^[0-9]+$')";
                // $conds[] = "((Product.semi_bom_version != '初始' AND Product.semi_bom_version != '初始(无BOM)' AND Product.semi_bom_version != '?' AND Product.semi_bom_version != ''
                // AND Product.semi_bom_version IS NOT NULL AND Product.semi_agile_status != '改板')
                // OR (Product.bom_name != '初始' AND Product.bom_name != '初始(无BOM)' AND Product.bom_name != '?' AND Product.bom_name != ''
                // AND Product.bom_name IS NOT NULL AND Product.agile_status != '改板'))"; //说明已经做好BOM或备料BOM
                $joins = array(
                    array(
                        'table' => 'products',
                        'alias' => 'Product',
                        'type' => 'LEFT',
                        'conditions' => "Product.id=Req.product_id"
                    ),
                );
                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'fields' => array('Req.id'), 'joins' => $joins)); //获取产品为备料产品且没做确认书的订单
                $this->Req->autoAssignBomAuditUser($ReqIds);
                break;
            case 'backup_bom_all':
                $conds['Req.is_semi'] = OCS_REQ_SEMI_NEW; //备料
                $conds['Req.model_def_id'] = Contract;
                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'fields' => array('Req.id'), 'joins' => $joins));
            break;
            case 'not_assign_bom_audit'://未分派BOM审核人
                $conds['Req.is_mf'] = OCS_REQ_MF_NEW; //正式
                $conds['Req.model_def_id'] = Contract;
                $str = "(Req.audit_stage=" . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE . " OR (
                    Attachment.is_delete = 0
                    and Attachment.is_lock = 0
                    and Attachment.attach_type IN(" . OCS_ATTACH_TYPE_CONFIRMATION . "," . OCS_ATTACH_TYPE_CONFIRMATION_UNSIGNED . ")
                    and Attachment.rel_attachment_id = 0
                ))"; //判断是否有确认书
                //$conds[] = 'Req.audit_stage='.OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE;//确认书已经审核完成
                $conds[] = $str;

                $conds[] = "(MfPlanBill.bom_pending_audit_user_id=0 OR MfPlanBill.bom_pending_audit_user_id='' OR
                    MfPlanBill.bom_pending_audit_user_id IS NULL OR MfPlanBill.id IS NULL)"; // OR MfPlanBill.bom_audit_user_id = 0 OR MfPlanBill.bom_audit_user_id IS NULL

                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");
                $joins[] = array('table' => 'attachments', 'alias' => 'Attachment', 'type' => 'left', 'conditions' => "Attachment.obj_id=Req.id and Attachment.model_def_id=" . Req);

                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));

                // 获取其他事业部任务
                $other_biz_conds = $conds;
                $other_biz_conds['Req.biz_id'] = array_keys($biz_name_list);
                $other_biz_conds['Req.biz_id <>'] = $g_BizId;
                $otherBizReqIds = $this->Req->find('list', array('conditions' => $other_biz_conds, 'joins' => $joins, 'fields' => array('Req.id')));

                break;
            case 'confirm_bom_status_failed': //自动下推BOM状态失败
                $conds[] = "MfPlanBill.bom_confirm_status =".OCS_BOM_CONFIRM_FAILED;
                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");

                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));
                break;
            case 'normal_bom_done': //全部正常BOM（不包括备料BOM）
                $conds['Req.is_mf'] = OCS_REQ_MF_NEW; //正式
                $conds['Req.model_def_id'] = Contract;

                $str = "(Req.audit_stage=" . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE . " OR (
                    Attachment.is_delete = 0
                    and Attachment.is_lock = 0
                    and Attachment.attach_type IN(" . OCS_ATTACH_TYPE_CONFIRMATION . "," . OCS_ATTACH_TYPE_CONFIRMATION_UNSIGNED . ")
                    and Attachment.rel_attachment_id = 0
                ))"; //判断是否有确认书
                $conds[] = $str;

                $joins = array(
                    array(
                        'table' => 'products',
                        'alias' => 'Product',
                        'type' => 'LEFT',
                        'conditions' => "Product.id=Req.product_id"
                    ),
                    array(
                        'table' => 'mf_plan_bills',
                        'alias' => 'MfPlanBill',
                        'type' => 'LEFT',
                        'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0"
                    ),
                );
                $joins[] = array('table' => 'attachments', 'alias' => 'Attachment', 'type' => 'left', 'conditions' => "Attachment.obj_id=Req.id and Attachment.model_def_id=" . Req);
                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));
                break;
            case 'my_back_forward_bill'://我的被打回
                $conds[] = "(Req.owner_user_id=" . $g_UserId . " OR Req.create_user_id = " . $g_UserId . "
                    OR MfPlanBill.bom_audit_user_id = " . $g_UserId . ")";
                $conds[] = "MfPlanBill.hw_audit_status = " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_NEW;
                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");

                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));
                break;
            case 'all_back_forward_bill'://全部被打回
                $conds[] = "MfPlanBill.hw_audit_status = " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_NEW;
                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");

                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));
                break;
            case 'my_req_bom_status': //我的未完成BOM（内勤）
                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");
                $conds[] = "(Req.owner_user_id=" . $g_UserId . " OR Req.create_user_id = " . $g_UserId . ")";
                $conds[] = "MfPlanBill.hw_audit_status < " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_DONE;
                $conds[] = "MfPlanBill.hw_audit_status != " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_MF_CANCEL;
                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));
                break;
            case 'my_b_bom_status': //我的备料BOM情况（内勤）
                $conds[] = "Req.is_semi = " . OCS_REQ_SEMI_NEW; //备料BOM订单
                $conds[] = "(Req.owner_user_id=" . $g_UserId . " OR Req.create_user_id = " . $g_UserId . ")";
                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));
                break;

            case 'my_req_bom_done'://我的已完成BOM（内勤）
                $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");
                $conds[] = "(Req.owner_user_id=" . $g_UserId . " OR Req.create_user_id = " . $g_UserId . ")";
                $conds[] = "MfPlanBill.hw_audit_status = " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_DONE;
                $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'joins' => $joins, 'fields' => array('Req.id')));
                break;
            default:break;
        }

        //获取确认书情况
        // $SignCfmStatus = $this->getAccountCfmStatus($ReqIds);
        // $this->set('SignCfmStatus', $SignCfmStatus);

        //设置conditions
        $conditions = array('Req.id' => $ReqIds, 'Req.parent_id' => 0);
        if ('my_back_forward_bill' != $AllParams['P']['tab'] && 'all_back_forward_bill' != $AllParams['P']['tab']) {
            $conditions[] = '(Contract.is_has_stock IS NULL OR Contract.is_has_stock = 0)';
        }
        if (0 != $AllParams['P']['ebs_stage']) {
            $conditions['Contract.ebs_stage'] = $AllParams['P']['ebs_stage'];
        }
        if (in_array($AllParams['P']['tab'], array('normal_bom_to_do', 'not_assign_bom_audit', 'backup_bom_to_do'))) {
            $conditions[] = "MfPlanBill.hw_audit_status != " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_MF_CANCEL;
        }

        //设置joins表
        $joins = array(
            array(
                'table' => 'contracts',
                'alias' => 'Contract',
                'type' => 'left',
                'conditions' => 'Contract.id = Req.rel_obj_id'
            ),
            array(
                'table' => 'products',
                'alias' => 'Product',
                'type' => 'left',
                'conditions' => 'Product.id = Req.product_id'
            ),
            array(
                'table' => 'mf_plan_bills',
                'alias' => 'MfPlanBill',
                'type' => 'left',
                'conditions' => 'MfPlanBill.req_id = Req.id and MfPlanBill.rel_idx = 0'
            ),
            array(
                'table' => 'rel_reqs',
                'alias' => 'RelReq',
                'type' => 'LEFT',
                'conditions' => 'Req.id = RelReq.req_id'
            ),
            array(
                'table' => 'rel_products',
                'alias' => 'RelProduct',
                'type' => 'LEFT',
                'conditions' => 'RelProduct.product_id = Product.id'
            ),
        );

        $this->paginate['conditions'] = $conditions;
        $this->paginate['joins'] = $joins;

        // 查询是否存在其他事业部任务
        if (!empty($otherBizReqIds)) {
            $other_biz_conditions = $conditions;
            $other_biz_conditions['Req.id'] = $otherBizReqIds;
            $other_biz_taks = $this->Req->find('all', array(
                'joins' => $joins,
                'conditions' => $other_biz_conditions,
                'fields' => 'Req.id, Req.biz_id'
            ));
            if (!empty($other_biz_taks)) {
                $otherBizTaskList = array();
                foreach ($other_biz_taks as $item_biz_task) {
                    $otherBizTaskList[$biz_name_list[$item_biz_task['Req']['biz_id']]][] = $item_biz_task['Req']['id'];
                }
                $this->set('otherBizTaskList', $otherBizTaskList);
            }
        }

        // $order_by = array('Product.code ASC');
        // if (in_array('BomDept', $RoleAlias) || in_array('Admin', $RoleAlias)) {
        //     $order_by = array('MfPlanBill.bom_confirm_status ASC', 'Product.code ASC');
        //     if('normal_bom_to_do' == $AllParams['P']['tab'] || 'normal_bom_not_audit' == $AllParams['P']['tab']){
        //         $order_by = array('Contract.delivety_time ASC');
        //     }
        // }
        // if('backup_bom_to_do' == $AllParams['P']['tab']){
        //     $order_by[] = 'Req.semi_bom_assign_time ASC';
        // }
        $this->set('query_conds', $this->paginate['conditions']);
        $order_by = array('Contract.delivety_time ASC');
        if ('backup_bom_to_do' == $AllParams['P']['tab'] || 'backup_bom_done' == $AllParams['P']['tab']) {
            $order_by[] = 'Req.semi_bom_assign_time ASC';
        } else {
            $order_by[] = 'Req.bom_assign_time ASC';
        }

        if (in_array($AllParams['P']['tab'], array('my_bom_done'))) {
            $order_by = array('MfPlanBill.bom_confirm_status ASC', 'Product.code ASC');
        }

        // 高级搜索
        $SearchParams = array('Controller' => 'Reqs', 'Model' => 'Req', 'params' => $AllParams);
        $Search = $g_Searches->getSearchInfo($SearchParams);
        $this->paginate = $g_Searches->getNewPaginate($Search, $this->paginate);

        $this->paginate['order'] = $order_by;

        // 高级搜索参数
        $this->set('SearchId', $Search['SearchId']);
        $this->set('SearchField', $Search['SearchField']);
        $this->set('SearchCondition', $Search['SearchCondition']);
        $this->set('SCondition', $Search['SCondition']);

        $InheritParams = array(array('key' => 'P', 'value' => isset($this->params->params['named']['P']) ? $this->params->params['named']['P'] : '')); // 需要继承的参数
        $this->set('InheritParams', $InheritParams);

        $this->paginate['fields'] = 'Req.*,MfPlanBill.*,Product.*,Contract.*,RelReq.semi_bom_code,RelReq.agile_brp_flow_status,RelReq.agile_brp_flow_err_msg,RelProduct.bom_type,Req.SW_Panel,Req.SW_Logo';
        $this->paginate['limit'] = $showing_rows;


        if (isset($this->params->params['named']['export']) && $this->params->params['named']['export'] && $g_RolePrivs->get_priv_level($this->name, 'can_export_bom_task')) { //导出excel
            $Reqs = $this->Req->find('all', array(
                'joins' => $this->paginate['joins'],
                'conditions' => $this->paginate['conditions'],
                'fields' => $this->paginate['fields'],
                'order' => $this->paginate['order'],
            ));
        } else {
            $Reqs = $this->paginate();
        }
        //获取是为紧急订单
        $req_ids = array();
        if (!empty($Reqs)) {
            foreach ($Reqs as $req) {
                $req_ids[] = $req['Req']['id'];
            }
        }
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $is_urgent_list = $g_RelReq->getIsUrgentOrder($req_ids);
        $this->set('is_urgent_list', $is_urgent_list);

        //这些字段需格式化(即使没有布局出来)
        $extend_format_fields = array('Req.id', 'Req.account_id', 'Req.product_id', 'Req.quantity', 'Req.audit_stage', 'Req.owner_user_id', 'Req.create_time',
            'Contract.delivety_time', 'Contract.ebs_stage', 'Req.ebs_order_number', 'Product.is_semi',
            'Product.id', 'Product.name', 'Product.code', 'Product.bom_name', 'Product.agile_status', 'Product.tmp_code',
            'MfPlanBill.id', 'MfPlanBill.hw_audit_status', 'MfPlanBill.bom_pending_audit_user_id', 'MfPlanBill.bom_audit_user_id', 'MfPlanBill.hw_pending_audit_user_id', 'MfPlanBill.hw_audit_user_id',
            'MfPlanBill.power_pending_audit_user_id', 'MfPlanBill.power_audit_user_id', 'MfPlanBill.auto_assign_time',
            'MfPlanBill.struct_pending_audit_user_id', 'MfPlanBill.struct_audit_user_id',
            'MfPlanBill.pack_pending_audit_user_id', 'MfPlanBill.pack_audit_user_id',
            'MfPlanBill.bom_confirm_time', 'MfPlanBill.bom_confirm_status', 'MfPlanBill.bom_confirm_user_id', 'MfPlanBill.m_product_id',
            'MfPlanBill.bom_audit_time', 'MfPlanBill.hw_audit_time', 'MfPlanBill.power_audit_time', 'Product.success_copy_to_plm',
            'Product.agile_remark', 'Req.is_semi', 'Req.is_mf', 'Contract.stage_update_time');

        $UserPrefData = $g_AttrDics->setUserPrefData($Reqs, $this->modelName, array('Req' => 'Contract'), 5, 0, $extend_format_fields);
        $this->set('UserPrefData', $UserPrefData);

        //导出
        if (isset($this->params->params['named']['export']) && $this->params->params['named']['export']) {
            $this->autoRender = false;
            if (!$g_RolePrivs->get_priv_level($this->name, 'can_export_bom_task')) {
                throw new Exception("抱歉，你无权导出。", 1);
            }
            $g_Commons->export_excel($UserPrefData, 'BOM任务');
            exit;
        }

        $pcb_list = array();
        foreach ($UserPrefData->modelData as $item) {
            if (!empty($item['Product']) && !empty($item['Product']['pcb_id'])) {
                $pcb_list[$item['Product']['id']] = $item['Product']['pcb_id'];
            }
        }

        //// 获取用户自定义搜索条件列表
        $g_UserPrefSearches = $g_Commons->GlobalController('UserPrefSearches');
        $UserPrefSearches = $g_UserPrefSearches->getUserPrefSearchesByBizIdAndModelDefIdAndUserId($g_BizId, Req, $g_UserId, NULL);
        $this->set('UserPrefSearches', $UserPrefSearches);

        $prod_switch = array();
        if (!empty($pcb_list)) {
            $g_ProdModelDetail = $g_Commons->GlobalModel('ProdModelDetail');
            $pcb_swich = $g_ProdModelDetail->find('list', array(
                'conditions' => array(
                    'id' => $pcb_list,
                ),
                'fields' => 'id, config_bom_switch'
            ));

            foreach ($pcb_list as $p_id => $pcb_id) {
                if (empty($pcb_swich[$pcb_id])) {
                    $prod_switch[$p_id] = 0;
                } else {
                    $prod_switch[$p_id] = 1;
                }
            }
        }
        $this->set('prod_switch', $prod_switch);

        // //获取EBS阶段的时间点
        // $OrderStageTimes = $this->Req->getLastOrderStageTime($ReqIds);
        // $this->set('OrderStageTimes', $OrderStageTimes);
    }

    //通过req_ids获取订单在EBS的订单阶段
    /* .
      -1:Unassigned
      3:3-提交下采购
      4:4-已审采购-提交下生产
      6:6-待生产评审
      7:7-已下达生产
     */
    function getEbsOrderStageByReqIds($ReqIds, $StageCode = null) {
        $result = array();
        if (empty($ReqIds)) {
            return array();
        }
        $ReqIdsStr = array();
        if (!is_array($ReqIds) && $ReqIds > 0) {
            $ReqIds = array($ReqIds);
        }
        foreach ($ReqIds as $req_id) {
            $ReqIdsStr[] = "'" . $req_id . "'";
        }
        $ReqIdsStr = implode(',', $ReqIdsStr);
        $ext_cond = (null != $StageCode) ? " AND lu.LOOKUP_CODE >= '" . $StageCode . "'" : ""; //当有指定状态，则返回>指定状态的

        $sql = "select oe.ATTRIBUTE8 OCS_REQ_ID,oe.ORDER_NUMBER,oe.Flow_Status_Code STATUS,ool.Flow_Status_Code LINE_STATUS, lu.LOOKUP_CODE,lu.MEANING
                       ,ch.creation_time stage_update_time
                from apps.oe_order_headers_all oe
                INNER JOIN apps.oe_order_lines_all ool ON
                oe.header_id = ool.header_id
                LEFT JOIN apps.FND_LOOKUP_VALUES_VL lu ON
                (nvl('', lu.territory_code) = lu.territory_code or lu.territory_code is null)
                AND lu.lookup_type = 'SALES_CHANNEL'
                AND (lu.LOOKUP_TYPE LIKE 'SALES_CHANNEL')
                AND (lu.LOOKUP_CODE = oe.SALES_CHANNEL_CODE)
                LEFT JOIN apps.xxom_order_stage_change_log ch ON(
                     ch.ocs_req_id = oe.attribute8 AND ch.new_stage = lu.MEANING
                )
                WHERE oe.attribute8 is not null AND oe.attribute8 IN(" . $ReqIdsStr . ") " . $ext_cond;

        // $sql = "select oe.ATTRIBUTE8 OCS_REQ_ID,oe.ORDER_NUMBER,oe.Flow_Status_Code STATUS, lu.LOOKUP_CODE,lu.MEANING from oe_order_headers_all oe
        //         LEFT JOIN FND_LOOKUP_VALUES_VL lu ON
        //         (nvl('', lu.territory_code) = lu.territory_code or lu.territory_code is null)
        //         AND lu.lookup_type = 'SALES_CHANNEL'
        //         and (lu.LOOKUP_TYPE LIKE 'SALES_CHANNEL')
        //         and (lu.LOOKUP_CODE = oe.SALES_CH,ANNEL_CODE)
        //         where oe.attribute8 IN(".$ReqIdsStr.") ".$ext_cond;

        global $g_Commons;
        $stid = $g_Commons->ebsConnect($sql);
        while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
            $result[$row['OCS_REQ_ID']] = $row;
        }
        return $result;
    }

    function saveEbsOrderstageByReqIds($ReqIds, $IsReturn = 1) {
        $this->autoRender = false;
        global $g_Commons;
        $ReqIds = explode(',', $ReqIds);
        $data = $this->getEbsOrderStageByReqIds($ReqIds);

        $result = $g_Commons->initResult();
        if (!empty($data)) {
            $g_Contract = $g_Commons->GlobalModel('Contract');
            $g_Enum = $g_Commons->GlobalModel('Enum');
            $g_Logs = $g_Commons->GlobalController('Logs');
            $this->Req->recursive = -1;
            $ebs_stage = $g_Enum->find('list', array(
                'conditions' => array('Enum.dict_name' => 'Contract.ebs_stage'),
                'fields' => 'Enum.alias, Enum.value'
            ));
            $contracts = $this->Req->find('list', array(
                'conditions' => array('Req.id' => $ReqIds, 'Req.model_def_id' => Contract),
                'fields' => 'Req.id, Req.rel_obj_id'
            ));
            $contract_ebs_stage = $g_Contract->find('list', array(
                'conditions' => array('Contract.id' => $contracts),
                'fields' => 'Contract.id, Contract.ebs_stage'
            ));
            foreach ($data as $req_id => $ebs_stage_data) {
                if (empty($contracts[$req_id])) {
                    continue;
                }
                $alias = 'ebs_stage' . $ebs_stage_data['LOOKUP_CODE'];
                if (empty($ebs_stage[$alias]) || $contract_ebs_stage[$contracts[$req_id]] == $ebs_stage[$alias]) {
                    continue;
                }
                $contract_data = array();
                $contract_data['id'] = $contracts[$req_id];
                $contract_data['ebs_stage'] = $ebs_stage[$alias];
                $contract_data['stage_update_time'] = date('Y-m-d H:i:s');
                if (isset($ebs_stage_data['STAGE_UPDATE_TIME']) && !empty($ebs_stage_data['STAGE_UPDATE_TIME'])) {
                    $contract_data['stage_update_time'] = date('Y-m-d H:i:s', strtotime($ebs_stage_data['STAGE_UPDATE_TIME']));
                }
                $g_Contract->save($contract_data);
                $g_Logs->write_log('Reqs', $req_id, 'info', '更新EBS订单阶段 #req_id=' . $req_id . ' ; EBS阶段:' . $ebs_stage_data['MEANING'] . ' ; EBS阶段时间:' . $contract_data['stage_update_time']);
            }
            $result['success'] = true;
        }
        if (1 == $IsReturn) {
            echo json_encode($result);
        }
        return;
    }

    function syncEbsStage() {
        $this->Req->recursive = -1;
        $req_ids = $this->Req->find('list', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'LEFT',
                    'conditions' => 'Req.rel_obj_id=Contract.id'
                )
            ),
            'conditions' => array(
                'Req.model_def_id' => Contract,
                'Req.ebs_order_number IS NOT NULL',
                'OR' => array(
                    'Contract.ebs_stage IS NULL',
                    'Contract.ebs_stage !=' => 40 // 不等于已下达生产
                ),
            ),
            'fields' => 'Req.id',
            'order' => 'Req.id DESC',
                // 'limit' => 1000
        ));
        $count = count($req_ids);
        if ($count > 1000) {
            for ($i = 0; $i < ($count / 1000); $i++) {
                $req_tmp = array_slice($req_ids, $i * 1000, 1000);
                $this->saveEbsOrderstageByReqIds(implode(',', $req_tmp));
            }
        } else {
            $this->saveEbsOrderstageByReqIds(implode(',', $req_ids));
        }
    }

    // //分派BOM审核
    // function pop_assign_bom_audit() {
    //     global $g_Commons;
    //     $this->Req->recursive = -1;

    //     $AllParams = $g_Commons->getUrlParams($this->params->params);
    //     $ReqIds = $AllParams['P']['req_ids'];
    //     $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ReqIds)));
    // }

    //BOM审核
    function pop_audit_bom() {
        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        global $g_OCS_options;
        global $g_UserRealName;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_MfPlanBills = $g_Commons->GlobalController('MfPlanBills');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_MfPlanBills->MfPlanBill->recursive = -1;
        $this->set('title_for_layout', '审核BOM任务');


        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);
        if (!isset($AllParams['P']['req_id']) || $AllParams['P']['req_id'] <= 0) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('参数错误，req_id不能为空.');
            return;
        }

        //从EBS获取工厂、齐套时间信息
        $MtoNo = '';
        $MCompleteDate = '';

        $sql = "SELECT * FROM apps.XXOCS_WIP_REL_INFO_V WHERE H_ATTRIBUTE8='" . $AllParams['P']['req_id'] . "'";
        $stid = $g_Commons->ebsConnect($sql);
        while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
            $MtoNo = $row['PROJECT_NUMBER'];
            $MCompleteDate = $g_Commons->formatDate($row['SCHEDULED_START_DATE'], -3); //齐套时间
        }
        $this->set('MtoNo', $MtoNo);
        $this->set('MCompleteDate', $MCompleteDate);

        $conds = array('Req.id' => $AllParams['P']['req_id']);
        $Req = $this->Req->find('first', array('conditions' => $conds,
            'joins' => array(
                array(
                    'table' => 'mf_plan_bills',
                    'alias' => 'MfPlanBill',
                    'type' => 'inner',
                    'conditions' => "MfPlanBill.req_id = Req.id and MfPlanBill.rel_idx = 0"
                ),
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => "Contract.id = Req.rel_obj_id"
                ),
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'inner',
                    'conditions' => "Product.id = Req.product_id"
                ),
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'left',
                    'conditions' => "RelReq.req_id = Req.id"
                ),
            ),
            'fields' => array('Req.id', 'Req.product_id', 'Req.name', 'Req.account_id', 'Req.owner_user_id', 'Req.quantity',
                'Contract.delivety_time', 'Product.name', 'Product.code', 'Product.bom_name', 'Product.agile_status', 'Product.is_semi',
                'Product.brp_seq_number','Product.brp_remark','Product.tmp_code','Product.id','Product.brp_audit_user_ids',
                'MfPlanBill.*', 'RelReq.agile_brp_flow_status', 'RelReq.agile_brp_flow_err_msg'),
        ));

        if (empty($Req['MfPlanBill']['bom_audit_user_id'])) {
            $this->Session->setFlash('BOM工程师未分派，您不可审核。');
            $this->set('setFlash', 1);
            return;
        }

        $formatModelData = $g_AttrDics->formatModelData(array($Req), 'Req');
        $formatModelData = $g_AttrDics->formatModelData($formatModelData, 'MfPlanBill');
        $formatModelData = $g_AttrDics->formatModelData($formatModelData, 'RelReq');
        if (!empty($formatModelData)) {
            $formatModelData = $formatModelData[0]; //只有一个
        }

        if ($formatModelData['Product']['is_semi'] == 1) {
            $this->Session->setFlash('备料产品不能审核。');
            $this->set('setFlash', 1);
            return;
        }

        //BRP流程审核人
        $BrpAuditUsers = array();
        if(!empty($Req['Product']['brp_audit_user_ids'])){
            $BrpAuditUsers = $g_Users->User->find('list',array('conditions'=>array('User.id'=>explode(',', $Req['Product']['brp_audit_user_ids'])),
                'fields'=>array('User.realname')));
        }
        $this->set('BrpAuditUsers', $BrpAuditUsers);

        //流程号不为空，查agile该流程是否已发布
        $InValidBrpSeqNumber = false;
        if(!empty($formatModelData['Product']['brp_seq_number'])){
            global $g_WebServices;
            $g_WebServices->OCS_get_ws_client_config();
            global $globalAgileWebServiceUrls;
            $client = new soap_client($globalAgileWebServiceUrls['Product']['url'], true);
            $client->soap_defencoding = 'utf-8';
            $client->decode_utf8 = false;
            $client->xml_encoding = 'utf-8';

            $g_ReqRelBom = $g_Commons->GlobalModel('ReqRelBom');
            $g_ReqRelBom->recursive = -1;

            $ProductId = $formatModelData['Product']['id'];

            $ReqRelBom = $g_ReqRelBom->find('first',array('conditions'=>array('ReqRelBom.product_id'=>$ProductId),
                'order'=>array('ReqRelBom.id DESC')));
            if(!empty($ReqRelBom)){
                $ReqRelBom['ReqRelBom']['diff_msg_json'] = json_decode($ReqRelBom['ReqRelBom']['diff_msg_json'],true);
                $SubBomCodes = array();
                if(!empty($ReqRelBom['ReqRelBom']['diff_msg_json'])){
                    foreach($ReqRelBom['ReqRelBom']['diff_msg_json'] as $temp){
                        $SubBomCodes[] = $temp['BOMCode'];
                    }
                }
                $SubBomCodes = implode(',',$SubBomCodes);

                $params = array();
                $params['iChangeNo'] = $formatModelData['Product']['brp_seq_number'];
                $params['iBOMNo'] = $SubBomCodes;
                $ws_params = array();
                $ws_params['jsonIn'] = json_encode($params);

                $tmp_result = $client->call('validateChange', $ws_params);
                $tmp_result = json_decode($tmp_result,true);
                if(!isset($tmp_result['valid']) || 1 != $tmp_result['valid']){//该BOM还未发起BRP流程，或者发起失败
                    $InValidBrpSeqNumber = true;
                }
            }
        }
        $this->set('InValidBrpSeqNumber',$InValidBrpSeqNumber);

        //获取对应的确认书
        $formatModelData['SignatureCfmAttachment'] = $this->Req->getSignatureCfmAttachmentsByReqId($AllParams['P']['req_id']);

        if (!empty($formatModelData['SignatureCfmAttachment'])) {
            $Attach = $formatModelData['SignatureCfmAttachment'];

            $g_Attachment = $g_Commons->GlobalModel('Attachment');
            $img_file_info = $g_Attachment->getAttachmentFileInfo($Attach['Attachment']['id']);

            if ($img_file_info['success']) {
                $destinationile_path = 'cache/attach/' . $Attach['Attachment']['hash_name'];
                $file_data = file_get_contents($img_file_info['datas']['file_path']);
                file_put_contents($destinationile_path, $file_data);
                $formatModelData['SignatureCfmAttachment']['Attachment']['show_src_url'] = '/' . $destinationile_path;
            }
        }

        //未分派审核
        if (!isset($formatModelData['MfPlanBill'])) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('BOM工程师未分派审核，无需审核。');
            return;
        }

        //已经审核，不需再审
        if ($g_UserId == $formatModelData['MfPlanBill']['hw_audit_user_id']['value'] || $g_UserId == $formatModelData['MfPlanBill']['power_audit_user_id']['value']
             || $g_UserId == $formatModelData['MfPlanBill']['struct_audit_user_id']['value']  || $g_UserId == $formatModelData['MfPlanBill']['pack_audit_user_id']['value']) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('您已经审核此BOM，无需再审核。');
            return;
        }
        $this->set('formatModelData', $formatModelData);
        if ($formatModelData['MfPlanBill']['hw_audit_status']['value'] != OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_AUDITTING && $formatModelData['MfPlanBill']['hw_audit_status']['value'] != OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_DONE) {
            $this->Session->setFlash('当前状态 #' . $formatModelData['MfPlanBill']['hw_audit_status']['label'] . '，非硬件审核状态。');
            $this->set('setFlash', 1);
            return;
        }
        if ($formatModelData['MfPlanBill']['hw_pending_audit_user_id']['value'] != $g_UserId
            && $formatModelData['MfPlanBill']['power_pending_audit_user_id']['value'] != $g_UserId
            && $formatModelData['MfPlanBill']['struct_pending_audit_user_id']['value'] != $g_UserId
            && $formatModelData['MfPlanBill']['pack_pending_audit_user_id']['value'] != $g_UserId) {
            $this->Session->setFlash('此单未分派给您审核，无权审核。');
            $this->set('setFlash', 1);
            return;
        }
        $this->set('formatModelData', $formatModelData);

        //submit
        $this->set('saveComplete', 0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            if ($formatModelData['Product']['is_semi'] == 1) {
                $this->Session->setFlash('备料产品不能审核通过。');
                $this->set('setFlash', 1);
                return;
            }

            if (!empty($formatModelData['RelReq']['agile_brp_flow_status'])) {
                $agile_brp_flow_status = is_array($formatModelData['RelReq']['agile_brp_flow_status']) ? $formatModelData['RelReq']['agile_brp_flow_status']['value'] : $formatModelData['RelReq']['agile_brp_flow_status'];

                if (OCS_AGILE_BRP_FLOW_STATUS_FAILED == $agile_brp_flow_status) { //BRP流程处理失败，不允许审核BOM任务
                    $this->Session->setFlash('Agile的BRP流程处理失败，不允许审批BOM任务，请重新发起BRP流程。失败原因：' . $formatModelData['RelReq']['agile_brp_flow_err_msg']);
                    $this->set('setFlash', 1);
                    return;
                }
            }

            $submitData = $this->request->data;
            $MfPlanBill = $g_MfPlanBills->MfPlanBill->find('first', array('conditions' => array('MfPlanBill.req_id' => $AllParams['P']['req_id'])));
            $log_content = '';
            if ($submitData['audit_result'] == 1) {//审核通过
                if ($g_UserId == $MfPlanBill['MfPlanBill']['hw_pending_audit_user_id']) {//硬件审核
                    $MfPlanBill['MfPlanBill']['hw_audit_user_id'] = $g_UserId;
                    $MfPlanBill['MfPlanBill']['hw_audit_time'] = date('Y-m-d H:i:s');
                    $log_content .= '硬件审核=>审核通过;';
                }
                if ($g_UserId == $MfPlanBill['MfPlanBill']['power_pending_audit_user_id']) {//电源审核
                    $MfPlanBill['MfPlanBill']['power_audit_user_id'] = $g_UserId;
                    $MfPlanBill['MfPlanBill']['power_audit_time'] = date('Y-m-d H:i:s');
                    $log_content .= '电源审核=>审核通过;';
                }
                if ($g_UserId == $MfPlanBill['MfPlanBill']['struct_pending_audit_user_id']) {//结构
                    $MfPlanBill['MfPlanBill']['struct_audit_user_id'] = $g_UserId;
                    $MfPlanBill['MfPlanBill']['struct_audit_time'] = date('Y-m-d H:i:s');
                    $log_content .= '结构审核=>审核通过;';
                }
                if ($g_UserId == $MfPlanBill['MfPlanBill']['pack_pending_audit_user_id']) {//包材
                    $MfPlanBill['MfPlanBill']['pack_audit_user_id'] = $g_UserId;
                    $MfPlanBill['MfPlanBill']['pack_audit_time'] = date('Y-m-d H:i:s');
                    $log_content .= '包材审核=>审核通过;';
                }
                $MfPlanBill['MfPlanBill']['audit_fail_reason'] = null; //审核通过后，将审核不过的原因清空。
            } else {//审核不通过,打回给BOM工程师重新修改
                $MfPlanBill['MfPlanBill']['hw_audit_status'] = OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_RESET; //BOM待修改
                $log_content .= '硬件审核状态=>BOM待修改;';
                if ($g_UserId == $MfPlanBill['MfPlanBill']['hw_pending_audit_user_id']) {//硬件审核
                    $MfPlanBill['MfPlanBill']['hw_audit_user_id'] = 0;
                }
                if ($g_UserId == $MfPlanBill['MfPlanBill']['power_pending_audit_user_id']) {//电源审核
                    $MfPlanBill['MfPlanBill']['power_audit_user_id'] = 0;
                }
                if ($g_UserId == $MfPlanBill['MfPlanBill']['struct_pending_audit_user_id']) {//结构审核
                    $MfPlanBill['MfPlanBill']['struct_audit_user_id'] = 0;
                }
                if ($g_UserId == $MfPlanBill['MfPlanBill']['pack_pending_audit_user_id']) {//包材审核
                    $MfPlanBill['MfPlanBill']['pack_audit_user_id'] = 0;
                }
                $MfPlanBill['MfPlanBill']['bom_audit_user_id'] = 0; //清空BOM工程师审核（此时出现在BOM工程师的“我的未审”里）
                $back_forward_reason = isset($submitData['audit_fail_reason']) ? $submitData['audit_fail_reason'] : '';
                $MfPlanBill['MfPlanBill']['audit_fail_reason'] = $back_forward_reason;
                $log_content .= '打回原因=>' . $back_forward_reason . ';';
                //邮件通知bom工程师重新修改
                $notifyUserEmail = $g_Users->getUserEmailById($MfPlanBill['MfPlanBill']['bom_pending_audit_user_id']);
                if (!empty($notifyUserEmail) && null != $notifyUserEmail && '' != $notifyUserEmail) {
                    global $g_UserRealName;
                    global $g_UserEmail;
                    $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
                    global $g_BizUrl;
                    $common_url = $g_OCS_options['url'] . $g_BizUrl . 'pop/MfPlanBills/batch_edit/P:req_ids=' . $AllParams['P']['req_id'] . '&act=new_bom_assign';
                    $toUsers = array();
                    $toUsers[] = $notifyUserEmail;
                    $Options['Email']['ToUsers'] = $toUsers;
                    $Options['Field']['login_user_realname'] = $g_UserRealName;
                    $Options['Field']['login_user_email'] = $g_UserEmail;
                    $Options['Field']['common_url'] = $common_url;
                    $Options['Field']['common_text'] = $back_forward_reason;
                    $g_QueueJobs->AddNoticeJob(array('Email'), MfPlanBill, $MfPlanBill['MfPlanBill']['id'], 'BackForwardAudit', $Options);
                }
            }
            // //bom+硬件+电源的工程师都审核完成
            // if ($MfPlanBill['MfPlanBill']['bom_audit_user_id'] > 0 && ($MfPlanBill['MfPlanBill']['hw_audit_user_id'] > 0 || $MfPlanBill['MfPlanBill']['hw_pending_audit_user_id'] == -1)
            //         && ($MfPlanBill['MfPlanBill']['power_audit_user_id'] > 0 || $MfPlanBill['MfPlanBill']['power_pending_audit_user_id'] == -1)) {
            //     $MfPlanBill['MfPlanBill']['hw_audit_status'] = OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_DONE; //硬件审核完成
            //     $g_Products->Product->setProductSemiByReqId($MfPlanBill['MfPlanBill']['req_id']); //设置订单对应的产品为“否”备料
            //     //正式BOM硬件审核完成，需将备料BOM任务去掉
            //     // $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $AllParams['P']['req_id'], 'Req.is_semi' => OCS_REQ_SEMI_NEW),
            //     //             'fields' => array('Req.id', 'Req.is_semi')));
            //     // $Req['Req']['is_semi'] = 0;
            //     // $this->Req->save($Req['Req']);
            //     // $log_text = '正式BOM审核完成，自动将备料BOM任务移除。';
            //     // $g_Logs->write_log('Reqs', $this->Req->id, 'info', $log_text);
            // }
            // //bom+硬件+结构+包材的工程师都审核完成
            // if ($MfPlanBill['MfPlanBill']['bom_audit_user_id'] > 0
            //     && ($MfPlanBill['MfPlanBill']['hw_audit_user_id'] > 0 || $MfPlanBill['MfPlanBill']['hw_pending_audit_user_id'] == -1)
            //     && ($MfPlanBill['MfPlanBill']['struct_audit_user_id'] > 0 || $MfPlanBill['MfPlanBill']['struct_pending_audit_user_id'] == -1)
            //     && ($MfPlanBill['MfPlanBill']['pack_audit_user_id'] > 0 || $MfPlanBill['MfPlanBill']['pack_pending_audit_user_id'] == -1)
            //     ) {
            //     $MfPlanBill['MfPlanBill']['hw_audit_status'] = OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_DONE; //硬件审核完成
            //     $g_Products->Product->setProductSemiByReqId($MfPlanBill['MfPlanBill']['req_id']); //设置订单对应的产品为“否”备料
            //     //正式BOM硬件审核完成，需将备料BOM任务去掉
            //     // $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $AllParams['P']['req_id'], 'Req.is_semi' => OCS_REQ_SEMI_NEW),
            //     //             'fields' => array('Req.id', 'Req.is_semi')));
            //     // $Req['Req']['is_semi'] = 0;
            //     // $this->Req->save($Req['Req']);
            //     // $log_text = '正式BOM审核完成，自动将备料BOM任务移除。';
            //     // $g_Logs->write_log('Reqs', $this->Req->id, 'info', $log_text);
            // }

            $g_MfPlanBills->MfPlanBill->save($MfPlanBill['MfPlanBill']);

            //写log
            $g_Logs->write_log('MfPlanBills', $g_MfPlanBills->MfPlanBill->id, 'info', $log_content);

            //设置是否审核完成状态
            $g_MfPlanBills->MfPlanBill->setAuditStatusDone($MfPlanBill['MfPlanBill']['id']);

            $this->set('saveComplete', 1);
        }
    }


    // 生产排期 add by GUOCAI 2014-05-07
    public function planbills($action = null) {
        global $g_BizId;
        global $g_Commons;
        global $g_UserId;
        global $g_UserRealName;
        global $g_BizName;
        $g_Biz = $g_Commons->GlobalModel('Biz');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Users->User->recursive = -1;
        $g_Searches = $g_Commons->GlobalController('Searches');
        $g_Searches->Search->recursive = -1;
        $g_PrintTmpl = $g_Commons->GlobalModel('PrintTmpl');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');

        // 初次进入下计划界面时,加载最新的下计划数据,减少负载 add by GUOCAI 2014-07-30
        if (in_array($action, array('init', 'initTest'))) {
            $is_test = ('initTest' == $action) ? true : false;

            if (!$is_test) {
                $this->autoRender = false;
            }
            $result = $g_MfPlanBill->initSyncWipInfos(null, $is_test);
            echo json_encode($result);
            return;
        }

        $this->set('title_for_layout', '生产计划清单');

        // 获取当前用户权限
        $myRole = $this->Req->getPlanbillsRoleAlias();
        $newRole = $this->planbillsResetRole($myRole);
        if ($newRole['myRole']['None']) {
            $this->set('myRole', null);
            return;
        }
        $myRole = $newRole['myRole'];
        $this->set('myRole', $myRole);
        $this->set('myAllRoles', $newRole['myAllRoles']);

        // 获取当前用户所在的有事业部
        $this->set('current_biz_name', $g_Biz->get_by_id($g_BizId, 'name'));
        $this->set('biz_lists', $g_Biz->getBizsByUserId('label'));

        // 所有参数
        $all_params = $g_Commons->getUrlParams($this->params->params);

        // 查询开始日期
        if (!isset($all_params['P']['start_date'])) {
            $MfStartDate = $g_Commons->formatDate(NULL, -2);
        } else {
            $MfStartDate = $all_params['P']['start_date'];
        }
        // 查询结束日期
        if (!isset($all_params['P']['end_date'])) {
            $MfEndDate = $g_Commons->formatDate(NULL, 1);
        } else {
            $MfEndDate = $all_params['P']['end_date'];
        }

        $this->set('MfStartDate', $MfStartDate);
        $this->set('MfEndDate', $MfEndDate);
        // 重置日期
        $all_params['P']['start_date'] = $MfStartDate;
        $all_params['P']['end_date'] = $MfEndDate;
        $this->set('AllParams', $all_params);

        // 当前Tab选项
        $Tab = isset($all_params['P']['Tab']) ? $all_params['P']['Tab'] : '';
        $navTabs = $this->Req->getPlanbillsNavTabs($MfStartDate, $MfEndDate, $Tab, $myRole);
        $Tab = !isset($navTabs[$Tab]) ? 'unaudited' : $Tab;
        $this->set('Tab', $Tab);
        $this->set('navTabs', $navTabs);

        // ***************** 搜索参数
        $rows = (isset($all_params['rows'])) ? current($all_params['rows']) : 50; // 显示行数
        $rows = (is_numeric($rows)) ? $rows : 0;

        $qValue = (isset($this->params->params['named']['q'])) ? $this->params->params['named']['q'] : '';
        $this->set('qValue', $qValue);
        $page = (isset($this->request->params['named']['page'])) ? $this->request->params['named']['page'] : 1;

        if ($this->request->is('post')) {
            if (isset($this->request->data['search_value'])) {
                $qValue = trim($this->request->data['search_value']);
                $url_params = array(BizMark => $g_BizName, 'controller' => 'MfPlanBills', 'action' => 'ebs__index');
                if (!empty($this->params->params['named'])) {
                    foreach ($this->params->params['named'] as $key => $p) {
                        $url_params[$key] = $p;
                    }
                }
                $url_params['page'] = 1;
                $url_params['q'] = $qValue;
                $this->redirect($url_params);
            }
        }
        //  *****************

        $MfEndDate = $g_Commons->formatDate($MfEndDate, 1);
        $params = array(
            'StartDate' => $MfStartDate, // 查询开始日期
            'EndDate' => $MfEndDate, // 查询结束日期
            'myRole' => $myRole, // 当前登录用户的所有权限
            'Tab' => $Tab, // 当前Tab项
            'limit' => $rows,
            'page' => $page,
            'AllParams' => $all_params, //其他参数
            'qValue' => $qValue,
        );

        // 查找下计划数据
        $PlanPrefData = $this->getMfPlanBillsByParams($params);
        $this->set('PlanPrefData', $PlanPrefData);

        // 获取用户自定义搜索条件列表
        $g_UserPrefSearches = $g_Commons->GlobalController('UserPrefSearches');
        $UserPrefSearches = $g_UserPrefSearches->getUserPrefSearchesByBizIdAndModelDefIdAndUserId($g_BizId, MfPlanBill, $g_UserId, NULL);
        $this->set('UserPrefSearches', $UserPrefSearches);

        // 获取打印模板
        $g_PrintTmpl->recursive = 1;
        $print_tmpls = $g_PrintTmpl->getPrintTmplsByModelDef(MfPlanBill);

        $this->set('printTmpls', $print_tmpls);
    }

    // 下计划根据用户设置重写权限
    public function planbillsResetRole($roles = null){
        $myAllRoles = array();
        if(!empty($roles)){
            // 在用户存在多角色权限时,需要选择以哪种角色审核
            $setRoleKey = $this->Cookie->read('setRoleKey'); // 获取当前登陆用户的cookie
            if(isset($roles[$setRoleKey]) && !$roles[$setRoleKey]){
                $setRoleKey = null;
                $this->Cookie->delete('setRoleKey');
            }
            // 找出当前用户包含哪些角色
            if(!empty($roles)){
                $allRoleLabel = array('All'=> '管理员','None'=> '没分配权限','Mf' => '生管','Sw' => '软件发放','Mc' => '物控','Owner' => '内勤');
                foreach ($roles as $roleKey => $roleVal) {
                    if($roleVal){
                        $myAllRoles['labels'][$roleKey] = (isset($allRoleLabel[$roleKey]))?$allRoleLabel[$roleKey]:false;
                    }
                }
                $myAllRoles['labels'] = (count($myAllRoles['labels']) > 1)?$myAllRoles['labels']:array();
            }
            // 除选中的角色外,其他角色设置为false
            if(!empty($setRoleKey)){
                $setRolesLabel = (!empty($allRoleLabel[$setRoleKey]))?$allRoleLabel[$setRoleKey]:null;
                $myAllRoles['setRoles'] = array($setRoleKey => $setRolesLabel);
                foreach ($roles as $roleKey => $roleVal) {
                    if( 'All' == $setRoleKey){
                        continue;
                    } elseif($setRoleKey != $roleKey) {
                        $roles[$roleKey] = false;
                    }
                }
            }
        }
        return array('myRole' => $roles, 'myAllRoles' => $myAllRoles);
    }

    // 多角色用户下计划设置审核角色
    public function planbills_set_role_json($role = null){
        global $g_Commons;
        $this->autoRender = false;
        $g_Result = $g_Commons->initResult();
        if($this->request->is('post') && !empty($role)){
            $this->Cookie->write('setRoleKey', $role, true,'+2 weeks');
            $g_Result['success'] = true;
            $g_Result['message'] = '';
        } else {
            $g_Result['message'] = '角色切换失败！';
        }
        echo json_encode($g_Result);
    }

    // 获取生产排计划清单 add by GUOCAI 2014-05-07
    public function getMfPlanBillsByParams($params) {
        global $g_BizId;
        global $g_UserId;
        global $g_BizUr;
        global $g_Commons;
        $this->Req->recursive = -1;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        $g_Searches = $g_Commons->GlobalController('Searches');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_EbsDbo = $g_Commons->GlobalModel('EbsDbo');

        // ********* 设置默认选项 *****************
        $Opt = array(
            'StartDate' => date('Y-m-d', time()), //查询开始日期
            'EndDate' => date('Y-m-d', time()), //查询结束日期
            'myRole' => NULL, //当前登录用户的所有权限
            'Tab' => NULL, //Tab项
            'limit' => 50,
            'page' => 1,
            'AllParams' => NULL,
            'qValue' => NULL,
        );
        $Opt = array_merge($Opt, $params);

        $myRole = $Opt['myRole']; //权限、范围控制
        $Tab = $Opt['Tab']; //当前Tab切换页

        // // 接收查询日期范围
        // $StartDate = $Opt['StartDate'];
        // $EndDate = $Opt['EndDate'];
        // $StartDate = $g_Commons->formatDate($StartDate);
        // $EndDate = $g_Commons->formatDate($EndDate);
        //
        // /**
        //   基础查询
        //  * ******** */
        // $this->paginate['joins'][] = array(
        //     'table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'INNER',
        //     'conditions' => array('Req.id = MfPlanBill.req_id'));

        // // 用于物控查看主方案
        // $this->paginate['joins'][] = array(
        //     'table' => 'products', 'alias' => 'Product', 'type' => 'LEFT',
        //     'conditions' => array('Req.product_id = Product.id'));

        // $this->paginate['joins'][] = array('table' => 'contracts', 'alias' => 'Contract', 'type' => 'LEFT',
        //     'conditions' => array('Req.model_def_id = ' . Contract, 'Contract.id = Req.rel_obj_id'));

        // $this->paginate['joins'][] = array('table' => 'types', 'alias' => 'Type', 'type' => 'LEFT',
        //     'conditions' => array('Contract.type_id=Type.id'));

        // // 显示所在事业部的单
        // $this->paginate['conditions'][] = 'Req.biz_id = ' . $g_BizId;
        // $this->paginate['conditions'][] = "Req.dest_type = 'EBS'";
        // $this->paginate['conditions'][] = 'Req.id is not NULL';

        // // 待办进入的(数组的值可能是id串组成 如: array('1112,550,500' => '1112,550,500', '21221,15' => '21221,15')); 备注 add by GUOCAI
        // if (isset($Opt['AllParams']['todo_ids']) && is_array($Opt['AllParams']['todo_ids'])) {
        //     $this->paginate['conditions']['MfPlanBill.id'] = explode(',', implode(',', $Opt['AllParams']['todo_ids']));
        // }

        // // 当登录用户为内勤时，只能查看自己的工单
        // if ('all.unaudited' == $Tab && $g_RolePrivs->get_priv_level('MfPlanBills', 'can_view_all_unaudited')) {
        //     // 有权限查看的人,才可以查看“未一致通过”的页签内容
        // } elseif ($myRole['Owner'] && !$myRole['All']) {
        //     $this->paginate['conditions'][] = 'Req.owner_user_id = ' . $g_UserId;
        // }

        // // 软件发放不查看小板软件的下计划
        // if ($myRole['Sw'] && !$myRole['All']) {
        //     $this->paginate['conditions'][] = '(MfPlanBill.sw_audit_user_id != -1 or MfPlanBill.sw_audit_user_id is null)';
        // }

        // $base_conditions = (isset($this->paginate['conditions'])) ? $this->paginate['conditions'] : '';
        // $base_joins = $this->paginate['joins'];

        // // 各角色在查看会议商定内容的条件
        // $not_audit_conditions = array();
        // if ($myRole['Owner'] || $myRole['All']) {
        //     $not_audit_conditions[] = '
        //     (
        //         MfPlanBill.owner_audit_status = ' . OCS_MF_PLAN_BILL_OWNER_AUDIT_STATUS_AUDIT_FAILED . ' OR
        //         MfPlanBill.sw_audit_status = ' . OCS_MF_PLAN_BILL_SW_AUDIT_STATUS_AUDIT_FAILED . ' OR
        //         MfPlanBill.mc_audit_status = ' . OCS_MF_PLAN_BILL_MC_AUDIT_STATUS_AUDIT_FAILED . '
        //     )';
        // } else {
        //     if ($myRole['Mf']) {
        //         $not_audit_conditions[] = 'MfPlanBill.mf_audit_status = ' . OCS_MF_PLAN_BILL_MF_AUDIT_STATUS_AUDIT_FAILED;
        //     }
        //     if ($myRole['Sw']) {
        //         $not_audit_conditions[] = 'MfPlanBill.sw_audit_status = ' . OCS_MF_PLAN_BILL_SW_AUDIT_STATUS_AUDIT_FAILED;
        //     }
        //     if ($myRole['Mc']) {
        //         $not_audit_conditions[] = 'MfPlanBill.mc_audit_status = ' . OCS_MF_PLAN_BILL_MC_AUDIT_STATUS_AUDIT_FAILED;
        //     }
        // }

        // // 排除“已关闭”、“委外单已删除”、“工单已作废”、“工单号不存在”、"出库存的"
        // $can_show_conditions_base = "(
        //     Req.close_status != " . OCS_ORDER_CLOSE_STATUS_CANCEL . " AND
        //     MfPlanBill.status != " . OCS_MF_PLAN_BILL_STATUS_CLOSED . " AND
        //     (MfPlanBill.erp_status_type != 7 OR (MfPlanBill.erp_status_type = 12 AND MfPlanBill.erp_quantity_completed = 0)) AND
        //     (MfPlanBill.erp_wr_status != 'N' OR MfPlanBill.erp_wr_status IS NULL) AND
        //     MfPlanBill.erp_wip_entity_id is not null AND MfPlanBill.erp_wip_entity_id != 0 AND Contract.is_has_stock != 1
        // )";

        // $not_audit_conditions[] = $can_show_conditions_base;
        // $thisConditions = array($not_audit_conditions, $base_conditions);
        // $tabCounts['conf.not.audit'] = $this->Req->find('count', array('joins' => $base_joins, 'conditions' => $thisConditions));

        // // 内勤查看我的待审
        // // MfPlanBill.sw_audit_user_id = -1 是不需要软件发放审核的
        // $owner_audit_conditions = array();
        // if ($myRole['Owner']) {
        //     $owner_audit_conditions[] = array('
        //         (MfPlanBill.sw_audit_status = ' . OCS_MF_PLAN_BILL_SW_AUDIT_STATUS_AUDIT_PASSED . ' OR MfPlanBill.sw_audit_user_id = -1) AND
        //         MfPlanBill.mc_audit_status = ' . OCS_MF_PLAN_BILL_MC_AUDIT_STATUS_AUDIT_PASSED
        //     );
        //     $owner_audit_conditions[] = array('MfPlanBill.owner_audit_status' => 0);
        //     $owner_audit_conditions[] = array('MfPlanBill.status !=' => OCS_MF_PLAN_BILL_STATUS_PASSED);
        //     $owner_audit_conditions[] = $can_show_conditions_base;
        //     $thisConditions = array($owner_audit_conditions, $base_conditions);
        //     $tabCounts['unaudited'] = $this->Req->find('count', array('joins' => $base_joins, 'conditions' => $thisConditions));
        // }

        // // 用于在页面的Tab上显示数字
        // $this->set('tabCounts', $tabCounts);

        // // Tab选项处理显示处理
        // switch ($Tab) {
        //     case 'all.unaudited':
        //         $this->paginate['conditions'][] = array('MfPlanBill.status !=' => OCS_MF_PLAN_BILL_STATUS_PASSED, 'Contract.is_has_stock != 1');
        //     break;

        //     case 'unaudited':
        //         // ******** 内勤Tab:我的待审; 其他角色Tab:部门待审
        //         if ($myRole['Mf']) {
        //             $this->paginate['conditions'][] = array('MfPlanBill.mf_audit_status' => 0);
        //         } elseif ($myRole['Sw']) {
        //             $this->paginate['conditions'][] = array('MfPlanBill.sw_audit_status' => 0);
        //         } elseif ($myRole['Mc']) {
        //             $this->paginate['conditions'][] = array('MfPlanBill.mc_audit_status' => 0);
        //         } elseif ($myRole['Owner']) {
        //             // 内勤查看软件发放、物控已经通过的
        //             $this->paginate['conditions'][] = $owner_audit_conditions;
        //         }
        //         $this->paginate['conditions'][] = array('MfPlanBill.status !=' => OCS_MF_PLAN_BILL_STATUS_PASSED);
        //         $this->paginate['conditions'][] = array('MfPlanBill.erp_wip_entity_id is not null', 'MfPlanBill.erp_wip_entity_id != 0', 'Contract.is_has_stock != 1');
        //     break;

        //     case 'audit':
        //         // ******** 内勤Tab:我的清单; 其他角色Tab:部门已审
        //         if ($myRole['Mf']) {
        //             $this->paginate['conditions'][] = array('MfPlanBill.mf_audit_status' => OCS_MF_PLAN_BILL_MF_AUDIT_STATUS_AUDIT_PASSED);
        //         } elseif ($myRole['Sw']) {
        //             $this->paginate['conditions'][] = array('MfPlanBill.sw_audit_status' => OCS_MF_PLAN_BILL_SW_AUDIT_STATUS_AUDIT_PASSED);
        //         } elseif ($myRole['Mc']) {
        //             $this->paginate['conditions'][] = array('MfPlanBill.mc_audit_status' => OCS_MF_PLAN_BILL_MC_AUDIT_STATUS_AUDIT_PASSED);
        //         }
        //         $this->paginate['conditions'][] = array('MfPlanBill.status !=' => OCS_MF_PLAN_BILL_STATUS_PASSED);
        //         $this->paginate['conditions'][] = array('MfPlanBill.erp_wip_entity_id is not null', 'MfPlanBill.erp_wip_entity_id != 0', 'Contract.is_has_stock != 1');
        //     break;

        //     case 'my.list':
        //         // ******** 内勤Tab:我的清单; 其他角色Tab:部门已审
        //         $this->paginate['conditions'][] = array('MfPlanBill.status !=' => OCS_MF_PLAN_BILL_STATUS_PASSED);
        //         $this->paginate['conditions'][] = array('Contract.ebs_stage >=' => OCS_CONTRACT_EBS_STAGE_MF_AUDIT);
        //     break;

        //     case 'plan.bill':
        //         // ******** 内勤Tab:下计划清单
        //         $this->paginate['conditions'][] = array('MfPlanBill.mf_audit_status' => OCS_MF_PLAN_BILL_MF_AUDIT_STATUS_AUDIT_PASSED);
        //         $this->paginate['conditions'][] = array('MfPlanBill.status !=' => OCS_MF_PLAN_BILL_STATUS_PASSED);
        //         $this->paginate['conditions'][] = array('MfPlanBill.erp_wip_entity_id is not null', 'MfPlanBill.erp_wip_entity_id != 0', 'Contract.is_has_stock != 1');
        //     break;

        //     case 'stock':
        //         // ******** 公共Tab:出库存清单
        //         $this->paginate['conditions'][] = array('Contract.is_has_stock = 1');
        //     break;

        //     case 'ckd':
        //         // ******** 公共Tab:CKD专栏
        //         $this->paginate['conditions'][] = array('Product.is_ckd = 1');
        //         $this->paginate['conditions'][] = array('MfPlanBill.erp_wip_entity_id is not null', 'MfPlanBill.erp_wip_entity_id != 0', 'Contract.is_has_stock != 1');
        //     break;

        //     case 'conf.not.audit':
        //         // ******** 公共Tab:会议商定
        //         $this->paginate['conditions'][] = $not_audit_conditions;
        //     break;

        //     case 'conf.audit':
        //         // ******** 公共Tab:一致通过
        //         $this->paginate['conditions'][] = array('MfPlanBill.status' => OCS_MF_PLAN_BILL_STATUS_PASSED);
        //         $this->paginate['conditions'][] = array('MfPlanBill.conf_audit_pass_time >=' => $StartDate, 'MfPlanBill.conf_audit_pass_time <=' => $EndDate);
        //         $this->paginate['conditions'][] = array('MfPlanBill.erp_wip_entity_id is not null', 'MfPlanBill.erp_wip_entity_id != 0', 'Contract.is_has_stock != 1');
        //     break;
        // }

        // // 查看未关闭、未作废的下计划
        // // erp_wr_status = N 表示委外单行已经删除
        // // erp_status_type 7=工单已作废,12=工单已关闭
        // switch ($Tab) {
        //     case 'audit.close':
        //         // 已关闭界面,显示所有已经关闭的
        //         $this->paginate['conditions'][] = 'MfPlanBill.status = ' . OCS_MF_PLAN_BILL_STATUS_CLOSED;
        //     break;
        //     case 'wip.cancelled':
        //         // 取消界面显示已经取消
        //         $this->paginate['conditions'][] = "
        //             MfPlanBill.erp_wip_entity_id is not null AND MfPlanBill.erp_wip_entity_id != 0 AND
        //             (
        //                 Req.close_status = " . OCS_ORDER_CLOSE_STATUS_CANCEL . " OR
        //                 MfPlanBill.erp_status_type = 7 OR
        //                 (MfPlanBill.erp_status_type = 12 AND MfPlanBill.erp_quantity_completed = 0) OR
        //                 MfPlanBill.erp_wr_status = 'N'
        //             )";
        //     break;
        //     default:
        //         // 普通页面,不显示已经手动关闭的,已经取消订单的,已取消工单的
        //         $this->paginate['conditions'][] = "
        //             Req.close_status != " . OCS_ORDER_CLOSE_STATUS_CANCEL . " AND
        //             MfPlanBill.status != " . OCS_MF_PLAN_BILL_STATUS_CLOSED . " AND
        //             (MfPlanBill.erp_status_type != 7 AND !(MfPlanBill.erp_status_type = 12 AND MfPlanBill.erp_quantity_completed = 0)) AND
        //             (MfPlanBill.erp_wr_status != 'N' OR MfPlanBill.erp_wr_status IS NULL)
        //             ";
        //     break;
        // }

        // // 控制排序
        // if ($myRole['Sw']) {
        //     $this->paginate['order'][] = array('MfPlanBill.sw_audit_status' => 'ASC');
        // } elseif ($myRole['Mc']) {
        //     $this->paginate['order'][] = array('MfPlanBill.mc_audit_status' => 'ASC');
        // } elseif ($myRole['Owner']) {
        //     $this->paginate['order'][] = array('MfPlanBill.owner_audit_status' => 'ASC');
        // }
        // $this->paginate['order'][] = array('MfPlanBill.status' => 'ASC');
        // $this->paginate['order'][] = array('MfPlanBill.id' => 'DESC');
        // $this->paginate['order'][] = array('MfPlanBill.erp_lot_number' => 'ASC');

        // // 获取快捷搜索字段
        // $search_fields = $g_Searches->getQuickSearchFields('MfPlanBills');
        // $this->set('search_fields', $search_fields);
        // // 高级搜索 add by GUOCAI 2014-04-18
        // $SearchParams = array('Controller' => 'MfPlanBills', 'Model' => 'MfPlanBill', 'params' => $Opt['AllParams']);
        // $Search = $g_Searches->getSearchInfo($SearchParams);
        // $this->paginate = $g_Searches->getNewPaginate($Search, $this->paginate);
        // // 高级搜索参数
        // $this->set('SearchId', $Search['SearchId']);
        // $this->set('SearchField', $Search['SearchField']);
        // $this->set('SearchCondition', $Search['SearchCondition']);
        // $this->set('SCondition', $Search['SCondition']);
        // // 需要继承的参数
        // $InheritParams = array(array('key' => 'P', 'value' => isset($this->params->params['named']['P']) ? $this->params->params['named']['P'] : ''));
        // $this->set('InheritParams', $InheritParams);

        // $this->paginate['group'] = $g_MfPlanBill->wip_group_fields;
        // $this->paginate['fields'] = array('Req.*,MfPlanBill.*,Product.*,Contract.*,Type.name,sum(MfPlanBill.erp_job_quantity) erp_job_quantity');
        // $this->paginate['limit'] = $Opt['limit'];
        // $this->paginate['page'] = $Opt['page'];
        // $this->paginate['maxLimit'] = 300;

        // 获取页面的Tab上数字
        $tab_counts = array(
            'conf.not.audit' => 0,
            'unaudited' => 0,
        );
        foreach ($tab_counts as $tab_key => $tab_count) {
            $tab_opt = $Opt;
            $tab_opt['Tab'] = $tab_key;
            $tab_conds = $g_MfPlanBill->getPlanBillConds($tab_opt, $myRole);
            if (!isset($tab_conds['joins']) || !isset($tab_conds['conditions'])) {
                continue;
            }
            $group_sql = $g_EbsDbo->find('all', array(
                'main_table' => array('reqs' => 'Req'),
                'joins' => $tab_conds['joins'],
                'conditions' => $tab_conds['conditions'],
                'group' => $tab_conds['group'],
                'return_type' => 'sql',
                'database' => 'OCS',
                'fields' => array('MfPlanBill.id')
            ));
            $count_sql = "SELECT COUNT(tb.id) AS count FROM ($group_sql) tb";
            $count_data = $this->Req->query($count_sql);

            $tab_counts[$tab_key] = !empty($count_data[0][0]['count']) ? $count_data[0][0]['count'] : 0;
        }
        $this->set('tabCounts', $tab_counts);

        // 获取查询条件
        $conds = $g_MfPlanBill->getPlanBillConds($Opt, $myRole);
        foreach ($conds as $cond_key => $cond_items) {
            $this->paginate[$cond_key] = $cond_items;
        }

        // 高级搜索 add by GUOCAI 2014-04-18
        $search = $g_Searches->getSearchInfo(array('Controller' => 'MfPlanBills', 'Model' => 'MfPlanBill', 'params' => $Opt['AllParams']));
        $this->paginate = $g_Searches->getNewPaginate($search, $this->paginate);

        // 获取快捷搜索字段
        $search_fields = $g_Searches->getQuickSearchFields('MfPlanBills');
        $this->set('search_fields', $search_fields);
        $this->set('SearchId', $search['SearchId']);
        $this->set('SearchField', $search['SearchField']);
        $this->set('SearchCondition', $search['SearchCondition']);
        $this->set('SCondition', $search['SCondition']);

        // 需要继承的参数
        $InheritParams = array(array('key' => 'P', 'value' => isset($this->params->params['named']['P']) ? $this->params->params['named']['P'] : ''));
        $this->set('InheritParams', $InheritParams);

        // 搜索内容
        $plan_bills = $this->paginate();
        // 串上特殊字段,及BOM信息
        $plan_bills = $g_MfPlanBill->formatPlanBillDatas($plan_bills);

        $req_ids = array();
        $erp_wr_ids = array(); //委外单明细ID
        if (!empty($plan_bills)) {
            foreach ($plan_bills as $key => $plan_bill) {
                $req_ids[] = $plan_bill['MfPlanBill']['req_id'];
                $erp_wr_ids[] = $plan_bill['MfPlanBill']['erp_wr_id'];
            }
            // 根据委外单明细ID,找出对应的委外单是否拆分出来的
            $split_lists = $g_ObjRelObj->find('list', array(
                'conditions' => array(
                    'model_def_id' => MfPlanBill,
                    'rel_obj_id' => $erp_wr_ids,
                    'meta_key' => 'MfPlanBill.isSplit',
                ),
                'fields' => array('ObjRelObj.rel_obj_id', 'ObjRelObj.id'),
            ));
            $this->set('split_lists', $split_lists);
        }

        //获取是否紧急订单
        $req_ids = array_unique($req_ids);
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $is_urgent_list = $g_RelReq->getIsUrgentOrder($req_ids);
        $this->set('is_urgent_list', $is_urgent_list);

        // 格式化数据，用于自定义布局
        $UserPrefData = $g_AttrDics->setUserPrefData($plan_bills, 'MfPlanBill', null, 3, 0);
        $this->set('UserPrefData', $UserPrefData);
        //$this->set('paginate', $UserPrefData);

        // 主要用于显示查询SQL
        $g_User = $g_Commons->GlobalModel('User');
        $role_alias = $g_User->getAllUserAliasByUserId($g_UserId);
        if (in_array('OCS_DEV', $role_alias) || in_array('Admin', $role_alias)) {
            $this->set('SQL', $this->paginate);
        } else {
            $this->set('SQL', array());
        }

        // 用于生管在一致通过的工单编辑下，有可编辑权限
        $act = ('conf.audit' == $Tab) ? 'conf.audit.edit' : 'edit';
        $this->set('act', $act);

        // 获取当前页面一致通过的req_id及工单ID的对应关系
        $pass_plan_bills = $g_MfPlanBill->getPlanBillsWipReqIds($req_ids, OCS_MF_PLAN_BILL_STATUS_PASSED);
        $this->set('pass_plan_bills', $pass_plan_bills);
    }

    // 排生产计划批量编辑 add by GUOCAI 2014-05-07
    public function pop_batch_edit() {
        global $g_Commons;
        $this->Req->recursive = -1;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        // 获取当前用户权限
        $myRole = $this->Req->getPlanbillsRoleAlias();
        // 如果登陆用户存在多角色,将在这里重置
        $newRole = $this->planbillsResetRole($myRole);
        $myRole = $newRole['myRole'];
        $this->set('myRole',$myRole);

        // 查询EBS数据,确保数据存在于EBS数据库中
        if (empty($AllParams['P']['ids'])) {
            return false;
        }

        // 获取OCS下计划中的,工单ID
        $ids = $AllParams['P']['ids'];
        if (!is_array($ids)) {
            $ids = explode(',', $ids);
        }

        // 校正,确保下计划存在相应的工单
        $wip_ids = $g_MfPlanBill->getWipIdsByIds($ids);
        $plan_bill_data = $g_MfPlanBill->syncWipInfos(array('ids' => $wip_ids, 'type' => 'ids'));
        if (empty($plan_bill_data['wip_ids'])) {
            return array();
        }

        $new_ids = array();
        $temp_wip_ids = !empty($plan_bill_data['wip_ids']) ? array_flip($plan_bill_data['wip_ids']) : array();
        foreach ($wip_ids as $mf_id => $wip_id) {
            if (empty($temp_wip_ids[$wip_id])) {
                continue;
            }
            $new_ids[] = $mf_id;
        }
        if (empty($new_ids)) {
            return array();
        }

        // 获取相同工单相同销售订单，销售批次的的合并行数据的查询条件
        $same_rel_ids = $g_MfPlanBill->getSameWipMfIdsByMfId($ids);
        $new_ids = array_merge($new_ids, $same_rel_ids);

        // 查询下生产计划清单
        $joins = array(
            array(
                'table' => 'mf_plan_bills',
                'alias' => 'MfPlanBill',
                'type' => 'INNER',
                'conditions' => array('Req.id = MfPlanBill.req_id'),
            ),
            array(
                'table' => 'contracts',
                'alias' => 'Contract',
                'type' => 'INNER',
                'conditions' => array('Req.model_def_id = ' . Contract, 'Contract.id = Req.rel_obj_id'),
            ),
            array(
                'table' => 'types',
                'alias' => 'Type',
                'type' => 'INNER',
                'conditions' => array('Contract.type_id=Type.id')
            ),
            array(
                'table' => 'products',
                'alias' => 'Product',
                'type' => 'INNER',
                'conditions' => array('Product.id = Req.product_id'),
            ),
            array(
                'table' => 'prod_models',
                'alias' => 'ProdModel',
                'type' => 'LEFT',
                'conditions' => array("ProdModel.id=Product.prod_model_id"),
            ),
            array(
                'table' => 'prod_model_details',
                'alias' => 'ProdModelDetail',
                'type' => 'LEFT',
                'conditions' => array("ProdModelDetail.id=Product.pcb_id"),
            ),
        );
        $this->paginate['joins'] = $joins;
        $this->paginate['conditions'][] = array(
            'MfPlanBill.id' => $new_ids,
            'MfPlanBill.erp_wr_status' => 'Y',
            'MfPlanBill.erp_status_type !=' => 7,
        );
        $this->paginate['group'] = $g_MfPlanBill->wip_group_fields;
        $this->paginate['fields'] = array('Req.*,MfPlanBill.*,Product.*,Contract.*,Type.name,sum(MfPlanBill.erp_job_quantity) erp_job_quantity');
        $this->paginate['limit'] = 300;
        $result = $this->paginate(); //这里不直接查询,是因为页面上需要用到字段排序、及自定义布局

        // 将合计的字段,串回到数据中
        foreach ($result as $result_key => $result_data) {
            if (empty($result_data[0])) {
                continue;
            }
            foreach ($result_data[0] as $field_key => $field_value) {
                $result[$result_key]['MfPlanBill'][$field_key] = $field_value;
            }
        }

        // 格式化数据，用于自定义布局
        $UserPrefData = $g_AttrDics->setUserPrefData($result, 'MfPlanBill', 'Req', 3, 0);
        $this->set('UserPrefData', $UserPrefData);
    }

    // 更新排生产计划信息 add by GUOCAI 2014-05-07
    public function batch_edit_save() {
        global $g_Commons;
        global $g_UserId;
        global $g_UserRealName;
        $this->autoRender = false;
        $this->Req->recursive = -1;
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Logs->Log->recursive = -1;
        $g_TaskComments = $g_Commons->GlobalController('TaskComments');
        $g_TaskComments->TaskComment->recursive = -1;
        $g_Tasks = $g_Commons->GlobalController('Tasks');
        $g_Tasks->Task->recursive = -1;
        $g_ERPWsClients = $g_Commons->GlobalController('ERPWsClients');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');

        // 获取当前用户权限
        $myRole = $this->Req->getPlanbillsRoleAlias();
        // 如果登陆用户存在多角色,将在这里重置
        $newRole = $this->planbillsResetRole($myRole);
        $myRole = $newRole['myRole'];

        // 检测可操作权限
        if (!$myRole['Sw'] && !$myRole['Mc'] && !$myRole['Owner']) {
            echo json_encode(array('id' => 0, 'action' => false, 'info' => '没有相应的操作权限!'));
            return;
        }

        // 保存
        if (!$this->request->is('post') || empty($this->request->data)) {
            echo json_encode(array('id' => 0, 'action' => false, 'info' => '获取数据失败!'));
            return;
        }

        // 初始化
        $result = array();
        $wip_entity_names = array();//工单号

        // 表单数据
        $submit_datas = $this->request->data;

        // 获取提交的订单对应的客户是否允许自动发放
        $submit_ids = array();
        foreach ($submit_datas as $submit_data) {
            if (empty($submit_data['mfId'])) {
                continue;
            }
            $submit_ids[] = $submit_data['mfId'];
        }
        $meta_values = $this->Req->find('list', array(
            'joins' => array(
                array(
                    'table' => 'mf_plan_bills',
                    'alias' => 'MfPlanBill',
                    'type' => 'INNER',
                    'conditions' => array('Req.id = MfPlanBill.req_id'),
                ),
                array(
                    'table' => 'obj_rel_objs',
                    'alias' => 'ObjRelObj',
                    'type' => 'INNER',
                    'conditions' => array('Req.account_id = ObjRelObj.rel_obj_id', 'ObjRelObj.model_def_id' => Account),
                ),
            ),
            'conditions' => array(
                'ObjRelObj.meta_key' => 'Account.rel_req_info',
                'MfPlanBill.id' => $submit_ids
            ),
            'fields' => array('Req.id', 'ObjRelObj.meta_value'),
        ));
        $is_auto_shipping_marks = array();
        foreach ($meta_values as $req_id => $meta_value) {
            $meta_value = json_decode($meta_value, true);
            $is_auto_shipping_marks[$req_id] = !empty($meta_value['is_auto_shipping_mark']) ? $meta_value['is_auto_shipping_mark'] : 0;
        }


        foreach ($submit_datas as $key => $data) {

            // 跳过特殊键
            if ('act' == $key || empty($data['mfId'])) {
                continue;
            }

            // 这里逐个查询,是为了保证数据的一致性
            $mf_plan_bill = $g_MfPlanBill->findById($data['mfId']);
            if (empty($mf_plan_bill['MfPlanBill']['id'])) {
                echo json_encode(array('id' => null, 'action' => false, 'info' => '未找到相应的下计划!'));
                return;
            }
            $mf_plan_bill = $mf_plan_bill['MfPlanBill'];

            // 获取当前req id
            $mf_id = $mf_plan_bill['id'];
            $req_id = $mf_plan_bill['req_id'];
            // 是否审核
            $is_audit_pass = isset($data['is_audit_pass']) ? $data['is_audit_pass'] : 0;
            // 获取提交的日期
            $sw_complete_date = isset($data['sw_complete_date']) ? date('Y-m-d H:i:s', strtotime($data['sw_complete_date'])) : '';
            $m_complete_date = isset($data['m_complete_date']) ? date('Y-m-d H:i:s', strtotime($data['m_complete_date'])) : '';
            $delivety_time = isset($data['delivety_time']) ? date('Y-m-d H:i:s', strtotime($data['delivety_time'])) : '';
            // 获取提交的评论
            $mf_remark = isset($data['mf_remark']) ? $data['mf_remark'] : '';
            $sw_remark = isset($data['sw_remark']) ? $data['sw_remark'] : '';
            $mc_remark = isset($data['mc_remark']) ? $data['mc_remark'] : '';
            $owner_remark = isset($data['owner_remark']) ? $data['owner_remark'] : '';
            // 判断是否小板计划
            $sw_type = empty($data['sw_type']) ? false : true;
            if ($sw_type) {
                $mf_plan_bill['sw_audit_user_id'] = -1;
            }

            // 已一致通过的订单,只有生管才有重新审核的权限
            $confAuditEdit = false;
            if ($mf_plan_bill['status'] == OCS_MF_PLAN_BILL_STATUS_PASSED) {
                $wip_entity_names[] = $mf_plan_bill['erp_wip_entity_name'];
                $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, '已一致通，不允许修改。', true, $wip_entity_names);
                echo json_encode($log_msg);
                return;
            }

            // 初始化状态
            $upData = array();
            if (!$is_audit_pass) {
                $upData['status'] = OCS_MF_PLAN_BILL_STATUS_PASS_FAILED;
            }

            /**
              研发的下计划只需要软件发放审核, add by GUOCAI 2014.11.21
             */
            $is_rd_order = (!empty($data['is_rd_order']) && (1==$data['is_rd_order'] || true==$data['is_rd_order'])) ? true : false;
            if ($is_rd_order) {
                // 验证权限
                if (empty($myRole['Sw'])) {
                    $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, '研发的下计划只需要软件发放审核');
                    echo json_encode($log_msg);
                    return;
                }
                // 如果软件发放人员选择了不通过,那么不更新
                if (empty($is_audit_pass)) {
                    $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, '选择了不通过, 因此暂时无需更新.');
                    echo json_encode($log_msg);
                    return;
                }
                // 由于研发单据只需要软件发放审核,因此只要软件审核了,其他的物控、内勤等角色默认通过
                $upData['sw_remark'] = $sw_remark;
                $upData['sw_audit_user_id'] = $g_UserId;
                $upData['sw_audit_status'] = OCS_MF_PLAN_BILL_SW_AUDIT_STATUS_AUDIT_PASSED;
                $upData['mc_audit_status'] = OCS_MF_PLAN_BILL_MC_AUDIT_STATUS_AUDIT_PASSED;
                $upData['owner_audit_status'] = OCS_MF_PLAN_BILL_OWNER_AUDIT_STATUS_AUDIT_PASSED;
                $upData['sw_audit_pass_time'] = date('Y-m-d H:i:s');
                $upData['sw_last_update_time'] = date('Y-m-d H:i:s');
                $upData['sw_complete_date'] = $mf_plan_bill['need_sw_complete_date'];
                $upData['m_complete_date'] = $mf_plan_bill['need_mc_complete_date'];
                $upData['delivety_time'] = $mf_plan_bill['erp_schedule_ship_date'];
                $upData['status'] = OCS_MF_PLAN_BILL_STATUS_PASSED;
                $this->Req->setPlanbillsMsg($mf_id, $req_id, '发现研发的下计划,软件发放审核通过后直接一致通过','log');
            }

            /**
              软件发放,只要在齐套时间前的1天可以准备好,就可以通过,否则提示
             */
            if ($myRole['Sw']) {

                if ($mf_plan_bill['sw_audit_user_id'] == -1) {//小板订单计划不需要软件发放审核
                    $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, '小板软件订单,软件发放不需审核');
                    echo json_encode($log_msg);
                    return;
                } elseif (empty($sw_complete_date)) {//验证是否填写日期
                    $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, '请填写软件发放日期');
                    echo json_encode($log_msg);
                    return;
                }

                $upData['sw_complete_date'] = $sw_complete_date;
                $upData['sw_audit_status'] = ($is_audit_pass == 1) ? OCS_MF_PLAN_BILL_SW_AUDIT_STATUS_AUDIT_PASSED : OCS_MF_PLAN_BILL_SW_AUDIT_STATUS_AUDIT_FAILED;
                $upData['sw_remark'] = $sw_remark;
                $upData['sw_audit_user_id'] = $g_UserId;
                $upData['sw_last_update_time'] = date('Y-m-d H:i:s');
                if ($is_audit_pass && empty($mf_plan_bill['sw_audit_pass_time'])) {//选择审核通过
                    $upData['sw_audit_pass_time'] = $upData['sw_last_update_time'];
                }
            }

            /**
              齐套时间,只要在发运前3天可以准备好,就可以通过,否则提示
             */
            if ($myRole['Mc']) {

                if (empty($m_complete_date)) {//验证是否填写日期
                    $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, '请填写齐套日期');
                    echo json_encode($log_msg);
                    return;
                }

                $upData['m_complete_date'] = $m_complete_date;
                $upData['mc_audit_status'] = ($is_audit_pass == 1) ? OCS_MF_PLAN_BILL_MC_AUDIT_STATUS_AUDIT_PASSED : OCS_MF_PLAN_BILL_MC_AUDIT_STATUS_AUDIT_FAILED;
                $upData['mc_remark'] = $mc_remark;
                $upData['mc_audit_user_id'] = $g_UserId;
                $upData['mc_audit_time'] = date('Y-m-d H:i:s');
                $upData['mc_last_update_time'] = date('Y-m-d H:i:s');
                if ($is_audit_pass && empty($mf_plan_bill['mc_audit_pass_time'])) {//选择审核通过
                    $upData['mc_audit_pass_time'] = $upData['mc_last_update_time'];
                }
            }


            /**
              内勤管理,需要审核通过或者不通过
             */
            if ($myRole['Owner']) {
                // 验证软件发放、物控的审核状态
                if ($is_audit_pass) {
                    if (OCS_MF_PLAN_BILL_MC_AUDIT_STATUS_AUDIT_PASSED != $mf_plan_bill['mc_audit_status']) {
                        $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, '暂时还不能审核通过,因为<span class="label">物控还没有审核通过</label>');
                        echo json_encode($log_msg);
                        return;
                    }
                    if ($mf_plan_bill['sw_audit_user_id'] == -1) {//小板软件订单
                        $mf_plan_bill['sw_audit_status'] = OCS_MF_PLAN_BILL_SW_AUDIT_STATUS_AUDIT_PASSED;
                        $mf_plan_bill['sw_complete_date'] = date('Y-m-d H:i:s', strtotime('1000-00-00')); // 这里只要时间足够小就行了
                    } elseif (OCS_MF_PLAN_BILL_SW_AUDIT_STATUS_AUDIT_PASSED != $mf_plan_bill['sw_audit_status']) {
                        $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, '暂时还不能审核通过,因为<span class="label">软件发放没有审核通过</label>');
                        echo json_encode($log_msg);
                        return;
                    }
                }
                $upData['delivety_time'] = $delivety_time;
                $upData['owner_audit_status'] = ($is_audit_pass == 1) ? OCS_MF_PLAN_BILL_OWNER_AUDIT_STATUS_AUDIT_PASSED : OCS_MF_PLAN_BILL_OWNER_AUDIT_STATUS_AUDIT_FAILED;
                $upData['owner_remark'] = $owner_remark;
                $upData['owner_audit_user_id'] = $g_UserId;
                $upData['owner_audit_time'] = date('Y-m-d H:i:s');

                // 内勤的 owner_last_update_time记录的是审核不通过的时间
                if ($is_audit_pass) {//选择审核通过
                    $upData['owner_audit_pass_time'] = date('Y-m-d H:i:s');
                } else {
                    $upData['owner_last_update_time'] = date('Y-m-d H:i:s');
                }
            }


            /**
              处理数据，写入日记，传数据到EBS
             */
            if (!empty($upData)) {

                // 初始化
                $logKeys = array(
                    'create_time' => '下计划时间',
                    'is_audit_pass' => '审核状态',
                    'sw_complete_date' => '软件完成日期',
                    'm_complete_date' => '齐套日期',
                    'delivety_time' => '计划发运日期',
                    'mf_remark' => '生管备注',
                    'sw_remark' => '软件备注',
                    'mc_remark' => '物控备注',
                    'owner_remark' => '内勤备注',
                    'mf_audit_status' => '生管审核状态',
                    'sw_audit_status' => '软件审核状态',
                    'mc_audit_status' => '物控审核状态',
                    'owner_audit_status' => '内勤审核状态',
                    'mf_audit_user_id' => '生管审核人',
                    'sw_audit_user_id' => '软件审核人/小板',
                    'mc_audit_user_id' => '物控审核人',
                    'owner_audit_user_id' => '内勤审核人',
                    'mf_audit_time' => '生管审核时间',
                    'sw_audit_time' => '软件审核时间',
                    'mc_audit_time' => '物控审核时间',
                    'owner_audit_time' => '内勤审核时间',
                    'conf_audit_pass_time' => '一致通过时间',
                    'status' => 'OCS下计划状态',
                );
                // 替换日记主键描述
                foreach ($logKeys as $key => $logKey) {
                    $dic_temp = $g_Commons->getDataByCache('MfPlanBill.' . $key,'AttrDic');
                    if (!empty($dic_temp['AttrDic']['label'])) {
                        $logKeys[$key] = $dic_temp['AttrDic']['label'];
                    }
                }

                // 确保数据存在
                if (!empty($mf_plan_bill['id'])) {

                    $old_sw_complete_date = $mf_plan_bill['need_sw_complete_date'];
                    $temp = $mf_plan_bill;
                    $temp = array_merge($temp, $upData);

                    // 判断审核状态
                    $all_audit_pass = false;
                    if ($is_audit_pass == 1 &&
                        isset($temp['owner_audit_status']) &&
                        isset($temp['sw_audit_status']) &&
                        isset($temp['mc_audit_status']) &&
                        $temp['owner_audit_status'] == OCS_MF_PLAN_BILL_OWNER_AUDIT_STATUS_AUDIT_PASSED &&
                        $temp['sw_audit_status'] == OCS_MF_PLAN_BILL_SW_AUDIT_STATUS_AUDIT_PASSED &&
                        $temp['mc_audit_status'] == OCS_MF_PLAN_BILL_MC_AUDIT_STATUS_AUDIT_PASSED
                    ) {
                        // 所有人通过
                        $all_audit_pass = true;

                        $upData['status'] = OCS_MF_PLAN_BILL_STATUS_PASSED;
                        $upData['conf_audit_pass_time'] = date('Y-m-d H:i:s', time());
                        // 合并为新数据
                        $log_before = array();
                        $log_before[] = 'Before:';
                        $log_before[] = $logKeys['sw_complete_date'] . ':' . $mf_plan_bill['sw_complete_date'];
                        $log_before[] = $logKeys['m_complete_date'] . ':' . $mf_plan_bill['m_complete_date'];
                        $log_before[] = $logKeys['delivety_time'] . ':' . $mf_plan_bill['delivety_time'];
                        $log_before = implode('<br/>', $log_before);

                        $upData = array_merge($mf_plan_bill, $upData);

                        $date_set = array();
                        if ($is_rd_order) {//获取研发订单的时间差配置
                            $date_set = $g_MfPlanBill->dateDifferSet('rd');
                        }
                        $upData = $this->Req->setPlanbillsDate($upData, 'ALL', $date_set);

                        // 比较数据差别并写入日记
                        $log_message = array();
                        $log_message[] = '审核一致通过，<b>系统自动修改</b>以下内容：';
                        $log_message[] = $log_before;
                        $log_message[] = $this->Req->getPlanbillsLogStr($mf_plan_bill, $upData, $logKeys);
                        $log_message = implode('<br/>', $log_message);
                        $this->Req->setPlanbillsMsg($mf_id, $req_id, $log_message, 'log');
                    } else {
                        // 合并为新数据
                        $upData = array_merge($mf_plan_bill, $upData);
                        // 比较数据差别并写入日记
                        $log_message = array();
                        $log_message[] = '提交变更：';
                        $log_message[] = $this->Req->getPlanbillsLogStr($mf_plan_bill, $upData, $logKeys);
                        $log_message = implode('<br/>', $log_message);
                        $this->Req->setPlanbillsMsg($mf_id, $req_id, $log_message, 'log');
                    }

                    /**
                      一致通过,则先传EBS,成功后再保存数据,否则直接保存(注意:提交的先后顺序比较重要,不能随意调换)
                     */
                    if ($all_audit_pass) {

                        // 特殊处理:一致通过后，若系统齐套时间在未来2天之前齐套的，则统一调整至第3天齐套。如今天是6-28，大家一直通过的齐套时间为6-29
                        // 则统一调整至6-30齐套。即最快也是下计划后第3天齐套。特殊订单特殊安排。(勇波提出需求) add by GUOCAI 2014-06-28
                        $mc_need_day = 2; //齐套需要天数
                        $temp_mc_complete_date = $upData['m_complete_date'];
                        $target_day = date('Y-m-d', time());
                        $target_day = $g_Commons->formatDate($target_day, $mc_need_day);
                        if (strtotime($temp_mc_complete_date) < strtotime($target_day)) {
                            if($is_rd_order){//研发的下计划不需要同步时间, add by GUOCAI 2014.11.21
                                $this->Req->setPlanbillsMsg($mf_id, $req_id, '发现两天内齐套,但研发订单的下计划不需要自动推算时间。', 'log');
                            } else {
                                $oldUpdata = $upData;
                                // 自动调整日期
                                $upData['m_complete_date'] = $target_day;
                                $upData = $this->Req->setPlanbillsDate($upData, 'MC');
                                // 比较数据差别并写入日记
                                $logStr = $this->Req->getPlanbillsLogStr($oldUpdata, $upData, $logKeys);
                                $autoLog = '<b>当前一致通过的齐套日期为#' . $temp_mc_complete_date . '</b><br/>但在未来' . $mc_need_day . '天内齐套不符合实际需求,因此系统将自动将调整日期为:<br/>' . $logStr;
                                $this->Req->setPlanbillsMsg($mf_id, $req_id, $autoLog, 'log');
                            }
                        }

                        // **** 4、将审核后的开始、结束时间更新到EBS的工单信息
                        // 研发的下计划和普通下计划一样调用接口,由接口判断如果是研发订单,则不更新齐套日期 add by GUOCAI 2016.01.07

                        // 获取当前单的软件发放审核人
                        $sw_audit_user_email = '';
                        if (is_numeric($upData['sw_audit_user_id']) && 0 < $upData['sw_audit_user_id']) {
                            $g_User = $g_Commons->GlobalModel('User');
                            $sw_user = $g_User->findById($upData['sw_audit_user_id']);
                            $sw_audit_user_email = !empty($sw_user['User']['email']) ? $sw_user['User']['email'] : '';
                        }

                        // 整理一致通过接口的参数
                        $sync_params = array(
                            'Order_Number' => $upData['erp_order_number'],
                            'Lot_Number' => $upData['erp_lot_number'],
                            'Wip_Entity_Id' => $upData['erp_wip_entity_id'],
                            'Min_Id' => $upData['erp_wr_id'],
                            'Status' => 'Y',
                            'Consensus_By_Email' => $sw_audit_user_email,
                            'Scheduled_Start_Date' => !empty($upData['m_complete_date']) ? $upData['m_complete_date'] : '',
                        );
                        // 调用接口,同步数据到委外单
                        $sync_result = $g_ERPWsClients->syncMfPlanInfoToWip(array($sync_params));
                        if (empty($sync_result['success'])) {
                            $log_message = '齐套日期、完成日期 同步失败(' . $sync_result['message'] . ')。<br/>';
                            $log_message.= '(提交数据为:' . implode(', ', $sync_params) . ')';
                            $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, $log_message);
                            echo json_encode($log_msg);
                            return;
                        }

                        // 记录保存日志
                        $log_message = '成功同步，齐套日期:' . $upData['m_complete_date'] . '、完成日期:' . $upData['delivety_time'] . '到委外单。<br/>';
                        $log_message.= '(提交数据为:' . implode(', ', $sync_params) . ')';
                        $this->Req->setPlanbillsMsg($mf_id, $req_id, $log_message, 'log');

                        // **** 5、保存下计划数据
                        $mf_plan_bill = $g_MfPlanBill->save($upData);

                        $autoLog = array();
                        // **** 6、自动创建任务评论
                        $Task = $g_Tasks->Task->find('first', array('conditions' => array('Task.task_type' => OCS_TASK_TYPE_PRODUCE, 'Task.model_def_id' => Req, 'rel_obj_id' => $upData['req_id']), 'fields' => array('Task.id')));
                        if (!empty($Task)) {
                            $comment = '';
                            $comment .= '<p><span style="background-color:#FAFAC1"><b>批次:' . $upData['erp_lot_number'] . '</b> 的生产计划一致通过，软件计划完成日期：</span>' . date('Y-m-d', strtotime($old_sw_complete_date)) . '=>' . date('Y-m-d', strtotime($upData['sw_complete_date'])) . '</p>';
                            $comment .= '<div class="label">此信息由系统自动创建，操作者：#' . $g_UserRealName . '。</div>';
                            $g_TaskComments->addTaskComment($Task['Task']['id'], $comment, $comment);

                            $autoLog[] = '<b>创建软件任务#' . $Task['Task']['id'] . '的评论</b>';

                            //自动更新任务阶段及完成日期
                            $g_Tasks->Task->autoUpdateSwCompleteDate($upData['req_id']);

                            // **** 7、自动加载下计划中一致通过的软件发放日期 到 软件计划完成日期 add by GUOCAI 2014-07-21，需求:陈丽丽
                            $isUpdatePlanDate = $g_Tasks->Task->updatePlanDate($Task['Task']['id'], $upData['sw_complete_date']);
                            if ($isUpdatePlanDate) {
                                $autoLog[] = '<b>同步软件发放日期#' . $upData['sw_complete_date'] . ' 到任务#' . $Task['Task']['id'] . ' 的计划完成日期中</b>';
                            } else {
                                $autoLog[] = '同步软件发放日期到任务<b>失败</b>。';
                            }
                        } else {
                            $autoLog[] = '<b>创建软件任务评论失败，未找到相应的任务。</b>';
                        }

                        $autoLog[] = '审核成功，已一致通过。';

                        // **** 7、下计划一致通过，自动启用软件任务，如有有任务且是暂停状态
                        $g_Task = $g_Commons->GlobalModel('Task');
                        $g_Task->autoRestartTask($req_id);

                        // **** 8、下计划一致通过，自动启用软件任务，如有有任务且是暂停状态
                        // 同步齐套日期至EBS工单"齐套日期"和OCS订单行"生管承诺日期"(OCS-1747【优先处理】订单操作流程优化-OCS&EBS销售订单)
                        // 启用事务,如果OCS或ebs中的数据保存失败,则不更新
                        try {
                            if (empty($upData['m_complete_date'])) {
                                $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, '“齐套日期” 为空,暂时无法同步“生管承诺日期”.');
                                echo json_encode($log_msg);
                                return;
                            }
                            // 记录“生管承诺日期”
                            $promise_date = date('Y-m-d', strtotime($upData['m_complete_date']));
                            $field_values = array();
                            $field_values['req_id'] = $req_id;
                            $field_values['mf_promise_date'] = $promise_date;
                            $g_RelReq->query('begin');
                            $g_RelReq->updat_plan_date_action = 'mf_planbill_pass';//指定记录下计划审核通过的更新逻辑
                            $g_RelReq->saveRelFieldsAndLog($req_id, $field_values, '通过“下生产计划”审核一致通过更新了以下信息:');
                            // 更新EBS订单行上的“生管承诺日期”
                            $field_values = array('promise_date' => $promise_date);
                            $save_result = $g_ERPWsClients->updateEbsOrderLineFields('line', $upData['erp_order_line_id'], $field_values);
                            if (empty($save_result['success'])) {
                                throw new Exception($save_result['message'], 1);
                            }
                            $this->Req->setPlanbillsMsg($mf_id, $req_id, '“齐套日期” 成功更新为:' . $promise_date, 'msg');
                            $g_RelReq->query('commit');
                        } catch (Exception $e) {
                            $g_RelReq->query('rollback');
                            $this->Req->setPlanbillsMsg($mf_id, $req_id, '“齐套日期” 更新失败:' . $e->getMessage());
                        }

                        // **** 9、自动更新软件目标完成时间
                        $update_result = $g_Task->updatePlanEndDates('mf_planbill_pass', $req_id);
                        $save_plan_test_time_msg = !empty($update_result['datas'][$req_id]['message']) ? $update_result['datas'][$req_id]['message'] : $update_result['message'];
                        $this->Req->setPlanbillsMsg($mf_id, $req_id, $save_plan_test_time_msg, 'log');

                        // **** 10、下计划一致通过，自动发放唛头
                        $ship_mark_tip = array();
                        if (!empty($is_auto_shipping_marks[$req_id])) {
                            $release_result = $this->Req->autoReleaseShippingMark($req_id);
                            $release_message = !empty($release_result['message']) ? $release_result['message'] : '';
                            if (empty($release_result['success'])) {
                                $ship_mark_tip['order_number'] = false;
                                $ship_mark_tip['success'] = false;
                                $ship_mark_tip['message'] = $release_message;
                            } else {
                                $ship_mark_tip['success'] = true;
                                $ship_mark_tip['message'] = $release_message;
                            }
                        }

                        //获取工单号
                        $mf_plan_bill = $g_MfPlanBill->findById($mf_id, array('erp_wip_entity_name'));
                        if (!empty($mf_plan_bill) && !empty($mf_plan_bill['MfPlanBill']['erp_wip_entity_name'])) {
                            $wip_entity_names[] = $mf_plan_bill['MfPlanBill']['erp_wip_entity_name'];
                        }

                        $autoLog = implode('<br>', $autoLog);
                        $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, $autoLog, true, $wip_entity_names);

                        // 如果发放失败,则提示
                        $log_msg['ship_mark_tip'] = $ship_mark_tip;
                        $log_msg['order_number'] = $upData['erp_order_number'];

                        echo json_encode($log_msg);
                        return;
                    } else {
                        $mf_plan_bill = $g_MfPlanBill->save($upData);
                    }
                }
            }

            $wip_entity_names = array_unique($wip_entity_names);
            $log_msg = $this->Req->setPlanbillsMsg($mf_id, $req_id, '审核成功。', true, $wip_entity_names);
            echo json_encode($log_msg);
            return;
        }
    }

    //查看最新确认书
    function pop_view_latest_req_cfm($ReqId = null) {
        global $g_Commons;
        //获取对应的确认书
        $SignatureCfmAttachment = $this->Req->getSignatureCfmAttachmentsByReqId($ReqId);
        $show_src_url = '';
        if (!empty($SignatureCfmAttachment)) {
            $Attach = $SignatureCfmAttachment;

            $g_Attachment = $g_Commons->GlobalModel('Attachment');
            $img_file_info = $g_Attachment->getAttachmentFileInfo($Attach['Attachment']['id']);

            if ($img_file_info['success']) {
                $destinationile_path = 'cache/attach/' . $Attach['Attachment']['hash_name'];
                $file_data = file_get_contents($img_file_info['datas']['file_path']);
                file_put_contents($destinationile_path, $file_data);
                $SignatureCfmAttachment['Attachment']['show_src_url'] = '/' . $destinationile_path;
            }
        }
        $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
            'joins' => array(
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'left',
                    'conditions' => 'Product.id = Req.product_id'
                )
            ),
            'fields' => array('Req.id', 'Req.name', 'Product.name', 'Product.code')
        ));
        $this->set('Req', $Req);
        $this->set('ReqId', $ReqId);
        $this->set('SignatureCfmAttachment', $SignatureCfmAttachment);
        $this->set('show_src_url', $show_src_url);
    }

    //获取客户回签确认书
    function getAccountCfmStatus($ReqIds = array()) {
        global $g_BizId;
        global $g_Commons;
        $g_Attachment = $g_Commons->GlobalModel('Attachment');
        $Attachments = $g_Attachment->find('all', array(
            'conditions' => array('Attachment.model_def_id' => Req,
                'Attachment.obj_id' => $ReqIds,
                'Attachment.is_delete' => 0,
                'Attachment.is_lock' => 0,
                'Attachment.attach_type' => array(OCS_ATTACH_TYPE_CONFIRMATION_UNSIGNED, OCS_ATTACH_TYPE_CONFIRMATION), //确认书
                'Attachment.rel_attachment_id' => 0
            ), // 为0是普通附件，不为0则为软件包说明的XML文件
            'fields' => 'Attachment.id, Attachment.obj_id, Attachment.attach_type',
            'order' => 'Attachment.create_time DESC'
        ));
        $result = array();
        if (!empty($Attachments)) {
            $g_Dic = $g_Commons->GlobalModel('Dic');
            $attach_type_list = $g_Dic->getDicListByType('attach_type');
            foreach ($Attachments as $Attachment) {
                $result[$Attachment['Attachment']['obj_id']] = !empty($attach_type_list[$Attachment['Attachment']['attach_type']]) ? $attach_type_list[$Attachment['Attachment']['attach_type']] : '';
            }
        }
        return $result;
    }

    //BOM工程师确认BOM没问题后，更改EBS订单对应的标记位
    function pop_confirm_bom_to_ebs() {
        global $g_Commons;
        global $g_UserId;
        $this->Req->recursive = -1;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Account->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $ReqIds = explode(',', $AllParams['P']['req_ids']);
        if (empty($ReqIds)) {
            echo '<div>Error Parameters.</div>';
            exit;
        }

        //获取订单确认书状态(PDF)
        $SignCfmStatus = $this->getAccountCfmStatus($ReqIds);
        $this->set('SignCfmStatus', $SignCfmStatus);

        $this->SyncBomStatusByReqIds($ReqIds); //同步产品BOM状态
        //设置joins表
        $joins = array(
            array(
                'table' => 'contracts',
                'alias' => 'Contract',
                'type' => 'left',
                'conditions' => 'Contract.id = Req.rel_obj_id'
            ),
            array(
                'table' => 'products',
                'alias' => 'Product',
                'type' => 'left',
                'conditions' => 'Product.id = Req.product_id'
            ),
            array(
                'table' => 'mf_plan_bills',
                'alias' => 'MfPlanBill',
                'type' => 'left',
                'conditions' => 'MfPlanBill.req_id = Req.id and MfPlanBill.rel_idx = 0'
            ),
        );

        //设置查询的字段
        $fields = array('Req.id', 'Req.ebs_order_number', 'Req.account_id', 'Req.product_id', 'Req.quantity', 'Req.audit_stage', 'Req.owner_user_id', 'Req.create_time','Product.biz_id',
            'Contract.delivety_time', 'Contract.ebs_stage', 'Product.tmp_code', 'Product.create_time', 'Product.is_semi','Product.is_specified_materials','Product.account_id','Product.order_account_id',
            'Product.id', 'Product.name', 'Product.code', 'Product.bom_name', 'Product.agile_status', 'Product.is_semi', 'Product.agile_work_flow', 'Product.agile_latest_version',
            'MfPlanBill.id', 'MfPlanBill.hw_audit_status', 'MfPlanBill.bom_pending_audit_user_id', 'MfPlanBill.bom_audit_user_id', 'MfPlanBill.hw_pending_audit_user_id', 'MfPlanBill.hw_audit_user_id',
            'MfPlanBill.auto_assign_time');

        $ModelDatas = $this->Req->find('all', array('conditions' => array('Req.id' => $ReqIds),
                    'joins' => $joins,
                    'fields' => $fields,
                ));
        $ModelDatas = $g_AttrDics->formatModelData($ModelDatas, 'Req');
        $ModelDatas = $g_AttrDics->formatModelData($ModelDatas, 'Contract');
        $ModelDatas = $g_AttrDics->formatModelData($ModelDatas, 'MfPlanBill');
        $this->set('ModelDatas', $ModelDatas);

        //查EBS对应的产品编码
        $EbsProducts = array();
        $StrReqIds = array();
        if (!empty($ReqIds)) {
            foreach ($ReqIds as $ReqId) {
                $StrReqIds[] = "'" . $ReqId . "'";
            }
        }

        foreach ($ReqIds as $ReqId) {
            $sql = "
                SELECT BOMS.* FROM (
                  SELECT OOH.ATTRIBUTE8 OCS_REQ_ID,
                         OOL.LINE_NUMBER || '.' || OOL.SHIPMENT_NUMBER LINE_NUMBER,
                         OOH.ORDER_NUMBER ORDER_NUMBER,
                         MSI.SEGMENT1 EBS_PROD_CODE,
                         MIR.REVISION BOM_VERSION
                    FROM apps.OE_ORDER_HEADERS_ALL OOH,
                         apps.OE_ORDER_LINES_ALL   OOL,
                         apps.MTL_SYSTEM_ITEMS_B   MSI,
                         apps.MTL_ITEM_REVISIONS_B MIR

                   WHERE OOH.HEADER_ID = OOL.HEADER_ID
                     AND MSI.ORGANIZATION_ID = OOL.SHIP_FROM_ORG_ID
                     AND MSI.INVENTORY_ITEM_ID = OOL.INVENTORY_ITEM_ID
                     AND OOH.ATTRIBUTE8 = '" . $ReqId . "'
                     AND MIR.REVISION_ID =
                         (SELECT MAX(B.REVISION_ID)
                            FROM apps.MTL_ITEM_REVISIONS_VL B
                           WHERE B.INVENTORY_ITEM_ID = MIR.INVENTORY_ITEM_ID
                             AND B.ORGANIZATION_ID = MIR.ORGANIZATION_ID)
                     AND MIR.INVENTORY_ITEM_ID = OOL.INVENTORY_ITEM_ID
                     AND OOL.Flow_Status_Code <> 'CANCELLED'
                     ORDER BY MIR.REVISION DESC
                  ) BOMS
                  WHERE ROWNUM = 1
            ";
            $stid = $g_Commons->ebsConnect($sql);
            while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
                $EbsProducts[$row['OCS_REQ_ID']][$row['LINE_NUMBER']]['prod_code'] = $row['EBS_PROD_CODE'];
                $EbsProducts[$row['OCS_REQ_ID']][$row['LINE_NUMBER']]['bom_version'] = $row['BOM_VERSION'];
            }
        }

        // $sql = "
        //     SELECT OOH.ATTRIBUTE8 OCS_REQ_ID,
        //            OOL.LINE_NUMBER || '.' || OOL.SHIPMENT_NUMBER LINE_NUMBER,
        //            OOH.ORDER_NUMBER ORDER_NUMBER,
        //            MSI.SEGMENT1 EBS_PROD_CODE,
        //            MIR.REVISION BOM_VERSION
        //       FROM apps.OE_ORDER_HEADERS_ALL OOH,
        //            apps.OE_ORDER_LINES_ALL   OOL,
        //            apps.MTL_SYSTEM_ITEMS_B   MSI,
        //            apps.MTL_ITEM_REVISIONS_B MIR

        //      WHERE OOH.HEADER_ID = OOL.HEADER_ID
        //        AND MSI.ORGANIZATION_ID = OOL.SHIP_FROM_ORG_ID
        //        AND MSI.INVENTORY_ITEM_ID = OOL.INVENTORY_ITEM_ID
        //        AND OOH.ATTRIBUTE8 IN (" . implode(',', $StrReqIds) . ")
        //        AND MIR.REVISION_ID =
        //            (SELECT MAX(B.REVISION_ID)
        //               FROM apps.MTL_ITEM_REVISIONS_VL B
        //              WHERE B.INVENTORY_ITEM_ID = MIR.INVENTORY_ITEM_ID
        //                AND B.ORGANIZATION_ID = MIR.ORGANIZATION_ID)
        //        AND MIR.INVENTORY_ITEM_ID = OOL.INVENTORY_ITEM_ID
        //        AND MIR.ORGANIZATION_ID = MSI.ORGANIZATION_ID
        //        AND OOL.Flow_Status_Code <> 'CANCELLED'
        // ";
        // $stid = oci_parse($conn, $sql);
        // oci_execute($stid);

        // while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
        //     $EbsProducts[$row['OCS_REQ_ID']][$row['LINE_NUMBER']]['prod_code'] = $row['EBS_PROD_CODE'];
        //     $EbsProducts[$row['OCS_REQ_ID']][$row['LINE_NUMBER']]['bom_version'] = $row['BOM_VERSION'];
        // }
        $this->set('EbsProducts', $EbsProducts);
    }

    //自动将审核完成的BOM任务，确认至EBS
    function AutoConfirmBomToEbs(){
        $start = microtime(1);
        $log_file = 'cache/attach/crontab.txt';
        file_put_contents($log_file, date('Y-m-d H:i:s') . " : AutoConfirmBomToEbs start \r\n", FILE_APPEND);

        $this->autoRender = false;
        global $g_Commons;
        $this->Req->recursive = -1;
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_MfPlanBill->recursive = -1;

        $ReqIds = $g_MfPlanBill->find('list',array(
            'conditions'=>array(
                'MfPlanBill.hw_audit_status'=>OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_DONE,
                // 'MfPlanBill.bom_confirm_status'=>OCS_BOM_CONFIRM_NEW,
                "MfPlanBill.bom_confirm_status IN (".OCS_BOM_CONFIRM_NEW.",".OCS_BOM_CONFIRM_FAILED.")",//未确认或确认失败的
                // 'MfPlanBill.is_on_hold'=>0,//非暂挂
                'MfPlanBill.rel_idx'=>0,
                // 'Req.biz_id'=>OCS_BIZ_TYPE_TV,
                'Req.close_status !='=> OCS_ORDER_CLOSE_STATUS_CANCEL,
                'Req.is_mf'=>OCS_REQ_MF_NEW,//正式BOM
                'Req.parent_id'=>0,//非虚拟订单
                'Req.ebs_order_number IS NOT NULL',
                "Req.ebs_order_number != ''",
                "Req.bom_assign_time > '2014-08-08 00:00:00'",
                'Contract.is_has_stock'=>0,//非出库存
                "(Req.audit_stage = ".OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE." OR (Attachment.is_delete = 0 and Attachment.is_lock=0 and
                    Attachment.rel_attachment_id=0 and Attachment.attach_type IN(" . OCS_ATTACH_TYPE_CONFIRMATION . "," . OCS_ATTACH_TYPE_CONFIRMATION_UNSIGNED . ")))",//有确认书
                ),
            'joins'=>array(
                array(
                    'table'=>'reqs',
                    'alias'=>'Req',
                    'type'=>'inner',
                    'conditions'=>'Req.id = MfPlanBill.req_id'
                    ),
                array(
                    'table'=>'contracts',
                    'alias'=>'Contract',
                    'type'=>'inner',
                    'conditions'=>'Contract.id = Req.rel_obj_id'
                    ),
                array(
                    'table'=>'attachments',
                    'alias'=>'Attachment',
                    'type'=>'left',
                    'conditions'=>'Attachment.obj_id=Req.id and Attachment.model_def_id='.Req
                    ),
                ),
            'fields'=>array('Req.id')
            ));
        if (empty($ReqIds)) {
            return;
        }
        $ReqIds = array_unique($ReqIds);

        $req_product_codes = $this->Req->find('list', array(
            'joins' =>  array(
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'inner',
                    'conditions' => 'Product.id = Req.product_id'
                ),
            ),
            'conditions' => array(
                'Req.id' => $ReqIds,
            ),
            'fields' => array(
                'Req.id',
                'Product.code',
            )
        ));

        $this->SyncBomStatusByReqIds($ReqIds); //同步产品BOM状态
        if(!empty($ReqIds)){
            foreach($ReqIds as $ReqId){
                if (isset($req_product_codes[$ReqId]) && preg_match('/^001\..+/', $req_product_codes[$ReqId])) { //001.开头的代码 不自动下推
                    continue;
                }
                $result = $this->update_ebs_order_bom_audit_json($ReqId, true);
                $MfPlanBill = $g_MfPlanBill->find('first', array('conditions' => array('MfPlanBill.req_id' => $ReqId, 'MfPlanBill.rel_idx' => 0),
                    'fields' => array('MfPlanBill.id', 'MfPlanBill.cfm_status_remark','MfPlanBill.bom_confirm_status')));
                if(!$result['success']){//失败
                    // $g_Logs->write_log('Reqs', $ReqId, 'info', '系统自动确认BOM状态，失败。原因：'.$result['message']);
                    $g_Logs->write_log('MfPlanBills', $MfPlanBill['MfPlanBill']['id'], 'info', '系统自动确认BOM状态，失败。原因：'.$result['message']);
                    if(!empty($MfPlanBill)){
                        $MfPlanBill['MfPlanBill']['bom_confirm_status'] = OCS_BOM_CONFIRM_FAILED;//确认失败
                        $MfPlanBill['MfPlanBill']['cfm_status_remark'] = $result['message'];
                        $g_MfPlanBill->save($MfPlanBill['MfPlanBill']);
                    }
                }else{
                    // $g_Logs->write_log('Reqs', $ReqId, 'info', '系统自动确认BOM状态，成功。');
                    $g_Logs->write_log('MfPlanBills', $MfPlanBill['MfPlanBill']['id'], 'info', '系统自动确认BOM状态，成功。');
                    if(!empty($MfPlanBill)){
                        $MfPlanBill['MfPlanBill']['cfm_status_remark'] = '';
                        $g_MfPlanBill->save($MfPlanBill['MfPlanBill']);
                    }
                }
            }
        }

        $end = microtime(1);
        file_put_contents($log_file, date('Y-m-d H:i:s') . " : AutoConfirmBomToEbs end : ".($end-$start)." \r\n", FILE_APPEND);
    }

    //更新EBS订单的BOM工程师确认（弹性域）字段
    function update_ebs_order_bom_audit_json($ReqId = null, $autoRender = false) {
        $this->autoRender = false;
        global $g_Commons;
        global $g_UserId;
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_ActionRecord = $g_Commons->GlobalModel('ActionRecord');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_MfPlanBill->recursive = -1;

        $result = array('success' => false, 'message' => '');
        if (empty($ReqId) || null == $ReqId) {
            $result['success'] = false;
            $result['message'] = 'parameter error,empty req_id#' . $ReqId;
            if($autoRender){
                return $result;
            }
            echo json_encode($result);
            return;
        }
        //记录log
        // $log_content = '';
        // $g_Logs->write_log('Reqs',$ReqId,'info',$log_content);

        $MfPlanBill = $g_MfPlanBill->find('first', array('conditions' => array('MfPlanBill.req_id' => $ReqId, 'MfPlanBill.rel_idx' => 0)));
        if (empty($MfPlanBill)) {
            $result['success'] = false;
            $result['message'] = 'empty mfplanbill';
            if($autoRender){
                return $result;
            }
            echo json_encode($result);
            return;
        }
        //状态小于硬件审核完成，不允许发布EBS
        if ($MfPlanBill['MfPlanBill']['hw_audit_status'] < OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_DONE) {
            $result['success'] = false;
            $result['message'] = 'BOM审核状态为' . $g_Enums->getLabelByDictNameAndValue('MfPlanBill.hw_audit_status', $MfPlanBill['MfPlanBill']['hw_audit_status']) . '，不允许发布至EBS。';
            if($autoRender){
                return $result;
            }
            echo json_encode($result);
            return;
        }
        //暂挂，不允许下推
        if($MfPlanBill['MfPlanBill']['is_on_hold'] == 1){
            $result['success'] = false;
            $result['message'] = '订单为暂挂状态，不能下推BOM，请联系商务订单取消专员。';
            if($autoRender){
                return $result;
            }
            echo json_encode($result);
            return;
        }

        //验证，要所有待审审核人都审核了才可以下推
        $RelAuditUsers = array(
                            'bom_pending_audit_user_id'=>'bom_audit_user_id',
                            'hw_pending_audit_user_id'=>'hw_audit_user_id',
                            'power_pending_audit_user_id'=>'power_audit_user_id',
                            'struct_pending_audit_user_id'=>'struct_audit_user_id',
                            'pack_pending_audit_user_id'=>'pack_audit_user_id',
                            );
        foreach($RelAuditUsers as $pending_key=>$audit_key){
            if($MfPlanBill['MfPlanBill'][$pending_key] > 0 && $MfPlanBill['MfPlanBill'][$audit_key] <= 0){
                $result['success'] = false;
                $label = $g_AttrDics->getAttrDicLabel('MfPlanBill.'.$audit_key);
                $result['message'] = '#'.$label.' 未审核，自动下推失败。';
                if($autoRender){
                    return $result;
                }
                echo json_encode($result);
                return;
            }
        }

        $tmp_result = $this->Req->UpdateEbsOrderBomAuditStatus($ReqId, 'Y');
        if (!$tmp_result['success']) {
            //记录log
            $log_content = '自动设置BOM确认状态失败，原因：' . $tmp_result['message'];
            $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);

            if (!empty($MfPlanBill)) {
                $g_ActionRecord->create('MfPlanBill.bom_confirm_status.Begin.' . $MfPlanBill['MfPlanBill']['bom_confirm_status'], MfPlanBill, $MfPlanBill['MfPlanBill']['id']);
                $MfPlanBill['MfPlanBill']['bom_confirm_user_id'] = $g_UserId;
                $MfPlanBill['MfPlanBill']['bom_confirm_time'] = date('Y-m-d H:i:s');
                $MfPlanBill['MfPlanBill']['bom_confirm_status'] = OCS_BOM_CONFIRM_FAILED; //确认失败
                $g_MfPlanBill->save($MfPlanBill['MfPlanBill']);
                $g_ActionRecord->create('MfPlanBill.bom_confirm_status.End.' . $MfPlanBill['MfPlanBill']['bom_confirm_status'], MfPlanBill, $MfPlanBill['MfPlanBill']['id']);
            }

            //记录log
            $log_content = 'BOM确认失败，未成功标识EBS。';
            $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);

            $result['success'] = false;
            $result['message'] = $tmp_result['message'];
            if($autoRender){
                return $result;
            }
            echo json_encode($result);
            return;
        }
        if (empty($MfPlanBill)) {
            $result['success'] = false;
            $result['message'] = 'MfPlanBill record is not found, req_id=' . $ReqId;
            if($autoRender){
                return $result;
            }
            echo json_encode($result);
            return;
        }
        $g_ActionRecord->create('MfPlanBill.bom_confirm_status.Begin.' . $MfPlanBill['MfPlanBill']['bom_confirm_status'], MfPlanBill, $MfPlanBill['MfPlanBill']['id']);
        $MfPlanBill['MfPlanBill']['bom_confirm_user_id'] = $g_UserId;
        $MfPlanBill['MfPlanBill']['bom_confirm_time'] = date('Y-m-d H:i:s');
        $MfPlanBill['MfPlanBill']['bom_confirm_status'] = OCS_BOM_CONFIRM_PASS; //BOM确认OK
        $g_MfPlanBill->save($MfPlanBill['MfPlanBill']);
        $g_ActionRecord->create('MfPlanBill.bom_confirm_status.End.' . $MfPlanBill['MfPlanBill']['bom_confirm_status'], MfPlanBill, $MfPlanBill['MfPlanBill']['id']);


        $AllMfPlanBills = $g_MfPlanBill->find('all', array('conditions' => array('MfPlanBill.req_id' => $ReqId),
                    'fields' => array('MfPlanBill.id', 'MfPlanBill.bom_confirm_user_id', 'MfPlanBill.bom_confirm_time',
                        'MfPlanBill.bom_confirm_status', 'MfPlanBill.hw_audit_status')));
        if (count($AllMfPlanBills) > 1) {
            foreach ($AllMfPlanBills as $temp) {
                $temp['MfPlanBill']['bom_confirm_user_id'] = $g_UserId;
                $temp['MfPlanBill']['bom_confirm_time'] = date('Y-m-d H:i:s');
                $temp['MfPlanBill']['bom_confirm_status'] = OCS_BOM_CONFIRM_PASS; //BOM确认OK
                $g_MfPlanBill->save($temp['MfPlanBill']);
            }
        }

        //更新BOM任务是否及时
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_MfPlanBill->setBomTaskTimelinessRate($ReqId);

        //记录log
        $log_content = 'BOM确认OK，已传EBS。';
        $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);

        $result['success'] = true;
        $result['message'] = 'success';
        if($autoRender){
            return $result;
        }
        echo json_encode($result);
        return;
    }

    //通过req_id同步产品信息（from agile）
    function sync_product_by_req_ids_json() {
        set_time_limit(0);
        global $g_Commons;
        $this->autoRender = false;
        $this->Req->recursive = -1;
        $g_Products = $g_Commons->GlobalController('Products');
        $result = $g_Commons->initResult();

        if (isset($_POST['req_ids']) && !empty($_POST['req_ids'])) {
            $ReqIds = $_POST['req_ids'];
            $ProductIds = $this->Req->find('list', array('conditions' => array('Req.id' => $ReqIds),
                        'fields' => array('Req.product_id')));
            $ProductIds = array_unique($ProductIds);
            $Products = $g_Products->Product->find('all', array(
                        'conditions' => array('Product.id' => $ProductIds),
                        'fields' => array('Product.id', 'Product.component_type')
                    ));
            if (!empty($Products)) {
                foreach ($Products as $Product) {
                    if (OCS_PRODATTR_COMPONENT_TYPE_NONE == $Product['Product']['component_type']) {
                        $g_Products->SyncProductAgileStatus($Product['Product']['id']);
                    } else {
                        $g_Products->SyncComponentProduct($Product['Product']['id']);
                    }
                }
            }
            $result['success'] = true;
            $result['message'] = 'success';
            echo json_encode($result);
            exit;
        } else {
            $result['success'] = false;
            $result['message'] = 'error parameters';
            echo json_encode($result);
            exit;
        }
    }

    public function getAlterNavTabs($AllParams) {
        global $g_BizId;
        global $g_UserId;
        global $g_Commons;
        $g_Users = $g_Commons->GlobalController('Users');
        $tab = isset($AllParams['P']['tab'])?$AllParams['P']['tab']:'normal_bom_to_do';
        $type = isset($AllParams['P']['type']) ? $AllParams['P']['type'] : 'primary_info';

        $navTabs = array();

        $navTabs['all_to_audit'] = array(
            'active' => '',
            'label' => '待审',
            'url' => 'Reqs/alert_audit_index/P:tab=all_to_audit&type='.$type,
        );
        $navTabs['all_done'] = array(
            'active' => '',
            'label' => '已审',
            'url' => 'Reqs/alert_audit_index/P:tab=all_done&type='.$type,
        );
        $navTabs['all_back_forward'] = array(
            'active' => '',
            'label' => '被打回',
            'url' => 'Reqs/alert_audit_index/P:tab=all_back_forward&type='.$type,
        );
        if (!empty($navTabs) && isset($navTabs[$tab])) {
            $navTabs[$tab]['active'] = 'active';
        }
        return $navTabs;
    }

    function alert_audit_index() {
        global $g_Commons;
        global $g_UserId;
        global $g_BizName;
        global $g_BizId;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_StockApplyLine = $g_Commons->GlobalModel('StockApplyLine');
        $this->set('title_for_layout', '审核需求更改单');

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $AllParams['P']['tab'] = isset($AllParams['P']['tab']) ? $AllParams['P']['tab'] : 'all_to_audit';
        $AllParams['P']['type'] = isset($AllParams['P']['type']) ? $AllParams['P']['type'] : 'primary_info';
        $this->set('AllParams', $AllParams);

        $NavTabs = $this->getAlterNavTabs($AllParams);
        $this->set('NavTabs', $NavTabs);

        $AlertTypes = array('primary_info'=>'合同信息变更','special_inv'=>'特殊建交付', 'bill_account' => '改付款平台');
        $this->set('AlertTypes', $AlertTypes);

        if ($this->request->is('post')) {
            if (isset($this->request->data['search_value'])) {
                $qValue = trim($this->request->data['search_value']);
                $url_params = array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'alert_audit_index');
                if (!empty($this->params->params['named'])) {
                    foreach ($this->params->params['named'] as $key => $p) {
                        $url_params[$key] = $p;
                    }
                }
                $url_params['page'] = 1;
                $url_params['q'] = $qValue;
                $this->redirect($url_params);
            }
        }

        $showing_rows = 50;
        if (isset($AllParams['rows'])) {
            foreach ($AllParams['rows'] as $rows) {
                $showing_rows = $rows;
                break;
            }
        }
        $qValue = '';
        if (isset($this->params->params['named']['q']) && !empty($this->params->params['named']['q'])) {
            $qValue = $this->params->params['named']['q'];
        }
        $this->set('qValue', $qValue);

        $conds = array();
        $joins = array();
        $joins[] = array(
            'table' => 'contracts',
            'alias' => 'Contract',
            'type' => 'inner',
            'conditions' => 'Contract.id = Req.rel_obj_id'
        );
        $joins[] = array(
            'table' => 'rel_reqs',
            'alias' => 'RelReq',
            'type' => 'left',
            'conditions' => 'RelReq.req_id = Req.id'
        );
        $joins[] = array(
            'table' => 'contract_rel_tmpls',
            'alias' => 'ContractRelTmpl',
            'type' => 'left',
            'conditions' => 'ContractRelTmpl.contract_no = Contract.contract_no'
        );

        $not_in_close_status = array(OCS_ORDER_CLOSE_STATUS_CANCEL, OCS_ORDER_CLOSE_STATUS_CLOSE);
        switch ($AllParams['P']['tab']) {
            case 'all_to_audit':
                switch ($AllParams['P']['type']) {
                    case 'primary_info':
                        $conds[] = "(Req.alter_audit_status=".OCS_REQ_ALTER_AUDIT_STATUS_NEW.")";
                        break;
                    case 'special_inv':
                        $conds[] = "(Contract.contract_inv_audit_staus=".OCS_CONTRACT_INV_AUDIT_STATUS_NEW.")";
                        break;
                    case 'bill_account':
                        $conds[] = "(Contract.alter_mid_account_audit_status=".OCS_ALTER_MID_ACCOUNT_AUDIT_STATUS_NEW.")";
                        break;
                }
                break;
            case 'all_done':
                $not_in_close_status = array(OCS_ORDER_CLOSE_STATUS_CANCEL);
                switch ($AllParams['P']['type']) {
                    case 'primary_info':
                        $conds[] = "(Req.alter_audit_status=".OCS_REQ_ALTER_AUDIT_STATUS_PASS.")";
                        break;
                    case 'special_inv':
                        $conds[] = "(Contract.contract_inv_audit_staus=".OCS_CONTRACT_INV_AUDIT_STATUS_PASS.")";
                        break;
                    case 'bill_account':
                        $conds[] = "(Contract.alter_mid_account_audit_status=".OCS_ALTER_MID_ACCOUNT_AUDIT_STATUS_PASS.")";
                        break;
                }
                break;
            case 'all_back_forward':
                switch ($AllParams['P']['type']) {
                    case 'primary_info':
                        $conds[] = "(Req.alter_audit_status=".OCS_REQ_ALTER_AUDIT_STATUS_FAIL.")";
                        break;
                    case 'special_inv':
                        $conds[] = "(Contract.contract_inv_audit_staus=".OCS_CONTRACT_INV_AUDIT_STATUS_FAIL.")";
                        break;
                    case 'bill_account':
                        $conds[] = "(Contract.alter_mid_account_audit_status=".OCS_ALTER_MID_ACCOUNT_AUDIT_STATUS_FAIL.")";
                        break;
                }
                break;
            default:break;
        }
        $conds['Req.parent_id'] = 0;//不包括虚拟订单
        $conds['Req.biz_id'] = $g_BizId;

        if (isset($AllParams['todo_ids'])) {
            $todo_ids = array_values($AllParams['todo_ids']);
            $conds['Req.id'] = explode(',', $todo_ids[0]);
        }

        $conds[] = "(Req.close_status NOT IN(" . implode(',', $not_in_close_status) . "))";
        if (!empty($qValue)) {
            $conds['OR'] = array("Req.ebs_order_number LIKE '%" . $qValue . "%'");
            $conds['OR'][] = "Req.name LIKE '%" . $qValue . "%'";
            $conds['OR'][] = "Contract.account_cno LIKE '%" . $qValue . "%'";
            $conds['OR'][] = "Contract.account_mno LIKE '%" . $qValue . "%'";
            $conds['OR'][] = "Contract.contract_no LIKE '%" . $qValue . "%'";
            $count = $g_Users->User->find('count', array('conditions' => array("User.realname LIKE '%" . $qValue . "%'")));
            if ($count > 0) {
                $joins[] = array(
                    'table' => 'users',
                    'alias' => 'User',
                    'type' => 'inner',
                    'conditions' => 'User.id = Req.owner_user_id'
                );
                $conds['OR'][] = "User.realname LIKE '%" . $qValue . "%'";
                $joins[] = array(
                    'table' => 'users',
                    'alias' => 'User1',
                    'type' => 'left',
                    'conditions' => 'User1.id = ContractRelTmpl.pd_audit_user_id'
                );
                $conds['OR'][] = "User1.realname LIKE '%" . $qValue . "%'";
            }
        }

        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $approval_users = $g_ObjRelObj->getCommonApprovalUsersByAlias(Req, 'CONTRACT_APPROVAL');
        $is_can_audit_contract = isset($approval_users['user_ids'][$g_UserId]) && !empty($approval_users['user_ids'][$g_UserId]) ? true : false;

        //非内勤管理只看自己的，以免干扰
        if (!($g_RolePrivs->get_priv_level('Reqs', 'can_view_all_primary_info_bill') && $is_can_audit_contract) ) {
            $conds[] = "Req.owner_user_id = " . $g_UserId;
        }

        $fields = array('Req.id', 'Req.name', 'Req.account_id', 'Req.product_id', 'Req.ebs_order_number', 'Contract.ebs_stage','Req.alter_audit_status','Contract.contract_inv_audit_staus', 'Contract.audit_account_remark', 'Req.create_time',
            'Req.price', 'Req.foreign_price', 'Req.quantity', 'Req.owner_user_id', 'Contract.account_cno', 'Contract.account_mno',
            'Contract.alter_mid_account_audit_status', 'Contract.id', 'Contract.mid_account_id', 'Contract.contract_no',
            'Contract.contract_inv_apply_user_id', 'Contract.contract_inv_apply_time', 'Contract.contract_inv_audit_user_id', 'Contract.contract_inv_audit_time',
            'RelReq.id,RelReq.primary_alter_owner_remark,RelReq.primary_alter_audit_remark',
            'ContractRelTmpl.pd_audit_user_id', 'ContractRelTmpl.audit_time', 'ContractRelTmpl.first_audit_time');

        $this->paginate['conditions'] = $conds;
        $this->paginate['joins'] = $joins;
        $this->paginate['fields'] = $fields;

        // 查看已审核的特殊建交付界面排序
        if ('all_done' == $AllParams['P']['tab'] && 'special_inv' == $AllParams['P']['type']) {
            $this->paginate['order'] = array('Contract.contract_inv_audit_time' => 'DESC', 'Contract.contract_inv_apply_time' => 'ASC');
        }

        //导出明细
        if(isset($this->params->params['named']['export']) && 1 == $this->params->params['named']['export']){
            set_time_limit(0);
            $this->autoRender = false;

            if(!$g_RolePrivs->get_priv_level('Reqs', 'can_export')) {
                echo '抱歉，你无权导出。';
                exit;
            }
            $this->paginate['order'] = isset($this->paginate['order']) ? $this->paginate['order'] : array();

            $reqs = $this->Req->find('all', array(
                'joins' => $this->paginate['joins'],
                'conditions' => $this->paginate['conditions'],
                'fields' => $this->paginate['fields'],
                'order' => $this->paginate['order'],
            ));
            if (empty($reqs)) {
                echo '无数据可导出。';
                exit;
            }
            $model_datas = $g_AttrDics->formatAllModelData($reqs);

            //获取导出Excel列
            $excel_cols = $this->{$this->modelClass}->defPrimaryBillExportColums();
            $export_datas = array();
            foreach ($model_datas as $temp) {
                $data = array();
                foreach ($excel_cols as $key => $label) {
                    list($model, $field) = explode('.', $key);
                    $value = '';
                    if (isset($temp[$model][$field])) {
                        $value = is_array($temp[$model][$field]) ? $temp[$model][$field]['label'] : $temp[$model][$field];
                    }
                    $data[$label] = trim($value);

                }
                $export_datas[] = $data;
            }

            return $g_Commons->export_excel_data($export_datas, '关键信息变更单', '关键信息变更单');
        }

        $reqs = $this->paginate();
        $contract_ids = array();
        if ('bill_account' == $AllParams['P']['type']) {
            foreach ($reqs as $req) {
                $contract_ids[] = $req['Contract']['id'];
            }
        }
        $ModelDatas = $g_AttrDics->formatAllModelData($reqs);

        // OCS-1524备货订单功能优化
        // 备货订单产生的关键信息变更单可带出备货申请的第一审核人
        $req_ids = array();
        foreach ($ModelDatas as $key => $ModelData) {
            $req_ids[$ModelData['Req']['id']] = $ModelData['Req']['id'];
        }
        $status_result = $g_StockApplyLine->getStockApplyHeaderAuditStatus(null, $req_ids);
        $req_audit_status = !empty($status_result['req_audit_status']) ? $status_result['req_audit_status'] : array();
        foreach ($ModelDatas as $key => $ModelData) {
            $req_id = $ModelData['Req']['id'];
            if (!isset($req_audit_status[$req_id])) {
                continue;
            }
            $audit_user_name = !empty($req_audit_status[$req_id][OCS_STOCK_APPLY_HEADER_AUDIT_STAGE_FIRST]) ? $req_audit_status[$req_id][OCS_STOCK_APPLY_HEADER_AUDIT_STAGE_FIRST] : '';
            $ModelDatas[$key]['ContractRelTmpl']['pd_audit_user_id']['label'] = $audit_user_name;
        }

        $this->set('ModelDatas', $ModelDatas);

        if ('bill_account' == $AllParams['P']['type']) {
            $g_ContractRelMidAccount = $g_Commons->GlobalModel('ContractRelMidAccount');

            $new_mid_account_list = $g_ContractRelMidAccount->getLastRelMidAccountList($contract_ids);
            $this->set('new_mid_account_list', $new_mid_account_list);
        }
    }

    function pop_audit_modify_bill($ReqId = null, $can_audit =false) {
        global $g_Commons;
        global $g_UserId;
        global $g_BizId;
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_CancelOrderLine = $g_Commons->GlobalModel('CancelOrderLine');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_ReqVersion = $g_Commons->GlobalModel('ReqVersion');
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_ProdOpt = $g_Commons->GlobalModel('ProdOpt');
        $g_User = $g_Commons->GlobalModel('User');
        $g_StockApplyHeader = $g_Commons->GlobalModel('StockApplyHeader');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');

        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdModelDetails = $g_Commons->GlobalController('ProdModelDetails');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $this->Req->recursive = -1;

        $this->set('can_audit', $can_audit);

        //获取订单对应的最新修改版本
        $LastTmpReqVersion = $g_ReqVersion->getLastTmpReqVersion(Req, $ReqId);
        if (empty($LastTmpReqVersion)) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('没有需求更改单，无需审核。');
            return;
        }
        $LastTmpReqVersion = $g_AttrDics->formatModelData(array($LastTmpReqVersion), 'ReqVersion');
        if (!empty($LastTmpReqVersion)) {
            $LastTmpReqVersion = $LastTmpReqVersion[0];
        }
        $this->set('LastTmpReqVersion', $LastTmpReqVersion);

        $TmpSwAttrAtoms = $this->getSwAttrsAtoms($LastTmpReqVersion['ReqVersion']['sw_atom_ids_json']);
        $this->set('TmpSwAttrAtoms', $TmpSwAttrAtoms);

        $is_ckd_list = $g_Enum->getEnumListByDictName('Product.is_ckd');
        $this->set('is_ckd_list', $is_ckd_list);

        $Product = $g_Product->find('first', array(
            'conditions' => array('Product.id' => $LastTmpReqVersion['ReqVersion']['product_id']),
            'fields' => array('Product.id', 'Product.pcb_id', 'Product.prod_opt_ids', 'Product.is_ckd')
        ));
        $this->set('old_is_ckd', $Product['Product']['is_ckd']);
        $ProdModelDetail = $g_ProdModelDetails->findProdModelDetailById($Product['Product']['pcb_id']);
        $TmpPcbLabel = $ProdModelDetail['ProdModelDetail']['pcb_num'] . '(' . $ProdModelDetail['ProdModelDetail']['use_state'] . ')';
        $this->set('TmpPcbLabel', $TmpPcbLabel);

        $TmpAttrRelOpts = $g_ProdOpt->getProdAttrRelProdOpts(explode(',', $Product['Product']['prod_opt_ids']));
        $this->set('TmpAttrRelOpts', $TmpAttrRelOpts);

        //获取工厂烧录KEY
        $burn_key_list = $this->getBurnKeysFromCps();

        //获取当前订单相关信息
        $Req = $this->Req->find('first', array(
            'conditions' => array('Req.id' => $ReqId,'Req.close_status NOT IN(' . OCS_ORDER_CLOSE_STATUS_CLOSE . ',' . OCS_ORDER_CLOSE_STATUS_CANCEL . ')'),
            'joins'=>array(
                array(
                    'table'=>'contracts',
                    'alias'=>'Contract',
                    'type'=>'inner',
                    'conditions'=>'Contract.id = Req.rel_obj_id'
                    )
                ),
            'fields' => array('Req.id', 'Req.account_id', 'Req.product_id', 'Req.price', 'Req.foreign_price', 'Req.quantity','Req.ebs_order_number', 'Req.burn_key_store_ids',
                'Req.currency_id', 'Req.sw_atom_ids_json', 'Req.alter_audit_status','Req.close_status','Contract.mid_account_id','Contract.is_has_stock','Contract.ebs_stage')
        ));
        if(in_array($Req['Req']['close_status'],array(OCS_ORDER_CLOSE_STATUS_CLOSE,OCS_ORDER_CLOSE_STATUS_CANCEL))){
            $this->set('setFlash', 1);
            $this->Session->setFlash('订单状态为关闭或作废，不需再审核。');
            return;
        }
        $Req = $g_AttrDics->formatModelData(array($Req), 'Req');
        $Req = $g_AttrDics->formatModelData($Req, 'Contract');
        if (!empty($Req)) {
            $Req = $Req[0];
        }
        $this->set('Req', $Req);
        if ($Req['Req']['alter_audit_status']['value'] != OCS_REQ_ALTER_AUDIT_STATUS_NEW && $g_RolePrivs->get_priv_level('Reqs', 'can_audit_primary_info_bill') && $can_audit) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('更改主单非待审核状态，无需审核。');
            return;
        }

        $burn_keys = array();
        if (!empty($Req['Req']['burn_key_store_ids'])) {
            $burn_key_store_ids = explode(',', $Req['Req']['burn_key_store_ids']);
            foreach ($burn_key_store_ids as $keys) {
                list($attr, $key_id) = explode(':', $keys);
                if (!isset($burn_key_list[$attr][$key_id])) {
                    continue;
                }
                $burn_keys[] = $burn_key_list[$attr][$key_id];
            }
        }
        $burn_keys = implode(',', $burn_keys);
        $this->set('burn_keys', $burn_keys);

        $SwAttrAtoms = $this->getSwAttrsAtoms($Req['Req']['sw_atom_ids_json']);
        $this->set('SwAttrAtoms', $SwAttrAtoms);

        $Product = $g_Product->find('first', array(
            'conditions' => array('Product.id' => $Req['Req']['product_id']),
            'fields' => array('Product.id', 'Product.pcb_id', 'Product.prod_opt_ids', 'Product.is_ckd')
        ));
        $this->set('new_is_ckd', $Product['Product']['is_ckd']);
        $ProdModelDetail = $g_ProdModelDetails->findProdModelDetailById($Product['Product']['pcb_id']);
        $PcbLabel = $ProdModelDetail['ProdModelDetail']['pcb_num'] . '(' . $ProdModelDetail['ProdModelDetail']['use_state'] . ')';
        $this->set('PcbLabel', $PcbLabel);

        $AttrRelOpts = $g_ProdOpt->getProdAttrRelProdOpts(explode(',', $Product['Product']['prod_opt_ids']));
        $this->set('AttrRelOpts', $AttrRelOpts);

        //提交
        $this->set('saveComplete', 0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submitData = $this->request->data;
            $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                'joins'=>array(
                    array(
                        'table'=>'contracts',
                        'alias'=>'Contract',
                        'type'=>'inner',
                        'conditions'=>'Contract.id = Req.rel_obj_id'
                        )
                    ),
                'fields'=>array('Req.*','Contract.*')
            ));
            if (empty($Req)) {
                return false;
            }
            if ($submitData['audit_result'] == 1) {//审核通过，覆盖原来订单的相关信息
                if ($LastTmpReqVersion['ReqVersion']['product_id']['value'] > 0) {
                    $Req['Req']['product_id'] = $LastTmpReqVersion['ReqVersion']['product_id']['value'];
                }

                $Product = $g_Product->find('first', array('conditions' => array('Product.id' => $Req['Req']['product_id']),
                    'joins' => array(
                        array(
                            'table' => 'prod_models',
                            'alias' => 'ProdModel',
                            'type' => 'left',
                            'conditions' => 'ProdModel.id = Product.prod_model_id'
                        )
                    ),
                    'fields' => array('Product.id', 'Product.name', 'ProdModel.id', 'ProdModel.name')
                ));

                //处理数量、单价
                $Req['Req']['price'] = $LastTmpReqVersion['ReqVersion']['price'];
                $Req['Req']['quantity'] = $LastTmpReqVersion['ReqVersion']['quantity'];
                $Req['Req']['amount'] = round($Req['Req']['price'] * $Req['Req']['quantity'], 4);

                if ($Req['Req']['currency_id'] == OCS_CURRENCY_USD && !empty($LastTmpReqVersion['ReqVersion']['foreign_price'])) {
                    $Req['Req']['foreign_price'] = $LastTmpReqVersion['ReqVersion']['foreign_price'];
                    $Req['Req']['foreign_amount'] = $Req['Req']['foreign_price'] * $LastTmpReqVersion['ReqVersion']['quantity'];
                    $Req['Req']['price'] = $LastTmpReqVersion['ReqVersion']['foreign_price'] * $Req['Req']['exchange_ratio']; //转成人民币
                    $Req['Req']['amount'] = round($Req['Req']['foreign_amount'] * $Req['Req']['exchange_ratio'], 4);
                }

                //生成订单主题
                $name = explode('-', $Req['Req']['name']);
                $name_date = $name[1];
                $Account = $g_Account->find('first', array(
                    'conditions' => array('Account.id' => $Req['Req']['account_id']),
                    'fields' => array('Account.id', 'Account.short_name')
                ));
                $Req['Req']['name'] = $Account['Account']['short_name'] . '-' . $name_date . '-' . $Product['ProdModel']['name'] . '-' . $Req['Req']['quantity'];

                //不覆盖原来的其他属性
                $all_extend_atom_ids = $g_Atoms->Atom->find('list', array('conditions' => array('Atom.name' => $g_Atoms->ExtendSwAtomNames), 'fields' => array('Atom.id')));
                $sw_prod_attr = $g_ProdAttrs->getSeriesSWAdvanceAttr(0); // 暂时hardcode,新产品无系列配置
                $sw_prod_attr_list = array();
                foreach ($sw_prod_attr as $one) {
                    $sw_prod_attr_list[] = $one['id'];
                }

                $sw_atom = $this->fixSwAtomData($Req['Req']['sw_atom_ids_json'], $LastTmpReqVersion['ReqVersion']['sw_atom_ids_json'], json_decode($LastTmpReqVersion['ReqVersion']['extend_sw_atom_ids'], true), $all_extend_atom_ids, $sw_prod_attr_list);
                $Req['Req']['sw_atom_ids'] = '0,' . $sw_atom['sw_atom_ids'] . ',0';
                $Req['Req']['sw_atom_ids_json'] = $sw_atom['sw_atom_ids_json'];

                $Req['Req']['alter_audit_status'] = OCS_REQ_ALTER_AUDIT_STATUS_PASS; //关键信息变更-审核通过

                $this->Req->save($Req['Req']);

                //清空审核不过原因
                $g_RelReq->saveRelFields($this->Req->id, array('primary_alter_audit_remark' => ''));

                //更新备货申请总金额
                $g_StockApplyHeader->updateStockApplyAmountByReqId($Req['Req']['id']);

                //非TV
                if(OCS_BIZ_TYPE_TV != $g_BizId){
                    if(isset($LastTmpReqVersion['ReqVersion']['is_has_stock']['value'])){
                        $Req['Contract']['is_has_stock'] = $LastTmpReqVersion['ReqVersion']['is_has_stock']['value'];
                        $g_Contract->save($Req['Contract']);
                    }
                }

                //将Contrac的error_type设置为0
                $Contract = $g_Contract->find('first', array('conditions' => array('Contract.id' => $Req['Req']['rel_obj_id'], 'Contract.error_type' => OCS_CONTRACT_ERROR_TYPE_AUDIT),
                            'fields' => array('Contract.id', 'Contract.error_type')));
                if (!empty($Contract)) {//将"更改单待审核"标志去掉
                    $Contract['Contract']['error_type'] = 0;
                    $g_Contract->save($Contract['Contract']);
                }

                $log_content = '需求更改单#req_version=' . $LastTmpReqVersion['ReqVersion']['id'] . '覆盖原订单需求。';
                $g_Logs->write_log('Reqs', $this->Req->id, 'info', $log_content);

                $this->saveReqVersion($this->Req->id); //保存快照

                $extend_params = array();
                $extend_params['modify_bill_audit'] = 1;
                $this->BatchSyncContractToEbs($this->Req->id, $extend_params); //同步至EBS

                //取消订单行（如有）
                $g_CancelOrderLine->cancelOrderLines($this->Req->id);
            } else {//审核不过，发邮件通知内勤
                $Req['Req']['alter_audit_status'] = OCS_REQ_ALTER_AUDIT_STATUS_FAIL; //关键信息变更-审核不过
                $this->Req->save($Req['Req']);

                //保存审核不过原因
                $g_RelReq->saveRelFields($this->Req->id, array('primary_alter_audit_remark' => $submitData['audit_fail_reason']));

                $log_content = '需求更改单#req_version=' . $LastTmpReqVersion['ReqVersion']['id'] . '审核不过，原因：' . $submitData['audit_fail_reason'];
                $g_Logs->write_log('Reqs', $this->Req->id, 'info', $log_content);

                $User = $g_User->find('first', array(
                    'conditions' => array('User.id' => $Req['Req']['owner_user_id']),
                    'fields' => array('User.id', 'User.email', 'User.realname')
                ));
                $ToUsers = array();
                if (!empty($User)) {
                    $ToUsers[] = $User['User']['email'];
                }
                if (!empty($ToUsers)) {
                    $Options = array();
                    $Options['Email']['ToUsers'] = $ToUsers;
                    $Options['Field']['audit_user'] = $User['User']['realname'];
                    $Options['Field']['name'] = $Req['Req']['name'];
                    $Options['Field']['audit_backforward_reason'] = $submitData['audit_fail_reason'];
                    $g_QueueJobs->AddNoticeJob(array('Email'), Req, $ReqId, 'BackForwardModify', $Options);
                }
            }

            $this->set('saveComplete', 1);
            return;
        }
    }

    //批量审核关键信息变更单
    function pop_batch_audit_modify_bill($req_ids) {
        global $g_Commons;
        global $g_UserId;
        global $g_BizId;
        $g_Users = $g_Commons->GlobalController('Users');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_ReqVersion = $g_Commons->GlobalModel('ReqVersion');
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_ProdOpt = $g_Commons->GlobalModel('ProdOpt');
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdModelDetails = $g_Commons->GlobalController('ProdModelDetails');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_User = $g_Commons->GlobalModel('User');
        $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_Atom = $g_Commons->GlobalModel('Atom');
        $g_ProdOpt = $g_Commons->GlobalModel('ProdOpt');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');
        $g_Patent = $g_Commons->GlobalModel('Patent');
        $g_Account = $g_Commons->GlobalModel('Account');
        $this->Req->recursive = -1;

        $req_ids = explode(',', $req_ids);

        $is_ckd_list = $g_Enum->getEnumListByDictName('Product.is_ckd');
        $this->set('is_ckd_list', $is_ckd_list);

        // //获取专利收费项
        // $patent_fee_items_list = $g_Patent->getAllPatentFeeItemList();

        //获取待审变更单信息
        $last_Tmp_req_versions = array();
        $tmp_sw_attr_atoms = array();
        $tmp_pcb_labels = array();
        $tmp_attr_rel_opts = array();
        $is_ckd_opts = array();
        $tmp_sum_power = array(); //总功率
        foreach ($req_ids as $req_id) {
            //获取订单对应的最新修改版本
            $last_tmp_req_version = $g_ReqVersion->getLastTmpReqVersion(Req, $req_id);
            if (empty($last_tmp_req_version)) {
                $this->set('setFlash', 1);
                $this->Session->setFlash('没有需求更改单req_id='. $req_id .'，无需审核。');
                return;
            }
            $last_tmp_req_version = $g_AttrDics->formatModelData(array($last_tmp_req_version), 'ReqVersion');
            if (!empty($last_tmp_req_version)) {
                $last_tmp_req_version = $last_tmp_req_version[0];
            }

            //专利收费项
            $value = $last_tmp_req_version['ReqVersion']['patent_fee_item_ids'];
            $last_tmp_req_version['ReqVersion']['patent_fee_item_ids'] = array();
            $last_tmp_req_version['ReqVersion']['patent_fee_item_ids']['value'] = $value;
            $values = !empty($value) ? explode(',', $value) : array();
            $patent_rel_atom_ids = array();
            foreach ($values as $value) {
                list($type, $value) = explode(':', $value);
                $patent_rel_atom_ids[$type][] = $value;
            }
            $last_tmp_req_version['ReqVersion']['patent_fee_item_ids']['label'] = $g_Patent->getNamesByPatentTypeRelAtomIds($patent_rel_atom_ids);

            //授权客户
            $value = $last_tmp_req_version['ReqVersion']['auth_account_ids'];
            $last_tmp_req_version['ReqVersion']['auth_account_ids'] = array();
            $last_tmp_req_version['ReqVersion']['auth_account_ids']['value'] = $value;
            $last_tmp_req_version['ReqVersion']['auth_account_ids']['label'] = $g_Patent->getNamesByPatentAccountIdsStr($value);

            $last_Tmp_req_versions[$req_id] = $last_tmp_req_version;

            $tmp_sw_attr_atoms[$req_id] = $this->getSwAttrsAtoms($last_tmp_req_version['ReqVersion']['sw_atom_ids_json']);

            $product = $g_Product->find('first', array('conditions' => array('Product.id' => $last_tmp_req_version['ReqVersion']['product_id']),
                        'fields' => array('Product.id', 'Product.pcb_id', 'Product.prod_opt_ids', 'Product.is_ckd')));
            $is_ckd_opts[$req_id]['new'] = $product['Product']['is_ckd'];
            $prodmodel_detail = $g_ProdModelDetails->findProdModelDetailById($product['Product']['pcb_id']);
            $tmp_pcb_labels[$req_id] = $prodmodel_detail['ProdModelDetail']['pcb_num'] . '(' . $prodmodel_detail['ProdModelDetail']['use_state'] . ')';

            //获取总功率
            $tmp_attr_rel_opts[$req_id] = $g_ProdOpt->getProdAttrRelProdOpts(explode(',', $product['Product']['prod_opt_ids']));
            $power_ids = isset($tmp_attr_rel_opts[$req_id]['RelIds']['HW_PowerType']) ? $tmp_attr_rel_opts[$req_id]['RelIds']['HW_PowerType'] : array();
            if (empty($power_ids)) {
                $power_ids = isset($tmp_attr_rel_opts[$req_id]['RelIds']['HW_Power_Backlight']) ? $tmp_attr_rel_opts[$req_id]['RelIds']['HW_Power_Backlight'] : array();
            }
            $power_atom_ids = $g_ProdOpt->getAtomIdsByIds($power_ids);
            $tmp_sum_power[$req_id] = !empty($power_ids) ? $g_Atom->getPowerBacklightByIds($power_atom_ids) : '';
        }
        $this->set('last_Tmp_req_versions', $last_Tmp_req_versions);
        $this->set('tmp_sw_attr_atoms', $tmp_sw_attr_atoms);
        $this->set('tmp_pcb_labels', $tmp_pcb_labels);
        $this->set('tmp_attr_rel_opts', $tmp_attr_rel_opts);
        $this->set('tmp_sum_power', $tmp_sum_power);

        //获取当前订单相关信息
        $reqs = $this->Req->find('all', array(
            'conditions' => array(
                'Req.id' => $req_ids,
                'Req.alter_audit_status' => OCS_REQ_ALTER_AUDIT_STATUS_NEW,
                'Req.close_status NOT ' => array(OCS_ORDER_CLOSE_STATUS_CLOSE, OCS_ORDER_CLOSE_STATUS_CANCEL),
            ) ,
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ),
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'left',
                    'conditions' => 'RelReq.req_id = Req.id'
                ),
            ) ,
            'fields' => array(
                'Req.id',
                'Req.account_id',
                'Req.product_id',
                'Req.price',
                'Req.foreign_price',
                'Req.quantity',
                'Req.ebs_order_number',
                'Req.currency_id',
                'Req.sw_atom_ids_json',
                'Req.alter_audit_status',
                'Req.close_status',
                'Contract.is_has_stock',
                'Contract.mid_account_id',
                'Contract.ebs_stage',
                'RelReq.patent_fee_item_ids',
                'RelReq.auth_account_ids',
                'RelReq.primary_alter_owner_remark',
            )
        ));
        $sw_attr_atoms = array();
        $pcb_labels = array();
        $attr_rel_opts = array();
        $sum_power = array();
        foreach ($reqs as $req) {
            $req_id = $req['Req']['id'];
            $sw_attr_atoms[$req_id] = $this->getSwAttrsAtoms($req['Req']['sw_atom_ids_json']);

            $product = $g_Product->find('first', array('conditions' => array('Product.id' => $req['Req']['product_id']),
                        'fields' => array('Product.id', 'Product.pcb_id', 'Product.prod_opt_ids', 'Product.is_ckd')));
            $is_ckd_opts[$req_id]['old'] = $product['Product']['is_ckd'];
            $prodmodel_detail = $g_ProdModelDetails->findProdModelDetailById($product['Product']['pcb_id']);
            $pcb_labels[$req_id] = $prodmodel_detail['ProdModelDetail']['pcb_num'] . '(' . $prodmodel_detail['ProdModelDetail']['use_state'] . ')';

            $attr_rel_opts[$req_id] = $g_ProdOpt->getProdAttrRelProdOpts(explode(',', $product['Product']['prod_opt_ids']));

            //总功率
            $power_ids = isset($attr_rel_opts[$req_id]['RelIds']['HW_PowerType']) ? $attr_rel_opts[$req_id]['RelIds']['HW_PowerType'] : array();
            if (empty($power_ids)) {
                $power_ids = isset($attr_rel_opts[$req_id]['RelIds']['HW_Power_Backlight']) ? $attr_rel_opts[$req_id]['RelIds']['HW_Power_Backlight'] : array();
            }
            $power_atom_ids = $g_ProdOpt->getAtomIdsByIds($power_ids);
            $sum_power[$req_id] = !empty($power_ids) ? $g_Atom->getPowerBacklightByIds($power_atom_ids) : '';
        }

        $this->set('is_ckd_opts', $is_ckd_opts);
        $this->set('sum_power', $sum_power);

        $reqs = $g_AttrDics->formatAllModelData($reqs);
        foreach ($reqs as $idx => $req) {
            //专利收费项
            $value = $req['RelReq']['patent_fee_item_ids'];
            $req['RelReq']['patent_fee_item_ids'] = array();
            $req['RelReq']['patent_fee_item_ids']['value'] = $value;
            $values = !empty($value) ? explode(',', $value) : array();
            $patent_rel_atom_ids = array();
            foreach ($values as $value) {
                list($type, $value) = explode(':', $value);
                $patent_rel_atom_ids[$type][] = $value;
            }
            $req['RelReq']['patent_fee_item_ids']['label'] = $g_Patent->getNamesByPatentTypeRelAtomIds($patent_rel_atom_ids);

            //授权客户
            $value = $req['RelReq']['auth_account_ids'];
            $req['RelReq']['auth_account_ids'] = array();
            $req['RelReq']['auth_account_ids']['value'] = $value;
            $req['RelReq']['auth_account_ids']['label'] = $g_Patent->getNamesByPatentAccountIdsStr($value);

            $reqs[$idx] = $req;
        }
        $this->set('reqs', $reqs);

        $this->set('sw_attr_atoms', $sw_attr_atoms);
        $this->set('pcb_labels', $pcb_labels);
        $this->set('attr_rel_opts', $attr_rel_opts);

        //根据不同事业部，显示自定义的软件、硬件属性字段
        $display_sw_attrs = array();
        switch ($g_BizId) {
            case OCS_BIZ_TYPE_TV:
                $display_sw_attrs = array(
                    'SW_Authorization' => '牌照',
                    'SW_Browser' => '浏览器',
                    'SW_Appstore' => '应用商店',
                    'SW_OSsystem' => 'OS系统',
                    'SW_OtherApplicationSoftware' => '其它应用软件',
                );
            break;
            case OCS_BIZ_TYPE_STB:
                $display_sw_attrs = array(
                    'SW_STB_Appstore' => '应用商店',
                    'SW_STB_OtherApplicationSoftware' => '其它应用软件',
                );
            break;
            case OCS_BIZ_TYPE_SCS:
                $display_sw_attrs = array(
                    'SW_SCS_Authorization' => '牌照',
                    'SW_SCS_Browser' => '浏览器',
                    'SW_SCS_Appstore' => '应用商店',
                    'SW_SCS_OSsystem' => 'OS系统',
                    'SW_SCS_OtherApplicationSoftware' => '其它应用软件',
                );
            break;
            default:
            break;
        }
        $this->set('display_sw_attrs', $display_sw_attrs);

        //获取其他属性影响变更单的功能元
        $g_RelAtom = $g_Commons->GlobalModel('RelAtom');
        $g_Atom = $g_Commons->GlobalModel('Atom');
        $hw_change_attr_alias = array();
        $sw_change_attr_alias = array();
        foreach ($reqs as $req) {
            $req_id = $req['Req']['id'];
            if (!isset($last_Tmp_req_versions[$req_id])) {
                continue;
            }

            //硬件属性
            $old_product_id = is_array($req['Req']['product_id']) ? $req['Req']['product_id']['value'] : $req['Req']['product_id'];
            $new_product_id = is_array($last_Tmp_req_versions[$req_id]['ReqVersion']['product_id']) ? $last_Tmp_req_versions[$req_id]['ReqVersion']['product_id']['value'] : $last_Tmp_req_versions[$req_id]['ReqVersion']['product_id'];
            if ($old_product_id != $new_product_id) {
                //获取变更的功能元
                $old_prod_rel_atom_ids = $g_Product->getAtomIdsByProductId($old_product_id);
                $new_prod_rel_atom_ids = $g_Product->getAtomIdsByProductId($new_product_id);
                $del_atom_ids = array_diff($old_prod_rel_atom_ids, $new_prod_rel_atom_ids);
                $add_atom_ids = array_diff($new_prod_rel_atom_ids, $old_prod_rel_atom_ids);

                //获取影响关键信息变更单的功能元
                $del_atoms = $g_RelAtom->getAffectPrimaryBillAtomsByAtomIds($del_atom_ids);
                $add_atoms = $g_RelAtom->getAffectPrimaryBillAtomsByAtomIds($add_atom_ids);
                if (!empty($del_atoms) || !empty($add_atoms)) { //说明变更的功能元是影响价格的
                    $del_label = !empty($del_atoms) ? implode('；', $del_atoms) : '';
                    $add_label = !empty($add_atoms) ? implode('；', $add_atoms) : '';
                    // $log_content = '硬件属性变更，影响变更单功能元 去除：' . $del_label . '，新增：' . $add_label;

                    //记录变更属性别名
                    $change_atom_ids = array_merge(array_keys($del_atoms), array_keys($add_atoms));
                    $hw_change_attr_alias[$req_id] = $g_Atom->getProdAttrAliasByIds($change_atom_ids);
                }
            }

            //处理软件属性功能元的变更
            $old_sw_atom_ids_json = isset($req['Req']['sw_atom_ids_json']) ? json_decode($req['Req']['sw_atom_ids_json'], true) : array();
            $new_sw_atom_ids_json = isset($last_Tmp_req_versions[$req_id]['ReqVersion']['sw_atom_ids_json']) ? json_decode($last_Tmp_req_versions[$req_id]['ReqVersion']['sw_atom_ids_json'], true) : array();
            $old_sw_atom_ids = array();
            $new_sw_atom_ids = array();
            foreach ($old_sw_atom_ids_json as $atom_ids) {
                $old_sw_atom_ids = array_merge($old_sw_atom_ids, $atom_ids);
            }
            foreach ($new_sw_atom_ids_json as $atom_ids) {
                $new_sw_atom_ids = array_merge($new_sw_atom_ids, $atom_ids);
            }

            $del_atom_ids = array_diff($old_sw_atom_ids, $new_sw_atom_ids);
            $add_atom_ids = array_diff($new_sw_atom_ids, $old_sw_atom_ids);

            //获取影响关键信息变更单的功能元
            $del_atoms = $g_RelAtom->getAffectPrimaryBillAtomsByAtomIds($del_atom_ids);
            $add_atoms = $g_RelAtom->getAffectPrimaryBillAtomsByAtomIds($add_atom_ids);
            if (!empty($del_atoms) || !empty($add_atoms)) { //说明变更的功能元是影响价格的
                $del_label = !empty($del_atoms) ? implode('；', $del_atoms) : '';
                $add_label = !empty($add_atoms) ? implode('；', $add_atoms) : '';

                //记录变更属性别名
                $change_atom_ids = array_merge(array_keys($del_atoms), array_keys($add_atoms));
                $sw_change_attr_alias[$req_id] = $g_Atom->getProdAttrAliasByIds($change_atom_ids);
            }
        }
        $this->set('hw_change_attr_alias', $hw_change_attr_alias);
        $this->set('sw_change_attr_alias', $sw_change_attr_alias);

        //属性别名rel名称
        $prod_attr_alias_rel_name_list = $g_ProdAttr->find('list', array(
            'conditions' => array(
                // 'ProdAttr.biz_id' => $g_BizId,
            ),
            'fields' => array(
                'ProdAttr.alias',
                'ProdAttr.name',
            )
        ));
        $this->set('prod_attr_alias_rel_name_list', $prod_attr_alias_rel_name_list);
    }

    //审核关键信息变更单
    function audit_primary_info_bill_json() {
        $this->autoRender = false;
        global $g_Commons;
        global $g_BizId;
        global $g_UserId;
        $g_TodoWork = $g_Commons->GlobalModel('TodoWork');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_ReqVersion = $g_Commons->GlobalModel('ReqVersion');
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Atoms = $g_Commons->GlobalController('Atoms');
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_Contract->recursive = - 1;
        $g_ProdAttrs->ProdAttr->recursive = - 1;
        $g_Atoms->Atom->recursive = - 1;
        $g_Account->recursive = - 1;
        $g_Product->recursive = - 1;
        $result = $g_Commons->initResult();

        if (!empty($_POST) && !empty($_POST['datas'])) {
            $params = $_POST['datas'];
            $error_cnt = 0;
            $error_msgs = array();
            foreach ($params as $param) {
                $req_id = $param['req_id'];
                $audit_result = $param['audit_result'];
                $audit_fail_reason = isset($param['audit_fail_reason']) ? $param['audit_fail_reason'] : '';


                $approval_users = $g_ObjRelObj->getCommonApprovalUsersByAlias(Req, 'CONTRACT_APPROVAL');
                $is_can_audit_contract = isset($approval_users['user_ids'][$g_UserId]) && !empty($approval_users['user_ids'][$g_UserId]) ? true : false;

                //无权限审核
                if (!($g_RolePrivs->get_priv_level('Reqs', 'can_view_all_primary_info_bill') && $is_can_audit_contract) ) {
                    $result['success'] = false;
                    $result['message'] = '抱歉，你无权审核关键信息变更单';
                    echo json_encode($result);
                    return;
                }


                if (empty($req_id)) {
                    $result['success'] = false;
                    $result['message'] = 'req_id can not be null.';
                    echo json_encode($result);
                    return;
                }
                $req = $this->Req->find('first', array(
                    'conditions' => array(
                        'Req.id' => $req_id
                    ) ,
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                        array(
                            'table' => 'rel_reqs',
                            'alias' => 'RelReq',
                            'type' => 'left',
                            'conditions' => 'RelReq.req_id = Req.id'
                        ),
                    ) ,
                    'fields' => array(
                        'Req.*',
                        'Contract.*',
                        'RelReq.*',
                    )
                ));
                if (empty($req)) {
                    $error_cnt++;
                    $error_msgs[$req_id] = 'empty req';
                    continue;
                }
                if (OCS_REQ_ALTER_AUDIT_STATUS_NEW != $req['Req']['alter_audit_status']) {
                    $error_cnt++;
                    $error_msgs[$req_id] = '此变更单已经审核过，无需再审核';
                    continue;
                }
                $last_tmp_req_version = $g_ReqVersion->getLastTmpReqVersion(Req, $req_id);

                if (empty($last_tmp_req_version)) {
                    $error_cnt++;
                    $error_msgs[$req_id] = 'empty last_tmp_req_version';
                    continue;
                }

                if (1 == $audit_result) { //审核通过，覆盖原来订单的相关信息

                    if ($last_tmp_req_version['ReqVersion']['product_id'] > 0) {
                        $req['Req']['product_id'] = $last_tmp_req_version['ReqVersion']['product_id'];
                    }
                    $product = $g_Product->find('first', array(
                        'conditions' => array(
                            'Product.id' => $req['Req']['product_id']
                        ) ,
                        'joins' => array(
                            array(
                                'table' => 'prod_models',
                                'alias' => 'ProdModel',
                                'type' => 'left',
                                'conditions' => 'ProdModel.id = Product.prod_model_id'
                            )
                        ) ,
                        'fields' => array(
                            'Product.id',
                            'Product.name',
                            'ProdModel.id',
                            'ProdModel.name'
                        )
                    ));
                    //处理数量、单价
                    $req['Req']['price'] = $last_tmp_req_version['ReqVersion']['price'];
                    $req['Req']['quantity'] = $last_tmp_req_version['ReqVersion']['quantity'];
                    $req['Req']['amount'] = round($req['Req']['price'] * $req['Req']['quantity'], 4);

                    //OCS-750 处理第三方付款平台和收单地址 add by ziying
                    $old_mid_account_id = $req['Contract']['mid_account_id'];
                    $req['Contract']['mid_account_id'] = $last_tmp_req_version['ReqVersion']['mid_account_id'];
                    $req['Contract']['bill_site_use_id'] = $last_tmp_req_version['ReqVersion']['bill_site_use_id'];

                    //记录关键信息变更单，是否有修改第三方付款平台
                    $is_has_modify_mid_account = $old_mid_account_id != $last_tmp_req_version['ReqVersion']['mid_account_id'] ? true : false;

                    if ($req['Req']['currency_id'] == OCS_CURRENCY_USD && !empty($last_tmp_req_version['ReqVersion']['foreign_price'])) {
                        $req['Req']['foreign_price'] = $last_tmp_req_version['ReqVersion']['foreign_price'];
                        $req['Req']['foreign_amount'] = $req['Req']['foreign_price'] * $last_tmp_req_version['ReqVersion']['quantity'];
                        $req['Req']['price'] = $last_tmp_req_version['ReqVersion']['foreign_price'] * $req['Req']['exchange_ratio']; //转成人民币
                        $req['Req']['amount'] = round($req['Req']['foreign_amount'] * $req['Req']['exchange_ratio'], 4);
                    }
                    //生成订单主题
                    $name = explode('-', $req['Req']['name']);
                    $name_date = $name[1];
                    $account = $g_Account->find('first', array(
                        'conditions' => array(
                            'Account.id' => $req['Req']['account_id']
                        ) ,
                        'fields' => array(
                            'Account.id',
                            'Account.short_name'
                        )
                    ));
                    $req['Req']['name'] = $account['Account']['short_name'] . '-' . $name_date . '-' . $product['ProdModel']['name'] . '-' . $req['Req']['quantity'];
                    //不覆盖原来的其他属性
                    $all_extend_atom_ids = $g_Atoms->Atom->find('list', array(
                        'conditions' => array(
                            'Atom.name' => $g_Atoms->ExtendSwAtomNames
                        ) ,
                        'fields' => array(
                            'Atom.id'
                        )
                    ));
                    $sw_prod_attr = $g_ProdAttrs->getSeriesSWAdvanceAttr(0); // 暂时hardcode,新产品无系列配置
                    $sw_prod_attr_list = array();
                    foreach ($sw_prod_attr as $one) {
                        $sw_prod_attr_list[] = $one['id'];
                    }
                    $sw_atom = $this->fixSwAtomData($req['Req']['sw_atom_ids_json'], $last_tmp_req_version['ReqVersion']['sw_atom_ids_json'], json_decode($last_tmp_req_version['ReqVersion']['extend_sw_atom_ids'], true) , $all_extend_atom_ids, $sw_prod_attr_list);
                    $req['Req']['sw_atom_ids'] = '0,' . $sw_atom['sw_atom_ids'] . ',0';
                    $req['Req']['sw_atom_ids_json'] = $sw_atom['sw_atom_ids_json'];
                    $req['Req']['alter_audit_status'] = OCS_REQ_ALTER_AUDIT_STATUS_PASS; //关键信息变更-审核通过

                    //添加关键信息变更记录，统计待办
                    $type_value = $g_Enum->getEnumValueByNameAndAlias('TodoWork.type', 'contract');
                    $task_value = $g_Enum->getEnumValueByNameAndAlias('TodoWork.task', 'contract_audit_change');
                    $todo_new = array(
                        'model_id' => Req,
                        'obj_id' => $req['Req']['id'],
                        'type' => $type_value,
                        'task' => $task_value,
                        'owner_user_id' => isset($req['Req']['owner_user_id']) ? $req['Req']['owner_user_id'] : 0,
                    );
                    $g_TodoWork->addTodoWorkEnd($todo_new);
                    $todo_new['task'] = $task_value = $g_Enum->getEnumValueByNameAndAlias('TodoWork.task', 'contract_sign_back');
                    $g_TodoWork->addTodoWorkBegin($todo_new);

                    $check_data = array();
                    $check_data = $req;
                    $check_data['SwAtom'] = json_decode($req['Req']['sw_atom_ids_json'], true);

                    $temp_result = $this->Req->CheckPrimaryInfos($check_data, $req['Req']['id']); //检查是否有改变关键信息

                    if (!$temp_result['success']) {
                        //关键信息变更，如合同已审，则需重新审核
                        $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
                        if (!empty($temp_result['datas'])) { //当这些信息变更时，才打回
                            $contract_key_fields = array('price', 'quantity', 'account_id', 'mid_account_id', 'HW_ChipSeries', 'pcb_version');
                            $intersect = array_intersect($temp_result['datas'], $contract_key_fields);

                            if (!empty($intersect)) {
                                $reason = '变更 ' . implode(',', $intersect) . '合同自动打回重新审。';
                                $g_Logs->write_log('Reqs', $req['Req']['id'], 'info', $reason);
                                $g_ContractRelTmpl->resetContractAuditByReqIds($req['Req']['id'], $reason);
                            }
                        }
                    }
                    //非TV
                    if (OCS_BIZ_TYPE_TV != $g_BizId) {
                        if (isset($last_tmp_req_version['ReqVersion']['is_has_stock'])) {
                            $req['Contract']['is_has_stock'] = $last_tmp_req_version['ReqVersion']['is_has_stock'];
                        }
                        if (isset($last_tmp_req_version['ReqVersion']['mid_account_id'])) {
                            $req['Contract']['mid_account_id'] = $last_tmp_req_version['ReqVersion']['mid_account_id'];
                            $req['Contract']['bill_site_use_id'] = $last_tmp_req_version['ReqVersion']['bill_site_use_id'];
                        }
                    }

                    $this->Req->save($req['Req']);
                    $g_Contract->save($req['Contract']);
                    $req_id = $this->Req->id;

                    //保存订单关联字段
                    $rel_req_fields = array(
                        'primary_alter_audit_remark' => '', //清空审核不过原因
                        'patent_fee_item_ids' => !empty($last_tmp_req_version['ReqVersion']['patent_fee_item_ids']) ? $last_tmp_req_version['ReqVersion']['patent_fee_item_ids'] : 0,
                        'auth_account_ids' => !empty($last_tmp_req_version['ReqVersion']['auth_account_ids']) ? $last_tmp_req_version['ReqVersion']['auth_account_ids'] : 0,
                    );
                    $g_RelReq->saveRelFields($this->Req->id, $rel_req_fields);

                    if ($is_has_modify_mid_account) { //变更第三方
                        $po_result = $this->Req->processAlterMidAccountNewLines($this->Req->id);
                        if (!$po_result['success']) {
                            $g_Logs->write_log('Reqs', $this->Req->id, 'info', $po_result['message']);
                        }
                    }

                    //将Contract的error_type设置为0
                    $contract = $g_Contract->find('first', array(
                        'conditions' => array(
                            'Contract.id' => $req['Req']['rel_obj_id'],
                            'Contract.error_type' => OCS_CONTRACT_ERROR_TYPE_AUDIT
                        ) ,
                        'fields' => array(
                            'Contract.id',
                            'Contract.error_type'
                        )
                    ));

                    if (!empty($contract)) { //将"更改单待审核"标志去掉
                        $contract['Contract']['error_type'] = 0;
                        $g_Contract->save($contract['Contract']);
                    }
                    $log_content = '需求更改单#req_version=' . $last_tmp_req_version['ReqVersion']['id'] . '覆盖原订单需求。';
                    $g_Logs->write_log('Reqs', $this->Req->id, 'info', $log_content);
                    $this->saveReqVersion($this->Req->id); //保存快照
                    $extend_params = array();
                    $extend_params['modify_bill_audit'] = 1;
                    $this->BatchSyncContractToEbs($this->Req->id, $extend_params); //同步至EBS

                    // //保存产品库存信息
                    // $product_stock_info = $this->Req->getProductStockInfoByReqId($req_id);
                    // $rel_fields = array();
                    // $rel_fields['product_available_qty'] = isset($product_stock_info['product_available_qty']) ? $product_stock_info['product_available_qty'] : 0;
                    // $rel_fields['prod_model_available_qty'] = isset($product_stock_info['prod_model_available_qty']) ? $product_stock_info['prod_model_available_qty'] : 0;
                    // $g_RelReq->saveRelFields($req_id, $rel_fields);

                    //将配料清单状态设置为等审变更
                    $g_CkdOrderSet = $g_Commons->GlobalModel('CkdOrderSet');
                    $ckd_order_set_status = $g_CkdOrderSet->getFieldByContractNo($req['Contract']['contract_no'], 'status');
                    if (OCS_CKD_ORDER_SET_STATUS_SYNC == $ckd_order_set_status) { //配料清单已经传EBS，变更将状态设置为“变更待审”
                        $g_CkdOrderSet->setStatus($req['Contract']['contract_no'], OCS_CKD_ORDER_SET_STATUS_MODIFY);
                    }
                } else { //审核不过，发邮件通知内勤
                    $req['Req']['alter_audit_status'] = OCS_REQ_ALTER_AUDIT_STATUS_FAIL; //关键信息变更-审核不过
                    $this->Req->save($req['Req']);


                    $log_content = '需求更改单#req_version=' . $last_tmp_req_version['ReqVersion']['id'] . '审核不过，原因：' . $audit_fail_reason;
                    $g_Logs->write_log('Reqs', $this->Req->id, 'info', $log_content);

                    //保存审核不过原因
                    $g_RelReq->saveRelFields($this->Req->id, array('primary_alter_audit_remark' => $audit_fail_reason));

                    $g_User = $g_Commons->GlobalModel('User');
                    $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
                    $g_User->recursive = - 1;
                    $user = $g_User->find('first', array(
                        'conditions' => array(
                            'User.id' => $req['Req']['owner_user_id']
                        ) ,
                        'fields' => array(
                            'User.id',
                            'User.email',
                            'User.realname'
                        )
                    ));
                    $to_users = array();

                    if (!empty($user)) {
                        $to_users[] = $user['User']['email'];
                    }

                    if (!empty($to_users)) {
                        $Options = array();
                        $Options['Email']['ToUsers'] = $to_users;
                        $Options['Field']['audit_user'] = $user['User']['realname'];
                        $Options['Field']['name'] = $req['Req']['name'];
                        $Options['Field']['audit_backforward_reason'] = $audit_fail_reason;
                        $g_QueueJobs->AddNoticeJob(array(
                            'Email'
                        ) , Req, $this->Req->id, 'BackForwardModify', $Options);
                    }
                }
            }
            if (0 == $error_cnt) {
                $result['success'] = true;
            } else {
                $result['success'] = false;
                $result['message'] = '至少有一个单审核失败';
                $result['datas'] = $error_msgs;
            }
            echo json_encode($result);
            return;
        } else {
            $result['success'] = false;
            $result['message'] = 'error params.';
            echo json_encode($result);
            return;
        }
    }

    /**
     * 取消关键信息变更单
     *
     * @Author   lishirong
     *
     * @DateTime 2016-03-08T19:37:30+0800
     *
     * @param    [type]                   $req_id [订单req id]
     *
     * @return   [type]                           [description]
     */
    function cancel_primary_alter_bill($req_id = null) {
        $this->autoRender = false;
        global $g_Commons;
        $result = $g_Commons->initResult();
        if (empty($req_id)) {
            $result['message'] = '';
            echo json_encode($result);
            return;
        }
        $g_Req = $g_Commons->GlobalModel('Req');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_Logs = $g_Commons->GlobalController('Logs');

        $req = $g_Req->find('first', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ),
            ),
            'conditions' => array(
                'Req.id' => $req_id,
            ),
            'fields' => array(
                'Req.id',
                'Req.alter_audit_status',
                'Contract.id',
                'Contract.error_type',
            )
        ));
        if (empty($req)) {
            $result['message'] = '订单不存在 req_id= ' . $req_id;
            echo json_encode($result);
            return;
        }
        if (empty($req['Req']['alter_audit_status'])) {
            $result['message'] = '关键信息变更单状态 无需处理，请刷新界面';
            echo json_encode($result);
            return;
        }
        $alter_audit_status = $req['Req']['alter_audit_status'];
        $req['Req']['alter_audit_status'] = 0;
        $g_Req->save($req['Req']);

        //将error_type设置为0
        $error_type = $req['Contract']['error_type'];
        $req['Contract']['error_type'] = 0;
        $g_Contract->save($req['Contract']);

        //write log
        $g_Logs->write_log('Reqs', $req_id, 'info', '作废关键信息变更单，清空状态：' . $g_Enum->getLabelByDictNameAndValue('Req.alter_audit_status', $alter_audit_status));
        $g_Logs->write_log('Reqs', $req_id, 'info', '作废关键信息变更单，清空error_type字段：' . $g_Enum->getLabelByDictNameAndValue('Contract.error_type', $error_type));

        //同步订单
        $this->SyncContractToEBSByReqId($req_id, 1, 'SCHEDULE');

        $result['success'] = true;
        echo json_encode($result);
        return;
    }

    //设置订单为备料OR正式字段
    function setSemiBomReq($ReqIds = array()) {
        $start = microtime(1);
        $log_file = 'cache/attach/crontab.txt';
        file_put_contents($log_file, date('Y-m-d H:i:s') . " : setSemiBomReq start \r\n", FILE_APPEND);

        $this->autoRender = false;
        set_time_limit(600);
        global $g_Commons;
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $g_Products->Product->recursive = - 1;
        $this->Req->recursive = - 1;
        $result = array();
        //ebs_stage >= 3-提交下采购
        $conds = array(
            'Req.is_semi' => 0,
            'Contract.ebs_stage >= 10',
            'Req.dest_type' => 'EBS',
            'Req.req_type not' => array(
                OCS_REQ_TYPE_MATERIAL,
                OCS_REQ_TYPE_SKD
            )
        );
        $s_conds = array();
        $s_conds[] = "(Product.bom_name = '初始' OR Product.bom_name = '?'
                OR Product.bom_name = '' OR Product.bom_name IS NULL OR Product.bom_name LIKE '%无BOM%')"; //产品无BOM
        // $s_conds[] = "(Product.agile_latest_version IS NULL OR Product.agile_latest_version = '' OR Product.agile_latest_version = '0' OR Product.agile_latest_version = '初始')";
        $s_conds[] = "( (Product.agile_latest_version NOT REGEXP '^[0-9]+$' OR Product.agile_latest_version IS NULL) AND (Product.semi_agile_latest_version NOT REGEXP '^[0-9]+$' OR Product.semi_agile_latest_version IS NULL))"; //无BOM
        $s_conds = implode(' AND ', $s_conds);

        $s_conds = "((" . $s_conds . ") OR (Product.agile_status = '改板'))"; //无BOM 或者 改板

        $conds[] = $s_conds;

        //如果有指定，则只设置指定的
        if (!empty($ReqIds)) {

            if (!is_array($ReqIds) && $ReqIds > 0) {
                $ReqIds = array(
                    $ReqIds
                );
            }
            $conds['Req.id'] = $ReqIds;
        }
        $Reqs = $this->Req->find('all', array(
            'conditions' => $conds,
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'left',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ) ,
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'left',
                    'conditions' => 'Product.id = Req.product_id'
                ) ,
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'LEFT',
                    'conditions' => 'Req.id = RelReq.req_id'
                ),
            ) ,
            'fields' => array(
                'Req.id',
                'Req.is_semi',
                'Req.is_mf',
                'RelReq.id',
                'RelReq.req_id',
                'RelReq.semi_bom_code',
                'Product.id',
                'Product.semi_bom_code',
                'Product.bom_name',
                'Product.semi_bom_version',
                'Product.agile_status',
                'Req.bom_assign_time',
                'Req.semi_bom_assign_time'
            )
        ));
        $ProductIds = array();

        if (!empty($Reqs)) {
            foreach ($Reqs as $Req) {
                $bom_v = (int)$Req['Product']['bom_name'];

                if ($bom_v <= 0 || empty($bom_v)) {
                    $ProductIds[] = $Req['Product']['id'];
                }
            }
            //有确认书的订单
            $tmp_conds = array();
            $str = "(Req.audit_stage=" . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE . " OR (
                        Attachment.is_delete = 0
                        and Attachment.is_lock = 0
                        and Attachment.attach_type IN(" . OCS_ATTACH_TYPE_CONFIRMATION . "," . OCS_ATTACH_TYPE_CONFIRMATION_UNSIGNED . ")
                        and Attachment.rel_attachment_id = 0
                    ))"; //判断是否有确认书
            $tmp_conds[] = $str;
            $tmp_joins = array();
            $tmp_joins[] = array(
                'table' => 'attachments',
                'alias' => 'Attachment',
                'type' => 'left',
                'conditions' => "Attachment.obj_id=Req.id and Attachment.model_def_id=" . Req
            );
            $HadCfmReqIds = $this->Req->find('list', array(
                'conditions' => $tmp_conds,
                'joins' => $tmp_joins,
                'fields' => array(
                    'Req.id'
                )
            ));
            //从PLM同步BOM
            $ProductIds = array_unique($ProductIds);
            $ProductList = $g_Products->SyncProductAgileStatus($ProductIds);
            $g_ActionRecords = $g_Commons->GlobalController('ActionRecords');
            //设置备料订单
            foreach ($Reqs as $Req) {
                $ProductId = $Req['Product']['id'];
                $bom_v = (int)$Req['Product']['bom_name'];
                $semi_bom_v = (int)$Req['Product']['semi_bom_version'];

                if (isset($ProductList[$ProductId])) {
                    $bom_v = (int)$ProductList[$ProductId]['Product']['bom_name'];
                    $semi_bom_v = (int)$ProductList[$ProductId]['Product']['semi_bom_version'];
                }

                // if (in_array($Req['Req']['id'], $HadCfmReqIds) && $Req['Req']['is_mf'] == 0) { //有确认书
                //     $g_ActionRecords->ActionRecord->create('Req.is_mf.Begin.' . $Req['Req']['is_mf'], Req, $Req['Req']['id']);
                //     $g_ActionRecords->ActionRecord->create('Req.bom_assign_time.Begin.' . $Req['Req']['bom_assign_time'], Req, $Req['Req']['id']);
                //     $Req['Req']['is_mf'] = OCS_REQ_MF_NEW;

                //     if (empty($Req['Req']['bom_assign_time'])) {
                //         $Req['Req']['bom_assign_time'] = date('Y-m-d H:i:s');
                //     }
                //     $this->Req->save($Req['Req']);
                //     $log_content = '设置订单BOM任务为 #正式BOM订单';
                //     $g_Logs->write_log('Reqs', $this->Req->id, 'info', $log_content);
                //     $g_ActionRecords->ActionRecord->create('Req.is_mf.End.' . $Req['Req']['is_mf'], Req, $Req['Req']['id']);
                //     $g_ActionRecords->ActionRecord->create('Req.bom_assign_time.End.' . $Req['Req']['bom_assign_time'], Req, $Req['Req']['id']);
                //     $g_MfPlanBill->getMfPlanBillInfo($Req['Req']['id']); //如果没有则创建

                // } else { //无确认书

                // }

                //无正式BOM
                //备料BOM编码及任务产生时机需要优化
                //如果没有备料BOM编码，则先产生备料BOM编码。
                //再判断是否有备料BOM，如果有，则无需产生备料BOM任务；如果没有，再产生备料BOM任务。
                //改变方法，此方法备用，不要删除
                $auto_create_semi = false;
                if ($auto_create_semi && ($bom_v <= 0 || empty($bom_v))) {
                    if (empty($Req['Product']['semi_bom_code'])) {
                        $create_semi_result = $g_RelReq->createSemiBomByReqId($Req['Req']['id']);
                        if (empty($create_semi_result)) {
                            continue;
                        }
                    } else {
                        if ($Req['RelReq']['semi_bom_code'] != $Req['Product']['semi_bom_code']) {
                            $Req['RelReq']['semi_bom_code'] = $Req['Product']['semi_bom_code'];
                            if (empty($Req['RelReq']['req_id'])) {
                                $Req['RelReq']['req_id'] = $Req['Req']['id'];
                            }
                            $g_RelReq->save($Req['RelReq']);
                        }
                    }
                    if ($semi_bom_v > 0) {
                        continue;
                    }
                }

                //不管是否有确认书，都设置备料BOM任务，只要产品无BOM

                if ($bom_v <= 0 || empty($bom_v)) { //无BOM
                    $g_ActionRecords->ActionRecord->create('Req.is_semi.Begin.' . $Req['Req']['is_semi'], Req, $Req['Req']['id']);
                    $g_ActionRecords->ActionRecord->create('Req.semi_bom_assign_time.Begin.' . $Req['Req']['semi_bom_assign_time'], Req, $Req['Req']['id']);
                    $Req['Req']['is_semi'] = OCS_REQ_SEMI_NEW;

                    // if (empty($Req['Req']['semi_bom_assign_time'])) {
                    //     $Req['Req']['semi_bom_assign_time'] = date('Y-m-d H:i:s');
                    // }
                    $Req['Req']['semi_bom_assign_time'] = date('Y-m-d H:i:s');
                    $this->Req->save($Req['Req']);
                    $g_ActionRecords->ActionRecord->create('Req.is_semi.End.' . $Req['Req']['is_semi'], Req, $Req['Req']['id']);
                    $g_ActionRecords->ActionRecord->create('Req.semi_bom_assign_time.End.' . $Req['Req']['semi_bom_assign_time'], Req, $Req['Req']['id']);
                    $result[] = $this->Req->id;
                    $log_content = '设置订单BOM任务为 #备料BOM订单';
                    $g_Logs->write_log('Reqs', $this->Req->id, 'info', $log_content);
                    $g_MfPlanBill->getMfPlanBillInfo($Req['Req']['id']); //如果没有则创建

                }
            }
        }

        $end = microtime(1);
        file_put_contents($log_file, date('Y-m-d H:i:s') . " : setSemiBomReq end : ".($end-$start)." \r\n", FILE_APPEND);

        return;
        // return $result;
    }

    //设置正式BOM任务订单
    function setMfBomReq($ReqIds = array()) {
        $start = microtime(1);
        $log_file = 'cache/attach/crontab.txt';
        file_put_contents($log_file, date('Y-m-d H:i:s') . " : setMfBomReq start \r\n", FILE_APPEND);

        $this->autoRender = false;
        set_time_limit(600);
        global $g_Commons;
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_ActionRecord = $g_Commons->GlobalModel('ActionRecord');
        $this->Req->recursive = -1;

        //ebs_stage >= 4-已审采购-提交下生产
        //'Contract.ebs_stage >= 20',
        $conds = array('Req.is_mf' => 0, 'Req.dest_type' => 'EBS', 'Req.req_type not' => $this->Req->getDefMtlTypes());
        //有确认书的订单
        $str = "(Req.audit_stage=" . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE . " OR (
            Attachment.is_delete = 0
            and Attachment.is_lock = 0
            and Attachment.attach_type IN(" . OCS_ATTACH_TYPE_CONFIRMATION . "," . OCS_ATTACH_TYPE_CONFIRMATION_UNSIGNED . ")
            and Attachment.rel_attachment_id = 0
        ))"; //判断是否有确认书
        $conds[] = $str;
        $conds[] = "(Contract.is_has_stock IS NULL OR Contract.is_has_stock = 0)";
        $conds[] = "Req.parent_id = 0";

        //如果有指定，则只设置指定的
        if (!empty($ReqIds)) {
            if (!is_array($ReqIds) && $ReqIds > 0) {
                $ReqIds = array($ReqIds);
            }
            $conds['Req.id'] = $ReqIds;
        }

        $Reqs = $this->Req->find('all', array('conditions' => $conds,
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'left',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ),
                array(
                    'table' => 'attachments',
                    'alias' => 'Attachment',
                    'type' => 'left',
                    'conditions' => "Attachment.obj_id=Req.id and Attachment.model_def_id=" . Req
                ),
                // array(
                //     'table' => 'products',
                //     'alias' => 'Product',
                //     'type' => 'inner',
                //     'conditions' => 'Product.id = Req.product_id'
                // ),
            ),
            'fields' => array('Req.id', 'Req.is_mf', 'Req.bom_assign_time', 'Req.semi_bom_assign_time', 'Req.product_id'),
            'order' => ''
        ));

        if (!empty($Reqs)) {
            $product_ids = array();
            foreach ($Reqs as $Req) {
                $product_ids[] = $Req['Req']['product_id'];
            }

            $g_Product = $g_Commons->GlobalModel('Product');
            $prod_code_list = $g_Product->find('list', array(
                'conditions' => array(
                    'Product.id' => $product_ids
                ),
                'fields' => 'Product.id, Product.code'
            ));

            foreach ($Reqs as $Req) {
                if (!empty($prod_code_list[$Req['Req']['product_id']]) && preg_match('/^(001\.901\.).*/', $prod_code_list[$Req['Req']['product_id']])) {
                    continue;
                }
                $g_ActionRecord->create('Req.is_mf.Begin.' . $Req['Req']['is_mf'], Req, $Req['Req']['id']);
                $g_ActionRecord->create('Req.bom_assign_time.Begin.' . $Req['Req']['bom_assign_time'], Req, $Req['Req']['id']);
                $Req['Req']['is_mf'] = OCS_REQ_MF_NEW; //标记为正式BOM订单
                if (empty($Req['Req']['bom_assign_time'])) {
                    $Req['Req']['bom_assign_time'] = date('Y-m-d H:i:s');
                }
                $this->Req->save($Req['Req']);
                $g_ActionRecord->create('Req.is_mf.End.' . $Req['Req']['is_mf'], Req, $Req['Req']['id']);
                $g_ActionRecord->create('Req.bom_assign_time.End.' . $Req['Req']['bom_assign_time'], Req, $Req['Req']['id']);
                $log_content = '设置订单BOM任务为 #正式BOM订单';
                $g_Logs->write_log('Reqs', $this->Req->id, 'info', $log_content);

                $g_MfPlanBill->getMfPlanBillInfo($Req['Req']['id']); //如果没有则创建
                $g_MfPlanBill->autoAssignBomAudit($Req['Req']['id']);//自动分派审核人
            }
        }

        $end = microtime(1);
        file_put_contents($log_file, date('Y-m-d H:i:s') . " : setMfBomReq end : ".($end-$start)." \r\n", FILE_APPEND);

        return !empty($Reqs) ? $Reqs : null;
    }

    function auto_set_bom_task_json() {
        global $g_Commons;
        $this->autoRender = false;
        $result = $g_Commons->initResult();

        $this->setMfBomReq();
        $this->setSemiBomReq();

        $result['success'] = true;
        echo json_encode($result);
        exit;
    }

    function release_one_mark_json($id) {
        global $g_Commons;
        $this->autoRender = false;
        $result = $g_Commons->initResult();

        $contract_model = $g_Commons->GlobalModel('Contract');
        $Contract = array();
        $Contract['id'] = $id;
        $Contract['is_shipping_mark'] = 1;

        if ($contract_model->save($Contract)) {
            $result['success'] = true;
        } else {
            $result['success'] = false;
        }
        echo json_encode($result);
        exit;
    }

    function sync_error_faq($ReqId = null) {
        global $g_Commons;
        $this->Req->recursive = -1;

        $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'left',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                    ),
                    'fields' => array('Req.id', 'Req.name', 'Req.ebs_order_number', 'Contract.is_crm_fail', 'Contract.crm_fail_reason')));
        $this->set('Req', $Req);
    }

    //定时提醒BOM任务
    function AutoRemindBomTask() {
        $this->autoRender = false;
        global $g_Commons;
        global $g_OCS_options;
        global $g_BizUrl;
        $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Users->User->recursive = -1;
        $this->Req->recursive = -1;

        //定时提醒处理被打回的订单
        $StartDate = date("Y-m-d", mktime(0, 0, 0, date('n'), date('j') - 30, date('Y')));
        $EndDate = date('Y-m-d');
        if ((int) date('H') < 5) {
            $EndDate = date('Y-m-d H:i:s', mktime(date('H'), date('i'), date('s'), date('n', strtotime($EndDate)), date('j', strtotime($EndDate)) + 1, date('Y', strtotime($EndDate))));
        } else {
            $EndDate = date('Y-m-d H:i:s', mktime(date('H'), date('i'), date('s'), date('n', strtotime($EndDate)), date('j', strtotime($EndDate)), date('Y', strtotime($EndDate))));
        }

        $conds = array('Req.bom_assign_time >=' => $StartDate, 'Req.bom_assign_time <=' => $EndDate,
            'Req.model_def_id' => Contract, 'Req.dest_type' => 'EBS', 'Req.ebs_order_number IS NOT NULL',
            'Req.close_status NOT IN(' . OCS_ORDER_CLOSE_STATUS_CLOSE . ',' . OCS_ORDER_CLOSE_STATUS_CANCEL . ')');
        $conds[] = "MfPlanBill.hw_audit_status = " . OCS_MF_PLAN_BILL_HW_AUDIT_STATUS_NEW;  //被打回

        $joins = array();
        $joins[] = array('table' => 'contracts', 'alias' => 'Contract', 'type' => 'left', 'conditions' => "Contract.id = Req.rel_obj_id");
        $joins[] = array('table' => 'products', 'alias' => 'Product', 'type' => 'left', 'conditions' => "Product.id = Req.product_id");
        $joins[] = array('table' => 'mf_plan_bills', 'alias' => 'MfPlanBill', 'type' => 'left', 'conditions' => "MfPlanBill.req_id=Req.id and MfPlanBill.rel_idx = 0");

        $fields = array('Req.id,Req.ebs_order_number,Req.name,Req.owner_user_id,Product.name,Product.code,Contract.account_cno,Contract.account_mno,Contract.delivety_time,MfPlanBill.back_forward_reason,MfPlanBill.bom_pending_audit_user_id');
        $Reqs = $this->Req->find('all', array('conditions' => $conds, 'joins' => $joins, 'fields' => $fields));
        if (empty($Reqs)) {
            return false;
        }
        $datas = array();
        if (!empty($Reqs)) {
            foreach ($Reqs as $Req) {
                $datas[$Req['Req']['owner_user_id']][] = $Req;
            }
        }
        foreach ($datas as $owner_user_id => $data) {
            $User = $g_Users->User->find('first', array('conditions' => array('User.id' => $owner_user_id)));
            if (empty($User)) {
                continue;
            }
            $Options = array();
            $ToUsers = array();
            $ToUsers[] = $User['User']['email'];

            $Options['Email']['ToUsers'] = $ToUsers;

            $Options['Field']['audit_user'] = $User['User']['realname'];
            $Options['Field']['common_url'] = $g_OCS_options['url'] . $g_BizUrl . 'Reqs/bom_assign_index/P:tab=my_back_forward_bill';

            $common_text = '';
            $common_text .= '<div style="background:#FFFADF;border:1px solid #F0F0F0;padding:3px;margin-bottom:20px;display:block;">';
            $common_text .= '<table border=1>';
            $i = 0;
            $common_text .= '<tr><th>编号</th><th>EBS编号</th><th>打回原因</th><th>订单主题</th><th>产品名称</th><th>产品代码</th><th>客户单号</th><th>客户料号</th><th>交货日期</th></tr>';

            $tmp_req_id = 1;
            if (!empty($data)) {
                foreach ($data as $temp) {
                    $tmp_req_id = $temp['Req']['id'];
                    $i++;
                    $common_text .= '<tr>';
                    $common_text .= '<td>' . $i . '</td>';
                    $common_text .= '<td>' . $temp['Req']['ebs_order_number'] . '</td>';
                    $common_text .= '<td>' . $temp['MfPlanBill']['back_forward_reason'] . '</td>';
                    $common_text .= '<td>' . $temp['Req']['name'] . '</td>';
                    $common_text .= '<td>' . $temp['Product']['name'] . '</td>';
                    $common_text .= '<td>' . $temp['Product']['code'] . '</td>';
                    $common_text .= '<td>' . $temp['Contract']['account_cno'] . '</td>';
                    $common_text .= '<td>' . $temp['Contract']['account_mno'] . '</td>';
                    $common_text .= '<td>' . date('Y-m-d', strtotime($temp['Contract']['delivety_time'])) . '</td>';
                    $common_text .= '</tr>';
                }
            }

            $common_text .= '</table>';
            $common_text .= '</div>';
            $Options['Field']['common_text'] = $common_text;
            $g_QueueJobs->AddNoticeJob(array('Email'), Req, $tmp_req_id, 'BackForwardBomTask', $Options);
        }
    }

    //查看当天下采购的订单
    function view_purchase_orders() {
        global $g_Commons;
        global $g_BizName;
        global $g_BizId;
        set_time_limit(0);
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_ProdModelDetail = $g_Commons->GlobalModel('ProdModelDetail');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_ERPWsClients = $g_Commons->GlobalController('ERPWsClients');
        $this->Req->recursive = -1;

        $this->set('setFlash', 0);

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        if ($this->request->is('post')) {
            if (isset($this->request->data['search_value'])) {
                $qValue = trim($this->request->data['search_value']);
                $url_params = array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'view_purchase_orders');
                if (!empty($this->params->params['named'])) {
                    foreach ($this->params->params['named'] as $key => $p) {
                        $url_params[$key] = $p;
                    }
                }
                $url_params['page'] = 1;
                $url_params['q'] = $qValue;
                $this->redirect($url_params);
            }
        }

        if (!isset($AllParams['P']['start_date'])) {
            $StartDate = date("Y-m-d H:i:s", mktime(0, 0, 0, date('n'), date('j') - 1, date('Y')));
        } else {
            $StartDate = $AllParams['P']['start_date'];
        }
        $EndDate = !isset($AllParams['P']['end_date']) ? date('Y-m-d') : $AllParams['P']['end_date'];
        if (!isset($AllParams['P']['end_date'])) {
            $EndDate = date('Y-m-d H:i:s', mktime(date('H'), date('i'), date('s'), date('n', strtotime($EndDate)), date('j', strtotime($EndDate)), date('Y', strtotime($EndDate))));
        } else {
            $EndDate = $AllParams['P']['end_date'];
        }

        $this->set('StartDate', $StartDate);
        $this->set('EndDate', $EndDate);

        $sql = "
            select * from apps.xxom_order_stage_change_log where creation_time >='" . $StartDate . "' and creation_time <='" . $EndDate . "' and (NEW_STAGE = '4-已审采购-提交下生产' OR NEW_STAGE = '6-待生产评审' OR NEW_STAGE = '7-已下达生产')
        ";
        $stid = $g_Commons->ebsConnect($sql);

        $ReqIds = array();
        while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
            $ReqIds[] = $row['OCS_REQ_ID'];
        }

        $EbsStageList = $g_Enum->getEnumListByDictName('Contract.ebs_stage');
        $this->set('EbsStageList', $EbsStageList);


        $conds = array(
            'Contract.is_has_stock' => 0,
            // 'Req.biz_id' => $g_BizId,
            'OR' => array('Req.id' => $ReqIds,
                "(Req.last_change_prod_time >= '" . $StartDate . "' AND Req.last_change_prod_time <= '" . $EndDate . "' AND Contract.ebs_stage >= 20 )",
            )
        );

        $qValue = '';
        $this->set('qValue', $qValue);
        if (isset($this->params->params['named']['q'])) {
            $qValue = $this->params->params['named']['q'];
            if (!empty($qValue)) {
                $search_cond = "Product.name LIKE '%" . $qValue . "%' OR Product.code LIKE '%" . $qValue . "%' OR Product.tmp_code LIKE '%" . $qValue . "%'
                    OR Req.id='" . $qValue . "' OR Req.name LIKE '%" . $qValue . "%' OR Req.ebs_order_number LIKE '%" . $qValue . "%'";
                $Enum = $g_Enum->find('first', array('conditions' => array('Enum.dict_name' => 'Contract.ebs_stage', "Enum.label LIKE '%" . $qValue . "%'")));
                if (!empty($Enum)) {
                    $search_cond .= " OR Contract.ebs_stage=" . $Enum['Enum']['value'];
                }
                $Account = $g_Account->find('list', array('conditions' => array("Account.name LIKE '%" . $qValue . "%'"), 'fields' => array('Account.id')));
                if (!empty($Account)) {
                    $account_ids = implode(',', $Account);
                    if (!empty($account_ids)) {
                        $search_cond .= " OR Req.account_id IN(" . $account_ids . ")";
                    }
                }
                $conds[] = '(' . $search_cond . ')';
            }
            $this->set('qValue', $qValue);
        }


        $joins = array(
            array(
                'table' => 'contracts',
                'alias' => 'Contract',
                'type' => 'inner',
                'conditions' => 'Contract.id = Req.rel_obj_id'
            ),
            array(
                'table' => 'mf_plan_bills',
                'alias' => 'MfPlanBill',
                'type' => 'left',
                'conditions' => 'MfPlanBill.req_id = Req.id and MfPlanBill.rel_idx = 0'
            ),
            array(
                'table' => 'products',
                'alias' => 'Product',
                'type' => 'inner',
                'conditions' => 'Product.id = Req.product_id'
            ),
            array(
                'table' => 'users',
                'alias' => 'User',
                'type' => 'inner',
                'conditions' => 'User.id = Req.owner_user_id'
            ),
        );
        $fields = array('Req.id', 'Req.ebs_order_number', 'Req.quantity', 'Req.account_id', 'Req.product_id',
            'Req.bom_assign_time', 'Req.semi_bom_assign_time', 'Req.last_change_prod_time', 'Req.owner_user_id',
            'Contract.free_spare_qty', 'Contract.is_has_stock', 'Contract.delivety_time', 'Contract.order_time', 'Contract.ebs_stage',
            'MfPlanBill.hw_audit_status', 'MfPlanBill.bom_confirm_status', 'User.realname',
            'Product.id', 'Product.name', 'Product.code', 'Product.bom_name', 'Product.agile_status', 'Product.pcb_id');
        $this->paginate['conditions'] = $conds;
        $this->paginate['joins'] = $joins;
        $this->paginate['fields'] = $fields;
        $this->paginate['limit'] = 100;
        if (!isset($AllParams['export'])) {
            $Reqs = $this->paginate();
        } else {
            $Reqs = $this->Req->find('all', array(
                'conditions' => $this->paginate['conditions'],
                'joins' => $this->paginate['joins'],
                'fields' => $this->paginate['fields'],
            ));
        }

        $all_req_ids = array();
        if (!empty($Reqs)) {
            foreach ($Reqs as $idx => $Req) {
                $all_req_ids[] = $Req['Req']['id'];
                $Req['Req']['account_id'] = $g_Account->findMainField($Req['Req']['account_id']);

                $ProdModelDetail = $g_ProdModelDetail->findById($Req['Product']['pcb_id'], array('pcb_num', 'use_state'));
                $Req['Product']['pcb_num'] = '';
                if (!empty($ProdModelDetail)) {
                    $pcbNum = $ProdModelDetail['ProdModelDetail']['pcb_num'];
                    $pcbUseStatus = $ProdModelDetail['ProdModelDetail']['use_state'];
                    $Req['Product']['pcb_num'] = $pcbNum . '(' . $pcbUseStatus . ')';
                }

                $ProductDetails = new ProdDetailsController($Req['Req']['product_id']);
                $Req['Product']['HW_ChipSeries'] = isset($ProductDetails->details->HW_ChipSeries) ? $ProductDetails->details->HW_ChipSeries : '';

                $Reqs[$idx] = $Req;
            }
        }
        $this->set('Reqs', $Reqs);

        // OCS-291 下计划列表和OCS“查看下采购订单”列表中更新“下采购时间”取数规则
        $purchase_dates = $g_ERPWsClients->getOrderPurchaseDates($all_req_ids);
        $this->set('purchase_dates', $purchase_dates);


        // 导出订单明细
        if (isset($AllParams['export'])) {//导出excel
            $g_PrintTmpl = $g_Commons->GlobalModel('PrintTmpl');
            $g_Excels = $g_Commons->GlobalController('Excels');

            $PrintTmpl = $g_PrintTmpl->find('first', array(
                'joins' => array(array('table' => 'attachments', 'alias' => 'Attachment', 'type' => 'LEFT', 'conditions' => 'Attachment.id = PrintTmpl.attachment_id')),
                'conditions' => array('PrintTmpl.model_def_id' => Req, 'PrintTmpl.alias' => 'Purchase_Order'),
                'fields' => 'Attachment.id, PrintTmpl.output_file_name'
            ));
            if (empty($PrintTmpl)) {
                echo '未找到模板';
                return;
            }
            if (!empty($Reqs)) {
                foreach ($Reqs as $idx => $Req) {
                    $purchase_time = isset($purchase_dates[$Req['Req']['id']]) ? $purchase_dates[$Req['Req']['id']] : '';
                    $ebs_stage = isset($EbsStageList[$Req['Contract']['ebs_stage']]) ? $EbsStageList[$Req['Contract']['ebs_stage']] : '';
                    $Req['Req']['purchase_time'] = $purchase_time;
                    $Req['Req']['ebs_stage'] = $ebs_stage;
                    $Reqs[$idx] = $Req;
                }
            }
            return $g_Excels->export($PrintTmpl['Attachment']['id'], $PrintTmpl['PrintTmpl']['output_file_name'], 'Reqs', null, null, $Reqs);
        }
    }

    //订单跟进
    function view_mainpoint_detail() {
        global $g_Commons;
        global $g_BizName;
        global $g_BizId;
        global $g_UserId;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $Range = isset($AllParams['P']['range']) ? $AllParams['P']['range'] : 'my';

        if ($this->request->is('post')) {
            if (isset($this->request->data['search_value'])) {
                $qValue = trim($this->request->data['search_value']);
                $url_params = array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'view_purchase_orders');
                if (!empty($this->params->params['named'])) {
                    foreach ($this->params->params['named'] as $key => $p) {
                        $url_params[$key] = $p;
                    }
                }
                $url_params['page'] = 1;
                $url_params['q'] = $qValue;
                $this->redirect($url_params);
            }
        }
        $conds = array('Req.model_def_id' => Contract, 'Req.dest_type' => 'EBS', 'Req.parent_id' => 0, 'Req.close_status NOT' => array(OCS_ORDER_CLOSE_STATUS_CLOSE, OCS_ORDER_CLOSE_STATUS_CANCEL));
        if ('my' == $Range) {
            $conds['Req.owner_user_id'] = $g_UserId;
        }

        $joins = array(
            array(
                'table' => 'contracts',
                'alias' => 'Contract',
                'type' => 'left',
                'conditions' => 'Contract.id = Req.rel_obj_id'
            ),
            array(
                'table' => 'mf_plan_bills',
                'alias' => 'MfPlanBill',
                'type' => 'left',
                'conditions' => 'MfPlanBill.req_id = Req.id and MfPlanBill.rel_idx = 0'
            ),
            array(
                'table' => 'products',
                'alias' => 'Product',
                'type' => 'left',
                'conditions' => 'Product.id = Req.product_id'
            ),
        );
        $fields = array('Req.id', 'Req.ebs_order_number', 'Req.quantity', 'Req.account_id', 'Req.product_id', 'Req.is_semi', 'Req.is_mf', 'Req.owner_user_id',
            'Req.bom_assign_time', 'Req.semi_bom_assign_time', 'Req.last_change_prod_time', 'Req.prod_change_times', 'Req.close_status', 'Req.create_time',
            'Contract.free_spare_qty', 'Contract.is_has_stock', 'Contract.delivety_time', 'Contract.order_time', 'Contract.ebs_stage',
            'MfPlanBill.id', 'MfPlanBill.hw_audit_status', 'MfPlanBill.bom_confirm_status', 'MfPlanBill.reset_bom_task_time', 'MfPlanBill.bom_confirm_time',
            'Product.id', 'Product.name', 'Product.code', 'Product.bom_name', 'Product.agile_status');
        $this->paginate['conditions'] = $conds;
        $this->paginate['joins'] = $joins;
        $this->paginate['fields'] = $fields;
        $this->paginate['limit'] = 50;
        $Reqs = $this->paginate();

        $CfmKoTime = array();
        if (!empty($Reqs)) {
            $ReqIds = array();
            foreach ($Reqs as $Req) {
                $ReqIds[] = $Req['Req']['id'];
            }
            $CfmKoTime = $this->Req->getFirstFinishCfmTime($ReqIds); //获取确认的最早完成时间
        }
        $this->set('CfmKoTime', $CfmKoTime);

        $Reqs = $g_AttrDics->formatAllModelData($Reqs);
        $this->set('Reqs', $Reqs);
        return;
    }

    /**
     * 这个方法CPS还在调用,暂时不注释
     *
     * SwDeliverBills/pub_download_shipping_mark
     *
     * @Author   zhangguocai
     *
     * @DateTime 2017-04-05T16:18:53+0800
     *
     * @param    [type]                   $EncryOrderNumber    [description]
     * @param    [type]                   $EncryReqId          [description]
     * @param    [type]                   $EncryPrintTmplAlias [description]
     * @param    [type]                   $EncryExtendKey      [description]
     * @param    string                   $Action              [description]
     * @param    [type]                   $batch_no            [description]
     *
     * @return   [type]                                        [description]
     */
    function pub_download_shipping_mark($EncryOrderNumber = null, $EncryReqId = null, $EncryPrintTmplAlias = null, $EncryExtendKey = null, $Action = 'without_download', $batch_no = null) {
        $this->pub_shipping_mark_download($EncryOrderNumber, $EncryReqId, $EncryPrintTmplAlias, $EncryExtendKey, $Action, $batch_no);
    }

    function pop_release_shipping_mark() {
        global $g_Commons;
        $g_PrintTmpls = $g_Commons->GlobalController('PrintTmpls');
        $g_ErpMfInfos = $g_Commons->GlobalController('ErpMfInfos');
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_StockMm = $g_Commons->GlobalModel('StockMm');
        $g_PrintTmpls->PrintTmpl->recursive = -1;
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $ReqIds = explode(',', $AllParams['P']['req_ids']);
        $is_modify_bill = isset($AllParams['P']['is_modify_bill']) ? $AllParams['P']['is_modify_bill'] : 0;
        $this->set('is_modify_bill', $is_modify_bill);

        $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ReqIds),
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                        array(
                            'table' => 'products',
                            'alias' => 'Product',
                            'type' => 'inner',
                            'conditions' => 'Product.id = Req.product_id'
                        ),
                    ),
                    'fields' => array('Req.id', 'Req.ebs_order_number', 'Req.name', 'Req.account_id', 'Req.quantity', 'Product.id', 'Product.name', 'Product.code', 'Contract.account_cno', 'Contract.account_mno', 'Contract.delivety_time')));
        $ReqRelObjs = array();
        $account_ids = array();
        $release_batch_nos = array();
        if (!empty($Reqs)) {
            foreach ($Reqs as $idx => $Req) {
                $ObjRelObj = $g_ObjRelObj->find('first', array(
                            'conditions' => array(
                                'ObjRelObj.model_def_id' => Req,
                                'ObjRelObj.rel_obj_id' => $Req['Req']['id'],
                                'ObjRelObj.meta_type' => OCS_OBJ_REL_OBJ_TYPE_MARK,
                                'ObjRelObj.meta_key' => 'Req.shipping_mark'
                            ),
                            'order' => array('ObjRelObj.id desc')
                        ));
                $ReqRelObjs[$Req['Req']['id']] = $ObjRelObj['ObjRelObj']['id'];
                $account_ids[] = $Req['Req']['account_id'];

                $meta_value = array();
                if (!empty($ObjRelObj['ObjRelObj']['meta_value'])) {
                    $meta_value = json_decode($ObjRelObj['ObjRelObj']['meta_value'], true);
                }
                $release_batch_nos[$Req['Req']['id']] = !empty($meta_value['release_batch_no']) ? $meta_value['release_batch_no'] : array();
            }
        }
        $account_ids = array_unique($account_ids);
        $this->set('ReqRelObjs', $ReqRelObjs);
        $this->set('Reqs', $Reqs);

        //手动维护的发放批号
        $this->set('release_batch_nos', $release_batch_nos);

        //获取打印模板
        // $PrintTmpls = $g_PrintTmpls->PrintTmpl->find('all', array('conditions' => array('PrintTmpl.model_def_id' => Req, 'OR'=>array("PrintTmpl.alias LIKE '%_Mark'","PrintTmpl.alias LIKE '%_Mark_Tunner'")), 'order' => 'PrintTmpl.sequence ASC'));
        // $this->set('PrintTmpls', $PrintTmpls);

        // OCS-2119 唛头模板做成可配置
        $g_ReqTmplSet = $g_Commons->GlobalModel('ReqTmplSet');
        $print_tmpls = $g_ReqTmplSet->getSelActiveTmpls($account_ids);//获取打印模板
        $this->set('print_tmpls', $print_tmpls);

        //获取批号信息
        if (!empty($ReqIds)) {
            foreach ($ReqIds as $ReqId) {
                $g_ErpMfInfos->SyncMfInfosByReqId($ReqId, true); //同步批号信息
            }
        }

        //获取手动上传的唛头
        $g_Wip = $g_Commons->GlobalModel('Wip');
        $shipping_marks = $g_Wip->getShipMarksByReqIds($ReqIds);
        $this->set('shipping_marks', $shipping_marks);

        $ErpBatchNos = array();
        if ($is_modify_bill) {
            $stock_mms = $g_StockMm->find('all', array(
                'conditions' => array(
                    'StockMm.req_id' => $ReqIds,
                    'StockMm.status NOT ' => array(OCS_STOCK_MM_STATUS_INVALID, OCS_STOCK_MM_STATUS_CANCEL),
                ),
                'fields' => array(
                    'StockMm.id',
                    'StockMm.req_id',
                    'StockMm.name',
                )
            ));
            if (!empty($stock_mms)) {
                foreach ($stock_mms as $stock_mm) {
                    if (!isset($ErpBatchNos[$stock_mm['StockMm']['req_id']])) {
                        $ErpBatchNos[$stock_mm['StockMm']['req_id']] = '';
                    }
                    $ErpBatchNos[$stock_mm['StockMm']['req_id']] .= $stock_mm['StockMm']['name'] . ',';
                }
            }
        } else {
            $ErpBatchNos = $g_ErpMfInfos->getAllBatchNoStrByReqId($ReqIds);
        }

        $batch_nos = array();
        foreach($ErpBatchNos as $idx => $nos){
            $nos = rtrim($nos, ',');
            $batch_nos[$idx] = explode(',', $nos);
        }
        $this->set('ErpBatchNos', $ErpBatchNos);
        $this->set('batch_nos', $batch_nos);
    }

    /**
     * 发放唛头到SRM
     *
     * @Author   zhangguocai
     *
     * @DateTime 2017-03-23T10:28:12+0800
     *
     * @return   [type]                   [description]
     */
    function release_shipping_mark_to_srm_json() {
        $this->autoRender = false;

        // OCS-2119 唛头模板做成可配置
        $release_result = $this->{$this->modelClass}->releaseShippingMarkToSrm($_POST);
        echo json_encode($release_result);
    }

    function MarkToDoSemiBomTask($ReqIdsStr = null) {
        set_time_limit(0);
        global $g_Commons;
        global $g_UserId;
        $this->autoRender = false;

        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Products->Product->recursive = -1;
        $g_MfPlanBill->recursive = -1;
        $this->Req->recursive = -1;
        $result = $g_Commons->initResult();

        $ReqIds = explode(',', $ReqIdsStr);
        if (empty($ReqIds)) {
            $result['success'] = false;
            $result['message'] = 'error params.';
            echo json_encode($result);
            exit;
        }
        $g_MfPlanBill->getMfPlanBillInfo($ReqIds); //如果不存在mf_plan_bill数据，则新建

        $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ReqIds),
                    'fields' => array('Req.id', 'Req.name', 'Req.product_id')));
        $ProductIds = array();
        $ReqRelProductIds = array();
        if (!empty($ReqIds)) {
            foreach ($Reqs as $Req) {
                $ProductIds[] = $Req['Req']['product_id'];
                $ReqRelProductIds[$Req['Req']['id']] = $Req['Req']['product_id'];
            }
        }
        $ProductIds = array_unique($ProductIds);
        $g_Products->SyncProductAgileStatus($ProductIds); //同步BOM版本

        $Products = $g_Products->Product->find('all', array('conditions' => array('Product.id' => $ProductIds),
                    'fields' => array('Product.id', 'Product.name', 'Product.code', 'Product.bom_name', 'Product.agile_status')));
        $ProductsList = array();
        if (!empty($Products)) {
            foreach ($Products as $Product) {
                $ProductsList[$Product['Product']['id']] = $Product;
            }
        }

        foreach ($ReqIds as $ReqId) {
            $MfPlanBill = $g_MfPlanBill->find('first', array('conditions' => array('MfPlanBill.req_id' => $ReqId, 'MfPlanBill.rel_idx' => 0)));
            if (!empty($MfPlanBill)) {
                $ProductId = $ReqRelProductIds[$ReqId];
                $MfPlanBill['MfPlanBill']['m_product_id'] = $ProductId;
                $MfPlanBill['MfPlanBill']['m_bom_version'] = $ProductsList[$ProductId]['Product']['bom_name'];
                $MfPlanBill['MfPlanBill']['m_bom_status'] = $ProductsList[$ProductId]['Product']['agile_status'];
                $MfPlanBill['MfPlanBill']['m_create_user_id'] = $g_UserId;
                $MfPlanBill['MfPlanBill']['m_create_time'] = date('Y-m-d H:i:s');
                $g_MfPlanBill->save($MfPlanBill['MfPlanBill']);

                $log_content = '手动标记做备料BOM任务';
                $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);
            }
        }
        $result['success'] = true;
        echo json_encode($result);
        exit;
    }

    public function getMarkNavTabs($tab) {
        global $g_BizId;
        global $g_UserId;
        global $g_Commons;
        $g_Users = $g_Commons->GlobalController('Users');

        $navTabs = array();

        $navTabs['todo'] = array(
            'active' => '',
            'label' => '我的未发放',
            'url' => 'Reqs/shipping_mark_index/P:tab=todo',
        );
        $navTabs['done'] = array(
            'active' => '',
            'label' => '我的已发放',
            'url' => 'Reqs/shipping_mark_index/P:tab=done',
        );
        if (!empty($navTabs) && isset($navTabs[$tab])) {
            $navTabs[$tab]['active'] = 'active';
        }
        return $navTabs;
    }

    function shipping_mark_index() {
        global $g_Commons;
        global $g_BizName;
        global $g_BizId;
        global $g_UserId;
        $g_User = $g_Commons->GlobalModel('User');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_ErpMfInfos = $g_Commons->GlobalController('ErpMfInfos');
        $this->Req->recursive = -1;

        $this->set('setFlash', 0);

        $AllRoleAlias = $g_User->getAllUserAliasByUserId($g_UserId);
        $this->set('AllRoleAlias', $AllRoleAlias);

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $AllParams['P']['tab'] = !isset($AllParams['P']['tab']) ? 'todo' : $AllParams['P']['tab'];
        $this->set('AllParams', $AllParams);

        $NavTabs = $this->getMarkNavTabs($AllParams['P']['tab']);
        $this->set('NavTabs', $NavTabs);

        if (!isset($AllParams['P']['start_date'])) {
            $StartDate = date("Y-m-d", mktime(0, 0, 0, date('n') - 1, date('j'), date('Y')));
        } else {
            $StartDate = $AllParams['P']['start_date'];
        }
        $EndDate = !isset($AllParams['P']['end_date']) ? date('Y-m-d') : $AllParams['P']['end_date'];
        if (!isset($AllParams['P']['end_date'])) {
            $EndDate = date('Y-m-d', mktime(date('H'), date('i'), date('s'), date('n', strtotime($EndDate)), date('j', strtotime($EndDate)), date('Y', strtotime($EndDate))));
        } else {
            $EndDate = $AllParams['P']['end_date'];
        }

        $this->set('StartDate', $StartDate);
        $this->set('EndDate', $EndDate);

        if ($this->request->is('post')) {
            if (isset($this->request->data['search_value'])) {
                $qValue = trim($this->request->data['search_value']);
                $url_params = array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'shipping_mark_index');
                if (!empty($this->params->params['named'])) {
                    foreach ($this->params->params['named'] as $key => $p) {
                        $url_params[$key] = $p;
                    }
                }
                $url_params['page'] = 1;
                $url_params['q'] = $qValue;
                $this->redirect($url_params);
            }
        }

        $joins = array(
            array(
                'table' => 'contracts',
                'alias' => 'Contract',
                'type' => 'inner',
                'conditions' => 'Contract.id = Req.rel_obj_id'
            ),
            array(
                'table' => 'erp_mf_infos',
                'alias' => 'ErpMfInfo',
                'type' => 'left',
                'conditions' => 'ErpMfInfo.rel_obj_id = Contract.id and ErpMfInfo.model_def_id = ' . Contract
            ),
        );

        $fields = array('Req.id', 'Req.ebs_order_number', 'Req.name', 'Req.product_id', 'Contract.id', 'Contract.is_shipping_mark', 'Contract.delivety_time', 'Contract.ebs_stage',
            'Contract.account_cno', 'Contract.account_mno', 'Contract.contract_no', 'ErpMfInfo.id', 'ErpMfInfo.erp_bill_no', 'ErpMfInfo.erp_batch_no');

        $conds = array();
        // $conds[] = "ErpMfInfo.erp_batch_no IS NOT NULL";
        $conds['Req.biz_id'] = $g_BizId;
        $conds['Req.model_def_id'] = Contract;
        $conds['Req.dest_type'] = 'EBS';
        $conds['Req.parent_id'] = 0;
        $conds[] = "Req.create_time >= '" . $StartDate . "' AND Req.create_time <= '" . $EndDate . "'";
        if ($AllParams['P']['tab'] == 'todo') {//未发放
            $conds['Contract.is_shipping_mark'] = 0;
        } else {//已发放
            $conds['Contract.is_shipping_mark'] = 1;
            $joins[] = array(
                'table' => 'wip_rel_objs',
                'alias' => 'WipRelObj',
                'type' => 'right',
                'conditions' => 'WipRelObj.rel_obj_id = Req.id and WipRelObj.model_def_id=' . Req
            );
            $conds[] = "WipRelObj.is_delete != 1";
            $fields[] = 'WipRelObj.*';
        }
        if (!in_array('Admin', $AllRoleAlias)) {//非管理员只能看自己的
            if ($AllParams['P']['tab'] == 'todo') {
                $conds[] = "Req.owner_user_id=" . $g_UserId;
            } else {
                $conds[] = "((Req.owner_user_id=" . $g_UserId . ") OR (WipRelObj.release_user_id=" . $g_UserId . "))";
            }
        }

        $qValue = '';
        $this->set('qValue', $qValue);
        if (isset($this->params->params['named']['q'])) {
            $g_Product = $g_Commons->GlobalModel('Product');
            $g_Enum = $g_Commons->GlobalModel('Enum');
            $qValue = $this->params->params['named']['q'];

            if (!empty($qValue)) {
                $search_cond = "Req.id='" . $qValue . "' OR Req.name LIKE '%" . $qValue . "%' OR Req.ebs_order_number LIKE '%" . $qValue . "%' OR Contract.contract_no LIKE '%" . $qValue . "%'
                OR Contract.account_mno LIKE '%" . $qValue . "%' OR Contract.account_cno LIKE '%" . $qValue . "%'";
                $Enum = $g_Enum->find('first', array('conditions' => array('Enum.dict_name' => 'Contract.ebs_stage', "Enum.label LIKE '%" . $qValue . "%'")));
                if (!empty($Enum)) {
                    $search_cond .= " OR Contract.ebs_stage=" . $Enum['Enum']['value'];
                }
                $count = $g_Product->find('count', array('conditions' => array("Product.name LIKE '%" . $qValue . "%'")));
                if ($count > 0) {
                    $joins[] = array(
                        'table' => 'products',
                        'alias' => 'Product',
                        'type' => 'inner',
                        'conditions' => 'Product.id = Req.product_id'
                    );
                    $search_cond .= " OR Product.name LIKE '%" . $qValue . "%'";
                }
                $conds[] = '(' . $search_cond . ')';
            }
            $this->set('qValue', $qValue);
        }

        $this->paginate['conditions'] = $conds;
        $this->paginate['joins'] = $joins;
        $this->paginate['fields'] = $fields;
        if ($AllParams['P']['tab'] == 'done') {
            $this->paginate['group'] = array('WipRelObj.id');
        }
        $this->paginate['limit'] = 50;
        $Reqs = $this->paginate();

        $req_ids = array();
        foreach ($Reqs as $Req) {
            $req_ids[] = $Req['Req']['id'];
        }
        $g_Wip = $g_Commons->GlobalModel('Wip');
        $wips = $g_Wip->find('all', array(
            'conditions' => array(
                'Wip.req_id' => $req_ids,
            ),
            'fields' => array(
                'Wip.id',
                'Wip.wip_entity_id',
                'Wip.wip_entity_name',
                'Wip.wip_line_id',
            )
        ));

        $Reqs = $g_AttrDics->formatAllModelData($Reqs);
        $this->set('Reqs', $Reqs);

        $ReqIds = array();
        if (!empty($Reqs)) {
            foreach ($Reqs as $Req) {
                $ReqIds[] = $Req['Req']['id'];
            }
        }

        $ErpBatchNos = $g_ErpMfInfos->getAllBatchNoStrByReqId($ReqIds);
        $this->set('ErpBatchNos', $ErpBatchNos);
    }

    /**
     * 通过EBS订单编号，跳转至OCS下推订单界面
     *
     * @Author   lishirong
     *
     * @DateTime 2017-03-13T11:33:09+0800
     *
     * @param    [type]                   $ebs_order_numbers [description]
     * @param    [type]                   $stage             [description]
     *
     * @return   [type]                                      [description]
     */
    function pop_goto_set_order_stage ($ebs_order_numbers = null, $stage = null) {
        if (empty($ebs_order_numbers) || null === $stage) {
            echo '<h2>参数错误，ebs_order_numbers||stage 不允许为空</h2>';
            exit;
        }
        $ebs_order_numbers = explode(',', $ebs_order_numbers);

        global $g_Commons;
        global $g_BizName;
        $g_Req = $g_Commons->GlobalModel('Req');
        $g_Biz = $g_Commons->GlobalModel('Biz');

        $reqs = $g_Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                )
            ),
            'conditions' => array(
                'Req.ebs_order_number' => $ebs_order_numbers,
                'Contract.ebs_stage' => $stage,
            ),
            'fields' => array(
                'Req.id',
                'Req.biz_id',
            )
        ));
        if (empty($reqs)) {
            echo '<h2>未找到满足条件的订单</h2>';
            exit;
        }
        $biz_id = 0;
        $req_ids = array();
        foreach ($reqs as $req) {
            $biz_id = $req['Req']['biz_id'];
            $req_ids[] = $req['Req']['id'];
        }
        $biz_name = !empty($g_BizName) ? $g_BizName : $g_Biz->get_by_id($biz_id, 'label');

        $this->redirect(array(BizMark => $biz_name, 'controller' => 'Reqs', 'action' => 'set_order_stage', 'P' => 'req_ids=' . implode(',', $req_ids) . '&ebs_stage=' . $stage));
        return;
    }

    //订单阶段下推
    function pop_set_order_stage() {
        global $g_Commons;
        global $g_UserId;
        global $g_BizId;
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_AttrDic = $g_Commons->GlobalModel('AttrDic');
        $g_Type = $g_Commons->GlobalModel('Type');
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_FundsApproval = $g_Commons->GlobalModel('FundsApproval');
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_EbsStock = $g_Commons->GlobalModel('EbsStock');
        $g_ProdModel = $g_Commons->GlobalModel('ProdModel');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $g_Users->User->recursive = -1;
        $this->Req->recursive = -1;
        $this->layout = 'newworld';

        $this->set('title_for_layout', '下推订单阶段');
        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        if (!isset($AllParams['P']['req_ids']) || empty($AllParams['P']['req_ids'])) {
            echo 'error params.';
            exit;
        }
        $ReqIds = explode(',', $AllParams['P']['req_ids']);
        $CurrentStage = $AllParams['P']['ebs_stage']; //当前订单阶段
        $this->set('CurrentStage', $CurrentStage);
        if ((int) $CurrentStage < 0) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('此功能只能在选中订单阶段下操作。');
            return;
        }

        $NextStageValue = $this->Req->getNextOrderStage($CurrentStage); //获取下一阶段
        $NextStage = $g_Enums->getEnumByDictNameAndValue('Contract.ebs_stage', $NextStageValue);
        $this->set('NextStage', $NextStage);

        $EbsStageList = $g_Enums->getEnumListByDictName('Contract.ebs_stage');
        $this->set('EbsStageList', $EbsStageList);

        // 验证并获取订单数据
        $get_push_data_result = $this->Req->getPushOrderStageDatas($ReqIds);
        if (empty($get_push_data_result['success'])) {
            $this->set('setFlash', 1);
            $this->Session->setFlash($get_push_data_result['message']);
            return;
        }
        $Reqs = $get_push_data_result['datas'];

        $ship_account_ids = array();
        foreach ($Reqs as $Req) {
            $ship_account_ids[] = $Req['Req']['account_id'];
        }
        $ship_account_ids = array_unique($ship_account_ids);

        //查询产品相关库存信息
        $is_show_stock_info = in_array($CurrentStage, array(OCS_CONTRACT_EBS_STAGE_TO_PURCHASE, OCS_CONTRACT_EBS_STAGE_ADVANCE_PURCHASE, OCS_CONTRACT_EBS_STAGE_PURCHASED));
        $this->set('is_show_stock_info', $is_show_stock_info);

        $stock_is_need_audit = array();
        if ($is_show_stock_info) {
            $cache_data = array();
            $end_time = date("Y-m-d", mktime(0, 0, 0, date('n'), date('j') - 2, date('Y')));
            foreach ($Reqs as &$req) {
                $req_id = $req['Req']['id'];
                $product_id = $req['Req']['product_id'];
                $ship_account_id = !empty($req['Req']['stock_account_id']) ?  $req['Req']['stock_account_id'] : $req['Req']['account_id']; //如是备货订单使用真实客户
                $prod_model_id = $req['Product']['prod_model_id'];
                $index_key = $product_id . '_' . $ship_account_id;

                $rel_prod_data = array();
                if (isset($cache_data[$index_key])) {
                    $rel_prod_data = $cache_data[$index_key];
                } else {
                    //获取同代码产品的可用数量
                    $rel_prod_data['product_available_qty'] = $g_EbsStock->getProductAvailableQty($product_id);

                    //获取产品型号同客户的可用数量(最近1个月)
                    $rel_prod_data['prod_model_available_qty_1month'] =  $g_EbsStock->getProdModelAvailableQty($prod_model_id, $ship_account_id, $product_id, '1month');

                    //获取产品型号同客户的可用数量(最近2个月)
                    $rel_prod_data['prod_model_available_qty'] =  $g_EbsStock->getProdModelAvailableQty($prod_model_id, $ship_account_id, $product_id, '2month');

                    $cache_data[$index_key] = $rel_prod_data;
                }

                $req['RelReq']['product_available_qty'] = $rel_prod_data['product_available_qty'];
                $req['RelReq']['prod_model_available_qty'] = $rel_prod_data['prod_model_available_qty'];
                $req['RelReq']['prod_model_available_qty_1month'] = $rel_prod_data['prod_model_available_qty_1month'];

                //未使用库存是否需要审核
                $stock_is_need_audit[$req_id] = false;

                //获取库存审核信息
                $po_result = $g_RelReq->getStockAuditUserByReqId($req_id);
                if ($po_result['success']) {
                    $stock_audit_info = !empty($po_result['datas']) ? $po_result['datas'] : array();
                    foreach ($stock_audit_info as $user_ids) {
                        if (!empty($user_ids)) {
                            $stock_is_need_audit[$req_id] = true; //表示需要有人审核
                        }
                    }
                }
            }
        }

        $Reqs = $g_AttrDic->formatAllModelData($Reqs);

        $this->set('Reqs', $Reqs);
        $this->set('stock_is_need_audit', $stock_is_need_audit);

        // 如果订单的品牌和客户机型名称为空，且当前的阶段是第四阶段 则提示去订单界面编辑品牌和客户机型名称
        // 加多一个判断，如果订单的req_type是物料类型，不需要限制推进
        $no_brand_prod_reqs = array();//记录没有品牌名称的req
        if (!empty($Reqs) && !in_array($g_BizId, array(OCS_BIZ_TYPE_TV, OCS_BIZ_TYPE_TAD, OCS_BIZ_TYPE_SCS)) && $CurrentStage == OCS_CONTRACT_EBS_STAGE_PURCHASED) {
            foreach ($Reqs as $Reqs_key => $Req) {
                $is_dev_order = false === strpos($Req['Type']['name'], '研发') ? 0 : 1;
                if ($is_dev_order) { //研发订单，不限制
                    continue;
                }
                // 加多一个判断，如果订单类型req_type为OCS_REQ_TYPE_MATERIAL 和 OCS_REQ_TYPE_SKD 不做限制
                if (!empty($Req['Req']['req_type']) && in_array($Req['Req']['req_type']['value'], $this->Req->getDefMtlTypes())) {
                    continue;
                }
                if (empty($Req['Contract']['account_brand']) || empty($Req['Contract']['account_prod_name'])) {
                    $no_brand_prod_reqs[] = $Req;
                }
            }
        }
        $this->set('no_brand_prod_reqs', $no_brand_prod_reqs);

        //查询同代码未下计划订单
        $same_unmf_order_ids = array();
        foreach ($Reqs as $tmp_req) {
            $req_id = $tmp_req['Req']['id'];
            switch ($g_BizId) {
                case OCS_BIZ_TYPE_TV:
                case OCS_BIZ_TYPE_SCS:
                    $same_unmf_order_ids[$req_id] = $this->Req->getRelSameProdReqIds($req_id, $ReqIds);
                break;
                default:
                break;
            }
        }
        $this->set('same_unmf_order_ids', $same_unmf_order_ids);

        //获取配置的三部订单
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $dept3_order_types = $g_ObjRelObj->getMetaKeys(Req, 0, OCS_OBJ_REL_OBJ_META_TYPE_DEPT3_ORDER);
        $this->set('dept3_order_types', $dept3_order_types);

        //判断是否存在部分的TV3订单
        $mix_tv3_order = 0; //0:不包含TV3，1：部分包含，2：全部为TV3
        $tv3_order_cnt = 0;
        foreach ($Reqs as $temp) {
            if (in_array($temp['Type']['name'], $dept3_order_types)) {
                $tv3_order_cnt++;
            }
        }
        if ($tv3_order_cnt > 0 && $tv3_order_cnt != count($Reqs)) { //部分
            $mix_tv3_order = 1;
        } else if ($tv3_order_cnt > 0 && $tv3_order_cnt == count($Reqs)) { //全部
            $mix_tv3_order = 2;
        }
        if (2 == $mix_tv3_order) {
            $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
            $can_audit_tv3_order_users = $g_ObjRelObj->getMetaKeys(Req, 0, OCS_OBJ_REL_OBJ_META_TYPE_TV3_ORDER_AUDIT); //获取TV3部可审下采购的人
            $this->set('can_audit_tv3_order_users', $can_audit_tv3_order_users);
        }
        $this->set('mix_tv3_order', $mix_tv3_order);

        //该事业部下是否有配置固定定金比例
        $is_has_config_ratio = $g_FundsApproval->isHasConfigRatio('FRONT_MONEY_APPROVAL');
        $this->set('is_has_config_ratio', $is_has_config_ratio);

        // 订单需要下推到4阶段, 且已经配置了定金比例审批条件的，需进行定金比例的检查
        if (OCS_CONTRACT_EBS_STAGE_PURCHASED == $NextStageValue && $is_has_config_ratio && !$g_RolePrivs->get_priv_level('Reqs', 'can_set_order_stage_to_purchase')) {
            $ratio_req_ids = array();
            foreach ($Reqs as $temp) {
                $ratio_req_ids[] = $temp['Req']['id'];
            }
            $deposit_ratios = $this->Req->getDepositRatioRelInfo($ratio_req_ids);
            $this->set('deposit_ratios', $deposit_ratios);

            //获取申请原因
            $g_DepositRatioBill = $g_Commons->GlobalModel('DepositRatioBill');
            $deposit_ratio_bill_reason = $g_DepositRatioBill->getReasonByReqIds($ratio_req_ids);
            $this->set('deposit_ratio_bill_reason', $deposit_ratio_bill_reason);

            $deposit_ratio_bills = $g_DepositRatioBill->getFieldsByReqIds($ratio_req_ids, array('DepositRatioBill.status'));
            $this->set('deposit_ratio_bills', $deposit_ratio_bills);

            //收货客户固定定金比例
            $g_Account = $g_Commons->GlobalModel('Account');
            $fixed_deposit_rates = $g_Account->getEbsDepositRates($ship_account_ids);
            $this->set('fixed_deposit_rates', $fixed_deposit_rates);

            //获取审核模板
            $deposit_ratio_tmpls = $g_FundsApproval->getCustomerApprovalConds('FRONT_MONEY_APPROVAL', $ship_account_ids);
            $this->set('deposit_ratio_tmpls', $deposit_ratio_tmpls);
        }

        //对于研发订单，暂不作各时间的限制
        $IsDevOrder = array();
        if (!empty($Reqs)) {
            $type_ids = array();
            foreach ($Reqs as $Req) {
                $type_ids[] = $Req['Contract']['type_id']['value'];
            }
            $type_list = $g_Type->find('list', array(
                'conditions' => array(
                    'Type.id' => $type_ids
                ),
                'fields' => array('Type.id', 'Type.name')
            ));
            foreach ($Reqs as $Req) {
                // $Type = $g_Type->find('first', array(
                //     'conditions' => array(
                //         'Type.id' => $Req['Contract']['type_id']['value']
                //     ),
                //     'fields' => array('Type.id', 'Type.name')
                // ));
                $IsDevOrder[$Req['Req']['id']] = 0;
                if (!empty($type_list[$Req['Contract']['type_id']['value']]) && false !== strpos($type_list[$Req['Contract']['type_id']['value']], '研发')) {
                    $IsDevOrder[$Req['Req']['id']] = 1;
                }
            }
        }
        $this->set('IsDevOrder', $IsDevOrder);

        // OSC-2046 OCS下推订单阶段自动带出计划发运日期 add by linfangjie 2017-04-27
        $show_delivety_time_by_stage = array(
            OCS_CONTRACT_EBS_STAGE_TO_PURCHASE,
            OCS_CONTRACT_EBS_STAGE_ADVANCE_PURCHASE,
            OCS_CONTRACT_EBS_STAGE_PURCHASED,
        );
        $this->set('show_delivety_time_by_stage', $show_delivety_time_by_stage);
    }

    /**
     * 下推订单阶段，如是物料订单，则加入队列处理
     *
     * @Author   lishirong
     *
     * @DateTime 2016-04-18T14:14:50+0800
     *
     * @param    [type]                   $req_id        [订单req_id]
     * @param    [type]                   $current_stage [下推订单时，订单阶段]
     */
    function set_ebs_order_stage_json($req_id = null, $current_stage = null) {
        set_time_limit(0);
        $this->autoRender = false;
        global $g_Commons;
        $g_Req = $g_Commons->GlobalModel('Req');
        $result = $g_Commons->initResult();

        if (empty($req_id)) {
            $result['message'] = '参数错误，req_id 不能为空';
            echo json_encode($result);
            return;
        }
        $req = $g_Req->find('first', array(
            'conditions' => array(
                'Req.id' => $req_id,
            ),
            'fields' => array(
                'Req.id',
                'Req.req_type',
            )
        ));
        if (empty($req)) {
            $result['message'] = 'req not exist, req_id= '. $req_id;
            echo json_encode($result);
            return;
        }
        $po_result = $g_Req->isCanSetOrderStage($req_id);
        if (!$po_result['success']) {
            $result['message'] = $po_result['message'];
            echo json_encode($result);
            return;
        }

        //物料订单 加入队列处理
        if ($g_Req->isMtlReqOrder($req_id)) {
            //队列处理
            global $g_BizId;
            $g_QueueJob = $g_Commons->GlobalModel('QueueJob');
            $queue_job = array();
            $queue_job['biz_id'] = $g_BizId;
            $queue_job['model_def_id'] = Req;
            $queue_job['rel_obj_id'] = $req['Req']['id'];
            $queue_job['type'] = OCS_QUEUE_TASK_TYPE_ORDER_STAGE; //下推订单阶段
            $queue_job['current_stage'] = $current_stage; //下推时订单阶段
            $po_result = $g_QueueJob->addQueue($queue_job);
            if (!$po_result['success']) {
                $result['success'] = false;
                $result['message'] = '加入任务队列失败，' . $po_result['message'];
            } else {
                $result['success'] = true;
                $result['message'] = '加入队列成功，稍后订单将自动下推。';
            }
            echo json_encode($result);
            return;
        } else {
            $po_result = $this->SetEbsOrderStage($req_id, $current_stage, true);
            echo json_encode($po_result);
            return;
        }
    }

    //设置EBS订单阶段(ajax)
    function SetEbsOrderStage($ReqId = null, $CurrentStage = null, $IsGetReturn = false) {
        set_time_limit(0);
        global $g_Commons;
        global $g_UserId;
        global $g_BizId;

        $this->autoRender = false;

        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_ActionRecords = $g_Commons->GlobalController('ActionRecords');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_StockApplyHeader = $g_Commons->GlobalModel('StockApplyHeader');
        $this->Req->recursive = -1;
        $result = $g_Commons->initResult();

        if (empty($ReqId) || null == $ReqId) {
            $result['success'] = false;
            $result['message'] = 'error params.';
            if ($IsGetReturn) {
                return $result;
            }
            echo json_encode($result);
            return;
        }

        $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                    ),
                    'fields' => array('Req.id', 'Req.ebs_order_number', 'Req.req_type', 'Contract.id', 'Contract.ebs_stage', 'Contract.is_has_stock')));

        if (empty($Req)) {
            $result['success'] = false;
            $result['message'] = 'empty req id=#' . $ReqId;
            if ($IsGetReturn) {
                return $result;
            }
            echo json_encode($result);
            return;
        }
        if ((int) $CurrentStage < 0) {
            $result['success'] = false;
            $result['message'] = 'error params ebs_stage=' . $CurrentStage;
            if ($IsGetReturn) {
                return $result;
            }
            echo json_encode($result);
            return;
        }
        $NextStage = $this->Req->getNextOrderStage($Req['Contract']['ebs_stage']); //获取下一阶段
        if ((int) $Req['Contract']['ebs_stage'] != (int) $CurrentStage) {
            if ($NextStage == $Req['Contract']['ebs_stage'] || $Req['Contract']['ebs_stage'] > $CurrentStage) {
                $result['success'] = true;
            } else {
                $result['success'] = false;
                $result['message'] = '当前订单阶段为#' . $g_Enums->getLabelByDictNameAndValue('Contract.ebs_stage', $Req['Contract']['ebs_stage']);
            }
            if ($IsGetReturn) {
                return $result;
            }
            echo json_encode($result);
            return;
        }

        if ($NextStage < $CurrentStage) {
            $result['success'] = false;
            $result['message'] = '当前订单阶段为#' . $g_Enums->getLabelByDictNameAndValue('Contract.ebs_stage', $CurrentStage) . '，不可回推到#' . $g_Enums->getLabelByDictNameAndValue('Contract.ebs_stage', $NextStage);
            if ($IsGetReturn) {
                return $result;
            }
            echo json_encode($result);
            return;
        }
        if (OCS_CONTRACT_EBS_STAGE_TO_PURCHASE == (int) $NextStage) {//推至下采购阶段，EBS编号不能为空
            if (empty($Req['Req']['ebs_order_number'])) {
                $g_ActionRecords->ActionRecord->create('Contract.ebs_stage.Error.订单未传EBS', Req, $ReqId);
                $result['success'] = false;
                $result['message'] = '订单未传EBS，设置订单阶段失败。';
                if ($IsGetReturn) {
                    return $result;
                }
                echo json_encode($result);
                return;
            }
        }

        //[OCS-1350] TV订单“是”出库存的，无需确认书也可下推
        $is_need_cfm = true;
        if (OCS_BIZ_TYPE_TV == $g_BizId && 1 == $Req['Contract']['is_has_stock']) {
            $is_need_cfm = false;
        }

        if ((int) $NextStage >= OCS_CONTRACT_EBS_STAGE_MF_AUDIT
            && !in_array($Req['Req']['req_type'], $this->Req->getDefMtlTypes())
            && $is_need_cfm) {//推至>=待生产评审，确认书需上传(物料订单除外)
            $conds = array();
            $joins = array();
            $conds['Req.id'] = $ReqId;
            $str = "(Req.audit_stage=" . OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE . " OR (
                Attachment.is_delete = 0
                and Attachment.is_lock = 0
                and Attachment.attach_type IN(" . OCS_ATTACH_TYPE_CONFIRMATION . "," . OCS_ATTACH_TYPE_CONFIRMATION_UNSIGNED . ")
                and Attachment.rel_attachment_id = 0
            ))"; //判断是否有确认书
            $conds[] = $str;
            $joins[] = array('table' => 'attachments', 'alias' => 'Attachment', 'type' => 'left', 'conditions' => "Attachment.obj_id=Req.id and Attachment.model_def_id=" . Req);
            $count = $this->Req->find('count', array('conditions' => $conds, 'joins' => $joins));
            if ($count <= 0) {
                $g_ActionRecords->ActionRecord->create('Contract.ebs_stage.Error.无确认书', Req, $ReqId);
                $result['success'] = false;
                $result['message'] = '无确认书，不可审到待生产评审阶段';
                if ($IsGetReturn) {
                    return $result;
                }
                echo json_encode($result);
                return;
            }
        }

        //检查备货申请是否已经审核，如是则不允许改变订单阶段
        $stock_apply_status = $g_StockApplyHeader->getStockApplyStatusByReqIds($ReqId);
        if (in_array($stock_apply_status, array(OCS_STOCK_APPLY_HEADER_STATUS_AUDITTING))) {
            $result['success'] = false;
            $result['message'] = '备货申请单处于审核状态，不能下推订单阶段，请先打回备货申请。';
            if ($IsGetReturn) {
                return $result;
            }
            echo json_encode($result);
            return;
        }

        //更新EBS订单阶段
        $result = $this->Req->updateEbsOrderStage($ReqId, $NextStage);
        if (!$result['success']) {
            if ($IsGetReturn) {
                return $result;
            }
            echo json_encode($result);
            return;
        }

        //同步订单至EBS
        $this->SyncContractToEBSByReqId($ReqId, 1, 'SCHEDULE');

        //自动更新软件任务软件完成时间信息
        $g_Task = $g_Commons->GlobalModel('Task');
        $g_Task->autoUpdateSwCompleteDate($ReqId);

        $result['success'] = true;
        $result['message'] = 'success';
        if ($IsGetReturn) {
            return $result;
        }
        echo json_encode($result);
        return;
    }

    //取消未传EBS订单
    function cancel_ocs_order_json($ReqId = null){
        global $g_Commons;
        $this->autoRender = false;
        $this->Req->recursive = -1;
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Logs = $g_Commons->GlobalController('Logs');

        $result = $g_Commons->initResult();

        $Req = $this->Req->find('first',array('conditions'=>array('Req.id'=>$ReqId),
            'fields'=>array('Req.id','Req.ebs_order_number','Req.close_status')));
        if(empty($Req)){
            $result['success'] = false;
            $result['message'] = 'empty req';
            echo json_encode($result);
            return;
        }
        if(!empty($Req['Req']['ebs_order_number'])){
            $result['success'] = false;
            $result['message'] = '订单已传EBS，不能用此方法取消订单';
            echo json_encode($result);
            return;
        }
        if($Req['Req']['close_status'] == OCS_ORDER_CLOSE_STATUS_CANCEL){
            $result['success'] = false;
            $result['message'] = '该单已经作废。';
            echo json_encode($result);
            return;
        }

        $old_status = $Req['Req']['close_status'];
        $new_status = OCS_ORDER_CLOSE_STATUS_CANCEL;
        // $Req['Req']['close_status'] = OCS_ORDER_CLOSE_STATUS_CANCEL; //已作废
        // $this->Req->save($Req['Req']);

        // 订单合同操作及字段更新规则
        $this->Req->setReqStatusAction($ReqId, $new_status);//设置为已作废

        //订单作废或者关闭，自动释放库存预订数量
        $g_StockReserveRelReq = $g_Commons->GlobalModel('StockReserveRelReq');
        $g_StockReserveRelReq->autoReleaseReserveQty($ReqId);

        $log_content = '订单状态由：' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $old_status) . '=> ' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $new_status);
        $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);

        $result['success'] = true;
        echo json_encode($result);
        return;
    }

    //处理三部订单系列动作
    function ProcessResereveReq($ReqId = null) {
        global $g_Commons;
        $this->autoRender = false;
        $this->Req->recursive = -1;

        $result = $g_Commons->initResult();

        if (empty($ReqId)) {
            $result['success'] = false;
            $result['message'] = 'empty req_id';
            echo json_encode($result);
            return;
        }

        $result = $this->Req->ProcessCartReserveOrder($ReqId);
        if ($result['success']) {
            $result['message'] = '';
        }
        echo json_encode($result);
        return;
    }

    //处理拆分订单系列动作
    function ProcessSplitReq($ReqId = null) {
        global $g_Commons;
        $this->autoRender = false;
        $this->Req->recursive = -1;

        $result = $g_Commons->initResult();

        if (empty($ReqId)) {
            $result['success'] = false;
            $result['message'] = 'empty req_id';
            echo json_encode($result);
            return;
        }

        $result = $this->Req->MarkProcessSplitOrderNew($ReqId);
        echo json_encode($result);
        return;
    }

    //处理拆分订单系列动作
    function ProcessSplitReqNew($ReqId = null) {
        global $g_Commons;
        $this->autoRender = false;
        $this->Req->recursive = -1;

        $result = $g_Commons->initResult();

        if (empty($ReqId)) {
            $result['success'] = false;
            $result['message'] = 'empty req_id';
            echo json_encode($result);
            return;
        }

        $result = $this->Req->MarkProcessSplitOrderNew($ReqId);
        echo json_encode($result);
        return;
    }

    //订单变更模板
    function pop_req_change_tmpl() {
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_ErpMfInfos = $g_Commons->GlobalController('ErpMfInfos');
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdAttrs->ProdAttr->recursive = -1;
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $ReqIds = explode(',', $AllParams['P']['req_ids']);
        $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ReqIds),
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                        array(
                            'table' => 'products',
                            'alias' => 'Product',
                            'type' => 'inner',
                            'conditions' => 'Product.id = Req.product_id'
                        ),
                    ),
                    'fields' => array('Req.id,Req.name,Req.ebs_order_number,Req.account_id,Req.quantity', 'Contract.delivety_time,Contract.ebs_stage', 'Req.remark',
                        'Contract.account_cno,Contract.account_mno,Contract.account_prod_name','Req.owner_user_id,Req.create_time,Req.close_status','Contract.account_bno',
                        'Product.id,Product.prod_model_id,Req.sw_atom_ids_json','Product.name','Product.code')));

        $Reqs = $g_AttrDics->formatAllModelData($Reqs);

        if (!empty($Reqs)) {
            foreach ($Reqs as $idx => $Req) {
                $Req['SwAttr'] = $g_ProdAttrs->getSwAttrsAtoms($Req['Req']['sw_atom_ids_json']);
                $Reqs[$idx] = $Req;
            }
        }
        $this->set('Reqs', $Reqs);
        //获取批号信息
        if (!empty($ReqIds)) {
            foreach ($ReqIds as $ReqId) {
                $g_ErpMfInfos->SyncMfInfosByReqId($ReqId, true); //同步批号信息
            }
        }

        $ErpBatchNos = $g_ErpMfInfos->getAllBatchNoStrByReqId($ReqIds);
        $this->set('ErpBatchNos', $ErpBatchNos);

        $ErpMCompleteDates = $g_ErpMfInfos->getAllMCompleteStrByReqId($ReqIds);
        $this->set('ErpMCompleteDates', $ErpMCompleteDates);
    }

    public function getWipOrderNavTabs($tab) {
        global $g_BizId;
        global $g_UserId;
        global $g_Commons;
        $g_Users = $g_Commons->GlobalController('Users');

        $navTabs = array();

        $navTabs['av'] = array(
            'active' => '',
            'label' => '可工单',
            'url' => 'Reqs/view_wip_available_order/P:tab=av',
        );
        $navTabs['all'] = array(
            'active' => '',
            'label' => '全部(阶段>=6)',
            'url' => 'Reqs/view_wip_available_order/P:tab=all',
        );
        if (!empty($navTabs) && isset($navTabs[$tab])) {
            $navTabs[$tab]['active'] = 'active';
        }
        return $navTabs;
    }

    //查看哪些订单可开立工单及合并生产
    function view_wip_available_order() {
        global $g_Commons;
        global $g_BizId;
        global $g_BizName;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_Accounts->Account->recursive = -1;
        $g_Users->User->recursive = -1;
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $AllParams['P']['tab'] = !isset($AllParams['P']['tab']) ? 'av' : $AllParams['P']['tab'];
        $this->set('AllParams', $AllParams);

        $NavTabs = $this->getWipOrderNavTabs($AllParams['P']['tab']);
        $this->set('NavTabs', $NavTabs);

        if ($this->request->is('post')) {
            if (isset($this->request->data['search_value'])) {
                $qValue = trim($this->request->data['search_value']);
                $url_params = array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => __FUNCTION__);
                if (!empty($this->params->params['named'])) {
                    foreach ($this->params->params['named'] as $key => $p) {
                        $url_params[$key] = $p;
                    }
                }
                $url_params['page'] = 1;
                $url_params['q'] = $qValue;
                $this->redirect($url_params);
            }
        }

        $qValue = '';
        $this->set('qValue', $qValue);
        $SearchFields = array(
                // 'OH.ORDER_NUMBER',
                // 'OH.ATTRIBUTE8',
                // 'OH.FLOW_STATUS_CODE',
                // 'OH.ATTRIBUTE2',
                // 'P.KNOWN_AS',
                // 'PSN.PROJECT_NUMBER',
                // 'OL.FLOW_STATUS_CODE',
                // 'LT.NAME',
                // 'OH.ATTRIBUTE7',
                // 'OL.ATTRIBUTE8',
                // 'OL.ATTRIBUTE9',
                // 'OL.ATTRIBUTE10',
                // 'OL.ATTRIBUTE11',
                // 'OL.ATTRIBUTE13',
                // 'OL.ATTRIBUTE14'
        );
        if (isset($this->params->params['named']['q'])) {
            $qValue = $this->params->params['named']['q'];
            $this->set('qValue', $qValue);
        }
        $EbsOrders = $this->Req->getWipAvailableOrders($AllParams, $qValue, $SearchFields); //获取满足条件的订单

        $ReqIds = array();
        if (!empty($EbsOrders)) {
            foreach ($EbsOrders as $EbsOrder) {
                if (!empty($EbsOrder['REQ_ID']) && !in_array($EbsOrder['REQ_ID'], $ReqIds)) {
                    $ReqIds[] = $EbsOrder['REQ_ID'];
                }
            }
        }

        $conds = array();
        $joins = array(
            array(
                'table' => 'contracts',
                'alias' => 'Contract',
                'type' => 'inner',
                'conditions' => 'Contract.id = Req.rel_obj_id'
            ),
            array(
                'table' => 'mf_plan_bills',
                'alias' => 'MfPlanBill',
                'type' => 'left',
                'conditions' => 'MfPlanBill.req_id = Req.id AND MfPlanBill.rel_idx = 0'
            ),
            array(
                'table' => 'products',
                'alias' => 'Product',
                'type' => 'inner',
                'conditions' => 'Product.id  = Req.product_id'
            ),
        );
        $fields = array('Req.id,Req.name,Req.account_id,Req.quantity,Req.product_id,Req.owner_user_id',
            'Contract.account_cno,Contract.account_mno,Contract.account_bno,Contract.contract_no,Contract.order_time,Contract.delivety_time,Contract.ebs_stage',
            'MfPlanBill.group_bill_no', 'Product.code,Product.tmp_code'
        );
        $conds['Req.id'] = $ReqIds;
        if (!empty($qValue)) {
            $search_cond = "Req.id='" . $qValue . "' OR Req.name LIKE '%" . $qValue . "%' OR Req.ebs_order_number LIKE '%" . $qValue . "%' OR Contract.contract_no LIKE '%" . $qValue . "%'
            OR Contract.account_mno LIKE '%" . $qValue . "%' OR Contract.account_cno LIKE '%" . $qValue . "%'";
            $count = $g_Products->Product->find('count', array('conditions' => array('OR' => array("Product.name LIKE '%" . $qValue . "%'", "Product.code LIKE '%" . $qValue . "%'", "Product.tmp_code LIKE '%" . $qValue . "%'"))));
            if ($count > 0) {
                $search_cond .= " OR Product.name LIKE '%" . $qValue . "%' OR Product.code LIKE '%" . $qValue . "%' OR Product.tmp_code LIKE '%" . $qValue . "%'";
            }
            $count = $g_Users->User->find('count', array('conditions' => array("User.realname LIKE '%" . $qValue . "%'")));
            if ($count > 0) {
                $joins[] = array(
                    'table' => 'users',
                    'alias' => 'User',
                    'type' => 'inner',
                    'conditions' => 'User.id = Req.owner_user_id'
                );
                $search_cond .= " OR User.realname LIKE '%" . $qValue . "%'";
            }
            $temp = $g_Accounts->Account->find('list', array('conditions' => array("Account.alias LIKE '%" . $qValue . "%'"),
                        'fields' => array('Account.id', 'Account.alias')));
            if (!empty($temp)) {
                $account_ids = array_keys($temp);
                $account_ids = implode(',', $account_ids);

                if (!empty($account_ids)) {
                    $search_cond .= " OR Req.account_id IN(" . $account_ids . ")";
                }
            }

            $conds[] = '(' . $search_cond . ')';
        }

        // $this->paginate['conditions'] = $conds;
        // $this->paginate['joins'] = $joins;
        // $this->paginate['limit'] = 500;
        // $this->paginate['fields'] = $fields;
        // $Reqs = $this->paginate();

        $Reqs = $this->Req->find('all', array('conditions' => $conds, 'joins' => $joins, 'fields' => $fields));
        $formatReqs = $g_AttrDics->formatAllModelData($Reqs);
        if (!empty($formatReqs)) {
            $Reqs = array(); //清空，重新组合
            foreach ($formatReqs as $temp) {
                $Reqs[$temp['Req']['id']] = $temp;
            }
        }
        $this->set('Reqs', $Reqs);

        //组合的订单放在一起
        $tmpEbsOrders = $EbsOrders;
        $EbsOrders = array();
        foreach ($tmpEbsOrders as $temp) {
            $ReqId = $temp['REQ_ID'];
            if (isset($Reqs[$ReqId]['MfPlanBill']['group_bill_no']) && !empty($Reqs[$ReqId]['MfPlanBill']['group_bill_no'])) {
                $EbsOrders[$Reqs[$ReqId]['MfPlanBill']['group_bill_no']][] = $temp;
            } else {
                $EbsOrders['NONE'][] = $temp;
            }
        }
        $this->set('EbsOrders', $EbsOrders);

        $Colors = array(
            '#d06b64', '#ffad46', '#42d692',
            '#16a765', '#7bd148', '#9fe1e7',
            '#9fc6e7', '#4986e7', '#9a9cff',
            '#cca6ac', '#f691b2', '#cd74e6');
        $this->set('Colors', $Colors);
    }

    // function pop_config_shipping_mark() {
    //     global $g_Commons;
    //     $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
    //     $g_AttrDics = $g_Commons->GlobalController('AttrDics');
    //     $g_Logs = $g_Commons->GlobalController('Logs');
    //     $g_Enums = $g_Commons->GlobalController('Enums');
    //     $g_ErpMfInfos = $g_Commons->GlobalController('ErpMfInfos');
    //     $g_Products = $g_Commons->GlobalController('Products');
    //     $g_ObjRelObj->recursive = -1;
    //     $this->Req->recursive = -1;

    //     // OCS-2119 唛头模板做成可配置
    //     $this->pop_shipping_mark_config();
    //     $this->render('pop_shipping_mark_config');
    //     return;

    //     $AllParams = $g_Commons->getUrlParams($this->params->params);
    //     $AllParams['P']['tmpl'] = isset($AllParams['P']['tmpl'])?$AllParams['P']['tmpl']:'';
    //     $this->set('AllParams', $AllParams);

    //     //唛头模板名称，不能随便修改下标
    //     $MarkTmpls = array(
    //         'UMC' => 'UMC模板',
    //         'JP' => '金品模板',
    //         'JPSP' => '金品特殊模板',
    //         'HK' => '惠科模板',
    //         'CH' => '长虹模板',
    //         'PD' => '熊猫模板',
    //         'KJC' => 'KJC模板',
    //         'LX' => '理想模板',
    //         'GJ' => '冠捷模板',
    //         'JZ' => '景智模板',
    //         'CNC'=>'新世纪',
    //         'GC'=>'高创',
    //         'GC_H'=>'高创海尔',
    //         'WISTRON'=>'中山纬创',
    //         );
    //     $this->set('MarkTmpls', $MarkTmpls);

    //     $ReqIds = explode(',', $AllParams['P']['req_ids']);
    //     if (!isset($AllParams['P']['req_ids']) || empty($ReqIds)) {
    //         return;
    //     }

    //     $InitMetaKeys = array('remark','prod_tag','release_batch_no','big_account_prod_model','etd','inv_type',
    //         'sm_account_prod_model','release_quantity','part_name','tunner_account_mno','tunner_account_mno_s2','account_product_code',
    //         'tunner_prod_model','account_batch_no','jp_mr','jp_p1_quantity','jp_p2_quantity','jp_fac_lot_no','jp_order_no','jp_description',
    //         'constant_current','seq_number','tunner_prod_tag','sw_version','big_account_prod_model_tunner','big_account_prod_model_tunner_s2','part_name_tunner',
    //         'part_name_tunner_s2','kjc_account_cno', 'kjc_account_mno', 'kjc_prod_name', 'kjc_prod_desc', 'kjc_account_model', 'kjc_erp_batch_no', 'kjc_chassis_model', 'kjc_sn',
    //         'prod_tag_remark', 'gj_delivery_date', 'gj_mark_num', 'gj_tag_month', 'jz_version', 'jz_ec_number', 'hw_version',
    //         'buyer_model_name', 'rf_tag', 'safe_tag', 'po_line','jpsp_carton_no','jpsp_fac_order_no','jpsp_contract_no','jpsp_board_label'
    //         );
    //     $this->set('InitMetaKeys', $InitMetaKeys);

    //     $Reqs = $this->Req->find('all', array(
    //         'conditions' => array('Req.id' => $ReqIds),
    //         'joins' => array(
    //             array(
    //                 'table' => 'contracts',
    //                 'alias' => 'Contract',
    //                 'type' => 'inner',
    //                 'conditions' => 'Contract.id = Req.rel_obj_id'
    //             ),
    //             array(
    //                 'table' => 'obj_rel_objs',
    //                 'alias' => 'ObjRelObj',
    //                 'type' => 'left',
    //                 'conditions' => 'ObjRelObj.rel_obj_id = Req.id AND ObjRelObj.meta_type = ' . OCS_OBJ_REL_OBJ_TYPE_MARK . '
    //             AND ObjRelObj.model_def_id=' . Req . " AND ObjRelObj.meta_key='Req.shipping_mark'"
    //             ),
    //         ),
    //         'fields' => array(
    //             'Req.id,Req.name,Req.ebs_order_number,Req.account_id,Req.quantity,Req.product_id,Req.remark',
    //             'Contract.contract_no,Contract.account_mno,Contract.account_cno,Contract.account_bno,Contract.delivety_time',
    //             'Contract.account_prod_name', 'ObjRelObj.*','Contract.free_spare_qty'
    //         ),
    //         'group' => array('Req.id'),
    //     ));

    //     if (!empty($Reqs)) {
    //         foreach ($Reqs as $idx => $Req) {
    //             if (isset($Req['ObjRelObj']['id']) && $Req['ObjRelObj']['id'] > 0) {
    //                 $ObjRelObj = $g_ObjRelObj->find('first', array(
    //                             'conditions' => array(
    //                                 'ObjRelObj.model_def_id' => Req,
    //                                 'ObjRelObj.rel_obj_id' => $Req['Req']['id'],
    //                                 'ObjRelObj.meta_type' => OCS_OBJ_REL_OBJ_TYPE_MARK,
    //                                 'ObjRelObj.meta_key' => 'Req.shipping_mark'
    //                             ),
    //                             'order' => array('ObjRelObj.id desc')
    //                         ));
    //                 $Req['ObjRelObj'] = $ObjRelObj['ObjRelObj'];
    //                 $Reqs[$idx] = $Req;
    //             }
    //         }
    //     }

    //     $Reqs = $g_AttrDics->formatAllModelData($Reqs);
    //     if (!empty($Reqs)) {
    //         foreach ($Reqs as $idx => $Req) {
    //             if (!empty($Req['ObjRelObj']) && $Req['ObjRelObj']['id'] > 0) {
    //                 $Req['ObjRelObj']['meta_value'] = json_decode($Req['ObjRelObj']['meta_value'], true);
    //             }

    //             //产品详情
    //             $ProductDetails =  new ProdDetailsController($Req['Req']['product_id']);
    //             $Req['ProductDetails'] = $ProductDetails;
    //             $Reqs[$idx] = $Req;
    //         }
    //     }

    //     $this->set('Reqs', $Reqs);

    //     $InvTypeList = $g_Enums->getEnumListByDictName('ObjRelObj.inv_type');
    //     $this->set('InvTypeList', $InvTypeList);

    //     $ReqRelBatchNos = $g_ErpMfInfos->getAllBatchNoStrByReqId($ReqIds);
    //     $this->set('ReqRelBatchNos', $ReqRelBatchNos);

    //     $this->set('saveComplete', 0);
    //     if ($this->request->is('post')) {
    //         $submitData = $this->request->data;
    //         foreach ($submitData as $idx => $temp) {
    //             $ReqId = preg_replace('/req_/', '', $idx);
    //             if (empty($ReqId)) {
    //                 continue;
    //             }
    //             $log_content = '';
    //             $meta_value = array();
    //             $meta_value['prod_tag'] = isset($temp['prod_tag']) ? $temp['prod_tag'] : '';
    //             $meta_value['release_quantity'] = isset($temp['release_quantity']) ? $temp['release_quantity'] : '';
    //             $meta_value['remark'] = isset($temp['remark']) ? $temp['remark'] : '';
    //             if (isset($temp['Contract.account_mno']) && 'on' == $temp['Contract.account_mno']) {
    //                 $meta_value['Contract.account_mno'] = 'Contract.account_mno';
    //             }
    //             if (isset($temp['Contract.account_cno']) && 'on' == $temp['Contract.account_cno']) {
    //                 $meta_value['Contract.account_cno'] = 'Contract.account_cno';
    //             }
    //             if (isset($temp['SwAttr.SW_Panel']) && 'on' == $temp['SwAttr.SW_Panel']) {
    //                 $meta_value['SwAttr.SW_Panel'] = 'SwAttr.SW_Panel';
    //             }
    //             if (isset($temp['Product.HW_Power_Backlight']) && 'on' == $temp['Product.HW_Power_Backlight']) {
    //                 $meta_value['Product.HW_Power_Backlight'] = 'Product.HW_Power_Backlight';
    //             }
    //             if (isset($AllParams['P']['tmpl'])) {
    //                 switch ($AllParams['P']['tmpl']) {
    //                     case 'UMC':
    //                         $meta_value['release_batch_no'] = isset($temp['release_batch_no']) ? trim($temp['release_batch_no']) : ''; //发放批号
    //                         $meta_value['release_quantity'] = isset($temp['release_quantity']) ? trim($temp['release_quantity']) : ''; //数量
    //                         $meta_value['big_account_prod_model'] = isset($temp['big_account_prod_model']) ? $temp['big_account_prod_model'] : ''; //客户型号
    //                         $meta_value['etd'] = isset($temp['etd']) ? $temp['etd'] : ''; //ETD
    //                         $meta_value['part_name'] = isset($temp['part_name']) ? $temp['part_name'] : ''; //part_name
    //                         $meta_value['inv_type'] = isset($temp['inv_type']) ? $temp['inv_type'] : ''; //货物类型
    //                         $meta_value['sm_account_prod_model'] = isset($temp['sm_account_prod_model']) ? $temp['sm_account_prod_model'] : ''; //小唛头机型
    //                         $meta_value['tunner_account_mno'] = isset($temp['tunner_account_mno']) ? $temp['tunner_account_mno'] : ''; //高频头料号
    //                         $meta_value['big_account_prod_model_tunner'] = isset($temp['big_account_prod_model_tunner']) ? $temp['big_account_prod_model_tunner'] : '';//大唛高频头机型号
    //                         $meta_value['part_name_tunner'] = isset($temp['part_name_tunner']) ? $temp['part_name_tunner'] : '';//part name高频头

    //                         $meta_value['tunner_account_mno_s2'] = isset($temp['tunner_account_mno_s2']) ? $temp['tunner_account_mno_s2'] : ''; //高频头S2料号
    //                         $meta_value['big_account_prod_model_tunner_s2'] = isset($temp['big_account_prod_model_tunner_s2']) ? $temp['big_account_prod_model_tunner_s2'] : '';//大唛高频头S2机型号
    //                         $meta_value['part_name_tunner_s2'] = isset($temp['part_name_tunner_s2']) ? $temp['part_name_tunner_s2'] : '';//part nameS2高频头

    //                         $meta_value['order_account_prod_name'] = isset($temp['order_account_prod_name']) ? $temp['order_account_prod_name'] : '';
    //                         $meta_value['order_account_cno'] = isset($temp['order_account_cno']) ? $temp['order_account_cno'] : '';
    //                         $meta_value['order_account_mno'] = isset($temp['order_account_mno']) ? $temp['order_account_mno'] : '';
    //                         break;
    //                     case 'CH':
    //                         $meta_value['release_batch_no'] = isset($temp['release_batch_no']) ? trim($temp['release_batch_no']) : ''; //发放批号
    //                         $meta_value['account_product_code'] = isset($temp['account_product_code']) ? trim($temp['account_product_code']) : ''; //客户物料编码
    //                         $meta_value['tunner_prod_model'] = isset($temp['tunner_prod_model']) ? trim($temp['tunner_prod_model']) : ''; //高频头型号
    //                         $meta_value['account_batch_no'] = isset($temp['account_batch_no']) ? $temp['account_batch_no'] : ''; //客户批次/生产通知号
    //                         break;
    //                     case 'JP':
    //                         $meta_value['big_account_prod_model'] = isset($temp['big_account_prod_model']) ? trim($temp['big_account_prod_model']) : ''; //客户机型号（与订单不同）
    //                         $meta_value['jp_mr'] = isset($temp['jp_mr']) ? trim($temp['jp_mr']) : ''; //MR
    //                         $meta_value['jp_p1_quantity'] = isset($temp['jp_p1_quantity']) ? $temp['jp_p1_quantity'] : ''; //数量1
    //                         $meta_value['jp_p2_quantity'] = isset($temp['jp_p2_quantity']) ? $temp['jp_p2_quantity'] : ''; //数量2
    //                         $meta_value['jp_sum_quantity'] = (int)trim($meta_value['jp_p1_quantity']) + (int)trim($meta_value['jp_p2_quantity']);
    //                         $meta_value['prod_tag'] = isset($temp['prod_tag']) ? $temp['prod_tag'] : ''; //标贴
    //                         $meta_value['jp_fac_lot_no'] = isset($temp['jp_fac_lot_no']) ? $temp['jp_fac_lot_no'] : '';
    //                         $meta_value['jp_order_no'] = isset($temp['jp_order_no']) ? $temp['jp_order_no'] : '';
    //                         $meta_value['jp_description'] = isset($temp['jp_description']) ? $temp['jp_description'] : '';
    //                         break;
    //                     case 'JPSP':
    //                         $meta_value['jpsp_carton_no'] = isset($temp['jpsp_carton_no']) ? trim($temp['jpsp_carton_no']) : ''; //箱号
    //                         $meta_value['jpsp_fac_order_no'] = isset($temp['jpsp_fac_order_no']) ? $temp['jpsp_fac_order_no'] : ''; //工厂订单号
    //                         $meta_value['jpsp_contract_no'] = isset($temp['jpsp_contract_no']) ? $temp['jpsp_contract_no'] : ''; //客户合同号
    //                         $meta_value['big_account_prod_model'] = isset($temp['big_account_prod_model']) ? $temp['big_account_prod_model'] : ''; //客户型号
    //                         $meta_value['jpsp_board_label'] = isset($temp['jpsp_board_label']) ? $temp['jpsp_board_label'] : ''; //客户型号
    //                         break;
    //                     case 'HK':
    //                         $meta_value['release_quantity'] = isset($temp['release_quantity']) ? trim($temp['release_quantity']) : ''; //数量
    //                         $meta_value['remark'] = isset($temp['remark']) ? trim($temp['remark']) : '';
    //                         $meta_value['tunner_prod_tag'] = isset($temp['tunner_prod_tag']) ? $temp['tunner_prod_tag'] : ''; //高频头标贴
    //                         $meta_value['constant_current'] = isset($temp['constant_current']) ? trim($temp['constant_current']) : '';
    //                         $meta_value['seq_number'] = isset($temp['seq_number']) ? trim($temp['seq_number']) : '';
    //                         break;
    //                     case 'PD':
    //                     case 'CNC':
    //                         $meta_value['sw_version'] = isset($temp['sw_version']) ? $temp['sw_version'] : ''; //软件版本号
    //                         break;
    //                     case 'KJC':
    //                         $meta_value['kjc_account_cno'] = isset($temp['kjc_account_cno']) ? $temp['kjc_account_cno'] : ''; //订单编号
    //                         $meta_value['kjc_account_mno'] = isset($temp['kjc_account_mno']) ? $temp['kjc_account_mno'] : ''; //料号
    //                         $meta_value['kjc_prod_name'] = isset($temp['kjc_prod_name']) ? $temp['kjc_prod_name'] : ''; //品名
    //                         $meta_value['kjc_prod_desc'] = isset($temp['kjc_prod_desc']) ? $temp['kjc_prod_desc'] : ''; //规格描述
    //                         $meta_value['kjc_account_model'] = isset($temp['kjc_account_model']) ? $temp['kjc_account_model'] : ''; //客户机型
    //                         $meta_value['kjc_erp_batch_no'] = isset($temp['kjc_erp_batch_no']) ? $temp['kjc_erp_batch_no'] : ''; //批号
    //                         $meta_value['kjc_chassis_model'] = isset($temp['kjc_chassis_model']) ? $temp['kjc_chassis_model'] : ''; //CHASSIS/MODEL
    //                         $meta_value['sw_version'] = isset($temp['sw_version']) ? $temp['sw_version'] : ''; //S/W VERSION
    //                         $meta_value['kjc_sn'] = isset($temp['kjc_sn']) ? trim($temp['kjc_sn']) : ''; //S/N
    //                         break;
    //                     case 'GJ':
    //                         $meta_value['gj_delivery_date'] = isset($temp['gj_delivery_date']) ? trim($temp['gj_delivery_date']) : ''; //交货日期
    //                         $meta_value['gj_mark_num'] = isset($temp['gj_mark_num']) ? trim($temp['gj_mark_num']) : ''; //贴唛头数量
    //                         $meta_value['gj_tag_month'] = isset($temp['gj_tag_month']) ? trim($temp['gj_tag_month']) : ''; //标签月份
    //                         break;
    //                     case 'JZ':
    //                         $meta_value['jz_version'] = isset($temp['jz_version']) ? trim($temp['jz_version']) : ''; //版本
    //                         $meta_value['jz_ec_number'] = isset($temp['jz_ec_number']) ? trim($temp['jz_ec_number']) : ''; //EC号
    //                         $meta_value['sw_version'] = isset($temp['sw_version']) ? trim($temp['sw_version']) : ''; //软件版本
    //                         $meta_value['hw_version'] = isset($temp['hw_version']) ? trim($temp['hw_version']) : ''; //硬件版本
    //                         break;
    //                     default:
    //                         $meta_value['buyer_model_name'] = isset($temp['buyer_model_name']) ? trim($temp['buyer_model_name']) : ''; // BUYER MODEL NAME
    //                         $meta_value['rf_tag'] = isset($temp['rf_tag']) ? trim($temp['rf_tag']) : ''; // RF头上贴标签
    //                         $meta_value['safe_tag'] = isset($temp['safe_tag']) ? trim($temp['safe_tag']) : ''; // 贴安规贴纸
    //                         $meta_value['po_line'] = isset($temp['po_line']) ? trim($temp['po_line']) : ''; // PO LINE
    //                         $meta_value['sw_version'] = isset($temp['sw_version']) ? $temp['sw_version'] : ''; //软件版本号
    //                     break;
    //                 }
    //             }

    //             foreach ($meta_value as $key => $value) {
    //                 $log_content .= $key . '=>' . $value . '; ';
    //             }
    //             $meta_value = json_encode($meta_value);

    //             if (!empty($Reqs) && isset($AllParams['P']['tmpl']) && ('UMC' == $AllParams['P']['tmpl'])) {//UMC唛头特殊处理，都是新建
    //                 $ObjRelObj = array();
    //                 $ObjRelObj['model_def_id'] = Req;
    //                 $ObjRelObj['rel_obj_id'] = $ReqId;
    //                 $ObjRelObj['meta_type'] = OCS_OBJ_REL_OBJ_TYPE_MARK;
    //                 $ObjRelObj['meta_key'] = 'Req.shipping_mark';
    //                 $ObjRelObj['meta_value'] = $meta_value;
    //                 $g_ObjRelObj->create();
    //                 $g_ObjRelObj->save($ObjRelObj);
    //             } else {
    //                 $ObjRelObj = $g_ObjRelObj->find('first', array('conditions' => array('ObjRelObj.model_def_id' => Req, 'ObjRelObj.rel_obj_id' => $ReqId,
    //                                 'ObjRelObj.meta_type' => OCS_OBJ_REL_OBJ_TYPE_MARK, 'ObjRelObj.meta_key' => 'Req.shipping_mark'),
    //                                 'order'=>array('ObjRelObj.id desc')));
    //                 if (empty($ObjRelObj)) {//新建
    //                     $ObjRelObj = array();
    //                     $ObjRelObj['model_def_id'] = Req;
    //                     $ObjRelObj['rel_obj_id'] = $ReqId;
    //                     $ObjRelObj['meta_type'] = OCS_OBJ_REL_OBJ_TYPE_MARK;
    //                     $ObjRelObj['meta_key'] = 'Req.shipping_mark';
    //                     $ObjRelObj['meta_value'] = $meta_value;
    //                     $g_ObjRelObj->create();
    //                     $g_ObjRelObj->save($ObjRelObj);
    //                 } else {//编辑
    //                     $ObjRelObj['ObjRelObj']['meta_value'] = $meta_value;
    //                     $g_ObjRelObj->save($ObjRelObj['ObjRelObj']);
    //                 }
    //             }

    //             //record log
    //             $g_Logs->write_log('ObjRelObjs', $g_ObjRelObj->id, 'info', $log_content);
    //         }

    //         $this->set('saveComplete', 1);
    //     }
    // }

    //维护跟进备注
    function pop_edit_owner_remark() {
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $ReqIds = explode(',', $AllParams['P']['req_ids']);
        if (!isset($AllParams['P']['req_ids']) || empty($ReqIds)) {
            return;
        }

        $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ReqIds),
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                    ),
                    'fields' => array('Req.id,Req.name,Req.ebs_order_number,Req.account_id,Req.quantity,Req.product_id,Req.remark,Req.mf_remark,Req.owner_remark',
                        'Contract.contract_no,Contract.account_mno,Contract.account_cno,Contract.account_bno,Contract.delivety_time,Contract.change_delivety_time_reason')
                ));
        $Reqs = $g_AttrDics->formatAllModelData($Reqs);
        $this->set('Reqs', $Reqs);

        $MfPlanBillList = array();
        $MfPlanBills = $g_MfPlanBill->find('all', array('conditions' => array('MfPlanBill.req_id' => $ReqIds),
                    'fields' => array('MfPlanBill.id', 'MfPlanBill.req_id', 'MfPlanBill.erp_lot_number')));
        if (!empty($MfPlanBills)) {
            foreach ($MfPlanBills as $MfPlanBill) {
                if (!empty($MfPlanBill['MfPlanBill']['erp_lot_number'])) {
                    $MfPlanBillList[$MfPlanBill['MfPlanBill']['req_id']][] = $MfPlanBill['MfPlanBill']['erp_lot_number'];
                }
            }
        }
        $this->set('MfPlanBillList', $MfPlanBillList);

        //是否已有工单，如有不允许修改发运日期
        $is_has_wips = $this->Req->getIsHasWipByReqIds($ReqIds);
        $this->set('is_has_wips', $is_has_wips);

        $this->set('saveComplete', 0);
        if ($this->request->is('post')) {
            $submitData = $this->request->data;
            foreach ($submitData as $idx => $temp) {
                $ReqId = preg_replace('/req_/', '', $idx);
                if (empty($ReqId)) {
                    continue;
                }
                $Req = $this->Req->find('first', array(
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                    ),
                    'conditions' => array(
                        'Req.id' => $ReqId
                    ) ,
                    'fields' => array(
                        'Req.id',
                        'Req.name',
                        'Req.ebs_order_number',
                        'Req.owner_remark',
                        'Contract.id',
                        'Contract.delivety_time',
                    )
                ));
                if (!empty($Req)) {
                    $old_owner_remark = $Req['Req']['owner_remark'];
                    $Req['Req']['owner_remark'] = $temp['owner_remark'];
                    $this->Req->save($Req['Req']);

                    $old_delivety_time = $Req['Contract']['delivety_time'];
                    if (isset($temp['delivety_time'])) {
                        $Req['Contract']['delivety_time'] = $temp['delivety_time'];
                    }
                    if (isset($temp['change_delivety_time_reason'])) {
                        $Req['Contract']['change_delivety_time_reason'] = $temp['change_delivety_time_reason'];
                    }
                    $g_Contract->save($Req['Contract']);

                    //add common log
                    $g_xxar_common_log = $g_Commons->GlobalModel('XxarCommonLog');
                    $log_row = array(
                        'created_by' => $g_xxar_common_log->get_username(),
                        'action' => 'Reqs.edit_owner_remark',
                        'string_fields' => '1Req.id_2EBS编号_3旧跟进备注_4新跟进备注_5Contract.id_6旧交货日期_7新交货日期',
                        'string1' => $Req['Req']['id'],
                        'string2' => $Req['Req']['ebs_order_number'],
                        'string3' => $old_owner_remark,
                        'string4' => $Req['Req']['owner_remark'],
                        'string5' => $Req['Contract']['id'],
                        'string6' => $old_delivety_time,
                        'string7' => $Req['Contract']['delivety_time'],
                        'remark' => $g_xxar_common_log->get_client_ip(),
                    );
                    $write_log_result = $g_xxar_common_log->insert($log_row);

                    if (!empty($Req['Req']['ebs_order_number'])) {
                        $this->SyncContractToEBSByReqId($ReqId, true);
                        $g_Logs->write_log('Reqs', $ReqId, 'info' , '编辑跟进备注及发货日期，自动同步订单。');
                    }
                }
            }

            //自动更新软件任务软件完成时间信息
            $g_Task = $g_Commons->GlobalModel('Task');
            $g_Task->autoUpdateSwCompleteDate($ReqId);

            $this->set('saveComplete', 1);
        }
    }

    function export_bom_task() {
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_PrintTmpls = $g_Commons->GlobalController('PrintTmpls');
        $g_Excels = $g_Commons->GlobalController('Excels');
        $g_PrintTmpls->PrintTmpl->recursive = -1;
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $StartDate = isset($AllParams['P']['start_date']) ? $AllParams['P']['start_date'] : date('Y-m-d', mktime(0, 0, 0, date("m"), 1, date("Y")));
        $EndDate = isset($AllParams['P']['end_date']) ? $AllParams['P']['end_date'] : date('Y-m-d');
        $this->set('StartDate', $StartDate);
        $this->set('EndDate', $EndDate);

        //提交，导出Excel
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submitData = $this->request->data;

            $StartDate = $submitData['start_date'];
            $EndDate = $submitData['end_date'];

            $this->set('StartDate', $StartDate);
            $this->set('EndDate', $EndDate);

            $Reqs = $this->Req->find('all', array(
                        'conditions' => array(
                            'Req.is_mf' => OCS_REQ_MF_NEW,
                            "Req.bom_assign_time > '" . $StartDate . "' AND Req.bom_assign_time < '" . $EndDate . "'"
                        ),
                        'joins' => array(
                            array(
                                'table' => 'mf_plan_bills',
                                'alias' => 'MfPlanBill',
                                'type' => 'inner',
                                'conditions' => 'MfPlanBill.req_id = Req.id AND MfPlanBill.rel_idx=0'
                            ),
                            array(
                                'table' => 'products',
                                'alias' => 'Product',
                                'type' => 'inner',
                                'conditions' => 'Product.id = Req.product_id'
                            ),
                        ),
                        'fields' => array(
                            'Req.id,Req.ebs_order_number,Req.name,Req.owner_user_id,Req.account_id,Req.product_id,Req.bom_assign_time,Req.prod_change_times,Req.last_change_prod_time',
                            'MfPlanBill.bom_audit_user_id,MfPlanBill.hw_audit_user_id,MfPlanBill.power_audit_user_id,hw_audit_status,bom_confirm_status,MfPlanBill.reset_bom_task_time,
                    MfPlanBill.hw_audit_time,MfPlanBill.bom_audit_time',
                            'Product.name,Product.code,Product.is_semi'
                        ),
                    ));

            $Reqs = $g_AttrDics->formatAllModelData($Reqs);

            if (empty($Reqs)) {
                $this->set('setFlash', 1);
                $this->Session->setFlash('此时间段没有BOM任务');
                return;
            }

            $PrintTmplAlias = 'Bom_Task';
            $PrintTmpl = $g_PrintTmpls->PrintTmpl->find('first', array(
                        'joins' => array(array('table' => 'attachments', 'alias' => 'Attachment', 'type' => 'LEFT', 'conditions' => 'Attachment.id = PrintTmpl.attachment_id')),
                        'conditions' => array('PrintTmpl.model_def_id' => Req, 'PrintTmpl.alias' => $PrintTmplAlias,),
                        'fields' => 'Attachment.id, PrintTmpl.output_file_name'
                    ));
            if (empty($PrintTmpl)) {
                echo '未找到模板';
                exit;
            }
            $FileName = $StartDate . ' 到 ' . $EndDate . 'BOM任务统计';
            return $g_Excels->export($PrintTmpl['Attachment']['id'], $FileName, 'Reqs', null, null, $Reqs);
        }
    }

    //根据EBS订单自动设置为已建交付
    function SetInvOrders($UserId = null, $req_ids = array()) {
        set_time_limit(0);
        global $g_BizId;
        global $g_Commons;
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $this->Req->recursive = -1;

        $conds = array('Req.model_def_id' => Contract, 'Req.dest_type' => 'EBS');
        $conds[] = '(Req.close_status = 0 OR Req.close_status = ' . OCS_ORDER_CLOSE_STATUS_DELIVERY . ')';
        if (!empty($UserId) && (int) $UserId > 0) {
            $conds['OR'] = array('Req.owner_user_id' => $UserId, 'Req.create_user_id' => $UserId);
        }

        if (!empty($req_ids)) {
            $conds['Req.id'] = $req_ids;
        }

        $ReqIds = $this->Req->find('list', array('conditions' => $conds, 'fields' => array('Req.id')));
        $result = $this->Req->GetIsInvByReqIds($ReqIds);
        if (!$result['success']) {
            return false;
        }
        if (!empty($result['datas'])) {
            foreach ($result['datas'] as $ReqId => $value) {
                $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                            'fields' => array('Req.id', 'Req.close_status')));
                if (empty($Req)) {
                    continue;
                }
                if ($value && 0 == $Req['Req']['close_status']) {//进行中=>已建交付
                    $old_status = $Req['Req']['close_status'];
                    $Req['Req']['close_status'] = OCS_ORDER_CLOSE_STATUS_DELIVERY; //已建交付
                    $this->Req->save($Req['Req']);

                    $log_content = '订单状态由：' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $old_status) . '=> ' .
                            $g_Enums->getLabelByDictNameAndValue('Req.close_status', $Req['Req']['close_status']);
                    $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);
                }else if(!$value && OCS_ORDER_CLOSE_STATUS_DELIVERY == $Req['Req']['close_status']) {//已建交付=>进行中
                    $old_status = $Req['Req']['close_status'];
                    $Req['Req']['close_status'] = 0; //进行中
                    $this->Req->save($Req['Req']);

                    $log_content = '取消发货，订单状态由：' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $old_status) . '=> ' .
                            $g_Enums->getLabelByDictNameAndValue('Req.close_status', $Req['Req']['close_status']);
                    $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);
                }
            }
        }
    }

    //根据EBS订单自动设置为已关闭或者作废
    function SetCloseOrders($UserId = null, $req_ids = array()) {
        set_time_limit(0);
        global $g_BizId;
        global $g_Commons;
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_StockApplyHeader = $g_Commons->GlobalModel('StockApplyHeader');
        $this->Req->recursive = -1;
        $this->autoRender = false;

        $conds = array('Req.model_def_id' => Contract, 'Req.dest_type' => 'EBS', 'Req.parent_id' => 0, 'Req.close_status NOT ' => array(OCS_ORDER_CLOSE_STATUS_CLOSE, OCS_ORDER_CLOSE_STATUS_CANCEL));
        if (!empty($UserId) && (int) $UserId > 0) {
            $conds['OR'] = array('Req.owner_user_id' => $UserId, 'Req.create_user_id' => $UserId);
        }
        // $req_ids = array(500220);

        if (!empty($req_ids)) {
            $conds['Req.id'] = $req_ids;
        }

        $reqs = $this->Req->find('all', array('conditions' => $conds, 'fields' => array('Req.id', 'Req.create_time')));
        if (empty($reqs)) {
            return;
        }
        $ReqIds = array();
        $need_auto_release_stock_req_ids = array(); //记录需要自动释放库存预订的订单req_ids，当创建时间超过2个月，则自动释放
        foreach ($reqs as $req) {
            $ReqIds[] = $req['Req']['id'];
            if (strtotime($req['Req']['create_time']) < (time() - 5184000)) { //5184000为两个月60天的时间数值
                $need_auto_release_stock_req_ids[] = $req['Req']['id'];
            }
        }

        //设置关闭订单
        $result = $this->Req->GetIsClosedByReqIds($ReqIds);
        $close_req_ids = array();
        if (!empty($result['datas'])) {
            foreach ($result['datas'] as $ReqId => $value) {
                $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                            'fields' => array('Req.id', 'Req.close_status')));
                if (empty($Req)) {
                    continue;
                }
                if ($value) {//已关闭
                    $old_status = $Req['Req']['close_status'];
                    $Req['Req']['close_status'] = OCS_ORDER_CLOSE_STATUS_CLOSE; //已关闭
                    $this->Req->save($Req['Req']);

                    $close_req_ids[] = $this->Req->id;

                    $log_content = '订单状态由：' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $old_status) . '=> ' .
                            $g_Enums->getLabelByDictNameAndValue('Req.close_status', $Req['Req']['close_status']);
                    $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);

                    //订单取消，添加任务评论  comment by shavene 20151229
                    // $g_Task = $g_Commons->GlobalModel('Task');
                    // $g_Task->addTaskCommentByReqId($ReqId, '订单已关闭，无需处理软件。');

                    //订单关闭，自动释放库存预订数量
                    $g_StockReserveRelReq = $g_Commons->GlobalModel('StockReserveRelReq');
                    $g_StockReserveRelReq->autoReleaseReserveQty($ReqId);
                }
            }
        }

        /** 同步设置订单效率统计数据 */
        //调EBS方法，同步相关数据到中间表
        $g_SalesOrderEff = $g_Commons->GlobalModel('SalesOrderEff');
        $g_SalesOrderEff->syncEbsMmtInfo();

        //同步设置订单、工单相关
        $g_SalesOrderEff->syncOrderRelInfo($close_req_ids);

        /** end of 同步设置订单效率统计数据 */

        //设置作废订单
        $result = $this->Req->GetIsCancelledByReqIds($ReqIds);
        if (!$result['success']) {
            return false;
        }
        if (!empty($result['datas'])) {
            foreach ($result['datas'] as $ReqId => $value) {
                $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                            'fields' => array('Req.id', 'Req.close_status')));
                if (empty($Req)) {
                    continue;
                }
                if ($value) {//已作废
                    $old_status = $Req['Req']['close_status'];
                    $new_status = OCS_ORDER_CLOSE_STATUS_CANCEL;
                    // $Req['Req']['close_status'] = OCS_ORDER_CLOSE_STATUS_CANCEL; //已作废
                    // $this->Req->save($Req['Req']);
                    // 订单合同操作及字段更新规则
                    $this->Req->setReqStatusAction($ReqId, $new_status);//设置为已作废

                    //订单作废，则备货申请也作废
                    $g_StockApplyHeader->cancelStockApplyHeaderByReqIds($this->Req->id);

                    $log_content = '订单状态由：' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $old_status) . '=> ' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $new_status);
                    $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);

                    //订单关闭，自动释放库存预订数量
                    $g_StockReserveRelReq = $g_Commons->GlobalModel('StockReserveRelReq');
                    $g_StockReserveRelReq->autoReleaseReserveQty($ReqId);
                }
            }
        }

        //超过2个月的订单自动释放库存预订
        if (!empty($need_auto_release_stock_req_ids)) {
            $g_StockReserveRelReq = $g_Commons->GlobalModel('StockReserveRelReq');
            foreach ($need_auto_release_stock_req_ids as $req_id) {
                $stock_reserve_rel_req = $g_StockReserveRelReq->find('first', array(
                    'conditions' => array(
                        'StockReserveRelReq.req_id' => $req_id,
                        'StockReserveRelReq.reserve_qty > 0',
                    ),
                    'fields' => array(
                        'StockReserveRelReq.id',
                    )
                ));
                if (empty($stock_reserve_rel_req)) {
                    continue;
                }
                //订单作废或者关闭，自动释放库存预订数量
                $g_StockReserveRelReq->autoReleaseReserveQty($req_id);

                $g_Logs->write_log('Reqs', $req_id, 'info', '订单创建超过2个月，自动释放预订库存。');
            }
        }
    }

    //设置订单未交付数量
    function set_undelivered_qty($user_id = null, $req_id = null) {
        set_time_limit(0);
        global $g_BizId;
        global $g_Commons;
        $this->Req->recursive = -1;

        $conds = array(
            'Req.model_def_id' => Contract,
            'Req.dest_type' => 'EBS',
            'Req.close_status NOT ' => array(OCS_ORDER_CLOSE_STATUS_CLOSE, OCS_ORDER_CLOSE_STATUS_CANCEL)
        );

        if (!empty($user_id)) {
            $conds['OR'] = array('Req.owner_user_id' => $user_id, 'Req.create_user_id' => $user_id);
        }
        if(!empty($req_id)) {
            $conds = array();
            $conds['Req.id'] = $req_id;
        }

        $req_ids = $this->Req->find('list', array('conditions' => $conds, 'fields' => array('Req.id')));

        $this->Req->setUndeliveredQty($req_ids);
    }

    function auto_set_close_status_json($action = null) {
        global $g_Commons;
        global $g_UserId;
        $this->autoRender = false;
        $result = $g_Commons->initResult();

        switch ($action) {
            case 'to_delivery'://设置至已建交付
            case 'to_close': //关闭、取消
            case 'is_urgent': //紧急状态
                $req_ids = !empty($this->request->data['req_ids']) ? $this->request->data['req_ids'] : array();
                $this->SetInvOrders($g_UserId, $req_ids);
                $this->SetCloseOrders($g_UserId, $req_ids);
                $this->Req->setUrgentOrderStatus($g_UserId, $req_ids);
                break;
            default:
                $result['success'] = false;
                $result['message'] = 'error params.';
                echo json_encode($result);
                return;
                break;
        }

        $result['success'] = true;
        echo json_encode($result);
        exit;
    }

    function set_undelivered_qty_by_req_ids_json($req_ids = null) {
        global $g_Commons;
        global $g_UserId;
        $this->autoRender = false;

        $result = $g_Commons->initResult();

        if(!empty($_POST['req_ids']) || !empty($req_ids)) {
            $req_ids = !empty($_POST['req_ids']) ? $_POST['req_ids'] : explode(',', $req_ids);
            if(empty($req_ids)) {
                $result['success'] = false;
                $result['message'] = 'req_ids can not be null.';
                echo json_encode($result);
                return;
            }

            $this->set_undelivered_qty($g_UserId, $req_ids);

            $result['success'] = true;
        }else{
            $result['success'] = false;
            $result['message'] = 'error params.';
        }
        echo json_encode($result);
        return;
    }

    public function pop_change_product($id = null) {
        global $g_BizName;
        $this->autoRender = false;
        $this->Req->recursive = -1;

        $prod = $this->Req->find('first', array(
                    'joins' => array(
                        array(
                            'table' => 'products',
                            'alias' => 'Product',
                            'type' => 'LEFT',
                            'conditions' => 'Product.id=Req.product_id'
                        )
                    ),
                    'conditions' => array('Req.id' => $id),
                    'fields' => 'Product.id, Product.prod_model_id'
                ));
        if (empty($prod)) {
            echo '<h2>此订单无法更改产品</h2>';
            return;
        }
        $this->redirect(array(BizMark => $g_BizName, 'controller' => 'ProdModels', 'action' => 'standard_or_not', $prod['Product']['prod_model_id'], 'req_id' => $id, 'product_id' => $prod['Product']['id']));
    }

    //查看通用标贴
    function pop_view_common_label($EncryOrderNumber = null, $EncryReqId = null) {
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_WipRelObj = $g_Commons->GlobalModel('WipRelObj');
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_Products->Product->recursive = -1;
        $this->Req->recursive = -1;

        $EbsOrderNumber = $g_Commons->decrypt($EncryOrderNumber);
        $ReqId = $g_Commons->decrypt($EncryReqId);

        // $EbsOrderNumber = '1000010775';
        // $ReqId = '88470';

        $this->set('setFlash', 0);
        $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                        array(
                            'table' => 'products',
                            'alias' => 'Product',
                            'type' => 'inner',
                            'conditions' => 'Product.id = Req.product_id'
                        ),
                        array(
                            'table' => 'obj_rel_objs',
                            'alias' => 'ObjRelObj',
                            'type' => 'left',
                            'conditions' => "ObjRelObj.rel_obj_id = Req.id AND ObjRelObj.meta_type=" . OCS_OBJ_REL_OBJ_TYPE_MARK . "
                            AND ObjRelObj.meta_key= 'Req.shipping_mark' AND ObjRelObj.model_def_id = " . Req
                        ),
                    ),
                    'fields' => array('Req.id', 'Req.ebs_order_number', 'Req.sw_atom_ids_json', 'Req.product_id',
                        'Contract.account_cno,Contract.account_mno',
                        'Product.id,Product.name,Product.code',
                        'ObjRelObj.*'
                        )));
        if (empty($Req)) {
            echo 'req not found.';
            return;
        }
        // if ($Req['Req']['ebs_order_number'] != $EbsOrderNumber) {
        //     echo 'ebs order number not match.';
        //     exit;
        // }
        if (!isset($Req['ObjRelObj']['id']) || empty($Req['ObjRelObj']['id'])) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('未设置对应的标贴信息。');
            return;
        }

        $Req['ObjRelObj']['meta_value'] = json_decode($Req['ObjRelObj']['meta_value'], true);
        $SwAttr = $g_ProdAttrs->getSwAttrsAtoms($Req['Req']['sw_atom_ids_json']);
        $Req['SwAttr'] = $SwAttr;

        $ProductDetails = new ProdDetailsController($Req['Req']['product_id']);
        $Req['ProductDetails'] = $ProductDetails;
        $this->set('Req', $Req);
    }

    //查看指定时间内销售订单相关数据
    function view_order_trace() {
        global $g_Commons;
        global $g_BizName;
        global $g_BizId;
        set_time_limit(0);
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Account = $g_Commons->GlobalModel('Account');
        $this->Req->recursive = -1;

        $this->set('setFlash', 0);

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        if ($this->request->is('post')) {
            if (isset($this->request->data['search_value'])) {
                $qValue = trim($this->request->data['search_value']);
                $url_params = array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'view_order_trace');
                if (!empty($this->params->params['named'])) {
                    foreach ($this->params->params['named'] as $key => $p) {
                        $url_params[$key] = $p;
                    }
                }
                $url_params['page'] = 1;
                $url_params['q'] = $qValue;
                $this->redirect($url_params);
            }
        }

        if (!isset($AllParams['P']['start_date'])) {
            $StartDate = date("Y-m-d", mktime(0, 0, 0, date('n') - 1, 1, date('Y')));
        } else {
            $StartDate = $AllParams['P']['start_date'];
        }
        $EndDate = !isset($AllParams['P']['end_date']) ? date('Y-m-d') : $AllParams['P']['end_date'];
        if (!isset($AllParams['P']['end_date'])) {
            $EndDate = date('Y-m-d', mktime(date('H'), date('i'), date('s'), date('n', strtotime($EndDate)), date('j', strtotime($EndDate)), date('Y', strtotime($EndDate))));
        } else {
            $EndDate = $AllParams['P']['end_date'];
        }

        $this->set('StartDate', $StartDate);
        $this->set('EndDate', $EndDate);

        $conds = array();
        $conds[] = "Req.create_time >= '" . $StartDate . "' AND Req.create_time <= '" . $EndDate . "'";
        $conds[] = "Req.close_status NOT in (" . OCS_ORDER_CLOSE_STATUS_CANCEL . ")";
        $conds[] = 'Req.ebs_order_number IS NOT NULL';
        $conds[] = "Contract.ebs_stage > 0";
        $conds[] = "Contract.is_has_stock != 1";

        $qValue = '';
        $this->set('qValue', $qValue);
        if (isset($this->params->params['named']['q'])) {
            $qValue = $this->params->params['named']['q'];
            if (!empty($qValue)) {
                $search_cond = "Product.name LIKE '%" . $qValue . "%' OR Product.code LIKE '%" . $qValue . "%' OR Product.tmp_code LIKE '%" . $qValue . "%'
                    OR Req.id='" . $qValue . "' OR Req.name LIKE '%" . $qValue . "%' OR Req.ebs_order_number LIKE '%" . $qValue . "%'";

                $g_Enum = $g_Commons->GlobalModel('Enum');
                $Enum = $g_Enum->find('first', array('conditions' => array('Enum.dict_name' => 'Contract.ebs_stage', "Enum.label LIKE '%" . $qValue . "%'")));
                if (!empty($Enum)) {
                    $search_cond .= " OR Contract.ebs_stage=" . $Enum['Enum']['value'];
                }
                $Account = $g_Account->find('list', array('conditions' => array("Account.name LIKE '%" . $qValue . "%'"), 'fields' => array('Account.id')));
                if (!empty($Account)) {
                    $account_ids = implode(',', $Account);
                    if (!empty($account_ids)) {
                        $search_cond .= " OR Req.account_id IN(" . $account_ids . ")";
                    }
                }
                $conds[] = '(' . $search_cond . ')';
            }
            $this->set('qValue', $qValue);
        }

        $all_req_ids = array();
        $joins = array(
            array(
                'table' => 'contracts',
                'alias' => 'Contract',
                'type' => 'inner',
                'conditions' => 'Contract.id = Req.rel_obj_id'
            ),
            // array(
            //     'table' => 'mf_plan_bills',
            //     'alias' => 'MfPlanBill',
            //     'type' => 'left',
            //     'conditions' => 'MfPlanBill.req_id = Req.id and MfPlanBill.rel_idx = 0'
            // ),
            array(
                'table' => 'products',
                'alias' => 'Product',
                'type' => 'inner',
                'conditions' => 'Product.id = Req.product_id'
            ),
            array(
                'table' => 'prod_models',
                'alias' => 'ProdModel',
                'type' => 'inner',
                'conditions' => 'Product.prod_model_id = ProdModel.id'
            ),
        );
        $fields = array('Req.id', 'Req.ebs_order_number', 'Req.name', 'Req.quantity', 'Req.account_id', 'Req.product_id',
            'Req.owner_user_id', 'Req.sales_user_id', 'Req.create_time',
            'Contract.free_spare_qty', 'Contract.is_has_stock', 'Contract.delivety_time', 'Contract.ebs_stage',
            //'MfPlanBill.bom_confirm_time',
            'Product.prod_model_id', 'Product.name', 'Product.code',
            'ProdModel.prod_model_name'
            );
        $this->paginate['conditions'] = $conds;
        $this->paginate['joins'] = $joins;
        $this->paginate['fields'] = $fields;
        $this->paginate['limit'] = 100;
        if (!isset($AllParams['export'])) {
            $Reqs = $this->paginate();
        } else {
            $Reqs = $this->Req->find('all', array(
                'conditions' => $this->paginate['conditions'],
                'joins' => $this->paginate['joins'],
                'fields' => $this->paginate['fields'],
            ));
        }
        if (!empty($Reqs)) {
            foreach ($Reqs as $Req) {
                $all_req_ids[] = $Req['Req']['id'];
            }
        }

        $Reqs = $g_AttrDics->formatAllModelData($Reqs);
        $this->set('Reqs', $Reqs);

        //查订单阶段和工单信息
        $OrderStages = array();
        $WipInfos = array();
        if (!empty($all_req_ids)) {

            $SplitReqIds = $g_Commons->SpliteArray($all_req_ids, 900);
            foreach ($SplitReqIds as $ids) {
                //查阶段
                $sql = "
                    select * from apps.xxom_order_stage_change_log where OCS_REQ_ID IN(" . implode(',', $ids) . ")
                ";
                $stid = $g_Commons->ebsConnect($sql);

                $ReqIds = array();
                while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
                    $OrderStages[$row['OCS_REQ_ID']][$row['NEW_STAGE']] = $row;
                }
                //查工单
                $sql = "
                    select * from apps.XXOCS_WIP_REL_ORDER where OCS_REQ_ID IN(" . implode(',', $ids) . ")
                ";
                $stid = $g_Commons->ebsConnect($sql);

                $ReqIds = array();
                while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
                    $WipInfos[$row['OCS_REQ_ID']][$row['LOT_NUMBER']] = $row;
                }
            }
        }
        $this->set('OrderStages', $OrderStages);
        $this->set('WipInfos', $WipInfos);

        //导出订单明细
        if (isset($AllParams['export'])) {//导出excel
            $g_PrintTmpl = $g_Commons->GlobalModel('PrintTmpl');
            $g_Excels = $g_Commons->GlobalController('Excels');

            $PrintTmpl = $g_PrintTmpl->find('first', array(
                'joins' => array(array('table' => 'attachments', 'alias' => 'Attachment', 'type' => 'LEFT', 'conditions' => 'Attachment.id = PrintTmpl.attachment_id')),
                'conditions' => array('PrintTmpl.model_def_id' => Req, 'PrintTmpl.alias' => 'Order_Trace'),
                'fields' => 'Attachment.id, PrintTmpl.output_file_name',
                'order' => 'Attachment.create_time DESC'
            ));
            if (empty($PrintTmpl)) {
                echo '未找到模板';
                return;
            }
            if (!empty($Reqs)) {
                foreach ($Reqs as $idx => $Req) {
                    $ReqId = $Req['Req']['id'];
                    if (isset($OrderStages[$ReqId])) {
                        $Req['OrderStages'] = $OrderStages[$ReqId];
                    }
                    if (isset($WipInfos[$ReqId])) {
                        $WIP_CREATION_DATE = array();
                        $M_COMPLETE_DATE = array();
                        $batch_nos = array();
                        $count = count($WipInfos[$ReqId]);
                        $bom_create_time = '';
                        foreach ($WipInfos[$ReqId] as $lot_number => $row) {
                            if ($count > 1) {
                                $WIP_CREATION_DATE[] = '[' . $lot_number . ']' . $row['WIP_CREATION_DATE'];
                                $M_COMPLETE_DATE[] = '[' . $lot_number . ']' . $row['M_COMPLETE_DATE'];
                            } else {
                                $WIP_CREATION_DATE[] = $row['WIP_CREATION_DATE'];
                                $M_COMPLETE_DATE[] = $row['M_COMPLETE_DATE'];
                            }
                            $batch_nos[] = $lot_number;
                            $bom_create_time = $row['BOM_CREATE_TIME'];
                        }
                        $WIP_CREATION_DATE = implode(' ; ', $WIP_CREATION_DATE);
                        $M_COMPLETE_DATE = implode(' ; ', $M_COMPLETE_DATE);
                        $Req['WipInfos']['WIP_CREATION_DATE'] = $WIP_CREATION_DATE;
                        $Req['WipInfos']['M_COMPLETE_DATE'] = $M_COMPLETE_DATE;
                        $Req['WipInfos']['batch_nos'] = implode(',', $batch_nos);
                        $Req['WipInfos']['bom_create_time'] = $bom_create_time;
                    }
                    $Reqs[$idx] = $Req;
                }
            }
            $file_name = $StartDate . '至' . $EndDate . '订单明细';
            return $g_Excels->export($PrintTmpl['Attachment']['id'], $file_name, 'Reqs', null, null, $Reqs);
        }
    }

    /**
     * 查询指定订单的客户订金比例
     *
     * @Author   lishirong
     *
     * @DateTime 2016-07-29T10:53:27+0800
     *
     * @return   [type]                   [description]
     */
    function pop_view_account_balance_new() {
        global $g_Commons;
        global $g_BizId;
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_AccountAddress = $g_Commons->GlobalModel('AccountAddress');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $this->Req->recursive = -1;

        if (!$g_RolePrivs->get_priv_level('Reqs', 'can_view_account_money')) {
            $this->set('error_msg', '抱歉，你无权限查看客户订金比例，请联系运维人员开通：Reqs => can_view_account_money');
            return;
        }

        $all_params = $g_Commons->getUrlParams($this->params->params);
        $this->set('all_params',$all_params);
        $req_ids = explode(',',$all_params['P']['req_ids']);
        if (empty($req_ids)) {
            $this->set('error_msg', '参数错误，请联系管理员处理');
            return;
        }

        $req = $this->Req->find('first', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                )
            ),
            'conditions' => array(
                'Req.id' => $req_ids,
            ),
            'fields' => array(
                'Req.account_id',
                'Contract.bill_site_use_id',
            )
        ));
        $this->set('ship_account_name', $g_Account->findMainField($req['Req']['account_id']));

        $bill_site_use_id = !empty($all_params['P']['bill_site_use_id']) ? $all_params['P']['bill_site_use_id'] : $req['Contract']['bill_site_use_id'];
        $bill_account = $g_AccountAddress->getAccountBySiteUseId($bill_site_use_id);
        $account_short_name = !empty($bill_account['Account']['short_name']) ? $bill_account['Account']['short_name'] : null;

        $this->set('bill_site_use_id', $bill_site_use_id);
        $this->set('bill_account_name', $account_short_name);

        // 获取资金字段的模块键
        $func_model_key = !empty($all_params['P']['func_model_key']) ? $all_params['P']['func_model_key'] : '';

        //获取客户订金详情信息
        $po_result = $this->Req->getAccountFundsByReqIds($req_ids, $bill_site_use_id, $func_model_key);
        if (!$po_result['success']) {
            $this->set('error_msg', $po_result['message']);
            return;
        }
        $account_funds = $po_result['datas'];
        $this->set('account_funds', $account_funds);
        // pr($account_funds);

        //缓存数据（只缓存30min），用于查询明细时调用
        $redis_key = md5($this->params->url);
        $this->set('redis_key', $redis_key);
        $redis_data = json_encode($account_funds);
        $g_Commons->setRedisCache($redis_key, $redis_data, 1800);
        // pr($redis_key);

        //add by liaomingkai 2014-11-17
        $this->set('req_id', $req_ids[0]);
    }

    /**
     * 获取客户定金比例 下采购相关数据详情
     *
     * @Author   lishirong
     *
     * @DateTime 2016-07-29T10:53:00+0800
     *
     * @return   [type]                   [description]
     */
    function get_purchase_detail_json() {
        global $g_Commons;
        set_time_limit(1800);
        $result = $g_Commons->initResult();
        $this->autoRender = false;
        // $_POST['redis_key'] = '1273d12e56fa5ddfc7a5f5d0910780ab';
        // $_POST['type'] = 'purchased';

        if (empty($_POST) || empty($_POST['redis_key']) || empty($_POST['type'])) {
            $result['message'] = '参数错误，请联系管理员处理';
            echo json_encode($result);
            return;
        }
        //获取数据
        $redis_key = $_POST['redis_key'];
        $type = $_POST['type'];
        switch ($type) {
            case 'purchased': //获取已下采购未交货详情
                $po_result = $this->{$this->modelClass}->getRedisFunds($redis_key, 'purchased');
                if (!$po_result['success']) {
                    echo json_encode($po_result);
                    return;
                }
                $po_datas = $po_result['datas'];
            break;
            case 'current_purchase': //获取本次提交下采购详情
                $po_result = $this->{$this->modelClass}->getRedisFunds($redis_key, 'current_purchase');
                if (!$po_result['success']) {
                    echo json_encode($po_result);
                    return;
                }
                $po_datas = $po_result['datas'];
            break;
            default:
                $result['message'] = '该处理类型未定义，请联系管理员处理';
                echo json_encode($result);
                return;
            break;
        }
        if (empty($po_datas)) {
            $result['message'] = '返回数据为空';
            echo json_encode($result);
            return;
        }

        //组织输出表格
        $attr_dics = array(
            'OOH.ORDER_NUMBER' => array(
                'label' => 'EBS编号',
                'width' => '150px',
            ),
            'Contract.ebs_stage' => array(
                'label' => '订单阶段',
                'width' => '350px',
            ),
            'Req.name' => array(
                'label' => '订单主题',
                'width' => '400px',
            ),
            'PKG.PURCHASE_DATE' => array(
                'label' => '提交采购日期',
                'width' => '150px',
            ),
            'Contract.account_cno' => array(
                'label' => '客户单号',
                'width' => '150px',
            ),
            'Contract.account_mno' => array(
                'label' => '客户料号',
                'width' => '150px',
            ),
            'Req.quantity' => array(
                'label' => '订单数量',
                'width' => '150px',
            ),
            'Contract.undelivered_qty' => array(
                'label' => '未交付数量',
                'width' => '150px',
            ),
            'PKG.UNDELIVER_AMOUNT' => array(
                'label' => '未交货金额',
                'width' => '150px',
            ),
        );
        $html_data = '';
        $html_data .= '<table class="table table-bordered table-condensed table-hover">';
        $html_data .= '<tr>';
        $html_data .= '<th width="50px"></th>';
        foreach ($attr_dics as $key => $attr) {
            $html_data .= '<th width="' . $attr['width'] . '">' . $attr['label'] . '</th>';
        }
        $html_data .= '<th width="150px">x' . $po_datas['fixed_account_percent'] . '%金额</th>';
        $html_data .= '</tr>';
        $i = 0;
        foreach ($po_datas['Orders'] as $order_number => $data) {
            $html_data .= '<tr>';
            $html_data .= '<td>' . ($i++) . '</td>';
            foreach ($attr_dics as $key => $attr) {
                list($model, $field) = explode('.', $key);
                $value = isset($data[$model][$field]) ? $data[$model][$field] : '';
                $value = is_array($value) ? $value['label'] : $value;

                $html_data .= '<td>' . $value . '</td>';
            }
            $value = $data['PKG']['UNDELIVER_AMOUNT'] * $po_datas['fixed_account_percent'];
            $html_data .= '<td>' . $value . '</td>';
            $html_data .= '</tr>';
        }
        $html_data .= '</table>';

        $result['success'] = true;
        $result['datas'] = $html_data;
        echo json_encode($result);
        return;
    }

    //修改订单行数量
    function pop_modify_lines_qty($ReqId = null) {
        return;
        global $g_Commons;
        global $g_UserId;
        $g_OrderLineQt = $g_Commons->GlobalModel('OrderLineQt');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_ReqVersion = $g_Commons->GlobalModel('ReqVersion');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
        $g_Contract->recursive = -1;
        $this->Req->recursive = -1;

        $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                        array(
                            'table' => 'types',
                            'alias' => 'Type',
                            'type' => 'inner',
                            'conditions' => 'Type.id = Contract.type_id'
                        ),
                        array(
                            'table' => 'products',
                            'alias' => 'Product',
                            'type' => 'inner',
                            'conditions' => 'Product.id = Req.product_id'
                        ),
                        array(
                            'table' => 'prod_models',
                            'alias' => 'ProdModel',
                            'type' => 'inner',
                            'conditions' => 'ProdModel.id = Product.prod_model_id'
                        ),
                    ),
                    'fields' => array('Req.*', 'Contract.*', 'Type.name','ProdModel.name')));
        $this->set('Req', $Req);

        $OrderLines = $this->Req->GetOrderLinesByReqId($ReqId);
        $this->set('OrderLines', $OrderLines);

        $OrderLineTypeList = $g_Enums->getEnumListByDictName('Ebs.order_detail_type');
        $this->set('OrderLineTypeList', $OrderLineTypeList);

        //获取订单关联工单信息
        $tmp_result = $this->Req->GetContractRelWipByReqId($ReqId);
        $ContractRelWip = array();
        $WipQty = 0;
        global $g_CompleteWipStatus;
        if($tmp_result['success']){
            if(!empty($tmp_result['datas']) && !empty($tmp_result['datas'][$ReqId])){
                $wips = $tmp_result['datas'][$ReqId];
                if(!empty($wips)){
                    foreach($wips as $line_id=>$items){
                        foreach($items as $temp){
                            if (in_array($temp['STATUS_TYPE'], $g_CompleteWipStatus)) { //不包括完工的
                                continue;
                            }
                            if(!isset($ContractRelWip[$line_id]['quantity'])){
                                $ContractRelWip[$line_id]['quantity'] = 0;
                            }
                            $ContractRelWip[$line_id]['quantity'] += $temp['PRIMARY_QUANTITY'];
                            $WipQty += $temp['PRIMARY_QUANTITY'];

                            if(!isset($ContractRelWip[$line_id]['lot_number'])){
                                $ContractRelWip[$line_id]['lot_number'] = '';
                            }
                            $ContractRelWip[$line_id]['lot_number'] .= $temp['LOT_NUMBER'].'('.$temp['STATUS_MEANING'].'); ';

                            $ContractRelWip[$line_id]['wip_status'] = $temp['STATUS_TYPE'];
                        }
                    }
                }
            }
        }
        $this->set('WipQty',$WipQty);
        $this->set('ContractRelWip',$ContractRelWip);

        //获取建交货数量
        $DeliverQty = $this->Req->GetOrderDeliverQty($ReqId);
        $this->set('DeliverQty',$DeliverQty);

        //submit data
        $this->set('saveComplete',0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submitData = $this->request->data;

            $version = $g_OrderLineQt->GetNextVersion($ReqId); //获取下一版本
            $sum_quantity = 0;
            foreach ($submitData as $idx => $temp) {
                $sum_quantity += $temp['qty'];
                $LineId = preg_replace('/line_/', '', $idx);
                if (empty($LineId)) {
                    $this->set('setFlash', 1);
                    $this->Session->setFlash('line can not be null.');
                    return;
                }
            }
            foreach ($submitData as $idx => $temp) {
                $LineId = preg_replace('/line_/', '', $idx);
                $OrderLineQt = array();
                $OrderLineQt['req_id'] = $ReqId;
                $OrderLineQt['version'] = $version;
                $OrderLineQt['header_id'] = $OrderLines[$LineId]['HEADER_ID'];
                $OrderLineQt['line_id'] = $LineId;
                $OrderLineQt['line_name'] = $OrderLines[$LineId]['LINE_NAME'];
                $OrderLineQt['sum_quantity'] = $sum_quantity;
                $OrderLineQt['start_quantity'] = $OrderLines[$LineId]['ORDERED_QUANTITY'];
                $OrderLineQt['end_quantity'] = $temp['qty'];
                $OrderLineQt['create_user_id'] = $g_UserId;
                $OrderLineQt['create_time'] = date('Y-m-d H:i:s');
                $g_OrderLineQt->create();
                $g_OrderLineQt->save($OrderLineQt);
            }

            //如果是研发订单，则直接修改保存
            if(substr_count($Req['Type']['name'], '研发') > 0) {
                $g_Account = $g_Commons->GlobalModel('Account');
                $g_Account->recursive = -1;

                //生成订单主题
                $name = explode('-', $Req['Req']['name']);
                $name_date = $name[1];
                $Account = $g_Account->find('first', array('conditions' => array('Account.id' => $Req['Req']['account_id']),
                            'fields' => array('Account.id', 'Account.short_name')));
                $Req['Req']['name'] = $Account['Account']['short_name'] . '-' . $name_date . '-' . $Req['ProdModel']['name'] . '-' . $sum_quantity;

                $Req['Contract']['change_qty_version'] = $version;

                $g_Contract->save($Req['Contract']);

                $Req['Req']['quantity'] = $sum_quantity;
                $Req['Req']['update_user_id'] = $g_UserId;
                $Req['Req']['update_time'] = date('Y-m-d H:i:s');
                $this->Req->save($Req['Req']);

                $extend_params = array();
                $extend_params['modify_bill_audit'] = 1;
                $this->BatchSyncContractToEbs($this->Req->id, $extend_params); //同步至EBS

                $this->set('saveComplete',1);
                return;
            }

            $old_req = $this->Req->find('first', array(
                'conditions' => array(
                    'Req.id' => $Req['Req']['id'],
                ),
                'fields' => array(
                    'Req.id',
                    'Req.alter_audit_status',
                )
            ));

            $Req['Contract']['change_qty_version'] = $version;

            $Req['Contract']['is_crm_fail'] = 1;
            $Req['Contract']['crm_fail_reason'] = '关键信息变更，需业务经理审核，（数量变量）';
            $Req['Contract']['error_type'] = OCS_CONTRACT_ERROR_TYPE_AUDIT; //更改单待审核(需业务经理审核)
            $g_Contract->save($Req['Contract']);

            $Req['Req']['alter_audit_status'] = OCS_REQ_ALTER_AUDIT_STATUS_NEW; //关键信息变更-待审核
            $Req['Req']['update_user_id'] = $g_UserId;
            $Req['Req']['update_time'] = date('Y-m-d H:i:s');
            $this->Req->save($Req['Req']);

            //合同也需重新审核
            $g_ContractRelTmpl->resetContractAuditByReqIds($this->Req->id, '修改订单行数量，自动打回合同');

            $TempReqVersion = array();
            //获取最新的版本数据
            $last_req_version = $g_ReqVersion->getLastTmpReqVersion(Req, $Req['Req']['id'] );
            //如果该版本的数据没有审核就取最新的数据叠加 add by wyq 2014-12-22
            if (!empty($last_req_version) && $old_req['Req']['alter_audit_status'] == OCS_REQ_ALTER_AUDIT_STATUS_NEW) {
                $TempReqVersion['model_def_id'] = Req;
                $TempReqVersion['rel_obj_id'] = $Req['Req']['id'];
                $TempReqVersion['product_id'] = $last_req_version['ReqVersion']['product_id'];
                $TempReqVersion['account_id'] = $last_req_version['ReqVersion']['account_id'];
                $TempReqVersion['price'] = $last_req_version['ReqVersion']['price'];
                $TempReqVersion['foreign_price'] = isset($last_req_version['ReqVersion']['foreign_price']) ? $last_req_version['ReqVersion']['foreign_price'] : '';
                $TempReqVersion['quantity'] = $sum_quantity;
                $TempReqVersion['sw_atom_ids_json'] = $last_req_version['ReqVersion']['sw_atom_ids_json'];
                $TempReqVersion['is_has_stock'] = $last_req_version['ReqVersion']['is_has_stock'];
            } else {
                $TempReqVersion['model_def_id'] = Req;
                $TempReqVersion['rel_obj_id'] = $Req['Req']['id'];
                $TempReqVersion['product_id'] = $Req['Req']['product_id'];
                $TempReqVersion['account_id'] = $Req['Req']['account_id'];
                $TempReqVersion['price'] = $Req['Req']['price'];
                $TempReqVersion['foreign_price'] = isset($Req['Req']['foreign_price']) ? $Req['Req']['foreign_price'] : '';
                $TempReqVersion['quantity'] = $sum_quantity;
                $TempReqVersion['sw_atom_ids_json'] = $Req['Req']['sw_atom_ids_json'];
                $TempReqVersion['is_has_stock'] = isset($last_req_version['ReqVersion']['is_has_stock']) ? $last_req_version['ReqVersion']['is_has_stock'] : 0;
                $TempReqVersion['is_modify_bill'] = 1;
            }
            $g_ReqVersion->saveTmpReqVersion($TempReqVersion); //保存修改的快照
            $this->set('saveComplete',1);
        }
    }

    //批量修改订单行数量
    function pop_batch_modify_lines_qty($req_ids = null) {
        global $g_Commons;
        global $g_UserId;
        $g_OrderLineQt = $g_Commons->GlobalModel('OrderLineQt');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_ReqVersion = $g_Commons->GlobalModel('ReqVersion');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_StockApplyHeader = $g_Commons->GlobalModel('StockApplyHeader');
        $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Contract->recursive = - 1;
        $this->Req->recursive = - 1;
        $req_ids = explode(',', $req_ids);
        $tmp_reqs = $this->Req->find('all', array(
            'conditions' => array(
                'Req.id' => $req_ids
            ) ,
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ) ,
                array(
                    'table' => 'types',
                    'alias' => 'Type',
                    'type' => 'inner',
                    'conditions' => 'Type.id = Contract.type_id'
                ) ,
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'inner',
                    'conditions' => 'Product.id = Req.product_id'
                ) ,
                array(
                    'table' => 'prod_models',
                    'alias' => 'ProdModel',
                    'type' => 'inner',
                    'conditions' => 'ProdModel.id = Product.prod_model_id'
                ) ,
            ) ,
            'fields' => array(
                'Req.*',
                'Contract.*',
                'Type.name',
                'ProdModel.name'
            )
        ));
        $reqs = array();
        foreach ($tmp_reqs as $req) {
            $reqs[$req['Req']['id']] = $req;
        }
        $this->set('reqs', $reqs);

        //获取订单行
        $order_lines = $this->Req->GetOrderLinesByReqIds($req_ids);
        $this->set('order_lines', $order_lines);

        //获取订单行类型
        $order_line_type_list = $g_Enums->getEnumListByDictName('Ebs.order_detail_type');
        $this->set('order_line_type_list', $order_line_type_list);

        //获取订单关联工单信息
        $tmp_result = $this->Req->getContractRelWipByReqIds($req_ids);
        $contract_rel_wips = array();
        $wip_qtys = array();

        global $g_CompleteWipStatus;
        if ($tmp_result['success']) {
            if (!empty($tmp_result['datas']) && !empty($tmp_result['datas'])) {
                foreach ($tmp_result['datas'] as $req_id => $wips) {
                    if (!empty($wips)) {
                        foreach ($wips as $line_id => $items) {
                            foreach ($items as $temp) {
                                if (in_array($temp['STATUS_TYPE'], $g_CompleteWipStatus)) { //完工 工单不算
                                    continue;
                                }
                                if (!isset($contract_rel_wips[$req_id][$line_id]['quantity'])) {
                                    $contract_rel_wips[$req_id][$line_id]['quantity'] = 0;
                                }
                                $contract_rel_wips[$req_id][$line_id]['quantity']+= $temp['PRIMARY_QUANTITY'];

                                if (!isset($wip_qtys[$req_id])) {
                                    $wip_qtys[$req_id] = 0;
                                }
                                $wip_qtys[$req_id]+= $temp['PRIMARY_QUANTITY'];

                                if (!isset($contract_rel_wips[$req_id][$line_id]['lot_number'])) {
                                    $contract_rel_wips[$req_id][$line_id]['lot_number'] = '';
                                }
                                $contract_rel_wips[$req_id][$line_id]['lot_number'].= $temp['LOT_NUMBER'] . '(' . $temp['STATUS_MEANING'] . '); ';
                                $contract_rel_wips[$req_id][$line_id]['wip_status'] = $temp['STATUS_TYPE'];
                            }
                        }
                    }
                }
            }
        }
        $this->set('wip_qtys', $wip_qtys);
        $this->set('contract_rel_wips', $contract_rel_wips);

        //获取建交货数量
        $deliver_qtys = array();
        foreach ($req_ids as $req_id) {
            $deliver_qtys[$req_id] = $this->Req->GetOrderDeliverQty($req_id);
        }
        $this->set('deliver_qtys', $deliver_qtys);

        //备货申请情况
        // $stock_apply_status = $g_StockApplyHeader->getStockApplyStatusByReqIds($req_ids);
        // $this->set('stock_apply_status', $stock_apply_status);

        //判断是否有处于审核中的下采购申请单
        $g_DepositRatioBill = $g_Commons->GlobalModel('DepositRatioBill');
        $is_auditting_bill = $g_DepositRatioBill->isHasAudittingBill($req_ids);
        $this->set('is_auditting_bill', $is_auditting_bill);

        //submit data
        $this->set('saveComplete',0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submitData = $this->request->data;
            foreach ($submitData as $req_idx=>$lines) {
                $req_id = preg_replace('/req_/', '', $req_idx);
                $req = $reqs[$req_id];

                $version = $g_OrderLineQt->GetNextVersion($req_id); //获取下一版本
                $sum_quantity = 0;
                foreach ($lines as $line_idx => $temp) {
                    $sum_quantity += $temp['qty'];
                    $line_id = preg_replace('/line_/', '', $line_idx);
                    if (empty($line_id)) {
                        $this->set('setFlash', 1);
                        $this->Session->setFlash('line can not be null.');
                        return;
                    }
                }

                //数量未变更，不作处理
                if ($sum_quantity == $req['Req']['quantity']) {
                    continue;
                }

                foreach ($lines as $line_idx => $temp) {
                    $line_id = preg_replace('/line_/', '', $line_idx);
                    $order_line_qty = array();
                    $order_line_qty['req_id'] = $req_id;
                    $order_line_qty['version'] = $version;
                    $order_line_qty['header_id'] = $order_lines[$req_id][$line_id]['HEADER_ID'];
                    $order_line_qty['line_id'] = $line_id;
                    $order_line_qty['line_name'] = $order_lines[$req_id][$line_id]['LINE_NAME'];
                    $order_line_qty['sum_quantity'] = $sum_quantity;
                    $order_line_qty['start_quantity'] = $order_lines[$req_id][$line_id]['ORDERED_QUANTITY'];
                    $order_line_qty['end_quantity'] = $temp['qty'];
                    $order_line_qty['create_user_id'] = $g_UserId;
                    $order_line_qty['create_time'] = date('Y-m-d H:i:s');
                    $g_OrderLineQt->create();
                    $g_OrderLineQt->save($order_line_qty);
                }

                //如果是研发订单，则直接修改保存
                if(substr_count($req['Type']['name'], '研发') > 0) {
                    $g_Account = $g_Commons->GlobalModel('Account');
                    $g_Account->recursive = -1;

                    //生成订单主题
                    $name = explode('-', $req['Req']['name']);
                    $name_date = $name[1];
                    $Account = $g_Account->find('first', array('conditions' => array('Account.id' => $req['Req']['account_id']),
                                'fields' => array('Account.id', 'Account.short_name')));
                    $req['Req']['name'] = $Account['Account']['short_name'] . '-' . $name_date . '-' . $req['ProdModel']['name'] . '-' . $sum_quantity;

                    $req['Contract']['change_qty_version'] = $version;

                    $g_Contract->save($req['Contract']);

                    $req['Req']['quantity'] = $sum_quantity;
                    $req['Req']['update_user_id'] = $g_UserId;
                    $req['Req']['update_time'] = date('Y-m-d H:i:s');
                    $this->Req->save($req['Req']);

                    //更新备货申请总金额
                    $g_StockApplyHeader->updateStockApplyAmountByReqId($req['Req']['id']);

                    $extend_params = array();
                    $extend_params['modify_bill_audit'] = 1;
                    $this->BatchSyncContractToEbs($this->Req->id, $extend_params); //同步至EBS

                    continue;
                }

                $old_req = $this->Req->find('first', array(
                    'conditions' => array(
                        'Req.id' => $req['Req']['id'],
                    ),
                    'fields' => array(
                        'Req.id',
                        'Req.alter_audit_status',
                    )
                ));

                $req['Contract']['change_qty_version'] = $version;

                $req['Contract']['is_crm_fail'] = 1;
                $req['Contract']['crm_fail_reason'] = '关键信息变更，需业务经理审核，（数量变量）';
                $req['Contract']['error_type'] = OCS_CONTRACT_ERROR_TYPE_AUDIT; //更改单待审核(需业务经理审核)
                $g_Contract->save($req['Contract']);

                $req['Req']['alter_audit_status'] = OCS_REQ_ALTER_AUDIT_STATUS_NEW; //关键信息变更-待审核
                $req['Req']['update_user_id'] = $g_UserId;
                $req['Req']['update_time'] = date('Y-m-d H:i:s');
                $this->Req->save($req['Req']);

                $g_Logs->write_log('Reqs', $this->Req->id, 'info', '订单行数量变量，自动打回合同审签。');

                //合同也需重新审核
                $g_ContractRelTmpl->resetContractAuditByReqIds($this->Req->id, '修改订单行数量，自动打回合同');

                $temp_req_version = array();
                //获取最新的版本数据
                $last_req_version = $g_ReqVersion->getLastTmpReqVersion(Req, $req['Req']['id'] );
                //如果该版本的数据没有审核就取最新的数据叠加 add by wyq 2014-12-22
                if (!empty($last_req_version) && $old_req['Req']['alter_audit_status'] == OCS_REQ_ALTER_AUDIT_STATUS_NEW) {
                    $temp_req_version['model_def_id'] = Req;
                    $temp_req_version['rel_obj_id'] = $req['Req']['id'];
                    $temp_req_version['product_id'] = $last_req_version['ReqVersion']['product_id'];
                    $temp_req_version['account_id'] = $last_req_version['ReqVersion']['account_id'];
                    $temp_req_version['price'] = $last_req_version['ReqVersion']['price'];
                    $temp_req_version['foreign_price'] = isset($last_req_version['ReqVersion']['foreign_price']) ? $last_req_version['ReqVersion']['foreign_price'] : '';
                    $temp_req_version['quantity'] = $sum_quantity;
                    $temp_req_version['sw_atom_ids_json'] = $last_req_version['ReqVersion']['sw_atom_ids_json'];
                    $temp_req_version['is_has_stock'] = $last_req_version['ReqVersion']['is_has_stock'];

                    $temp_req_version['mid_account_id'] = $last_req_version['ReqVersion']['mid_account_id'];
                    $temp_req_version['bill_site_use_id'] = $last_req_version['ReqVersion']['bill_site_use_id'];
                    $temp_req_version['sw_atom_ids'] = $last_req_version['ReqVersion']['sw_atom_ids'];
                    $temp_req_version['ext_prod_ids'] = $last_req_version['ReqVersion']['ext_prod_ids'];
                    $temp_req_version['ext_3rd_party_prods'] = $last_req_version['ReqVersion']['ext_3rd_party_prods'];
                    $temp_req_version['extend_sw_atom_ids'] = $last_req_version['ReqVersion']['extend_sw_atom_ids'];
                } else {
                    $temp_req_version['model_def_id'] = Req;
                    $temp_req_version['rel_obj_id'] = $req['Req']['id'];
                    $temp_req_version['product_id'] = $req['Req']['product_id'];
                    $temp_req_version['account_id'] = $req['Req']['account_id'];
                    $temp_req_version['price'] = $req['Req']['price'];
                    $temp_req_version['foreign_price'] = isset($req['Req']['foreign_price']) ? $req['Req']['foreign_price'] : '';
                    $temp_req_version['quantity'] = $sum_quantity;
                    $temp_req_version['sw_atom_ids_json'] = $req['Req']['sw_atom_ids_json'];

                    $temp_req_version['mid_account_id'] = $req['Contract']['mid_account_id'];
                    $temp_req_version['bill_site_use_id'] = $req['Contract']['bill_site_use_id'];
                    $temp_req_version['sw_atom_ids'] = $req['Req']['sw_atom_ids'];
                    $temp_req_version['ext_prod_ids'] = $req['Req']['ext_prod_ids'];
                    $temp_req_version['ext_3rd_party_prods'] = $req['Req']['ext_3rd_party_prods'];
                    $temp_req_version['extend_sw_atom_ids'] = $req['Req']['extend_sw_atom_ids'];
                }
                $g_ReqVersion->saveTmpReqVersion($temp_req_version); //保存修改的快照
            }
            $this->set('saveComplete',1);
        }
    }


    function skd_req_list() {
        global $g_BizId;
        global $g_BizName;
        global $g_UserId;
        global $g_Commons;

        $this->set('title_for_layout', 'SKD配料清单');

        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        $g_Users = $g_Commons->GlobalController('Users');
        $g_Users->User->recursive = -1;
        $g_Searches = $g_Commons->GlobalController('Searches');
        $g_Searches->Search->recursive = -1;

        $this->Req->recursive = -1;

        $RoleAlias = $g_Users->getAllUserAliasByUserId($g_UserId);
        $owner_role = array('OrderOwnerAdmin', 'OrderOwnerSelf', 'OrderOwnerManagerSelfDept', 'OrderOwnerSelfDept');
        $mc_role = array('McSelfDept');

        $params = $this->params->params['named'];
        $range = isset($params['range']) ? $params['range'] : 'my';
        $InheritParams = array(array('key' => 'range', 'value' => $range)); // 需要继承的参数
        $is_owner = array_intersect($RoleAlias, $owner_role);
        $is_mc = array_intersect($RoleAlias, $mc_role);

        $conditions = array(
            'Req.biz_id' => $g_BizId,
            'Req.model_def_id' => Contract,
            'Req.req_type' => OCS_REQ_TYPE_SKD // OCS_REQ_TYPE_SKD
        );

        if (!empty($is_owner)) {
            $status = isset($params['status']) ? $params['status'] : 'SKD_LIST_STATUS_NEW';
            $NavTab = array();
            $NavTab[] = array('url' => array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'skd_req_list', 'range' => $range, 'status' => 'SKD_LIST_STATUS_NEW'), 'label' => '未处理');
            $NavTab[] = array('url' => array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'skd_req_list', 'range' => $range, 'status' => 'SKD_LIST_STATUS_AUDIT'), 'label' => '审核中');
            $NavTab[] = array('url' => array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'skd_req_list', 'range' => $range, 'status' => 'SKD_LIST_STATUS_DONE'), 'label' => '已发布');
            switch ($status) {
                case 'SKD_LIST_STATUS_NEW':
                    $conditions['OR'] = array(
                        'SkdMaterialList.status is null',
                        'SkdMaterialList.status' => array(SKD_LIST_STATUS_AUDIT_FAILE, SKD_LIST_STATUS_DONE_BACK)
                    );
                    break;
                case 'SKD_LIST_STATUS_AUDIT':
                    $conditions['SkdMaterialList.status'] = array(SKD_LIST_STATUS_AUDIT_HW, SKD_LIST_STATUS_AUDIT_MC);
                    break;
                case 'SKD_LIST_STATUS_DONE':
                    $conditions['SkdMaterialList.status'] = SKD_LIST_STATUS_DONE;
                    break;
            }
            if ('my' == $range) {
                $conditions['Req.owner_user_id'] = $g_UserId;
            }
        }

        if (!empty($is_mc)) {
            $status = isset($params['status']) ? $params['status'] : 'SKD_LIST_STATUS_AUDIT';
            $NavTab = array();
            $NavTab[] = array('url' => array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'skd_req_list', 'range' => $range, 'status' => 'SKD_LIST_STATUS_AUDIT'), 'label' => '待审核');
            $NavTab[] = array('url' => array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'skd_req_list', 'range' => $range, 'status' => 'SKD_LIST_STATUS_DONE'), 'label' => '已发布');
            switch ($status) {
                case 'SKD_LIST_STATUS_AUDIT':
                    $conditions['SkdMaterialList.status'] = SKD_LIST_STATUS_AUDIT_MC;
                    break;
                case 'SKD_LIST_STATUS_DONE':
                    $conditions['SkdMaterialList.status'] = SKD_LIST_STATUS_DONE;
                    break;
            }
            if ('my' == $range) {
                $conditions['SkdMaterialList.mc_audit_user_id'] = $g_UserId;
            }
        }

        if (empty($is_owner) && empty($is_mc)) {
            $status = isset($params['status']) ? $params['status'] : 'SKD_LIST_STATUS_AUDIT_WAIT';
            $NavTab = array();
            $NavTab[] = array('url' => array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'skd_req_list', 'range' => $range, 'status' => 'SKD_LIST_STATUS_AUDIT_WAIT'), 'label' => '未处理');
            $NavTab[] = array('url' => array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'skd_req_list', 'range' => $range, 'status' => 'SKD_LIST_STATUS_AUDIT_DONE'), 'label' => '已处理');
            $NavTab[] = array('url' => array(BizMark => $g_BizName, 'controller' => 'Reqs', 'action' => 'skd_req_list', 'range' => $range, 'status' => 'SKD_LIST_STATUS_DONE'), 'label' => '已发布');

            switch ($status) {
                case 'SKD_LIST_STATUS_AUDIT_WAIT':
                    $conditions['SkdMaterialList.status'] = SKD_LIST_STATUS_AUDIT_HW;
                    break;
                case 'SKD_LIST_STATUS_AUDIT_DONE':
                    $conditions['SkdMaterialList.status'] = SKD_LIST_STATUS_AUDIT_MC;
                    break;
                case 'SKD_LIST_STATUS_DONE':
                    $conditions['SkdMaterialList.status'] = SKD_LIST_STATUS_DONE;
                    break;
            }
            if ('my' == $range) {
                $conditions['SkdMaterialList.hw_audit_user_id'] = $g_UserId;
            }
        }

        // ---- 高级搜索 ----
        $SearchId = 0;
        if (isset($params['SearchId'])) {
            $SearchId = $params['SearchId'];
        }
        $this->set('SearchId', $SearchId);
        $SearchCondition = '';
        if (!empty($SearchId) && 0 != $SearchId) {
            $SearchCond = $g_Searches->Search->findById($SearchId);
            if (!empty($SearchCond)) {
                $SearchCondition = $SearchCond['Search']['search_condition'];
                $SearchCond = json_decode($SearchCond['Search']['cond_json']);
            }
            $SearchCond = $g_Commons->objectToArray($SearchCond);
            if ('' != $SearchCond['conditions']) {
                $this->paginate['conditions'][] = $SearchCond['conditions'];
            }
            foreach ($SearchCond['joins'] as $join) {
                $this->paginate['joins'][] = $join;
            }
        }
        $SearchField = $g_AttrDics->getAllFldNameByTblName($this->modelName);
        $SearchField = $g_Searches->ProcessSearchField($SearchField, $SearchId);
        $this->set('SearchField', $SearchField);
        $this->set('SearchCondition', $SearchCondition);
        global $g_SCondition;
        $this->set('SCondition', $g_SCondition);

        $this->set('range', $range);
        $this->set('status', $status);
        $this->set('NavTab', $NavTab);

        $this->paginate['joins'][] = array(
            'table' => 'contracts',
            'alias' => 'Contract',
            'type' => 'LEFT',
            'conditions' => 'Req.rel_obj_id = Contract.id'
        );
        $this->paginate['joins'][] = array(
            'table' => 'skd_material_lists',
            'alias' => 'SkdMaterialList',
            'type' => 'LEFT',
            'conditions' => 'SkdMaterialList.contract_no = Contract.contract_no'
        );
        $this->paginate['conditions'] = $conditions;
        $this->paginate['fields'] = 'Req.account_id, Req.owner_user_id, Req.create_time, Contract.contract_no, SkdMaterialList.status, SkdMaterialList.hw_audit_user_id, SkdMaterialList.hw_audit_time, SkdMaterialList.mc_audit_user_id, SkdMaterialList.mc_audit_time, SkdMaterialList.is_send_email';
        $this->paginate['group'] = 'Contract.contract_no';
        $contract_nos = $this->paginate();
        $contract_nos = $g_AttrDics->formatAllModelData($contract_nos);
        $this->set('contract_nos', $contract_nos);

        $fields = array();
        $fields[] = array('model' => 'SkdMaterialList', 'field' => 'status', 'name' => 'SkdMaterialList.status', 'label' => '清单状态');
        $fields[] = array('model' => 'Contract', 'field' => 'contract_no', 'name' => 'Contract.contract_no', 'label' => '合同号');
        $fields[] = array('model' => 'Req', 'field' => 'account_id', 'name' => 'Req.account_id', 'label' => '客户');
        $fields[] = array('model' => 'Req', 'field' => 'owner_user_id', 'name' => 'Req.owner_user_id', 'label' => '内勤');
        $fields[] = array('model' => 'SkdMaterialList', 'field' => 'hw_audit_user_id', 'name' => 'SkdMaterialList.hw_audit_user_id', 'label' => '工程师审核人');
        $fields[] = array('model' => 'SkdMaterialList', 'field' => 'mc_audit_user_id', 'name' => 'SkdMaterialList.mc_audit_user_id', 'label' => '物控审核人');
        $fields[] = array('model' => 'Req', 'field' => 'create_time', 'name' => 'Req.create_time', 'label' => '订单创建时间');
        $this->set('fields', $fields);

    }

    //维护订单对应工厂
    function pop_edit_contract_mto_no() {
        global $g_Commons;
        global $g_UserId;
        global $g_BizName;
        global $g_CompleteWipStatus;
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_AttrDic = $g_Commons->GlobalModel('AttrDic');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_ProdModelRelAccount = $g_Commons->GlobalModel('ProdModelRelAccount');
        $g_OrderLineItem = $g_Commons->GlobalModel('OrderLineItem');
        $this->Req->recursive = -1;
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $g_ERPWsClients = $g_Commons->GlobalController('ERPWsClients');

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams',$AllParams);

        // 获取编辑的订单ID
        $url_req_ids = !empty($this->params->params['named']['req_ids']) ? $this->params->params['named']['req_ids'] : null;
        $this->set('url_req_ids', $url_req_ids);

        // 展示的模式
        $page_mode = !empty($this->params->params['named']['page_mode']) ? $this->params->params['named']['page_mode'] : null;
        $this->set('page_mode', $page_mode);

        // 是否允许ckd订单以EBS单号编辑工厂
        $ckd_edit_by_req = !empty($this->params->params['named']['ckd_edit_by_req']) ? $this->params->params['named']['ckd_edit_by_req'] : null;

        // 在不改变参数的情况下,生成指向另外一个action的url
        $this->request->params['action'] = 'edit_ckd_mto_no';
        $switch_url = $this->replaceUrlParams(null, $this->request->params);

        $req_ids = explode(',', $url_req_ids);
        //判断是否全部订单都为ckd订单，如是，则跳转至另外方法处理
        $is_all_sckd_order = $this->Req->isAllSCKDReqOrder($req_ids);
        if ($is_all_sckd_order && empty($ckd_edit_by_req)) {
            $this->redirect($switch_url);
            return;
        }
        if (!empty($is_all_sckd_order)) {
            $this->set('switch_url', $switch_url);
        }

        // 显示标题
        $title_for_layout = ('contract' == $page_mode) ? '以合同号编辑工厂' : '以EBS单号编辑工厂';
        $this->set('title_for_layout', $title_for_layout);

        // 如果是合同模式
        if ('contract' == $page_mode) {
            $contract_reqs = $this->Req->getContractReqsByReqId($req_ids);
            $req_ids = array();
            foreach ($contract_reqs as $contract_req) {
                $req_ids[] = $contract_req['Req']['id'];
            }
        }

        $mto_no_list = $g_Enum->getEnumListByDictName('Ebs.mto_no');
        $order_detail_type_list = $g_Enum->getEnumListByDictName('Ebs.order_detail_type');
        //获取交付情况
        $OrderDeliverQtys = array();
        foreach($req_ids as $ReqId){
            $OrderDeliverQtys[$ReqId] = $this->Req->GetOrderTypeDeliverQtyByReqId($ReqId);
        }
        $this->set('OrderDeliverQtys', $OrderDeliverQtys);
        $OrderQytLabels = array();
        if(!empty($OrderDeliverQtys)){
            foreach($OrderDeliverQtys as $ReqId=>$Qtys){
                foreach($Qtys as $idx=>$qty){
                    $index = explode('_', $idx);
                    $line_type_id = $index[0];//hardcode
                    $line_type_label = empty($order_detail_type_list[$line_type_id]) ? '' : $order_detail_type_list[$line_type_id]; // $g_Enum->getLabelByDictNameAndValue('Ebs.order_detail_type', $line_type_id);
                    $OrderQytLabels[$ReqId][$line_type_label] = $qty;
                }
            }
        }
        $this->set('OrderQytLabels', $OrderQytLabels);

        //获取订单行
        $OrderLines = $this->Req->GetOrderLinesByReqIds($req_ids);
        if(!empty($OrderLines)){
            foreach($OrderLines as $idx=>$Lines){
                foreach($Lines as $key=>$Line){
                    if($Line['FLOW_STATUS_CODE'] == 'CANCELLED'){
                        unset($Lines[$key]);
                        continue;
                    }
                    $MtoNo = empty($mto_no_list[$Line['PROJECT_ID']]) ? '' : $mto_no_list[$Line['PROJECT_ID']]; // $g_Enum->getLabelByDictNameAndValue('Ebs.mto_no',$Line['PROJECT_ID']);
                    $Line['MTO_NO'] = $MtoNo;

                    $LineType = empty($order_detail_type_list[$Line['LINE_TYPE_ID']]) ? '' : $order_detail_type_list[$Line['LINE_TYPE_ID']]; // $g_Enum->getLabelByDictNameAndValue('Ebs.order_detail_type',$Line['LINE_TYPE_ID']);
                    $Line['ORDER_LINE_TYPE'] = $LineType;
                    $Lines[$key] = $Line;
                }
                $OrderLines[$idx] = $Lines;
            }
        }
        //$this->set('OrderLines', $OrderLines);

        //获取订单头数据
        $OrderHeaders = $this->Req->GetOrderHeadersByReqIds($req_ids);

        //获取订单关联工单信息
        $ContractRelWip = array();
        $tmp_results = $this->Req->getContractRelWipByReqIds($req_ids);
        if($tmp_results['success'] && !empty($tmp_results['datas']) && is_array($tmp_results['datas'])){
            foreach($tmp_results['datas'] as $req_id => $Lines){
                if(!empty($Lines)){
                    foreach($Lines as $line_id=>$Wip){
                        foreach ($Wip as $key => $temp) {
                            if (in_array($temp['STATUS_TYPE'], $g_CompleteWipStatus)) { //已完成，已关闭工单不算
                                unset($Wip[$key]);
                            }
                        }
                        $ContractRelWip[$req_id][$line_id] = array_keys($Wip);
                    }
                }
            }
        }
        $this->set('ContractRelWip', $ContractRelWip);
        //submit
        $this->set('saveComplete',0);
        if($this->request->is('post') && !empty($this->request->data)){
            $submitData = $this->request->data;
            $save_act = $submitData['action'];
            if(!isset($save_act) || empty($save_act)){
                $this->set('setFlash',1);
                $this->Session->setFlash('动作未定义，保存失败');
                return;
            }

            // 保存“生管承诺日期”
            foreach ($req_ids as $req_id) {
                if(!isset($submitData['req_' . $req_id])){//说明为空
                    $Errors[$ReqId][] = '保存失败，并未提交任何数据。';
                    continue;
                }

                // 将数据保存到OCS中
                $line_datas = end($submitData['req_' . $req_id]);
                if (isset($line_datas['mf_promise_date'])) {
                    $req_promise_date = $line_datas['mf_promise_date'];
                } else {//记录并获取该订单中的最大“生管承诺日期”
                    $req_promise_dates = array();
                    foreach ($line_datas as $key => $line_data) {
                        $req_promise_dates[] = !empty($line_data['mf_promise_date']) ? $line_data['mf_promise_date'] : null;
                    }
                    $req_promise_date = !empty($req_promise_dates) ? max($req_promise_dates) : null;
                }

                // 启用事务,如果OCS或ebs中的数据保存失败,则不更新
                try {
                    // 记录“生管承诺日期”
                    $field_values = array();
                    $field_values['req_id'] = $req_id;
                    $field_values['mf_promise_date'] = $req_promise_date;
                    $g_RelReq->query('begin');
                    $g_RelReq->saveRelFieldsAndLog($req_id, $field_values, '通过“填写工厂信息功能”更新了以下信息:');
                    // 更新EBS订单行上的“生管承诺日期”
                    if (isset($submitData['req_' . $req_id]['EBS'])) {
                        foreach ($submitData['req_' . $req_id]['EBS'] as $key => $line_data) {
                            $field_values = array(
                                'promise_date' => $line_data['mf_promise_date'],
                            );
                            $save_result = $g_ERPWsClients->updateEbsOrderLineFields('line', $line_data['line_id'], $field_values);
                            if (empty($save_result['success'])) {
                                throw new Exception($save_result['message'], 1);
                            }
                        }
                    }
                    $g_RelReq->query('commit');
                } catch (Exception $e) {
                    $g_RelReq->query('rollback');
                }
            }

            $Errors = array();
            $SyncReqIds = array();//记录需同步的req_id
            foreach($req_ids as $ReqId){
                if(!isset($submitData['req_'.$ReqId])){//说明为空
                    $Errors[$ReqId][] = '保存失败，并未提交任何数据。';
                    continue;
                }
                if(isset($submitData['req_'.$ReqId]['OCS']['mto_no'])){//EBS订单未有效行，或者订单未传EBS
                    $mto_no = $submitData['req_'.$ReqId]['OCS']['mto_no'];
                    $Contract = $this->Req->find('first',array(
                        'conditions'=>array('Req.id' => $ReqId),
                        'joins'=>array(
                            array(
                                'table'=>'contracts',
                                'alias'=>'Contract',
                                'type'=>'inner',
                                'conditions' => 'Contract.id = Req.rel_obj_id'
                            ),
                        ),
                        'fields'=>array('Req.id', 'Contract.id', 'Contract.mto_no'),
                        ));
                    if(!empty($Contract)){
                        // 将工厂保存到Contract中
                        $old_mto_no = $Contract['Contract']['mto_no'];
                        $Contract['Contract']['mto_no'] = $mto_no;
                        $g_Contract->save($Contract['Contract']);
                        $SyncReqIds['OCS'][] = $ReqId;
                        //写log
                        if($mto_no != $old_mto_no){
                            $log_content = '生产工厂由#'.$old_mto_no.'=> #'.$mto_no;
                            $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);
                        }
                    }
                } else if(isset($submitData['req_'.$ReqId]['EBS']) && !empty($submitData['req_'.$ReqId]['EBS'])){//EBS
                    //如有设置保留的订单行，不允许 改项目编号
                    $OrderLineReserves = $this->Req->GetOrderLineReserve($ReqId);
                    $ReserveQtys = array();
                    if(!empty($OrderLineReserves)){
                        foreach($OrderLineReserves as $idx=>$OrderLineReserve) {
                            if($OrderLineReserve['RESERVATION_QUANTITY'] > 0) {
                                $ReserveQtys[$OrderLineReserve['LINE_ID']] = $OrderLineReserve['RESERVATION_QUANTITY'];
                            }
                        }
                    }
                    $not_sync_line_ids = array();

                    //验证，修改后的订单数>=已建交付数(订单行类型+工厂+产品为一组进行比较)
                    $NewRelQtys = array();
                    foreach($submitData['req_'.$ReqId]['EBS']  as $line_key=>$temp){
                        $line_id = preg_replace('/line_/', '', $line_key);
                        $mto_no = $temp['mto_no'];
                        $project_id = $g_Enum->getEnumValueByDictNameAndLabel('Ebs.mto_no',$mto_no);
                        if(isset($OrderLines[$ReqId][$line_id])){
                            $Line = $OrderLines[$ReqId][$line_id];
                            $idx = $Line['LINE_TYPE_ID'].'_'.$project_id.'_'.$Line['INVENTORY_ITEM_ID'];
                            if(!isset($NewRelQtys[$idx])){
                                $NewRelQtys[$idx] = 0;
                            }
                            $NewRelQtys[$idx] += $Line['ORDERED_QUANTITY'];
                        }

                        //已有关联工单的订单行，不允许修改
                        if(isset($ContractRelWip[$ReqId][$line_id])
                            && !empty($ContractRelWip[$ReqId][$line_id])
                            && isset($Line['PROJECT_ID'])
                            && $project_id != $Line['PROJECT_ID']){
                            $Errors[$ReqId][] = '保存失败，已经有关联工单，不可修改工厂，请先取消关联工单。';
                            $not_sync_line_ids[] = $line_id;
                        }

                        //有设置保留，不允许 修改
                        if(isset($ReserveQtys[$line_id])
                            && !empty($ReserveQtys[$line_id])
                            && isset($Line['PROJECT_ID'])
                            && $project_id != $Line['PROJECT_ID']){
                            $Errors[$ReqId][] = '保存失败，#'.$Line['LINE_NAME'].' 该订单行设置了保留，请先取保留。';
                            $not_sync_line_ids[] = $line_id;
                        }
                    }

                    if(isset($OrderDeliverQtys[$ReqId])){
                        $erro_flag = false;
                        foreach($OrderDeliverQtys[$ReqId] as $idx=>$qty){
                            if((!isset($NewRelQtys[$idx]) || $NewRelQtys[$idx] < $qty) && !empty($qty)){//修改后的，订单总数小于已建交付数，则不允许
                                $index = explode('_', $idx);
                                $line_type_id = $index[0];//hardcode
                                $line_type_label = $g_Enum->getLabelByDictNameAndValue('Ebs.order_detail_type', $line_type_id);

                                $project_id = $index[1];//hardcode
                                $mto_no = $g_Enum->getLabelByDictNameAndValue('Ebs.mto_no', $project_id);

                                $Errors[$ReqId][] = '保存失败，#'.$line_type_label.' #'.$mto_no.' 修改后的订单总数不能小于已建交付数。';
                                $erro_flag = true;
                            }
                        }
                        if($erro_flag){
                            continue;
                        }
                    }

                    //保存
                    $first_mto_no = '';
                    foreach($submitData['req_'.$ReqId]['EBS']  as $line_key=>$temp){
                        $line_id = preg_replace('/line_/', '', $line_key);
                        $mto_no = $temp['mto_no'];
                        $first_mto_no = empty($first_mto_no) ? $mto_no : $first_mto_no;
                        if(isset($OrderLines[$ReqId][$line_id])){
                            $header_id = $OrderLines[$ReqId][$line_id]['HEADER_ID'];
                            $line_name = $OrderLines[$ReqId][$line_id]['LINE_NAME'];
                            $ebs_order_number = $OrderLines[$ReqId][$line_id]['ORDER_NUMBER'];
                        }
                        if(empty($header_id) || empty($line_id)){
                            $Errors[$ReqId][] = '保存失败，header_id 不能为空。';
                            continue;
                        }
                        if(in_array($line_id, $not_sync_line_ids)) {//该 订单行不能同步
                            continue;
                        }

                        $OrderLineItem = $g_OrderLineItem->find('first',array(
                            'conditions'=>array('OrderLineItem.header_id'=>$header_id,'OrderLineItem.line_id'=>$line_id),
                            'fields'=>array('OrderLineItem.id','OrderLineItem.mto_no')
                            ));
                        $old_mto_no = '';
                        if(!empty($OrderLineItem)){//编辑
                            $old_mto_no = $OrderLineItem['OrderLineItem']['mto_no'];
                            $OrderLineItem['OrderLineItem']['mto_no'] = $mto_no;
                            $g_OrderLineItem->save($OrderLineItem['OrderLineItem']);
                        }else{//新建
                            $OrderLineItem['req_id'] = $ReqId;
                            $OrderLineItem['header_id'] = $header_id;
                            $OrderLineItem['line_id'] = $line_id;
                            $OrderLineItem['line_name'] = $line_name;
                            $OrderLineItem['mto_no'] = $mto_no;
                            $OrderLineItem['create_user_id'] = $g_UserId;
                            $OrderLineItem['create_time'] = date('Y-m-d H:i:s');
                            $g_OrderLineItem->create();
                            $g_OrderLineItem->save($OrderLineItem);
                        }
                        $SyncReqIds['EBS'][] = $ReqId;

                        $params = array();
                        $params['ebs_order_number'] = $ebs_order_number;
                        $params['line_name'] = $line_name;
                        $params['mto_no'] = $mto_no;
                        $params['line_id'] = $line_id;

                        $tmp_result = $this->Req->setProjectIdToEbs($params);

                        if(!$tmp_result['success']){
                            $Errors[$ReqId][] = '#'.$line_name.'订单行保存失败，' . $tmp_result['message'];
                        }else{
                            $log_content = '订单#'.$params['line_name'].'行，生产工厂由#'.$old_mto_no.'=>'.$mto_no;
                            $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);
                        }
                    }
                    if(!empty($first_mto_no)) {
                        $Contract = $this->Req->find('first',array(
                            'conditions'=>array('Req.id'=>$ReqId),
                            'joins'=>array(
                                array(
                                    'table'=>'contracts',
                                    'alias'=>'Contract',
                                    'type'=>'inner',
                                    'conditions'=>'Contract.id = Req.rel_obj_id'
                                    ),
                                ),
                            'fields'=>array('Req.id','Contract.id','Contract.mto_no'),
                            ));
                        if(!empty($Contract)){
                            $Contract['Contract']['mto_no'] = $first_mto_no;
                            $g_Contract->save($Contract['Contract']);
                        }
                    }
                }
            }

            if('save_to_ebs' == $save_act){
                // if(isset($SyncReqIds['OCS'])){
                //     $SyncReqIds['OCS'] = array_unique($SyncReqIds['OCS']);
                //     $this->BatchSyncContractToEbs($SyncReqIds['OCS']);
                // }
                // if(isset($SyncReqIds['EBS'])){
                //     $SyncReqIds['EBS'] = array_unique($SyncReqIds['EBS']);
                //     $result = $this->Req->UpdateEbsOrderLineByReqIds($SyncReqIds['EBS']);
                //     if(!empty($result)){
                //         foreach($result as $req_id=>$tmp){
                //             $Errors[$req_id][] = $tmp['message'];
                //             $g_Logs->write_log('Reqs', $req_id, 'info', '修改工厂失败，#'.$tmp['message']);
                //         }
                //     }
                // }
                if(empty($Errors)){//没有错误时，才自动关闭窗口
                    $this->set('saveComplete',1);
                }
            }
            $this->set('Errors', $Errors);
        }

        //获取订单行
        $order_lines = $this->Req->GetOrderLinesByReqIds($req_ids);
        if (!empty($order_lines)) {
            foreach ($order_lines as $idx => $lines) {
                foreach ($lines as $key => $line) {
                    if ($line['FLOW_STATUS_CODE'] == 'CANCELLED') {
                        unset($lines[$key]);
                        continue;
                    }
                    $mto_no = empty($mto_no_list[$line['PROJECT_ID']]) ? '' : $mto_no_list[$line['PROJECT_ID']]; // $g_Enum->getLabelByDictNameAndValue('Ebs.mto_no', $line['PROJECT_ID']);
                    $line['MTO_NO'] = $mto_no;

                    $line_type = empty($order_detail_type_list[$line['LINE_TYPE_ID']]) ? '' : $order_detail_type_list[$line['LINE_TYPE_ID']];
                    // $line_type = $g_Enum->getLabelByDictNameAndValue('Ebs.order_detail_type', $line['LINE_TYPE_ID']);
                    $line['ORDER_LINE_TYPE'] = $line_type;
                    $lines[$key] = $line;
                }
                $order_lines[$idx] = $lines;
            }
        }
        $this->set('OrderLines', $order_lines);

        // 查找订单信息并格式化
        $reqs = $this->Req->find('all', array(
            'conditions'=>array('Req.id' => $req_ids),
            'joins'=>array(
                array(
                    'table'=>'contracts',
                    'alias'=>'Contract',
                    'type'=>'inner',
                    'conditions'=>'Contract.id = Req.rel_obj_id'
                    ),
                array(
                    'table'=>'products',
                    'alias'=>'Product',
                    'type'=>'inner',
                    'conditions'=>'Product.id = Req.product_id'
                    ),
                array(
                    'table'=>'prod_models',
                    'alias'=>'ProdModel',
                    'type'=>'inner',
                    'conditions'=>'ProdModel.id = Product.prod_model_id'
                    ),
                array(
                    'table'=>'rel_reqs',
                    'alias'=>'RelReq',
                    'type'=>'LEFT',
                    'conditions' => 'RelReq.req_id = Req.id'
                ),
            ),
            'fields' => array('
                Req.id,Req.ebs_order_number,Req.name,Req.account_id,Req.req_type,Req.quantity,Req.remark,Req.mf_remark,
                Product.id,Product.name,Product.is_ckd,Product.code,ProdModel.name,ProdModel.id,
                Contract.account_mno,Contract.account_cno,Contract.mto_no,Contract.is_has_stock,Contract.ship_from_org_id,Contract.type_id,Contract.delivety_time,Contract.contract_no,
                RelReq.mf_promise_date'
            ),
        ));
        $reqs = $g_AttrDic->formatAllModelData($reqs);

        // 查找工厂
        $mto_no_lists = $g_ProdModelRelAccount->GetAvailableMtoNosByReqIds($req_ids);

        // 获取下采购日期
        $purchase_dates = $g_ERPWsClients->getOrderPurchaseDates($req_ids);

        $format_reqs = array();
        if (!empty($reqs)) {
            foreach ($reqs as $req) {
                // 根据订单类型,判断是否需要推算订单的生管承诺时间
                if (empty($req['RelReq']['mf_promise_date'])) {
                    $req['RelReq']['init_promise_date'] = $this->Req->getInitPromiseDateByReqId($req['Req']['id']);
                }
                // 记录订单关联的工厂
                $req['mto_no_lists'] = !empty($mto_no_lists[$req['Req']['id']]) ? $mto_no_lists[$req['Req']['id']] : array();
                // 记录下采购时间
                $req['purchase_date'] = !empty($purchase_dates[$req['Req']['id']]) ? $purchase_dates[$req['Req']['id']] : null;
                // 重新记录
                $format_reqs[$req['Req']['id']] = $req;
            }
        }
        $this->set('Reqs', $format_reqs);

        // 如果是合同模式,将订单按合同分组
        if ('contract' == $page_mode) {
            $contract_reqs = array();
            foreach ($format_reqs as $req_id => $format_req) {
                $contract_no = $format_req['Contract']['contract_no'];
                if (!isset($contract_reqs[$contract_no])) {
                    $contract_reqs[$contract_no] = $format_req;
                } else {//记录合同的订单中的最大承诺时间
                    if (!empty($format_req['promise_date']) && $contract_reqs[$contract_no]['promise_date'] < $format_req['promise_date']) {
                        $contract_reqs[$contract_no]['promise_date'] = $format_req['promise_date'];
                    }
                }
                // 记录合同下所有订单的工厂
                foreach ($format_req['mto_no_lists'] as $mto_no_id => $mto_no) {
                    $contract_reqs[$contract_no]['mto_no_lists'][$mto_no_id] = $mto_no;
                }
                $contract_reqs[$contract_no]['req_ids'][] = $format_req['Req']['id'];
            }
            $this->set('contract_reqs', $contract_reqs);

            // 在以合同模式编辑下,各订单上可选工厂取对应的合同下所有订单的并集
            foreach ($format_reqs as $req_id => $format_req) {
                $contract_no = $format_req['Contract']['contract_no'];
                $format_reqs[$req_id]['mto_no_lists'] = !empty($contract_reqs[$contract_no]['mto_no_lists']) ? $contract_reqs[$contract_no]['mto_no_lists'] : array();
            }
            $this->set('Reqs', $format_reqs);
        }

        // 获取相应的订单对应的发货通知单,是否存在待审核的变更单,如果存在则提示不允许修改工厂 add by GUOCAI
        $submit_action = array(
            'status' => true,
            'message' => null
        );

        $g_BatchDelivery = $g_Commons->GlobalModel('BatchDelivery');
        if(!empty($reqs)){
            $org_rel_mtos = array();
            foreach ($reqs as $req) {
                    $order_number = $req['Req']['ebs_order_number'];
                    $notices_cancels = $g_BatchDelivery->getUnAuditNoticesByOrderNumber($order_number);
                    $org_id = $g_Enum->find('first', array(
                        'conditions' => array(
                            'Enum.dict_name' => 'Ebs.organization',
                            'Enum.value' => $req['Contract']['ship_from_org_id']
                        )
                    ));
                    if (!empty($org_id)) {
                        $org_id = $org_id['Enum']['alias'];
                        $org_rel_mtos[$req['Req']['id']] = $g_Enum->getMtoNoListByOrgId($org_id);
                    }
                    if (!empty($notices_cancels)) {
                        $notices_cancel_link = array();
                        foreach ($notices_cancels as $notices_cancel) {
                            $notices_cancel_link[] = '<span class="label">' . $notices_cancel['NOTICE_NUMBER'] . '</span>';
                        }
                        $submit_action['status'] = false; //存在待审核的发货变更单，所以不能提交
                        $submit_action['message'].= '<br/><span class="label label-important">#订单:' . $order_number . '</span> 有财务未确认的发货变更单( ' . implode(' ', $notices_cancel_link) . ' )，请先让财务确认后，再改订单工厂;';
                    }
                //}
            }
        }
        $this->set('submit_action', $submit_action);

        //获取OCS维护的订单行数据
        $OrderLineItemList = $g_OrderLineItem->find('list',array('conditions'=>array('OrderLineItem.req_id' => $req_ids),
            'fields'=>array('OrderLineItem.line_id','OrderLineItem.mto_no')));
        $this->set('OrderLineItemList', $OrderLineItemList);
    }

    /**
     * 针对CKD订单，以合同号为单元进行批量编辑工厂、生管承诺日期
     *
     * @Author   lishirong
     *
     * @DateTime 2016-07-11T10:20:20+0800
     *
     * @param    [type]                   $contract_nos [合同编号]
     *
     * @return   [type]                                [description]
     */
    function pop_edit_ckd_mto_no($contract_nos = null) {;
        global $g_Commons;
        global $g_BizId;
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $g_QueueJob = $g_Commons->GlobalModel('QueueJob');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_CkdMfPlanBill = $g_Commons->GlobalModel('CkdMfPlanBill');

        $this->set('title_for_layout', '维护工厂信息');

        if (!empty($contract_nos)) {
            $contract_nos = explode(',', $contract_nos);
        } elseif (!empty($this->params->params['named']['req_ids'])) {
            // 获取编辑的订单ID
            $req_ids = explode(',', $this->params->params['named']['req_ids']);
            $contract_nos = $this->Req->getContractNoListByReqIds($req_ids);
        }

        if (empty($contract_nos)) {
            $this->set('error_msg', '没找到合同编号');
            return;
        }

        // 如果传入参数是 req_ids,且对应订单是ckd订单,那么需要预留跳转
        // 在不改变参数的情况下,生成指向另外一个action的url
        if (!empty($req_ids)) {
            $this->request->params['action'] = 'edit_contract_mto_no';
            $this->request->params['named']['ckd_edit_by_req'] = 'yes';
            $switch_url = $this->replaceUrlParams(null, $this->request->params);

            //判断是否全部订单都为ckd订单，如是，则跳转至另外方法处理
            $is_all_sckd_order = $this->Req->isAllSCKDReqOrder($req_ids);
            if (!empty($is_all_sckd_order)) {
                $this->set('switch_url', $switch_url);
            }
        }

        $orders = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id',
                ),
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'left',
                    'conditions' => 'RelReq.req_id = Req.id',
                ),
            ),
            'conditions' => array(
                'Contract.contract_no' => $contract_nos,
            ),
            'fields' => array(
                'Contract.contract_no',
                'Contract.mto_no',
                'Contract.type_id',
                'Contract.ship_from_org_id',
                'RelReq.mf_promise_date',
                'Req.account_id',
            ),
            'group' => array(
                'Contract.contract_no',
            )
        ));
        $orders = $g_AttrDics->formatAllModelData($orders);
        $cache_data = array();
        foreach ($orders as $index => $order) {
            $type_id = is_array($order['Contract']['type_id']) ? $order['Contract']['type_id']['value'] : $order['Contract']['type_id'];
            $ship_from_org_id = is_array($order['Contract']['ship_from_org_id']) ? $order['Contract']['ship_from_org_id']['value'] : $order['Contract']['ship_from_org_id'];

            if (!empty($ship_from_org_id)) {
                if (isset($cache_data['ship_from_org_id'][$ship_from_org_id])) {
                    $mto_no_list = $cache_data['ship_from_org_id'][$ship_from_org_id];
                } else {
                    $org_id = $g_Enum->getOrgIdByOrganizationId($ship_from_org_id);
                    $mto_no_list = $g_Enum->getMtoNoListByOrgId($org_id);
                    $cache_data['ship_from_org_id'][$ship_from_org_id] = $mto_no_list;
                }
            } else {
                if (isset($cache_data['type_id'][$type_id])) {
                    $mto_no_list = $cache_data['type_id'][$type_id];
                } else {
                    $org_id = $this->Req->getOrgIdByOrderTypeId($type_id);
                    $mto_no_list = $g_Enum->getMtoNoListByOrgId($org_id);
                    $cache_data['type_id'][$type_id] = $mto_no_list;
                }
            }

            $orders[$index]['mto_no_list'] = $mto_no_list;
        }
        $this->set('orders', $orders);

        //submit
        $this->set('save_complete', 0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            $save_messages = array();
            $submit_datas = $this->request->data;
            foreach ($submit_datas as $contract_no => $submit_data) {
                $is_audit = $g_CkdMfPlanBill->isAudit($contract_no);//判断该合同是否已经开始审核
                $mf_promise_date = trim($submit_data['mf_promise_date']);
                if ($is_audit && empty($mf_promise_date)) {
                    $save_messages[$contract_no][] = '该合同的下计划已经审核，不允许设置“生管承诺日期”为空';
                }
            }
            if (!empty($save_messages)) {
                $this->set('save_messages', $save_messages);
                return;
            }

            $this->Req->saveContractRelDatas($submit_datas);
            $this->set('save_complete', 1);
        }
    }

    function pop_edit_rel_wip_info(){
        global $g_Commons;
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_ObjRelObj->recursive = -1;
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $ReqIds = explode(',', $AllParams['P']['req_ids']);
        if (!isset($AllParams['P']['req_ids']) || empty($ReqIds)) {
            return;
        }

        $Reqs = $this->Req->find('all', array(
            'conditions' => array('Req.id' => $ReqIds),
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ),
                array(
                    'table' => 'obj_rel_objs',
                    'alias' => 'ObjRelObj',
                    'type' => 'left',
                    'conditions' => 'ObjRelObj.rel_obj_id = Req.id AND ObjRelObj.meta_type = ' . OCS_OBJ_REL_OBJ_TYPE_WIP . '
                AND ObjRelObj.model_def_id=' . Req . " AND ObjRelObj.meta_key='Req.batch_no_info'"
                ),
            ),
            'fields' => array(
                'Req.id,Req.name,Req.ebs_order_number,Req.account_id,Req.quantity,Req.product_id,Req.remark',
                'Contract.contract_no,Contract.account_mno,Contract.account_cno,Contract.account_bno,Contract.delivety_time',
                'Contract.account_prod_name,Contract.free_spare_qty', 'ObjRelObj.*'
            ),
            'group' => array('Req.id')
        ));
        $ModelDatas = $g_AttrDics->formatAllModelData($Reqs);
        $Reqs = array();
        if (!empty($ModelDatas)) {
            foreach ($ModelDatas as $idx => $Req) {
                if (!empty($Req['ObjRelObj']) && $Req['ObjRelObj']['id'] > 0) {
                    $Req['ObjRelObj']['meta_value'] = json_decode($Req['ObjRelObj']['meta_value'], true);
                }
                $Reqs[$Req['Req']['id']] = $Req;
            }
        }
        $this->set('Reqs', $Reqs);

        $this->set('saveComplete',0);
        if($this->request->is('post') && !empty($this->request->data)){
            $submitData = $this->request->data;
            $error_flag = false;
            foreach ($submitData as $idx => $temp) {
                $ReqId = preg_replace('/req_/', '', $idx);
                if (empty($ReqId)) {
                    continue;
                }
                $meta_value = array();
                $wip_info = array();
                $sum_qty = 0;
                if(!empty($temp['batch_no'])){
                    foreach($temp['batch_no'] as $key=>$batch_no){
                        if(empty($batch_no)){
                            continue;
                        }
                        if(!isset($temp['quantity'][$key])){
                            $temp['quantity'][$key] = 0;
                        }
                        $sum_qty += $temp['quantity'][$key];
                        $wip_info[] = $batch_no.':'.$temp['quantity'][$key];
                    }
                }
                if($sum_qty > ($Reqs[$ReqId]['Req']['quantity'] + $Reqs[$ReqId]['Contract']['free_spare_qty'])) {
                    $error_flag = true;
                    $this->set('setFlash', 1);
                    $this->Session->setFlash($Reqs[$ReqId]['Req']['ebs_order_number'].'挪用总数量不能大于订单数量+备品数');
                    continue;
                }
                $meta_value['wip_info'] = $wip_info;
                $meta_value = json_encode($meta_value);

                $ObjRelObj = $g_ObjRelObj->find('first', array('conditions' => array('ObjRelObj.model_def_id' => Req, 'ObjRelObj.rel_obj_id' => $ReqId,
                                'ObjRelObj.meta_type' => OCS_OBJ_REL_OBJ_TYPE_WIP, 'ObjRelObj.meta_key' => 'Req.batch_no_info')));
                if (empty($ObjRelObj)) {//新建
                    $ObjRelObj = array();
                    $ObjRelObj['model_def_id'] = Req;
                    $ObjRelObj['rel_obj_id'] = $ReqId;
                    $ObjRelObj['meta_type'] = OCS_OBJ_REL_OBJ_TYPE_WIP;
                    $ObjRelObj['meta_key'] = 'Req.batch_no_info';
                    $ObjRelObj['meta_value'] = $meta_value;
                    $g_ObjRelObj->create();
                    $g_ObjRelObj->save($ObjRelObj);
                } else {//编辑
                    $ObjRelObj['ObjRelObj']['meta_value'] = $meta_value;
                    $g_ObjRelObj->save($ObjRelObj['ObjRelObj']);
                }
            }
            if(!$error_flag) {
                $this->set('saveComplete', 1);
            }
        }
    }

    //拆分订单行
    function pop_split_order_line(){
        global $g_Commons;
        global $g_BizName;
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Contract->recursive = -1;
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $ReqId = $AllParams['P']['req_id'];

        $Req = $this->Req->find('first',array('conditions'=>array('Req.id'=>$ReqId),
            'fields'=>array('Req.id','Req.ebs_order_number','Req.rel_obj_id','Req.alter_audit_status')));
        $this->set('Req', $Req);

        if(empty($Req) || empty($Req['Req']['ebs_order_number'])){
            $this->set('setFlash',1);
            $this->Session->setFlash('订单未传EBS，或订单不存在。');
            return;
        }

        $OrderLines = $this->Req->GetOrderLinesByReqId($ReqId);
        $this->set('OrderLines', $OrderLines);

        $OrderLineTypeList = $g_Enums->getEnumListByDictName('Ebs.order_detail_type');
        $this->set('OrderLineTypeList', $OrderLineTypeList);

        //获取订单关联工单信息
        $tmp_result = $this->Req->GetContractRelWipByReqId($ReqId);
        $ContractRelWip = array();
        global $g_CompleteWipStatus;
        if($tmp_result['success']){
            if(!empty($tmp_result['datas']) && !empty($tmp_result['datas'][$ReqId])){
                $wips = $tmp_result['datas'][$ReqId];
                if(!empty($wips)){
                    foreach($wips as $line_id=>$items){
                        foreach($items as $temp){
                            if (in_array($temp['STATUS_TYPE'], $g_CompleteWipStatus)) {
                                continue;
                            }
                            if(!isset($ContractRelWip[$line_id]['quantity'])){
                                $ContractRelWip[$line_id]['quantity'] = 0;
                            }
                            $ContractRelWip[$line_id]['quantity'] += $temp['PRIMARY_QUANTITY'];

                            if(!isset($ContractRelWip[$line_id]['lot_number'])){
                                $ContractRelWip[$line_id]['lot_number'] = '';
                            }
                            $ContractRelWip[$line_id]['lot_number'] .= $temp['LOT_NUMBER'].'('.$temp['STATUS_MEANING'].'); ';

                            $ContractRelWip[$line_id]['wip_status'] = $temp['STATUS_TYPE'];
                        }
                    }
                }
            }
        }
        $this->set('ContractRelWip',$ContractRelWip);

        //未审核通过关键信息变更单，不能拆分订单（以免数量被覆盖）
        if (!empty($Req['Req']['alter_audit_status']) && OCS_REQ_ALTER_AUDIT_STATUS_PASS != $Req['Req']['alter_audit_status']) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('关键信息变更单还未审批，请先审批通过再拆分新订单。<a class="btn btn-warning" href="/'. $g_BizName. '/pop/Reqs/audit_modify_bill/'. $Req['Req']['id'] .'" >查看</a>');
            return;
        }

        $this->set('saveComplete',0);
        //submit
        if($this->request->is('post') && !empty($this->request->data)){
            $submitData = $this->request->data;
            $fac_type = array(1,3,6);//hardcode，工单状态（未发放，已发放，暂挂）
            $error_cnt = 0;
            $this->set('submitData',$submitData);
            foreach($submitData as $idx=>$temp){
                $line_id = preg_replace('/line_/', '', $idx);
                // if(isset($ContractRelWip[$line_id]) && in_array($ContractRelWip[$line_id]['wip_status'], $fac_type)){//有开工单且可修改
                //     if($temp['qty'][0] < $ContractRelWip[$line_id]['quantity']){
                //         $this->set('setFlash',2);
                //         $this->Session->setFlash('拆分后原订单行数量不可小于工单数量');
                //         return;
                //     }
                // }
                $sum_qty = 0;
                foreach($temp['qty'] as $qty){
                    if($qty < 0){
                        $this->set('setFlash',2);
                        $this->Session->setFlash('拆分后订单数量不能小于0');
                        return;
                    }
                    $sum_qty += $qty;
                }
                if($sum_qty != $OrderLines[$line_id]['ORDERED_QUANTITY']){
                    $this->set('setFlash',2);
                    $this->Session->setFlash($OrderLines[$line_id]['LINE_NAME'].'行拆分后总数量#'.$sum_qty.' 与原订单行数量#'.$OrderLines[$line_id]['ORDERED_QUANTITY'].' 不一致');
                    return;
                }
                $params = array();
                if(!empty($temp['qty'])){
                    foreach($temp['qty'] as $qty){
                        $data = array();
                        $data['HEADER_ID'] = $OrderLines[$line_id]['HEADER_ID'];
                        $data['LINE_ID'] = $OrderLines[$line_id]['LINE_ID'];
                        $data['QUANTITY'] = $qty;
                        $params[] = $data;
                    }
                }
                if(!empty($params)){
                    $result = $this->Req->SplitOrderLine($ReqId, $params);
                    if(!$result['success']){//拆分失败
                        $error_cnt++;
                        $Contract = $g_Contract->find('first', array('conditions' => array('Contract.id' => $Req['Req']['rel_obj_id']),
                                    'fields' => array('Contract.id', 'Contract.is_crm_fail', 'Contract.crm_fail_reason')));
                        if (!empty($Contract)) {
                            $Contract['Contract']['is_crm_fail'] = 1;
                            $Contract['Contract']['crm_fail_reason'] = $result['message'];
                            $g_Contract->save($Contract['Contract']);
                        }
                    }
                }
            }
            if(0 == $error_cnt){//同步成功
                $Contract = $g_Contract->find('first', array('conditions' => array('Contract.id' => $Req['Req']['rel_obj_id']),
                            'fields' => array('Contract.id', 'Contract.is_crm_fail', 'Contract.crm_fail_reason')));
                if (!empty($Contract) && $Contract['Contract']['is_crm_fail'] > 0) {
                    $Contract['Contract']['is_crm_fail'] = 0;
                    $Contract['Contract']['crm_fail_reason'] = '';
                    $g_Contract->save($Contract['Contract']);
                }
            }
            $this->set('saveComplete',1);
        }
    }

    //批量取消订单
    function pop_batch_cancel_order(){
        global $g_Commons;
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_CkdOrderSet = $g_Commons->GlobalModel('CkdOrderSet');
        $this->Req->recursive = -1;

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams',$AllParams);
        $Action = isset($AllParams['P']['act'])?$AllParams['P']['act']:'cancel_order_line';
        $this->set('Action',$Action);
        $ReqIds = explode(',', $AllParams['P']['ids']);

        $datas = $this->Req->find('all', array(
            'conditions'=>array(
                'Req.id'=>$ReqIds,
                'Req.close_status !=' => OCS_ORDER_CLOSE_STATUS_CANCEL,
            ),
            'joins'=>array(
                array(
                    'table'=>'contracts',
                    'alias'=>'Contract',
                    'type'=>'inner',
                    'conditions'=>'Contract.id = Req.rel_obj_id'
                    ),
                array(
                    'table'=>'types',
                    'alias'=>'Type',
                    'type'=>'inner',
                    'conditions'=>'Type.id = Contract.type_id'
                    ),
                array(
                    'table'=>'products',
                    'alias'=>'Product',
                    'type'=>'inner',
                    'conditions'=>'Product.id = Req.product_id'
                    ),
                ),
            'fields'=>array(
                'Req.id',
                'Req.name',
                'Req.ebs_order_number',
                'Req.alter_audit_status',
                'Contract.ebs_stage',
                'Contract.account_cno',
                'Contract.account_mno',
                'Contract.is_has_stock',
                'Contract.contract_no',
                'Req.product_id',
                'Product.name',
                'Req.quantity',
                'Req.req_type',
            ),
            'order'=>array('Req.id ASC')
        ));
        $Reqs = array();
        $has_alert_audit_req = array();
        if(!empty($datas)){
            foreach($datas as $data){
                $Reqs[$data['Req']['id']] = $data;
                // OCS-1606 存在待审关键信息变更单不允许取消订单
                if (OCS_REQ_ALTER_AUDIT_STATUS_NEW == $data['Req']['alter_audit_status']) {
                    $has_alert_audit_req[] = '<li>#' . $data['Req']['id'] . ' ' . $data['Req']['name'] . '</li>';
                }

                if ($this->Req->isMtlReqOrder(null, $data['Req']['req_type'])) {
                    $po_status = $g_CkdOrderSet->isCanModifyOrderInfo($data['Contract']['contract_no']);
                    if (!$po_status) {
                        $this->set('setFlash', 1);
                        $this->Session->setFlash($data['Contract']['contract_no'] . '对应的EBS配料清单未打回，不允许取消订单，请联系生管处理');
                        return;
                    }
                }
            }
        }

        if (!empty($has_alert_audit_req)) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('下列订单存在待审关键信息变更单，不允许取消订单。<ul>'  . implode("", $has_alert_audit_req)) . '</ul>';
            return;
        }

        $this->set('Reqs',$Reqs);

        $EbsOrders = $this->Req->GetOrderLinesByReqIds($ReqIds);
        $this->set('EbsOrders', $EbsOrders);

        $OrderLineTypeList = $g_Enums->getEnumListByDictName('Ebs.order_detail_type');
        $this->set('OrderLineTypeList', $OrderLineTypeList);

        //获取建交货数量
        $DeliverQty = array();
        if(!empty($ReqIds)){
            foreach($ReqIds as $ReqId){
                $Qty = $this->Req->GetOrderDeliverQty($ReqId);
                $DeliverQty[$ReqId] = $Qty;
            }
        }
        $this->set('DeliverQty',$DeliverQty);

        //获取订单关联工单信息
        $ContractRelWip = array();
        global $g_CompleteWipStatus;
        if(!empty($ReqIds)){
            foreach($ReqIds as $ReqId){
                $tmp_result = $this->Req->GetContractRelWipByReqId($ReqId);
                if($tmp_result['success'] && !empty($tmp_result['datas'])){
                    foreach($tmp_result['datas'] as $req_id=>$Lines){
                        if(!empty($Lines)){
                            foreach($Lines as $line_id=>$Wip){
                                foreach ($Wip as $idx=>$tmp) {
                                    if (in_array($tmp['STATUS_TYPE'], $g_CompleteWipStatus)) { //已完成，已关闭工单不算
                                        unset($Wip[$idx]);
                                    }
                                }
                                $ContractRelWip[$req_id][$line_id] = array_keys($Wip);
                            }
                        }
                    }
                }
            }
        }
        $this->set('ContractRelWip',$ContractRelWip);


        //判断是否有处于审核中的下采购申请单
        $g_DepositRatioBill = $g_Commons->GlobalModel('DepositRatioBill');
        $is_auditting_bill = $g_DepositRatioBill->isHasAudittingBill($ReqIds);
        $this->set('is_auditting_bill', $is_auditting_bill);

        // 获取审核人清单 add by GUOCAI 2015.09.15
        // 除订单类型为“SY-TV1到SY-TV5”和“HK-TV1到HK-TV5”的订单外,其他订单不需要产生审批单,和原来一样直接取消
        $g_OrderCancel = $g_Commons->GlobalModel('OrderCancel');
        $req_check_groups = $g_OrderCancel->checkReqAuditMethod($ReqIds);
        $this->set('req_check_groups', $req_check_groups);

        if (isset($req_check_groups['success']) && true == $req_check_groups['success']) {
            $cancel_approval_options = $g_OrderCancel->getCancelOrderApprovalOptions();
            $this->set('cancel_approval_options', $cancel_approval_options);
            $req_audits = $g_OrderCancel->getCancelAuditStages($ReqIds);
            $this->set('req_audits', $req_audits);
            $req_project_ids = $g_OrderCancel->getReqRelProjectId($EbsOrders);
            $this->set('req_project_ids', $req_project_ids);
        }
    }

    function cancel_sales_order_json(){
        $this->autoRender = false;
        global $g_Commons;
        global $g_BizId;
        global $g_CompleteWipStatus;
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_StockApplyHeader = $g_Commons->GlobalModel('StockApplyHeader');
        $g_CancelOrderLine = $g_Commons->GlobalModel('CancelOrderLine');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_ReqVersion = $g_Commons->GlobalModel('ReqVersion');
        $g_Contract->recursive = -1;
        $result = $g_Commons->initResult();

        if(!empty($_POST['action']) && !empty($_POST['req_id'])){
            $ReqId = $_POST['req_id'];
            $HeaderId = isset($_POST['header_id']) ? $_POST['header_id'] : 0;
            $LineIds = isset($_POST['line_ids'])?$_POST['line_ids']:array();
            $Action = $_POST['action'];

            if(!isset($ReqId) || empty($ReqId)){
                $result['success'] = false;
                $result['message'] = '无参数提交';
                echo json_encode($result);
                return;
            }

            $tmp_result = $this->Req->GetContractRelWipByReqId($ReqId);

            if (!$tmp_result['success']) {
                $result['success'] = false;
                $result['message'] = '无法查询到是否关联工单，请稍后重试';
                echo json_encode($result);
                return;
            }

            //获取订单关联工单信息
            $ContractRelWip = array();
            if(!empty($tmp_result['datas'])){
                foreach($tmp_result['datas'] as $req_id => $Lines){
                    if(!empty($Lines)){
                        foreach($Lines as $line_id => $Wip){
                            $keys = array_keys($Wip);
                            if(!empty($keys)){
                                foreach ($Wip as $lot_number => $tmp) {
                                    if (in_array($tmp['STATUS_TYPE'], $g_CompleteWipStatus)) { //排除掉完工入库的
                                        continue;
                                    }
                                    $ContractRelWip[$req_id][$line_id][] = $lot_number;
                                }
                            }
                        }
                    }
                }
            }

            if('cancel_order_line' == $Action){//取消订单行
                if(empty($LineIds)){
                    $result['success'] = false;
                    $result['message'] = 'line_id can not be null.';
                    $result['datas'] = array();
                    echo json_encode($result);
                    return;
                }
                if (empty($HeaderId)) {
                    $result['success'] = false;
                    $result['message'] = 'header_id can not be null.';
                    $result['datas'] = array();
                    echo json_encode($result);
                    return;
                }
                $v_error = 0;

                $req = $this->Req->find('first', array(
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        )
                    ),
                    'conditions' => array(
                        'Req.id' => $ReqId
                    ),
                    'fields' => array(
                        'Req.id,Req.quantity,Req.alter_audit_status,Req.product_id,Req.account_id,Req.price,Req.foreign_price,Req.sw_atom_ids_json,Req.ebs_line_version',
                        'Contract.id,Contract.is_has_stock,Contract.is_crm_fail,Contract.crm_fail_reason,Contract.error_type,Contract.free_spare_qty,Req.create_time'
                    )
                ));
                if (empty($req)) {
                    $result['success'] = false;
                    $result['message'] = '订单不存在，req_id=' . $req_id;
                    echo json_encode($result);
                    return;
                }

                //EBS备品行attribute12
                $free_attribute12 = '';
                if ($req['Contract']['free_spare_qty'] > 0) {
                    $line_version = $req['Req']['ebs_line_version'] + 1;
                    $free_attribute12 = $req['Req']['id'] . '_' . $line_version;
                }

                //订单行
                $OrderLines = $this->Req->GetOrderLinesByReqId($ReqId);

                //交货数
                $DeliverQty = $this->Req->GetOrderDeliverQty($ReqId);

                //取消后总数不能小于交货数
                $LeftQty = 0;
                $left_order_qty = 0; //不含备品
                if(!empty($OrderLines)){
                    foreach($OrderLines as $OrderLine){
                        if(!in_array($OrderLine['LINE_ID'], $LineIds)){//说明该行未被取消
                            if ('CANCELLED' != $OrderLine['FLOW_STATUS_CODE']) {
                                $datas[] = $OrderLine['ATTRIBUTE12'];
                                if (!empty($free_attribute12) && $free_attribute12 == $OrderLine['ATTRIBUTE12']) {//备品行
                                    $LeftQty += $OrderLine['ORDERED_QUANTITY'];
                                    continue;
                                }
                                $LeftQty += $OrderLine['ORDERED_QUANTITY'];
                                $left_order_qty += $OrderLine['ORDERED_QUANTITY'];
                            }
                        }
                    }

                    //判断是否有取消备品行，如有则将OCS的备品数量也改为0
                    $free_spare_qty_left = 0;
                    foreach($OrderLines as $OrderLine){
                        if ('CANCELLED' != $OrderLine['FLOW_STATUS_CODE']) {
                            if(in_array($OrderLine['LINE_ID'], $LineIds)){//说明该行被选中取消
                                continue;
                            }
                            if (!empty($free_attribute12) && $free_attribute12 == $OrderLine['ATTRIBUTE12']) {//备品行
                                $free_spare_qty_left += $OrderLine['ORDERED_QUANTITY'];
                            }
                        }
                    }
                    if (!empty($req['Contract']['free_spare_qty'])) { //取消将备品设置为0, 20150507 modify by shavene
                        // $req['Contract']['free_spare_qty'] = $free_spare_qty_left;
                        // $g_Contract->save($req['Contract']);
                    }
                }
                if($LeftQty < $DeliverQty){
                    $result['success'] = false;
                    $result['message'] = '取消后总数不能小于交付数';
                    echo json_encode($result);
                    return;
                }

                foreach($LineIds as $LineId){
                    if(isset($ContractRelWip[$ReqId][$LineId]) && !empty($ContractRelWip[$ReqId][$LineId])){//说明有关联工单
                        $datas[$LineId] = '该订单行有关联工单，不能取消。';
                        $v_error++;
                    }
                }
                if($v_error > 0){
                    $result['success'] = false;
                    $result['datas'] = $datas;
                    echo json_encode($result);
                    return;
                }

                if (0 == $LeftQty || $left_order_qty == $req['Req']['quantity']) { //全部订单行取消，不产生变更单
                    //当订单创建时间超过180天，不允许取消所有订单行。https://jira.cvte.com/browse/OCS-2208
                    $diff_time = time() - strtotime($req['Req']['create_time']);
                    if ($diff_time / 86400 > 180) {
                        $result['success'] = false;
                        $result['message'] = '订单创建时间至今超过180天，不允许直接取消全部订单行，请取消订单头走审批流程处理。';
                        echo json_encode($result);
                        return;
                    }

                    foreach($LineIds as $LineId){
                        $PO_STATUS = $this->Req->CancelSalesOrderLine($HeaderId, $LineId);
                        if('S' == $PO_STATUS){
                            $datas[$LineId] = 'success';
                            $log_content = '取消订单行，成功。行ID：'.$LineId;
                            $g_Logs->write_log('Reqs',$ReqId,'info',$log_content);
                        }else{
                            $v_error++;
                            $log_content = '取消订单行，失败。行ID：'.$LineId.' 原因#'.$PO_STATUS;
                            $datas[$LineId] = $PO_STATUS;
                        }
                    }
                } else { //取消部分订单行
                    //获取最新待审关键信息变更单
                    $last_req_version = $g_ReqVersion->getLastTmpReqVersion(Req, $ReqId);
                    // if (!empty($last_req_version) && $last_req_version['ReqVersion']['quantity'] != $req['Req']['quantity']) {
                    //     $result['success'] = false;
                    //     $result['message'] = '有关键信息变更单未审，变更数量有冲突，请先审核关键信息变更单。';
                    //     echo json_encode($result);
                    //     return;
                    // }
                    if (!empty($last_req_version) && OCS_REQ_ALTER_AUDIT_STATUS_NEW == $req['Req']['alter_audit_status']) {
                        $result['success'] = false;
                        $result['message'] = '有关键信息变更单未审，变更数量有冲突，请先审核关键信息变更单。';
                        echo json_encode($result);
                        return;
                    }

                    $is_saved = $g_CancelOrderLine->saveCancelLinesVersion($ReqId, $HeaderId, $LineIds); //保存取消的订单行
                    if (!$is_saved) {
                        $result['success'] = false;
                        $result['message'] = '保存取消的订单行，失败。';
                        echo json_encode($result);
                        return;
                    }

                    //如有未审关键信息变更单，叠加
                    $temp_req_version = array();
                    if (!empty($last_req_version) && OCS_REQ_ALTER_AUDIT_STATUS_NEW == $req['Req']['alter_audit_status']) {//有待审
                        $temp_req_version = $last_req_version['ReqVersion'];
                        unset($temp_req_version['id']);
                        $temp_req_version['quantity'] = $left_order_qty;
                    } else {
                        $temp_req_version['quantity'] = $left_order_qty;
                        $temp_req_version['model_def_id'] = Req;
                        $temp_req_version['rel_obj_id'] = $req['Req']['id'];
                        $temp_req_version['product_id'] = $req['Req']['product_id'];
                        $temp_req_version['account_id'] = $req['Req']['account_id'];
                        $temp_req_version['price'] = $req['Req']['price'];
                        $temp_req_version['foreign_price'] = isset($req['Req']['foreign_price']) ? $req['Req']['foreign_price'] : '';
                        $temp_req_version['is_has_stock'] = $req['Contract']['is_has_stock'];
                        $temp_req_version['sw_atom_ids_json'] = $req['Req']['sw_atom_ids_json'];
                    }
                    $g_ReqVersion->saveTmpReqVersion($temp_req_version); //保存修改的快照

                    $req['Contract']['is_crm_fail'] = 1;
                    $req['Contract']['crm_fail_reason'] = '关键信息变更(取消EBS订单行)，需业务经理审核';
                    $req['Contract']['error_type'] = OCS_CONTRACT_ERROR_TYPE_AUDIT; //更改单待审核(需业务经理审核)

                    $req['Req']['alter_audit_status'] = OCS_REQ_ALTER_AUDIT_STATUS_NEW; //关键信息变更-待审核

                    $this->Req->save($req['Req']);
                    $g_Contract->save($req['Contract']);

                    //合同也需重新审核
                    $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
                    $g_ContractRelTmpl->resetContractAuditByReqIds($this->Req->id, '数量变量，取消EBS订单行，合同自动打回。');

                    $result['message'] = '已提交关键信息变更单，需业务经理审核通过后才执行取消动作。';

                    $g_Logs->write_log('Reqs', $req['Req']['id'], 'info', $result['message']);

                    foreach ($LineIds as $LineId) {
                        $datas[$LineId] = '已提交关键信息变更单，需业务经理审核通过后才生效';
                    }
                }

                $result['success'] = true;
                if($v_error > 0){
                    $result['success'] = false;
                }
                $result['datas'] = $datas;
                echo json_encode($result);
                return;
            }else if('cancel_order_header' == $Action){//取消订单头
                if(empty($ReqId)){
                    $result['success'] = false;
                    $result['message'] = 'req_id can not be null.';
                    echo json_encode($result);
                    return;
                }
                //交货数
                $DeliverQty = $this->Req->GetOrderDeliverQty($ReqId);
                if($DeliverQty > 0){
                    $result['success'] = false;
                    $result['message'] = '已经创建交付不能取消订单';
                    echo json_encode($result);
                    return;
                }

                if(isset($ContractRelWip[$ReqId]) && !empty($ContractRelWip[$ReqId])){//说明有关联工单
                    $result['success'] = false;
                    $result['message'] = '该订单有关联工单，不能取消。';
                    echo json_encode($result);
                    return;
                }

                $req = $this->Req->find('first', array(
                    'conditions' => array('Req.id' => $ReqId),
                    'fields' => array(
                        'Req.id',
                        'Req.ebs_order_number',
                        'Req.close_status'
                    )
                ));

                $order_header = $this->Req->GetOrderHeadersByReqIds($ReqId);
                $header_id = isset($order_header[$ReqId]) ? $order_header[$ReqId]['HEADER_ID'] : 0;

                if (!empty($req['Req']['ebs_order_number'])) {//已传EBS
                    if (empty($header_id)) {
                        $result['success'] = false;
                        $result['message'] = 'header_id can not be null.';
                        echo json_encode($result);
                        return;
                    }
                    $PO_STATUS = $this->Req->CancelSalesOrderHeader($header_id);
                    if('S' == $PO_STATUS){
                        $log_content = '取消整个订单，成功。订单头ID：'.$header_id;
                        $g_Logs->write_log('Reqs',$ReqId,'info',$log_content);

                        if (OCS_ORDER_CLOSE_STATUS_CANCEL != $req['Req']['close_status']) {
                            $old_status = $req['Req']['close_status'];
                            $new_status = OCS_ORDER_CLOSE_STATUS_CANCEL;//已作废
                            //$req['Req']['close_status'] = OCS_ORDER_CLOSE_STATUS_CANCEL; //已作废
                            //$this->Req->save($req['Req']);
                            // 订单合同操作及字段更新规则
                            $this->Req->setReqStatusAction($ReqId, $new_status);

                            $log_content = '订单状态由：' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $old_status) . '=> ' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $new_status);
                            $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);

                            //订单作废或者关闭，自动释放库存预订数量
                            $g_StockReserveRelReq = $g_Commons->GlobalModel('StockReserveRelReq');
                            $g_StockReserveRelReq->autoReleaseReserveQty($ReqId);

                            $g_StockApplyHeader->cancelStockApplyHeaderByReqIds($this->Req->id); //作废备货申请
                        }

                        //合同也需重新审
                        $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
                        $g_ContractRelTmpl->resetContractAuditByReqIds($ReqId, '取消整个订单#' . $req['Req']['ebs_order_number'] . '，合同自动打回。');

                        //订单取消，添加任务评论
                        $g_Task = $g_Commons->GlobalModel('Task');
                        $g_Task->addTaskCommentByReqId($ReqId, '订单已作废，无需处理软件。');

                        // 如果是研发订单,那么自动取消软件任务
                        $is_rd_order = $this->Req->IsRdOrder($ReqId);
                        if ($is_rd_order) {
                            $g_Task->autoCancelTaskByReqId($ReqId);
                            $g_Logs->write_log('Reqs', $ReqId, 'info', '取消研发订单，自动取消软件任务。');
                        }

                        $result['success'] = true;
                        $result['message'] = 'success';
                        echo json_encode($result);
                        return;

                    }else{
                        $result['success'] = false;
                        $result['message'] = $PO_STATUS;
                        $log_content = '取消整个订单，失败。订单头ID：'.$header_id.' 原因#'.$PO_STATUS;
                        $g_Logs->write_log('Reqs',$ReqId,'info',$log_content);
                    }
                } else { //未传EBS
                    if (empty($req)) {
                        $result['success'] = false;
                        $result['message'] = 'empty req';
                        echo json_encode($result);
                        return;
                    }

                    if (!empty($req['Req']['ebs_order_number'])) {
                        $result['success'] = false;
                        $result['message'] = '订单已传EBS，不能用此方法取消订单';
                        echo json_encode($result);
                        return;
                    }

                    if (OCS_ORDER_CLOSE_STATUS_CANCEL == $req['Req']['close_status']) {
                        $result['success'] = true;
                        $result['message'] = '该单已经作废，无需再进行此操作';
                        echo json_encode($result);
                        return;
                    }
                    $old_status = $req['Req']['close_status'];
                    $new_status = OCS_ORDER_CLOSE_STATUS_CANCEL;//已作废
                    // $req['Req']['close_status'] = OCS_ORDER_CLOSE_STATUS_CANCEL; //已作废
                    // $this->Req->save($req['Req']);
                    // 订单合同操作及字段更新规则
                    $this->Req->setReqStatusAction($ReqId, $new_status);

                    $log_content = '订单状态由：' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $old_status) . '=> ' . $g_Enums->getLabelByDictNameAndValue('Req.close_status', $new_status);
                    $g_Logs->write_log('Reqs', $ReqId, 'info', $log_content);

                    $g_StockApplyHeader->cancelStockApplyHeaderByReqIds($this->Req->id); //作废备货申请

                    //订单作废或者关闭，自动释放库存预订数量
                    $g_StockReserveRelReq = $g_Commons->GlobalModel('StockReserveRelReq');
                    $g_StockReserveRelReq->autoReleaseReserveQty($ReqId);

                    //订单取消，添加任务评论
                    $g_Task = $g_Commons->GlobalModel('Task');
                    $g_Task->addTaskCommentByReqId($ReqId, '订单已作废，无需处理软件。');

                    // 如果是研发订单,那么自动取消软件任务
                    $is_rd_order = $this->Req->IsRdOrder($ReqId);
                    if ($is_rd_order) {
                        $g_Task->autoCancelTaskByReqId($ReqId);
                        $g_Logs->write_log('Reqs', $ReqId, 'info', '取消研发订单，自动取消软件任务。');
                    }

                    $result['success'] = true;
                    $result['message'] = 'success';
                    echo json_encode($result);
                    return;
                }

                echo json_encode($result);
                return;
            }
        }else{
            $result['success'] = false;
            $result['message'] = 'error parameters.';
            echo json_encode($result);
        }
    }

    /**
     * [order_cancel_approval_json 取消订单审批申请]
     *
     * @Author   zhangguocai
     *
     * @DateTime 2015-09-17T09:12:20+0800
     *
     * @return   [type]                   [description]
     */
    function order_cancel_approval_json() {
        global $g_Commons;
        $g_OrderCancel = $g_Commons->GlobalModel('OrderCancel');
        $this->autoRender = false;

        $result = $g_Commons->initResult();

        if (!$this->request->is('post')) {
            $result['message'] = '操作有误。';
            echo json_encode($result);
            return false;
        } elseif (empty($this->request->data)) {
            $result['message'] = '没找到提交的数据。';
            echo json_encode($result);
            return false;
        }

        $result['success'] = true;
        $result['datas'] = $g_OrderCancel->saveApprovals($this->request->data);
        echo json_encode($result);
        return false;
    }

    //订单的拆单
    function pop_split_req_new($ReqId = null) {
        global $g_Commons;
        global $g_BizName;
        $this->set('pageTitle', '拆分订单');
        $this->set('ReqId', $ReqId);

        $this->Req->recursive = -1;
        $Req = $this->Req->find('first', array(
            'conditions' => array('Req.id' => $ReqId),
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'left',
                    'conditions' => "Contract.id=Req.rel_obj_id"
                ),
            ),
            'fields' => array(
                'Req.id', 'Req.product_id', 'Req.name', 'Req.quantity', 'Req.price', 'Req.amount', 'Req.req_type',
                'Contract.is_has_stock', 'Contract.free_spare_qty','Req.alter_audit_status', 'Contract.contract_no',
            )
        ));
        if (empty($Req)) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('订单不存在');
            return;
        }
        $this->set('Req', $Req);
        // if (OCS_REQ_TYPE_CART_STOCK == $Req['Req']['req_type']) {
        //     $this->set('setFlash', 1);
        //     $this->Session->setFlash('购物车订单不能进行拆分订单');
        //     return;
        // }
        if ($this->Req->isMtlReqOrder($ReqId)) {
            $g_CkdOrderSet = $g_Commons->GlobalModel('CkdOrderSet');
            $po_status = $g_CkdOrderSet->isCanModifyOrderInfo($Req['Contract']['contract_no']);
            if (!$po_status) {
                $this->set('setFlash', 1);
                $this->Session->setFlash('EBS配料清单未打回，不允许拆分新订单，请联系生管处理');
                return;
            }
        }

        //未审核通过关键信息变更单，不能拆分订单（以免数量被覆盖）
        if (!empty($Req['Req']['alter_audit_status']) && OCS_REQ_ALTER_AUDIT_STATUS_NEW == $Req['Req']['alter_audit_status']) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('关键信息变更单还未审批，请先审批通过再拆分新订单。<a class="btn btn-warning" href="/'. $g_BizName. '/pop/Reqs/audit_modify_bill/'. $Req['Req']['id'] .'" >查看</a>');
            return;
        }

        //订单行
        $OrderLines = $this->Req->GetOrderLinesByReqId($ReqId);
        $this->set('OrderLines',$OrderLines);

        //交货数
        $DeliverQty = $this->Req->GetOrderDeliverQty($ReqId);
        $this->set('DeliverQty',$DeliverQty);

        //判断是否有处于审核中的下采购申请单
        $g_DepositRatioBill = $g_Commons->GlobalModel('DepositRatioBill');
        $is_auditting_bill = $g_DepositRatioBill->isHasAudittingBill($ReqId);
        if (isset($is_auditting_bill[$ReqId]) && $is_auditting_bill[$ReqId]) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('下采购申请单审核中，不允许拆分订单，请先打回。');
            return;
        }

        //获取订单关联工单信息
        $tmp_result = $this->Req->GetContractRelWipByReqId($ReqId);
        $ContractRelWip = array();
        $WipQuantity = 0;
        global $g_CompleteWipStatus;
        if($tmp_result['success']){
            if(!empty($tmp_result['datas']) && !empty($tmp_result['datas'][$ReqId])){
                $wips = $tmp_result['datas'][$ReqId];
                if(!empty($wips)){
                    foreach($wips as $line_id=>$items){
                        foreach($items as $temp){
                            if (in_array($temp['STATUS_TYPE'], $g_CompleteWipStatus)) {
                                continue;
                            }
                            if(!isset($ContractRelWip[$line_id]['quantity'])){
                                $ContractRelWip[$line_id]['quantity'] = 0;
                            }
                            $ContractRelWip[$line_id]['quantity'] += $temp['PRIMARY_QUANTITY'];
                            $WipQuantity += $temp['PRIMARY_QUANTITY'];

                            if(!isset($ContractRelWip[$line_id]['lot_number'])){
                                $ContractRelWip[$line_id]['lot_number'] = '';
                            }
                            $ContractRelWip[$line_id]['lot_number'] .= $temp['LOT_NUMBER'].'('.$temp['STATUS_MEANING'].'); ';

                            $ContractRelWip[$line_id]['wip_status'] = $temp['STATUS_TYPE'];
                        }
                    }
                }
            }
        }
        $this->set('WipQuantity',$WipQuantity);
        $this->set('ContractRelWip',$ContractRelWip);

        //原订单相关信息
        $OldReqInfo = array();
        $OldReqInfo['has_wip'] = 0;
        foreach ($OrderLines as $line) {
            $OldReqInfo['has_wip'] = 0;
            if ('Y' == $line['ATTRIBUTE13']) {
                $OldReqInfo['has_wip'] = 1;
            }
        }
        $OldReqInfo['has_stock'] = ($Req['Contract']['is_has_stock'])?1:0;
        $this->set('OldReqInfo', $OldReqInfo);
    }

    //保存拆单
    //1、修改原订单数量；2、创建产生新订单；3、拆分后订单传EBS(如果拆单前已经传EBS则拆后也传，否则不传EBS)
    function save_split_req_new_json() {
        $this->autoRender = false;
        global $g_Commons;
        global $g_UserId;
        global $g_BizId;
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_ReserveRelReq = $g_Commons->GlobalModel('ReserveRelReq');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $g_DepositRatioBill = $g_Commons->GlobalModel('DepositRatioBill');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $this->Req->recursive = -1;
        $result = $g_Commons->initResult();

        if (isset($_GET['ModelDatas']) && !empty($_GET['ModelDatas']) && !empty($_GET['ReqId'])) {
            $ReqId = $_GET['ReqId'];
            $LineId = isset($_GET['LineId']) ? $_GET['LineId'] : '';
            if ($ReqId <= 0) {
                $result['success'] = false;
                $result['message'] = 'req_id不能为空';
                echo json_encode($result);
                return;
            }
            if(empty($LineId)){
                $result['success'] = false;
                $result['message'] = '订单行ID不能为空';
                echo json_encode($result);
                return;
            }

            $is_audit_primary_bill = $this->Req->isAuditPassPrimaryBill($ReqId);
            if (!$is_audit_primary_bill) {
                $result['success'] = false;
                $result['message'] = '关键信息变更单还未审批，请先审批通过再作此操作。';
                echo json_encode($result);
                return;
            }

            $OrderLines = $this->Req->GetOrderLinesByReqId($ReqId);
            if(empty($OrderLines)){
                $result['success'] = false;
                $result['message'] = 'EBS订单不存在';
                echo json_encode($result);
                return;
            }
            $HeaderId = 0;
            foreach($OrderLines as $OrderLine){
                $HeaderId = $OrderLine['HEADER_ID'];
                break;
            }
            if(empty($HeaderId)){
                $result['success'] = false;
                $result['message'] = '订单头ID不能为空';
                echo json_encode($result);
                return;
            }
            //交货数
            $DeliverQty = $this->Req->GetOrderDeliverQty($ReqId);

            //获取订单关联工单信息
            $tmp_result = $this->Req->GetContractRelWipByReqId($ReqId);
            $WipQuantity = 0;
            global $g_CompleteWipStatus;
            if($tmp_result['success']){
                if(!empty($tmp_result['datas']) && !empty($tmp_result['datas'][$ReqId])){
                    $wips = $tmp_result['datas'][$ReqId];
                    if(!empty($wips)){
                        foreach($wips as $line_id=>$items){
                            foreach($items as $temp){
                                if (in_array($temp['STATUS_TYPE'], $g_CompleteWipStatus)) {
                                    continue;
                                }
                                $WipQuantity += $temp['PRIMARY_QUANTITY'];
                            }
                        }
                    }
                }
            }

            //订单阶段
            $order_stage_list = $g_Enums->Enum->getEnumListByDictName('Contract.ebs_stage');

            $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                        'joins' => array(
                            array(
                                'table' => 'contracts',
                                'alias' => 'Contract',
                                'type' => 'left',
                                'conditions' => 'Contract.id=Req.rel_obj_id'
                            )
                        ),
                        'fields' => array('Req.*', 'Contract.*')
                    ));
            if (empty($Req)) {
                $result['success'] = false;
                $result['message'] = '订单不存在，req_id=' . $ReqId;
                echo json_encode($result);
                return;
            }

            //获取原订单行对应的工厂
            $OrderLines = $this->Req->GetOrderLinesByReqId($ReqId);
            $mto_no = '';
            if(isset($OrderLines[$LineId])){
                $PROJECT_ID = $OrderLines[$LineId]['PROJECT_ID'];
                $mto_no = $g_Enums->getLabelByDictNameAndValue('Ebs.mto_no', $PROJECT_ID);
            }

            $ModelDatas = json_decode($_GET['ModelDatas'], true);
            //验证拆分前后数量是否一致
            $b_qty = 0;
            $c_qty = 0;
            $cnt = 0;
            foreach ($ModelDatas as $ModelData) {
                $b_qty += $ModelData['b_quantity'];
                $c_qty += $ModelData['c_quantity'];
                if(!isset($ModelData['attribute13']) || !isset($ModelData['is_has_stock'])){
                    $result['success'] = false;
                    $result['message'] = '弹性域字段未定义';
                    echo json_encode($result);
                    return;
                }

                // 检测产品的适用范围    add by linfangjie ocs-2489
                $vertify_result = $this->vertifyReqProduct($Req['Req']['product_id'], $g_BizId, $ModelData['is_has_stock'], $ModelData['c_quantity'], $Req['Contract']['type_id'], $Req['Req']['stock_account_id'], $Req['Req']['account_id']);
                if ($vertify_result['success'] == false && $cnt > 0) {
                    $result['success'] = false;
                    $result['message'] = $vertify_result['message'];
                    echo json_encode($result);
                    return;
                }

                if($cnt == 0){//第一行为原订单
                    $cnt++;
                    if($c_qty < $DeliverQty){
                        $result['success'] = false;
                        $result['message'] = '拆分后原订单总数不能小于交付数';
                        echo json_encode($result);
                        return;
                    }
                    if($c_qty + $b_qty < $WipQuantity){
                        $result['success'] = false;
                        $result['message'] = '拆分后原订单总数不能小于工单数';
                        echo json_encode($result);
                        return;
                    }
                }
            }
            if ($Req['Contract']['free_spare_qty'] > 0 && $b_qty != $Req['Contract']['free_spare_qty']) {
                $result['success'] = false;
                $result['message'] = '拆分前后备品数不一致';
                echo json_encode($result);
                return;
            }
            if ($c_qty != $Req['Req']['quantity']) {
                $result['success'] = false;
                $result['message'] = '拆分前后订单数不一致,前#' . $Req['Req']['quantity'] . '后#' . $c_qty;
                echo json_encode($result);
                return;
            }
            $row_num = 0;
            $TempReq = $Req;
            unset($TempReq['Req']['id']);
            unset($TempReq['Contract']['id']);
            if($TempReq['Contract']['ebs_stage'] >= OCS_CONTRACT_EBS_STAGE_MF_AUDIT){//大于6阶段的，自动将新订单设置为4阶段，由于推到6需要有确认书
                $TempReq['Contract']['ebs_stage'] = OCS_CONTRACT_EBS_STAGE_PURCHASED;
            }
            $origin_ebs_stage = $TempReq['Contract']['ebs_stage']; //被拆分原订单 的阶段
            $IsNeedSyncEbs = false;
            $old_reserve_rel_req = array();
            foreach ($ModelDatas as $ModelData) {
                if ($ModelData['c_quantity'] <= 0) {//订单数量为0不能保存
                    $result['success'] = false;
                    $result['message'] = '拆分订单的数量不允许为0';
                    echo json_encode($result);
                    return;
                }

                $req_name = explode('-', $TempReq['Req']['name']);
                $req_name[3] = $ModelData['c_quantity'];

                if (0 == $row_num) {//以第一行作为原订单的修改后数量
                    if ($Req['Contract']['free_spare_qty'] > 0 && $ModelData['b_quantity'] <= 0) {
                        $result['success'] = false;
                        $result['message'] = '原订单备品数不能由非0变为0';
                        echo json_encode($result);
                        return;
                    }
                    $ReduceQuantity = $Req['Req']['quantity'] - $ModelData['c_quantity']; //减少的数量
                    if(!isset($OrderLines[$LineId])){
                        $result['success'] = false;
                        $result['message'] = '订单行ID='.$LineId.'在EBS不存在。';
                        echo json_encode($result);
                        return;
                    }

                    $is_free_line = false;
                    $line_type_name = $g_Enum->getLabelByDictNameAndValue('Ebs.order_detail_type', $OrderLines[$LineId]['LINE_TYPE_ID']);
                    if (strstr($line_type_name, '赠品')) { //赠品行
                        $is_free_line = true;
                    }
                    if($is_free_line && $OrderLines[$LineId]['UNIT_SELLING_PRICE'] == 0 && count($OrderLines) > 1){
                        $result['success'] = false;
                        $result['message'] = '不能选择备品行作为减少数量的订单行';
                        echo json_encode($result);
                        return;
                    }
                    if(($OrderLines[$LineId]['ORDERED_QUANTITY'] - $ReduceQuantity) < 0){
                        $result['success'] = false;
                        $result['message'] = '减少后订单行#'.$OrderLines[$LineId]['LINE_NAME'].' 数量不能小于0';
                        echo json_encode($result);
                        return;
                    }
                    $Req['Contract']['free_spare_qty'] = !empty($ModelData['b_quantity']) ? $ModelData['b_quantity'] : 0; //备品数
                    $g_Contract->save($Req['Contract']);

                    // if (!in_array($Req['Req']['req_type'], array(OCS_REQ_TYPE_MATERIAL))) { //物料订单拆分，保留原来类别
                    //     $Req['Req']['req_type'] = OCS_REQ_TYPE_SPLITE_ORIGIN; //拆分订单
                    // }
                    $Req['Req']['name'] = implode('-', $req_name);
                    $Req['Req']['quantity'] = $ModelData['c_quantity']; //数量
                    $Req['Req']['update_user_id'] = $g_UserId;
                    $Req['Req']['update_time'] = date('Y-m-d H:i:s');
                    $Req['Req']['amount'] = $ModelData['c_quantity'] * $Req['Req']['price'];
                    if ($Req['Req']['foreign_price'] > 0) {
                        $Req['Req']['foreign_amount'] = $ModelData['c_quantity'] * $Req['Req']['foreign_price'];
                    }
                    if (!empty($Req['Req']['ebs_order_number'])) {
                        $IsNeedSyncEbs = true;
                        //$Req['Req']['is_sync_ebs'] = 0;
                    }
                    $this->Req->save($Req['Req']);
                    $this->saveReqVersion($this->Req->id);
                    $row_num = 1;

                    //保存相关信息
                    $old_reserve_rel_req = $g_ReserveRelReq->find('first', array(
                        'conditions' => array(
                            'ReserveRelReq.req_id' => $ReqId,
                        ),
                    ));
                    $ReserveRelReq = array();
                    $type = 0;
                    if (!empty($old_reserve_rel_req)) {
                        $ReserveRelReq['id'] = $old_reserve_rel_req['ReserveRelReq']['id'];
                    }

                    $ReserveRelReq['req_id'] = $ReqId;
                    $ReserveRelReq['type'] = $type;
                    $ReserveRelReq['quantity'] = $ReduceQuantity;

                    $ReserveRelReq['header_id'] = $HeaderId;
                    $ReserveRelReq['line_id'] = $LineId;
                    $ReserveRelReq['line_number'] = $OrderLines[$LineId]['LINE_NAME'];

                    $ReserveRelReq['p_is_remove_reserve'] = 0;
                    $ReserveRelReq['p_is_remove_order_quantity'] = 0;
                    $ReserveRelReq['remark'] = '拆分订单';
                    if (!isset($ReserveRelReq['id'])) {
                        $g_ReserveRelReq->create();
                        $g_ReserveRelReq->save($ReserveRelReq);
                    } else {
                        $g_ReserveRelReq->save($ReserveRelReq);
                    }
                    continue;
                }

                if (isset($ModelData['b_quantity'])) {
                    $TempReq['Contract']['free_spare_qty'] = !empty($ModelData['b_quantity']) ? $ModelData['b_quantity'] : 0;
                }

                $TempReq['Contract']['is_crm_fail'] = 0;
                $TempReq['Contract']['undelivered_qty'] = 0;
                $TempReq['Contract']['crm_fail_reason'] = NULL;
                $TempReq['Contract']['error_type'] = 0;
                $TempReq['Contract']['change_qty_version'] = 0;
                $TempReq['Contract']['is_book'] = 0;
                $TempReq['Contract']['is_new_cps'] = 0;
                $TempReq['Contract']['cps_cfm_status'] = 0;
                $TempReq['Contract']['review_remark'] = NULL;
                $TempReq['Contract']['contract_inv_audit_staus'] = 0;
                $TempReq['Contract']['is_has_stock'] = $ModelData['is_has_stock'];//是否出库存
                //使用原订单项目编号
                $TempReq['Contract']['mto_no'] = $mto_no;
                //弹性域字段
                $attribute13 = $ModelData['attribute13'];
                $flex_field_json = json_decode($TempReq['Contract']['flex_field_json'], true);
                $flex_field_json['attribute13'] = $attribute13;
                if (array_key_exists('discount', $flex_field_json)) { //清空折扣
                    unset($flex_field_json['discount']);
                }
                $flex_field_json = json_encode($flex_field_json);

                $TempReq['Contract']['flex_field_json'] = $flex_field_json;

                //清空订单阶段
                $TempReq['Contract']['ebs_stage'] = 0;

                $g_Contract->create();
                $g_Contract->save($TempReq['Contract']);
                $new_contract_id = $g_Contract->id;

                $TempReq['Req']['ebs_order_number'] = '';
                $TempReq['Req']['dest_type'] = 'EBS';
                $TempReq['Req']['base_id'] = 0;
                $TempReq['Req']['base_rel_obj_id'] = 0;
                $TempReq['Req']['is_sync_ebs'] = 0;
                $TempReq['Req']['name'] = implode('-', $req_name);
                $TempReq['Req']['rel_obj_id'] = $g_Contract->id;
                $TempReq['Req']['quantity'] = $ModelData['c_quantity'];
                $TempReq['Req']['create_user_id'] = $g_UserId;
                $TempReq['Req']['create_time'] = date('Y-m-d H:i:s');
                $TempReq['Req']['update_user_id'] = $g_UserId;
                $TempReq['Req']['update_time'] = date('Y-m-d H:i:s');
                $TempReq['Req']['is_has_task'] = 0;
                $TempReq['Req']['ebs_line_version'] = 0; //清空版本
                $TempReq['Req']['audit_stage'] = 0; //确认书审核状态
                $TempReq['Req']['is_semi'] = 0;
                $TempReq['Req']['is_mf'] = 0;
                $TempReq['Req']['is_owner_print'] = 0;
                $TempReq['Req']['is_close'] = 0;
                $TempReq['Req']['close_status'] = 0;
                $TempReq['Req']['bom_assign_time'] = NULL;
                $TempReq['Req']['alter_audit_status'] = 0;
                $TempReq['Req']['attach_confirmation_status'] = 0;
                // $TempReq['Req']['attach_contract_status'] = 0;
                $TempReq['Req']['amount'] = $ModelData['c_quantity'] * $TempReq['Req']['price'];
                if ($TempReq['Req']['foreign_price'] > 0) {
                    $TempReq['Req']['foreign_amount'] = $ModelData['c_quantity'] * $TempReq['Req']['foreign_price'];
                }
                $this->Req->create();
                $this->Req->save($TempReq['Req']);
                $new_req_id = $this->Req->id;

                //自动创建研发试产数据（只针对SY-TV-研发订单）
                $g_RdTrialBill = $g_Commons->GlobalModel('RdTrialBill');
                $g_RdTrialBill->autoCreateRdTrialBillByReqIds(array($new_req_id));

                //自动创建备货申请（只针对备货订单）
                $g_StockApplyHeader = $g_Commons->GlobalModel('StockApplyHeader');
                $g_StockApplyHeader->autoCreateStockApplyByReqIds(array($new_req_id));

                //写LOG
                $is_has_stock = ($TempReq['Contract']['is_has_stock'])?'是':'否';
                $attribute13 = ($ModelData['attribute13'])?'是':'否';
                $account_left_ratio = $g_DepositRatioBill->getAccountLeftRatioByReqId($ReqId); //获取原订单的客户余额比例
                $account_left_ratio = !empty($account_left_ratio) ? $account_left_ratio : null;
                $log_content = '来自拆分新订单自动创建(出库存：'.$is_has_stock.',已开工单：'.$attribute13.')，原订单：#'.$Req['Req']['ebs_order_number'];
                $log_content .= '，订单阶段：' . $order_stage_list[$Req['Contract']['ebs_stage']] . '，下采购申请余额比例：' . $account_left_ratio;
                $g_Logs->write_log('Reqs',$this->Req->id, 'info', $log_content);

                //订单关联表
                $origin_rel_req = $g_RelReq->find('first', array(
                    'conditions' => array(
                        'RelReq.req_id' => $ReqId, //原订单
                    ),
                    'fields' => array(
                        'RelReq.*',
                    )
                ));

                //对于购物车订单相关处理
                if (!empty($origin_rel_req) && 1 == $origin_rel_req['RelReq']['is_cart_order']) {
                    //保存obj_rel_obj（挪用的生产批号信息）
                    //设置为发货通知单上能自动带出的批号及数量
                    $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
                    $obj_rel_obj = $g_ObjRelObj->find('first', array(
                        'conditions' => array(
                            'ObjRelObj.model_def_id' => Req,
                            'ObjRelObj.rel_obj_id' => $ReqId, //原订单ID
                            'ObjRelObj.meta_type' => OCS_OBJ_REL_OBJ_TYPE_WIP,
                            'ObjRelObj.meta_key' => 'Req.batch_no_info'
                        )
                    ));
                    $new_obj_rel_obj = $g_ObjRelObj->find('first', array(
                        'conditions' => array(
                            'ObjRelObj.model_def_id' => Req,
                            'ObjRelObj.rel_obj_id' => $new_req_id, //新订单ID
                            'ObjRelObj.meta_type' => OCS_OBJ_REL_OBJ_TYPE_WIP,
                            'ObjRelObj.meta_key' => 'Req.batch_no_info'
                        )
                    ));

                    if (!empty($obj_rel_obj) && empty($new_obj_rel_obj)) {
                        $meta_value = json_decode($obj_rel_obj['ObjRelObj']['meta_value'], true);
                        $wip_info = array();
                        if (isset($meta_value['wip_info']) && !empty($meta_value['wip_info'])) {
                            foreach ($meta_value['wip_info'] as $lots) {
                                list($lot, $rel_qty) = explode(':', $lots);
                                $wip_info[] = $lot . ':' . $TempReq['Req']['quantity']; // 换成新订单数量
                            }
                        }
                        $meta_value['wip_info'] = $wip_info;
                        $meta_value = json_encode($meta_value);

                        $new_obj_rel_obj = array();
                        $new_obj_rel_obj['model_def_id'] = Req;
                        $new_obj_rel_obj['rel_obj_id'] = $new_req_id;
                        $new_obj_rel_obj['meta_type'] = OCS_OBJ_REL_OBJ_TYPE_WIP;
                        $new_obj_rel_obj['meta_key'] = 'Req.batch_no_info';
                        $new_obj_rel_obj['meta_value'] = $meta_value;
                        $g_ObjRelObj->create();
                        $g_ObjRelObj->save($new_obj_rel_obj);
                    }

                    //保存 保留表信息
                    if (!empty($old_reserve_rel_req)) {
                        $temp_reserve_rel_req = $g_ReserveRelReq->find('count', array(
                            'conditions' => array(
                                'ReserveRelReq.req_id' => $new_req_id
                            )
                        ));
                        if (empty($temp_reserve_rel_req)) {
                            $temp_reserve_rel_req = array();
                            $temp_reserve_rel_req = $old_reserve_rel_req['ReserveRelReq'];
                            if (array_key_exists('id', $temp_reserve_rel_req)) {
                                unset($temp_reserve_rel_req['id']);
                            }
                            $temp_reserve_rel_req['req_id'] = $new_req_id;
                            $temp_reserve_rel_req['quantity'] = 0;

                            $temp_reserve_rel_req['header_id'] = 0;
                            $temp_reserve_rel_req['line_id'] = 0;
                            $temp_reserve_rel_req['line_number'] = 0;

                            $temp_reserve_rel_req['p_is_remove_reserve'] = 0;
                            $temp_reserve_rel_req['p_is_remove_order_quantity'] = 0;
                            $temp_reserve_rel_req['remark'] = '来自拆分订单';

                            $g_ReserveRelReq->create();
                            $g_ReserveRelReq->save($temp_reserve_rel_req);
                        }
                    }
                }

                //保存rel_req
                $new_rel_req = array();
                if (!empty($origin_rel_req)) {
                    $new_rel_req = $origin_rel_req['RelReq'];
                    unset($new_rel_req['id']);
                    unset($new_rel_req['is_discount']); //清空折扣
                    unset($new_rel_req['not_use_stock_product_reason']); //未使用同代码原因
                    unset($new_rel_req['wip_need_stock_audit']); //委外单需库存管理者审核
                    unset($new_rel_req['not_use_stock_audit_remark']);
                    unset($new_rel_req['not_use_stock_audit_status']);

                    //将OA新产品评审流程相关字段清空
                    unset($new_rel_req['oa_fd_id']);
                    unset($new_rel_req['oa_prod_review_fd_id']);
                    unset($new_rel_req['oa_prod_review_status']);
                    unset($new_rel_req['is_need_check_adcp']);
                    unset($new_rel_req['is_limit_audit_contract']);
                }

                //查找新的rel_req是否已经存在
                $temp_rel_req = $g_RelReq->find('first', array(
                    'conditions' => array(
                        'RelReq.req_id' => $new_req_id
                    ),
                    'fields' => array(
                        'RelReq.id',
                        'RelReq.is_split_order',
                        'RelReq.split_from_req_id',
                    )
                ));
                if (empty($temp_rel_req)) {
                    $new_rel_req['req_id'] = $new_req_id;
                    $new_rel_req['is_split_order'] = 1; //标记该订单来自拆分订单
                    $new_rel_req['split_from_req_id'] = $ReqId; //记录原订单ID

                    $g_RelReq->create();
                    $g_RelReq->save($new_rel_req);
                } else {
                    $temp_rel_req['RelReq']['is_split_order'] = 1; //标记该订单来自拆分订单
                    $temp_rel_req['RelReq']['split_from_req_id'] = $ReqId; //记录原订单ID
                    $g_RelReq->save($temp_rel_req['RelReq']);
                }

                if ($IsNeedSyncEbs) {//如果原来的订单已经传EBS，则拆分后也需传EBS
                    $extend_params = array();
                    $extend_params['post_ebs_stage'] = 0;
                    $tmp_result = $this->SyncContractToEBSByReqId($this->Req->id, 1, 'SCHEDULE', $extend_params);
                    if(isset($tmp_result['success']) && $tmp_result['success']){
                        if($origin_ebs_stage > OCS_CONTRACT_EBS_STAGE_NEW){//逐个阶段下推
                            $this->Req->RecursiveUpdateEbsStage($this->Req->id, OCS_CONTRACT_EBS_STAGE_NEW, $origin_ebs_stage);

                            //3.1 阶段特殊处理，因为Req.php 里的GetNextEbsStage 方法不能直接修改
                            $contract = $g_Contract->find('first', array(
                                'conditions' => array(
                                    'Contract.id' => $new_contract_id,
                                ),
                                'fields' => array(
                                    'Contract.id',
                                    'Contract.ebs_stage',
                                )
                            ));
                            if (!empty($contract) && OCS_CONTRACT_EBS_STAGE_ADVANCE_PURCHASE == $origin_ebs_stage
                                && OCS_CONTRACT_EBS_STAGE_TO_PURCHASE == $contract['Contract']['ebs_stage']
                                && $contract['Contract']['ebs_stage'] < $origin_ebs_stage) {
                                $this->Req->updateEbsOrderStage($new_req_id, $origin_ebs_stage);
                            }
                        }
                    }
                }
            }

            //拆分订单：减少数量
            $this->Req->MarkProcessSplitOrderNew($ReqId);

            //判断是否要发起OA新产品评审流程
            if (!empty($new_req_id) && $this->Req->checkIsCanStartProductAuditOaFlow($new_req_id)) {
                //发起 新产品订单评审 流程
                $oa_result = $this->Req->createNewOaFlowProdReview($new_req_id);
            }

            $result['success'] = true;
            $result['message'] = 'save success';
            echo json_encode($result);
            return;
        }
        $result['success'] = false;
        $result['message'] = 'save failed';
        echo json_encode($result);
        return;
    }

    //未上传合同，特殊申请建交付
    function pop_apply_special_inv() {
        global $g_UserId;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Req = $g_Commons->GlobalModel('Req');
        $g_Contract->recursive = -1;
        $g_MfPlanBill->recursive = -1;
        $this->Req->recursive = -1;
        $this->set('title_for_layout', '特殊建交付');

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $ReqIds = explode(',', $AllParams['P']['req_ids']);
        if (!isset($AllParams['P']['req_ids']) || empty($ReqIds)) {
            return;
        }

        $AllParams['P']['act'] = isset($AllParams['P']['act'])?$AllParams['P']['act']:'apply';
        $Action = $AllParams['P']['act'];
        $this->set('Action', $Action);

        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $approval_users = $g_ObjRelObj->getCommonApprovalUsersByAlias(Req, 'CONTRACT_APPROVAL');
        $is_can_audit_contract = isset($approval_users['user_ids'][$g_UserId]) && !empty($approval_users['user_ids'][$g_UserId]) ? true : false;

        //无权审批
        if ('audit' == $Action && !($g_RolePrivs->get_priv_level('Reqs', 'can_view_all_primary_info_bill') && $is_can_audit_contract) ) {
            $this->set('setFlash', 1);
            $this->Session->setFlash('抱歉，你无权进行此操作。');
            return;
        }

        $conds = array(
            'Req.id' => $ReqIds,
        );
        if ('audit' == $Action) {
            $conds[] = 'Req.owner_user_id !=' . $g_UserId; //不允许审批自己的单据
        }

        $Reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ),
            ),
            'conditions' => $conds,
            'fields' => array('Req.id,Req.name,Req.ebs_order_number, Req.req_type, Req.owner_user_id,Req.account_id,Req.quantity,Req.product_id,Req.remark,Req.mf_remark,Req.owner_remark',
                'Contract.contract_no,Contract.account_mno,Contract.account_cno,Contract.account_bno,Contract.delivety_time,Contract.review_remark,Contract.contract_inv_audit_staus')
        ));
        // 筛选出订单类型是物料订单、SKD订单、散料CKD订单的合同编号， 并搜索出关联的订单 @linfangjie 2017.04.28
        if (empty($Reqs) == false) {
            $contractNos = array();
            foreach ($Reqs as $req_key => $req_val){
                // 订单类型是：物料订单、SKD订单、散料CKD订单
                if (in_array($req_val['Req']['req_type'], $g_Req->getDefMtlTypes())) {
                    if (!in_array($req_val['Contract'], $contractNos)){
                        $contractNos[] = $req_val['Contract']['contract_no'];
                    }
                    unset($Reqs[$req_key]);
                }
            }

            if (empty($contractNos) == false) {
                $conds = array(
                    'Contract.contract_no' => $contractNos,
                );

                // 不允许审批自己的单据
                if ('audit' == $Action) {
                    $conds[] = 'Req.owner_user_id !=' . $g_UserId;

                    // 审核时过滤没有申请过特殊建交付的订单
                    $conds[] = "(Contract.contract_inv_audit_staus=".OCS_CONTRACT_INV_AUDIT_STATUS_NEW.")";
                }

                $reqs_by_contractIds = $this->Req->find('all', array(
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                    ),
                    'conditions' => $conds,
                    'fields' => array('Req.id,Req.name,Req.ebs_order_number, Req.req_type, Req.owner_user_id,Req.account_id,Req.quantity,Req.product_id,Req.remark,Req.mf_remark,Req.owner_remark',
                    'Contract.contract_no,Contract.account_mno,Contract.account_cno,Contract.account_bno,Contract.delivety_time,Contract.review_remark,Contract.contract_inv_audit_staus')
                ));
                $Reqs = array_merge_recursive($Reqs, $reqs_by_contractIds);
            }
        }

        $Reqs = $g_AttrDics->formatAllModelData($Reqs);
        $this->set('Reqs', $Reqs);

        $AuditStatusList = $g_Enums->getEnumListByDictName('Contract.contract_inv_audit_staus');
        $this->set('AuditStatusList', $AuditStatusList);

        $this->set('saveComplete', 0);
        if ($this->request->is('post')) {
            $submitData = $this->request->data;
            foreach ($submitData as $idx => $temp) {
                $ReqId = preg_replace('/req_/', '', $idx);
                if (empty($ReqId)) {
                    continue;
                }
                $Req = $this->Req->find('first', array(
                    'joins'=>array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                            )
                        ),
                    'conditions' => array(
                        'Req.id' => $ReqId,
                        // 'Req.owner_user_id !=' => $g_UserId,//不允许审批自己的单据
                    ),
                    'fields' => array('Req.id', 'Req.name', 'Req.owner_user_id', 'Contract.id', 'Contract.contract_inv_audit_staus', 'Contract.review_remark')
                ));
                if (!empty($Req)) {
                    if ('apply' == $Action && $Req['Contract']['contract_inv_audit_staus'] != OCS_CONTRACT_INV_AUDIT_STATUS_PASS) {
                        $Req['Contract']['contract_inv_audit_staus'] = OCS_CONTRACT_INV_AUDIT_STATUS_NEW;//待审核
                        $Req['Contract']['contract_inv_apply_user_id'] = $g_UserId;
                        $Req['Contract']['contract_inv_apply_time'] = date('Y-m-d H:i:s');
                    }
                    if ('audit' == $Action){
                        if (!isset($temp['contract_inv_audit_staus'])) {
                            continue;
                        }
                        $Req['Contract']['contract_inv_audit_staus'] = $temp['contract_inv_audit_staus'];
                        $Req['Contract']['contract_inv_audit_user_id'] = $g_UserId;
                        $Req['Contract']['contract_inv_audit_time'] = date('Y-m-d H:i:s');
                    }
                    $Req['Contract']['review_remark'] = $temp['review_remark'];
                    $g_Contract->save($Req['Contract']);
                }
            }
            $this->set('saveComplete', 1);
        }
    }

    //改第三方付款平台
    function pop_audit_bill_account(){
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_ContractRelMidAccount = $g_Commons->GlobalModel('ContractRelMidAccount');
        $g_AccountAddress = $g_Commons->GlobalModel('AccountAddress');
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Account->recursive = -1;
        $g_Contract->recursive = -1;
        $this->Req->recursive = -1;
        $this->set('title_for_layout', '改第三方付款平台');

        $all_params = $g_Commons->getUrlParams($this->params->params);
        $this->set('all_params', $all_params);

        $req_ids = explode(',', $all_params['P']['req_ids']);
        if (!isset($all_params['P']['req_ids']) || empty($req_ids)) {
            return;
        }

        $all_params['P']['act'] = isset($all_params['P']['act'])?$all_params['P']['act']:'apply';

        $reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $req_ids),
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                    ),
                    'fields' => array('Req.id,Req.name,Req.ebs_order_number,Req.account_id,Req.quantity,Req.product_id,Contract.id',
                        'Contract.contract_no,Contract.account_mno,Contract.account_cno,Contract.account_bno,Contract.alter_mid_account_audit_status,Contract.mid_account_id,Contract.audit_account_remark')
                ));
        $reqs = $g_AttrDics->formatAllModelData($reqs);
        $this->set('reqs', $reqs);

        $contract_ids = array();
        foreach ($reqs as $req) {
            $contract_ids[] = $req['Contract']['id'];
        }
        $new_mid_account_list = $g_ContractRelMidAccount->getLastRelMidAccountList($contract_ids);
        $this->set('new_mid_account_list', $new_mid_account_list);

        $audit_status_list = $g_Enums->getEnumListByDictName('Contract.alter_mid_account_audit_status');
        foreach ($audit_status_list as $key => $value) {
            if (OCS_ALTER_MID_ACCOUNT_AUDIT_STATUS_NEW == $key) {
                unset($audit_status_list[$key]);
            }
        }
        $this->set('audit_status_list', $audit_status_list);

        $this->set('save_complete', 0);
        $error_msg = array();
        $this->set('error_msg', $error_msg);
        $audit_account_remarks = array();
        $success_saved_req_ids = array();
        if ($this->request->is('post')) {
            $submit_data = $this->request->data;
            foreach ($submit_data as $idx => $temp) {
                $req_id = preg_replace('/req_/', '', $idx);
                if (empty($req_id)) {
                    continue;
                }
                $req = $this->Req->find('first', array(
                    'conditions' => array('Req.id' => $req_id),
                    'joins'=>array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        )
                    ),
                    'fields' => array(
                        'Req.id','Req.account_id','Contract.id','Contract.mid_account_id', 'Contract.bill_site_use_id',
                        'Contract.alter_mid_account_audit_status', 'Contract.audit_account_remark'
                    )
                ));
                if (!empty($req)) {
                    if(!isset($temp['alter_mid_account_audit_status']) || OCS_ALTER_MID_ACCOUNT_AUDIT_STATUS_PASS == $req['Contract']['alter_mid_account_audit_status']){
                        continue;
                    }
                    if (OCS_ALTER_MID_ACCOUNT_AUDIT_STATUS_PASS != $temp['alter_mid_account_audit_status']) {
                        $req['Contract']['alter_mid_account_audit_status'] = $temp['alter_mid_account_audit_status'];
                        $req['Contract']['audit_account_remark'] = $temp['audit_account_remark'];
                        $g_Contract->save($req['Contract']);
                        continue;
                    }

                    $audit_account_remarks[$req_id] = $temp['audit_account_remark'];

                    //取消订单行
                    $tmp_result = $this->Req->processAlterMidAccountCancelledLines($req_id);

                    if (!$tmp_result['success']) {
                        $error_msg[$req_id] = $tmp_result['message'];
                        continue;
                    }

                    //审核通过，则覆盖原来收单客户
                    if (OCS_ALTER_MID_ACCOUNT_AUDIT_STATUS_PASS == $temp['alter_mid_account_audit_status']) {
                        $contract_rel_mid_account = $g_ContractRelMidAccount->find('first', array(
                            'conditions' => array(
                                'ContractRelMidAccount.contract_id' => $req['Contract']['id'],
                            ),
                            'order' => 'ContractRelMidAccount.id desc' //取最新的
                        ));
                        if (empty($contract_rel_mid_account)) {
                            continue;
                        }
                        $old_mid_account_id = $req['Contract']['mid_account_id'];
                        $old_bill_site_use_id = $req['Contract']['bill_site_use_id'];
                        $new_mid_account_id = 0;

                        $mid_account = $g_AccountAddress->getAccountBySiteUseId($contract_rel_mid_account['ContractRelMidAccount']['bill_site_use_id']);
                        if (!empty($mid_account)) {//覆盖原来客户

                            // OCS-272 正式-清除订单资金平台后系统把收货客户显示在第三方位置
                            // 如果第三方支付平台和客户是同一个,那么不需要写入第三方支付平台的客户ID
                            if ($mid_account['Account']['id'] != $req['Req']['account_id']) {
                                $new_mid_account_id = $mid_account['Account']['id'];
                            }
                            $req['Contract']['mid_account_id'] = $new_mid_account_id;
                            $req['Contract']['bill_site_use_id'] = $contract_rel_mid_account['ContractRelMidAccount']['bill_site_use_id'];
                        }
                    }

                    $old_status = $req['Contract']['alter_mid_account_audit_status'];

                    $req['Contract']['alter_mid_account_audit_status'] = $temp['alter_mid_account_audit_status'];
                    $req['Contract']['audit_account_remark'] = $temp['audit_account_remark'];
                    $g_Contract->save($req['Contract']);

                    //write log
                    $log_content = '审核改第三方付款平台，审核状态#' . $g_Enums->Enum->getLabelByDictNameAndValue('Contract.alter_mid_account_audit_status', $old_status) . '=>';
                    $log_content .= $g_Enums->Enum->getLabelByDictNameAndValue('Contract.alter_mid_account_audit_status', $req['Contract']['alter_mid_account_audit_status']) . '；';
                    if (OCS_ALTER_MID_ACCOUNT_AUDIT_STATUS_PASS == $temp['alter_mid_account_audit_status']) {
                        $log_content .= '收单客户#' . $g_Account->findMainField($old_mid_account_id) . '=>' . $g_Account->findMainField($new_mid_account_id) . '，';
                        $log_content .= '收单客户地址#' . $g_AccountAddress->getAddressLabelBySiteUseId($old_bill_site_use_id) . '=>' . $g_AccountAddress->getAddressLabelBySiteUseId($req['Contract']['bill_site_use_id']);
                    }
                    $g_Logs->write_log('Reqs', $req_id, 'info', $log_content);

                    //同步订单（会自动产生新订单行），并复制原订单行弹性域字段至新订单行
                    $tmp_result = $this->Req->processAlterMidAccountNewLines($req_id);
                    if (!$tmp_result['success']) {
                        $g_Logs->write_log('Reqs', $req_id, 'info', $tmp_result['message']);
                        $error_msg[$req_id] = $tmp_result['message'];
                        continue;
                    }
                    $success_saved_req_ids[] = $req_id;
                }
            }
            $this->set('error_msg', $error_msg);
            $this->set('audit_account_remarks', $audit_account_remarks);
            if (empty($error_msg)) {
                $this->set('save_complete', 1);
            }
        }
        $this->set('success_saved_req_ids', $success_saved_req_ids);
    }

    //CVTE备货的订单，下推阶段4后8天内还没推到6，则自动作废
    function AutoCancelStockOrders(){
        $this->autoRender = false;
        $this->Req->AutoCancelStockOrders();
    }

    //研发订单，邮件通知相关工程师
    function pop_try_mf_notify(){
        global $g_Commons;
        global $g_BizName;
        global $g_OCS_options;
        global $g_UserEmail;
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_User = $g_Commons->GlobalModel('User');
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_Product->recursive = -1;
        $g_User->recursive = -1;
        $g_ObjRelObj->recursive = -1;
        $this->Req->recursive = -1;
        $this->set('title_for_layout', '试产通知单');

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $ReqIds = explode(',', $AllParams['P']['req_ids']);
        if (!isset($AllParams['P']['req_ids']) || empty($ReqIds)) {
            return;
        }

        $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ReqIds),
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ),
                array(
                    'table' => 'obj_rel_objs',
                    'alias' => 'ObjRelObj',
                    'type' => 'left',
                    'conditions' => 'ObjRelObj.rel_obj_id = Req.id AND ObjRelObj.meta_type = ' . OCS_OBJ_REL_OBJ_TYPE_RD_NOTICE . '
                AND ObjRelObj.model_def_id=' . Req . " AND ObjRelObj.meta_key='Req.rd_notify_content'"
                ),
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'inner',
                    'conditions' => 'Product.id = Req.product_id'
                ),
            ),
            'fields' => array('Req.id,Req.name,Req.ebs_order_number,Req.account_id,Req.quantity,Req.product_id',
                'Contract.contract_no,Contract.account_mno,Contract.account_cno,Contract.account_bno',
                'Contract.account_prod_name', 'ObjRelObj.*',
                'Product.name,Product.code,Product.id',
            ),
            'group' => array('Req.id')
        ));
        $Reqs = $g_AttrDics->formatAllModelData($Reqs);
        $ModelDatas = array();
        if (!empty($Reqs)) {
            foreach ($Reqs as $idx => $Req) {
                if (!empty($Req['ObjRelObj']) && $Req['ObjRelObj']['id'] > 0) {
                    $Req['ObjRelObj']['meta_value'] = json_decode($Req['ObjRelObj']['meta_value'], true);
                }else{//未设置，使用该型号对应的模板
                    $Product = $g_Product->find('first',array('conditions'=>array('Product.id'=>$Req['Req']['product_id']),
                        'fields'=>array('Product.id','Product.prod_model_id')));
                    $ObjRelObj = $g_ObjRelObj->find('first',array(
                        'conditions'=>array(
                            'ObjRelObj.model_def_id'=>ProdModel,
                            'ObjRelObj.rel_obj_id'=>$Product['Product']['prod_model_id'],
                            'ObjRelObj.meta_type'=>OCS_OBJ_REL_OBJ_TYPE_RD_NOTICE,
                            'ObjRelObj.meta_key'=>'Req.rd_notify_content_tmpl',
                        ),
                    ));
                    if(!empty($ObjRelObj)){
                        $Req['ObjRelObj'] = $ObjRelObj['ObjRelObj'];
                        $Req['ObjRelObj']['meta_value'] = json_decode($ObjRelObj['ObjRelObj']['meta_value'], true);
                    }
                }
                $ModelDatas[$Req['Req']['id']] = $Req;
            }
        }
        $this->set('Reqs', $ModelDatas);

        $BoolOpts = array(__('Yes'), __('No'));
        $this->set('BoolOpts', $BoolOpts);

        //$MtoNoList = $g_Enums->Enum->find('list',array('conditions'=>array('Enum.dict_name'=>'Ebs.mto_no'),'fields'=>array('Enum.value','Enum.remark')));
        $MtoNoList = $g_Enums->Enum->getEnumValueRemarksByDictNameAndAlias('Ebs.mto_no', null);
        $this->set('MtoNoList', $MtoNoList);

        //初始化自定义字段
        $InitMetaFields = array('mto_no','mf_board_time','mf_complete_time','fac_is_burn','fac_is_test','is_has_test_tmpl','is_mf_test','account',
                                'manager_user','sw_user','hw_user','power_user','struct_is_change','is_has_special_wire','urgent_reason', 'other_user_emails', 'notify_times');
        $other_fileds = array('Req.ebs_order_number', 'Product.code','Product.name', 'Req.quantity');

        $InitMetaFields = array_merge($InitMetaFields, $other_fileds);
        $this->set('InitMetaFields', $InitMetaFields);

        //获取用户
        $user_list = $g_User->find('list', array(
            'conditions' => array(
                'User.is_valid' => 1,
            ),
            'fields' => 'User.id,User.realname'
        ));
        $this->set('user_list', $user_list);

        $this->set('saveComplete',0);
        if($this->request->is('post') && !empty($this->request->data)){
            $submitData = $this->request->data;
            foreach ($submitData as $idx => $temp) {
                $ReqId = preg_replace('/req_/', '', $idx);
                if (empty($ReqId)) {
                    continue;
                }
                $meta_value = array();
                foreach($InitMetaFields as $field){
                    $meta_value[$field] = isset($temp[$field]) ? $temp[$field] : '';
                }

                $obj_rel_obj = $g_ObjRelObj->find('first', array(
                    'conditions'=>array(
                        'ObjRelObj.model_def_id' => Req,
                        'ObjRelObj.rel_obj_id' => $ReqId,
                        'ObjRelObj.meta_type' => OCS_OBJ_REL_OBJ_TYPE_RD_NOTICE,
                        'ObjRelObj.meta_key' => 'Req.rd_notify_content'
                    )
                ));
                $old_meta_value = array();
                if (empty($obj_rel_obj)) {//新建
                    $meta_value['notify_times'] = empty($meta_value['notify_times']) ? 1 : $meta_value['notify_times'];
                    $meta_value_json = json_encode($meta_value);
                    $obj_rel_obj = array();
                    $obj_rel_obj['model_def_id'] = Req;
                    $obj_rel_obj['rel_obj_id'] = $ReqId;
                    $obj_rel_obj['meta_type'] = OCS_OBJ_REL_OBJ_TYPE_RD_NOTICE;
                    $obj_rel_obj['meta_key'] = 'Req.rd_notify_content';
                    $obj_rel_obj['meta_value'] = $meta_value_json;
                    $g_ObjRelObj->create();
                    $g_ObjRelObj->save($obj_rel_obj);
                } else {//编辑
                    $old_meta_value = json_decode($obj_rel_obj['ObjRelObj']['meta_value'], true);
                    $meta_value['notify_times'] = empty($old_meta_value['notify_times']) ? 1 : $old_meta_value['notify_times'] + 1;

                    $meta_value_json = json_encode($meta_value);
                    $obj_rel_obj['ObjRelObj']['meta_value'] = $meta_value_json;
                    $g_ObjRelObj->save($obj_rel_obj['ObjRelObj']);
                }

                //其他收件人
                $other_user_emails = $temp['other_user_emails'];
                foreach ($other_user_emails as $idx=>$email) {
                    $other_user_emails[$idx] = preg_replace('/\s*/', '', $email);
                    if (empty($other_user_emails[$idx])) {
                        unset($other_user_emails[$idx]);
                        continue;
                    }
                    $email = $g_User->getUserEmailByRealname($other_user_emails[$idx]);
                    if (empty($email)) {
                        unset($other_user_emails[$idx]);
                        continue;
                    }
                    $other_user_emails[$idx] = $email;
                }

                //比较上次通知和此次的差异项
                $diff_opts_style = array();
                foreach ($InitMetaFields as $field) {
                    $diff_opts_style[$field] = '';
                    if (isset($old_meta_value[$field]) && isset($meta_value[$field]) && $old_meta_value[$field] != $meta_value[$field]) {
                        $diff_opts_style[$field] = 'style="color: red;font-weight: bolder;"';
                    }
                }

                //邮件通知
                $common_text = '';
                $common_text .= '<div style="background:#FFFADF;border:1px solid #F0F0F0;padding:3px;margin-bottom:20px;display:block;">';
                $common_text .= '<table border=1>';
                $common_text .= '<tr><th>EBS编号</th><th>产品代码</th><th>产品名称</th><th>订单数量</th><th>客户</th><th>工厂</th><th>发板时间</th>
                <th>齐套日期</th><th>工厂是否烧录</th><th>工厂是否测试</th>
                <th>是否有测试样板</th><th>是否提交生产测试</th><th>项目管理人</th>
                <th>软件工程师</th><th>硬件工程师</th><th>电源工程师</th>
                <th>结构是否变更</th><th>是否有特殊线材</th><th>备注</th>
                </tr>';

                $common_text .= '<tr>';
                $common_text .= '<td ' .$diff_opts_style['Req.ebs_order_number'] . '><a href="' .$g_OCS_options['url']. $g_BizName .'/Reqs/view/'. $ReqId . '">'.$ModelDatas[$ReqId]['Req']['ebs_order_number'].'</a></td>';
                $common_text .= '<td ' .$diff_opts_style['Product.code'] .'>'.$ModelDatas[$ReqId]['Product']['code'].'</td>';
                $common_text .= '<td ' .$diff_opts_style['Product.name'] .'><a href="' .$g_OCS_options['url']. $g_BizName .'/Products/view/'. $ModelDatas[$ReqId]['Product']['id'] . '">'.$ModelDatas[$ReqId]['Product']['name'].'</a></td>';
                // $common_text .= '<td>'.preg_replace('/<.*/', '', $ModelDatas[$ReqId]['Req']['product_id']['label']).'</td>';
                // $common_text .= '<td>'.$ModelDatas[$ReqId]['Product']['name'].'</td>';
                $common_text .= '<td ' .$diff_opts_style['Req.quantity'] .'>'.$ModelDatas[$ReqId]['Req']['quantity'].'</td>';
                // $common_text .= '<td>'.$ModelDatas[$ReqId]['Req']['account_id']['label'].'</td>';
                $common_text .= '<td '.$diff_opts_style['account'].'>'.$meta_value['account'].'</td>';
                $common_text .= '<td '.$diff_opts_style['mto_no'].'>'.$meta_value['mto_no'].'</td>';
                $common_text .= '<td '.$diff_opts_style['mf_board_time'].'>'.$meta_value['mf_board_time'].'</td>';
                $common_text .= '<td '.$diff_opts_style['mf_complete_time'].'>'.$meta_value['mf_complete_time'].'</td>';
                $common_text .= '<td '.$diff_opts_style['fac_is_burn'].'>'.$meta_value['fac_is_burn'].'</td>';
                $common_text .= '<td '.$diff_opts_style['fac_is_test'].'>'.$meta_value['fac_is_test'].'</td>';
                $common_text .= '<td '.$diff_opts_style['is_has_test_tmpl'].'>'.$meta_value['is_has_test_tmpl'].'</td>';
                $common_text .= '<td '.$diff_opts_style['is_mf_test'].'>'.$meta_value['is_mf_test'].'</td>';
                $common_text .= '<td '.$diff_opts_style['manager_user'].'>'.$meta_value['manager_user'].'</td>';
                $common_text .= '<td '.$diff_opts_style['sw_user'].'>'.$meta_value['sw_user'].'</td>';
                $common_text .= '<td '.$diff_opts_style['hw_user'].'>'.$meta_value['hw_user'].'</td>';
                $common_text .= '<td '.$diff_opts_style['power_user'].'>'.$meta_value['power_user'].'</td>';
                $common_text .= '<td '.$diff_opts_style['struct_is_change'].'>'.$meta_value['struct_is_change'].'</td>';
                $common_text .= '<td '.$diff_opts_style['is_has_special_wire'].'>'.$meta_value['is_has_special_wire'].'</td>';
                $common_text .= '<td '.$diff_opts_style['urgent_reason'].'>'.$meta_value['urgent_reason'].'</td>';
                $common_text .= '</tr>';

                $common_text .= '</table>';
                $common_text .= '<div>';
                $CfmUrl = $g_OCS_options['url'].$g_BizName.'/pop/Reqs/view_latest_req_cfm/'.$ReqId;
                $common_text .= '查看确认书：<a target="_blank" href="'.$CfmUrl.'">'.$CfmUrl.'</a>';
                $common_text .= '</div>';

                $common_text .= '</div>';

                $ToUsers = array(
                    'gaojinqian@cvte.cn',
                    'huangyanchao@cvte.cn',
                    'zhangyuan@cvte.cn',
                    'malixia@cvte.cn',
                    'chenlili@cvte.cn',
                    'liyeke@cvte.cn',
                    'zhangfeng@cvte.cn',
                    'liuyun@cvte.cn',
                    'lutan@cvte.cn',
                    'wuzhifeng@cvte.cn',
                    'likexia@cvte.cn',
                    'zuomin@cvte.cn',
                    'wangjimin@cvte.cn',
                    'chenxianshun@cvte.cn',
                    'yutao@cvte.cn',
                    'chenlili0871@cvte.cn',
                );//默认
                $CcUsersEmails = array($g_UserEmail,'lishirong@cvte.cn');
                $CcUserKeys = array('manager_user','sw_user','hw_user','power_user');
                foreach($CcUserKeys as $ukey){
                    if(isset($meta_value[$ukey]) && !empty($meta_value[$ukey])){
                        $realname = $meta_value[$ukey];
                        $User = $g_User->find('first',array('conditions'=>array('User.realname'=>$realname),
                            'fields'=>array('User.id','User.email')));
                        if(!empty($User) && !empty($User['User']['email'])){
                            $CcUsersEmails[] = $User['User']['email'];
                        }
                    }
                }
                if (!empty($other_user_emails)) {
                    $ToUsers = array_merge($ToUsers, $other_user_emails);
                }
                $ToUsers = array_unique($ToUsers);
                $CcUsersEmails = array_unique($CcUsersEmails);
                $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
                $Options['Email']['ToUsers'] = $ToUsers;
                $Options['Field']['Action_Status'] = (isset($meta_value['notify_times']) && $meta_value['notify_times'] > 1) ? '【更新】' : '';
                $Options['Field']['common_text'] = $common_text;
                $Options['Field']['Req__ebs_order_number'] = $ModelDatas[$ReqId]['Req']['ebs_order_number'];
                $Options['Field']['ProdModel__name'] = preg_replace('/<.*/', '', $ModelDatas[$ReqId]['Req']['product_id']['label']);
                $Options['Email']['CcUsers'] = $CcUsersEmails;
                $g_QueueJobs->AddNoticeJob(array('Email'), Req, $ReqId, 'RdTryMfNotice', $Options);
            }
            $this->set('saveComplete', 1);
        }
    }

    function pop_batch_book_order(){
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_ReqVersion = $g_Commons->GlobalModel('ReqVersion');
        $g_Contract->recursive = -1;
        $this->Req->recursive = -1;
        $this->set('title_for_layout', '登记订单');

        $AllParams = $g_Commons->getUrlParams($this->params->params);
        $this->set('AllParams', $AllParams);

        $ReqIds = explode(',', $AllParams['P']['req_ids']);
        $this->set('url_req_ids', $AllParams['P']['req_ids']);
        if (!isset($AllParams['P']['req_ids']) || empty($ReqIds)) {
            return;
        }

        //先同步状态（前期数据或者直接在EBS登记的）
        $this->Req->SyncIsBookOrder($ReqIds);

        $Reqs = $this->Req->find('all', array('conditions' => array('Req.id' => $ReqIds),
                    'joins' => array(
                        array(
                            'table' => 'contracts',
                            'alias' => 'Contract',
                            'type' => 'inner',
                            'conditions' => 'Contract.id = Req.rel_obj_id'
                        ),
                        array(
                            'table' => 'products',
                            'alias' => 'Product',
                            'type' => 'inner',
                            'conditions' => 'Product.id = Req.product_id'
                        ),
                    ),
                    'fields' => array(
                        'Req.id,Req.name,Req.ebs_order_number,Req.account_id,Req.quantity,Req.product_id, Req.alter_audit_status',
                        'Product.code,Product.id,Product.name',
                        'Contract.contract_no,Contract.account_mno,Contract.account_cno,Contract.account_bno,Contract.ebs_stage,Contract.is_book'
                    )
                ));
        $Reqs = $g_AttrDics->formatAllModelData($Reqs);

        //查询有产品或收单客户修改的关键信息变更单关联的订单，不允许登记
        foreach ($Reqs as $key => $req) {
            if (OCS_REQ_ALTER_AUDIT_STATUS_NEW == $req['Req']['alter_audit_status']['value']) {
                $Reqs[$key]['Req']['is_can_boook'] = $g_ReqVersion->isCanBookReqVersion($req['Req']['id']);
            } else {
                $Reqs[$key]['Req']['is_can_boook'] = true;
            }
        }
        $this->set('Reqs', $Reqs);

        $this->set('saveComplete', 0);
        if ($this->request->is('post')) {
            $submitData = $this->request->data;
            foreach ($submitData as $idx => $temp) {
                $ReqId = preg_replace('/req_/', '', $idx);
                if (empty($ReqId)) {
                    continue;
                }
                $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                            'joins'=>array(
                                array(
                                    'table' => 'contracts',
                                    'alias' => 'Contract',
                                    'type' => 'inner',
                                    'conditions' => 'Contract.id = Req.rel_obj_id'
                                    )
                                ),
                            'fields' => array('Req.id', 'Req.name','Contract.id','Contract.contract_inv_audit_staus', 'Contract.review_remark')));
                if (!empty($Req)) {
                    if('apply' == $Action && $Req['Contract']['contract_inv_audit_staus'] != OCS_CONTRACT_INV_AUDIT_STATUS_PASS){
                        $Req['Contract']['contract_inv_audit_staus'] = OCS_CONTRACT_INV_AUDIT_STATUS_NEW;//待审核
                    }
                    if('audit' == $Action){
                        if(!isset($temp['contract_inv_audit_staus'])){
                            continue;
                        }
                        $Req['Contract']['contract_inv_audit_staus'] = $temp['contract_inv_audit_staus'];
                    }
                    $Req['Contract']['review_remark'] = $temp['review_remark'];
                    $g_Contract->save($Req['Contract']);
                }
            }
            $this->set('saveComplete', 1);
        }
    }

    /**
     * 登记订单，物料订单加入队列处理
     *
     * @Author   lishirong
     *
     * @DateTime 2016-04-18T15:45:08+0800
     *
     * @param    [type]                   $req_id [订单req_id]
     *
     * @return   [type]                           [description]
     */
    function book_ebs_order_json($req_id = null) {
        global $g_Commons;
        $g_Req = $g_Commons->GlobalModel('Req');
        $result = $g_Commons->initResult();
        $this->autoRender = false;

        if (empty($req_id)) {
            $result['message'] = '参数错误，req_id为空';
            echo json_encode($result);
            return;
        }
        $g_OrderLineItem = $g_Commons->GlobalModel('OrderLineItem');
        $order_line_item_count = $g_OrderLineItem->find('count', array(
            'conditions' => array(
                'OrderLineItem.req_id' => $req_id,
            ),
        ));
        $is_ckd_order = $this->Req->isMtlReqOrder($req_id);
        if (empty($order_line_item_count) && !$is_ckd_order) {
            $result['message'] = '请先填写工厂，再登记订单。';
            echo json_encode($result);
            return;
        }

        //物料订单，加入队列处理
        if ($this->Req->isMtlReqOrder($req_id)) {
            //队列处理
            global $g_BizId;
            $g_QueueJob = $g_Commons->GlobalModel('QueueJob');
            $queue_job = array();
            $queue_job['biz_id'] = $g_BizId;
            $queue_job['model_def_id'] = Req;
            $queue_job['rel_obj_id'] = $req_id;
            $queue_job['type'] = OCS_QUEUE_TASK_TYPE_BOOK_ORDER; //登记订单
            $po_result = $g_QueueJob->addQueue($queue_job);
            if (!$po_result['success']) {
                $result['success'] = false;
                $result['message'] = '加入任务队列失败，' . $po_result['message'];
            } else {
                $result['success'] = true;
                $result['message'] = '加入队列成功，稍后系统将自动执行相关操作。';
            }
            echo json_encode($result);
            return;
        } else {
            $po_result = $this->BookEbsOrderByReqId($req_id, true);
            echo json_encode($po_result);
            return;
        }
    }

    function BookEbsOrderByReqId($ReqId = null, $autoRender = false) {
        global $g_Commons;
        $g_Logs = $g_Commons->GlobalController('Logs');

        if(!$autoRender) {
            $this->autoRender = false;
        }
        $this->Req->recursive = -1;

        $result = $g_Commons->initResult();
        if(!empty($ReqId)){
            $Req = $this->Req->find('first', array('conditions' => array('Req.id' => $ReqId),
                        'joins'=>array(
                            array(
                                'table' => 'contracts',
                                'alias' => 'Contract',
                                'type' => 'inner',
                                'conditions' => 'Contract.id = Req.rel_obj_id'
                                )
                            ),
                        'fields' => array('Req.id', 'Req.name','Contract.id','Contract.is_book')));
            if(empty($Req)){
                $result['success'] = false;
                $result['message'] = 'empty req id='.$ReqId;
                if($autoRender) {
                    return $result;
                }
                echo json_encode($result);
                return;
            }

            $OrderLines = $this->Req->GetOrderLinesByReqId($ReqId);
            if(!empty($OrderLines)){
                foreach($OrderLines as $OrderLine){
                    if(empty($OrderLine['PROJECT_ID']) && 'CANCELLED' != $OrderLine['FLOW_STATUS_CODE']){
                        $result['success'] = false;
                        $result['message'] = $OrderLine['LINE_NAME'].'项目编号为空，不能登记订单。';
                        if($autoRender) {
                            return $result;
                        }
                        echo json_encode($result);
                        return;
                    }
                }
            }

            //调接口登记订单
            $result = $this->Req->BookEbsOrder($ReqId);
            if($autoRender) {
                return $result;
            }
            echo json_encode($result);
            return;
        }
    }

    //定时同步订单相关数据至EBS
    function SyncSalesOrderDataToEbs(){
        set_time_limit(0);
        $this->Req->getSalesOrderData();
    }

    //查看购物车订单，指定批号对应的未交付数理
    function pop_view_undelivered_quantity($lot_number = null, $mto_no = null) {
        global $g_Commons;
        $g_ReserveRelReq = $g_Commons->GlobalModel('ReserveRelReq');
        $g_ReserveRelReq->recursive = -1;
        $this->Req->recursive = -1;

        $this->set('lot_number', $lot_number);
        $this->set('mto_no', $mto_no);
        $datas = $g_ReserveRelReq->getCartUndeliveredQtyDetails($lot_number, $mto_no);

        $reserve_rel_reqs = array();
        $req_ids = array();
        foreach ($datas as $temp) {
            $req_ids[] = $temp['Req']['id'];
            $reserve_rel_reqs[$temp['Req']['id']] = $temp;
        }
        if (!empty($req_ids)) {
            $req_ids_str = "'" . implode("','", $req_ids) . "'";
            //在OCS创建且处于“编制”状态的交货
            $sql = "
                SELECT ooh.attribute8 req_id,NVL(SUM(Xsnl.Requested_Quantity),0) deliver_qty
                  FROM xxcus.Xxom_Shipment_Notice_Headers Xsnh
                      ,xxcus.Xxom_Shipment_Notice_Lines Xsnl
                      ,apps.oe_order_headers_all ooh
                 WHERE Xsnh.Notice_Id = Xsnl.Notice_Id
                   AND Xsnh.Doc_Type_Code <> 'CANCEL'
                   AND Xsnh.Status IN('CREATED','APPROVING') --编制和审批中
                   AND Xsnl.Order_Header_Id = ooh.header_id
                   AND ooh.attribute8 IN (" . $req_ids_str . ")
                   GROUP BY ooh.attribute8
            ";

            $stid = $g_Commons->ebsConnect($sql);
            while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
                $req_id = $row['REQ_ID'];
                $reserve_rel_reqs[$req_id]['Contract']['undelivered_qty'] -= $row['DELIVER_QTY']; //减去“编制”中的发货
            }
        }
        $this->set('reserve_rel_reqs', $reserve_rel_reqs);
    }

    //导出客户交期回复excel
    function export_deliver_reply($req_ids = null) {
        $this->autoRender = false;
        global $g_Commons;

        $g_PrintTmpl = $g_Commons->GlobalModel('PrintTmpl');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_Excels = $g_Commons->GlobalController('Excels');
        // $g_Excels->autoSize = true;

        $PrintTmpl = $g_PrintTmpl->find('first', array(
            'joins' => array(array('table' => 'attachments', 'alias' => 'Attachment', 'type' => 'LEFT', 'conditions' => 'Attachment.id = PrintTmpl.attachment_id')),
            'conditions' => array('PrintTmpl.model_def_id' => Req, 'PrintTmpl.alias' => 'AccountDeliverReply'),
            'fields' => 'Attachment.id, PrintTmpl.output_file_name',
            'order' => 'Attachment.create_time desc'
        ));

        if (empty($PrintTmpl)) {
            echo '未找到模板';
            return;
        }
        if(!$g_RolePrivs->get_priv_level('Reqs', 'can_export_deliver_reply')) {
            echo '抱歉，你无权进行此操作。';
            return;
        }
        if(empty($req_ids)) {
            echo '参数错误';
            return;
        }
        $req_ids = explode(',', $req_ids);

        $result = $this->Req->getAccountDeliverReplyData($req_ids);
        return $g_Excels->export($PrintTmpl['Attachment']['id'], $PrintTmpl['PrintTmpl']['output_file_name'], 'Reqs', null, null, $result);
    }

    //重新提交关键信息变更单状态为待审核(对于被打回的单)
    function reset_primary_info_bill_json($req_id = null) {
        $this->autoRender = false;
        global $g_Commons;
        $g_Logs = $g_Commons->GlobalController('Logs');

        $result = $g_Commons->initResult();

        $req = $this->Req->find('first', array(
            'conditions' => array(
                'Req.id' => $req_id
            ),
            'fields' => array('Req.id','Req.alter_audit_status')
        ));

        if (!empty($req)) {
            if (OCS_REQ_ALTER_AUDIT_STATUS_FAIL != $req['Req']['alter_audit_status']) {
                $result['success'] = false;
                $result['message'] = '变更单状态非被打回状态，不能重新提交。';

                $g_Logs->write_log('Reqs', $req['Req']['id'], 'info', $result['message']);
                echo json_encode($result);
                return;
            } else {
                $req['Req']['alter_audit_status'] = OCS_REQ_ALTER_AUDIT_STATUS_NEW; //待审核
                $this->Req->save($req['Req']);

                $result['success'] = true;
                echo json_encode($result);
                return;
            }
        } else {
            $result['success'] = false;
            $result['message'] = 'req not found, req_id='. $req_id;
            echo json_encode($result);
            return;
        }
    }

    //打回关键信息变更单
    function backward_primary_info_bill_json($req_id = null) {
        $this->autoRender = false;
        global $g_Commons;
        $g_TodoWork = $g_Commons->GlobalModel('TodoWork');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Enum = $g_Commons->GlobalModel('Enum');

        $result = $g_Commons->initResult();

        $req = $this->Req->find('first', array(
            'conditions' => array(
                'Req.id' => $req_id,
                'Req.alter_audit_status > 0'
            ),
            'fields' => array('Req.id','Req.alter_audit_status')
        ));

        if (!empty($req)) {
            $old_status = $req['Req']['alter_audit_status'];
            $req['Req']['alter_audit_status'] = OCS_REQ_ALTER_AUDIT_STATUS_FAIL; //打回（相当于审核不过）
            $this->Req->save($req['Req']);

            //添加待办记录
            $g_TodoWork->addTodoWorkByAction('contract_audit_change_reject', $req_id);

            if ($old_status != $req['Req']['alter_audit_status']) {
                $log_content = '打回关键信息变更单，状态由#' . $g_Enum->getLabelByDictNameAndValue('Req.alter_audit_status', $old_status) .
                    '=>' . $g_Enum->getLabelByDictNameAndValue('Req.alter_audit_status', $req['Req']['alter_audit_status']);
                $g_Logs->write_log('Reqs', $req['Req']['id'], 'info', $log_content);
            }

            $result['success'] = true;
            echo json_encode($result);
            return;
        } else {
            $result['success'] = false;
            $result['message'] = '该订单未提交关键信息变更单，无需打回。';
            echo json_encode($result);
            return;
        }
    }

    function send_cfm_audit_to_cps() {
        $this->autoRender = false;

        global $g_Commons;
        global $g_UserRealName;
        global $g_UserEmail;

        $result = $g_Commons->initResult();

        if ($this->request->is('post') && !empty($this->request->data)) {
            $data = $this->request->data;

            $g_Contact = $g_Commons->GlobalModel('Contact');
            $g_Req = $g_Commons->GlobalModel('Req');

            $contact_ids = array_values($data);

            $contact_emails = $g_Contact->find('list', array(
                'conditions' => array(
                    'Contact.id' => $contact_ids
                ),
                'fields' => 'Contact.id, Contact.email'
            ));

            $contact_req_list = array();
            foreach ($data as $key => $value) {
                $req_id = ltrim($key, 'req_id_');
                $contact_req_list[$req_id] = $value;
            }
            $req_ids = array_keys($contact_req_list);

            $reqs = $g_Req->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'contracts',
                        'alias' => 'Contract',
                        'type' => 'LEFT',
                        'conditions' => 'Contract.id=Req.rel_obj_id'
                    )
                ),
                'conditions' => array(
                    'Req.id' => $req_ids,
                    'Req.model_def_id' => Contract
                ),
                'fields' => 'Req.id, Req.name, Req.audit_stage, Contract.id, Contract.account_mno, Contract.account_cno, Contract.cps_cfm_audit_status'
            ));

            $req_contract_list = array();

            $req_infos = array();
            foreach ($reqs as $req) {
                if (OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE != $req['Req']['audit_stage']) {
                    $message = $g_Commons->initResult();
                    $message['message'] = 'Req_ID #' . $req['Req']['id'] . ' 确认书未审核通过，不可以发送邀请';
                    $message['datas'] = $req['Req']['id'];
                    $result['message'][] = $message;
                    echo json_encode($result);
                    return;
                }
                if (OCS_CONFIRMATION__CPS_CFM_STATUS_NOT_SENT != $req['Contract']['cps_cfm_audit_status']) {
                    $message = $g_Commons->initResult();
                    $message['message'] = 'Req_ID #' . $req['Req']['id'] . ' 已发送过邀请，不可再次发送';
                    $message['datas'] = $req['Req']['id'];
                    $result['message'][] = $message;
                    echo json_encode($result);
                    return;
                }
                if (empty($contact_emails[$contact_req_list[$req['Req']['id']]])) {
                    $message = $g_Commons->initResult();
                    $message['message'] = 'Req_ID #' . $req['Req']['id'] . ' 所选联系人不存在或者邮箱不存在';
                    $message['datas'] = $req['Req']['id'];
                    $result['message'][] = $message;
                    echo json_encode($result);
                    return;
                }
                $req_data = array();
                $req_data['req_id'] = $req['Req']['id'];
                $req_data['audit_user_email'] = $contact_emails[$contact_req_list[$req['Req']['id']]];
                $req_data['create_user_name'] = $g_UserRealName;
                $req_data['create_user_email'] = $g_UserEmail;
                $req_data['account_cno'] = $req['Contract']['account_cno'];
                $req_data['account_mno'] = $req['Contract']['account_mno'];
                $req_data['req_name'] = $req['Req']['name'];
                $req_infos[] = $req_data;

                $req_contract_list[$req['Req']['id']] = $req['Contract']['id'];
            }

            global $g_WebServices;
            $g_WebServices->OCS_get_ws_client_config();
            global $globalCPSWebServiceUrls;

            $client = new soap_client($globalCPSWebServiceUrls['Req']['url'], true);
            $client->soap_defencoding = 'utf-8';
            $client->decode_utf8 = false;
            $client->xml_encoding = 'utf-8';
            $ws_params = array('VerifyStr' => $globalCPSWebServiceUrls['Req']['hashes']['setAccountConfirmRecordByReqDatas'], 'ReqDatas' => json_encode($req_infos));

            $g_WsMonitor = $g_Commons->GlobalModel('WsMonitor');
            //  写log
            $ws_data = array();
            $ws_data['func_name'] = 'setAccountConfirmRecordByReqDatas';
            $ws_data['ws_url'] = $globalCPSWebServiceUrls['Req']['url'];
            $ws_data['params_json'] = json_encode($ws_params);
            $ws_data['result'] = 'call before';
            $g_WsMonitor->save_ws_monitor($ws_data);

            $ws_result = $client->call('setAccountConfirmRecordByReqDatas', $ws_params);

            $ws_data = array();
            $ws_data['func_name'] = 'setAccountConfirmRecordByReqDatas';
            $ws_data['ws_url'] = $globalCPSWebServiceUrls['Req']['url'];
            $ws_data['params_json'] = json_encode($ws_params);
            $ws_data['result'] = json_encode($ws_result);
            $g_WsMonitor->save_ws_monitor($ws_data);

            $g_Contract = $g_Commons->GlobalModel('Contract');
            $ws_message = $g_Commons->objectToArray(json_decode($ws_result['message']));
            if ($ws_result['success']) {
                foreach ($reqs as $req) {
                    $contract_info = array();
                    $contract_info['Contract']['id'] = $req['Contract']['id'];
                    $contract_info['Contract']['cps_cfm_audit_status'] = OCS_CONFIRMATION__CPS_CFM_STATUS_SENT;
                    $g_Contract->save($contract_info['Contract']);
                }

                $result['success'] = true;
                $result['message'] = $ws_message;
                echo json_encode($result);
                return;
            }

            $message = array();
            foreach ($ws_message as $item) {
                if ($item['success']) {
                    $contract_info = array();
                    $contract_info['Contract']['id'] = $req_contract_list[$item['datas']];
                    $contract_info['Contract']['cps_cfm_audit_status'] = OCS_CONFIRMATION__CPS_CFM_STATUS_SENT;
                    $g_Contract->save($contract_info['Contract']);
                    continue;
                }
                $message[] = $item['message'];
            }

            $result['success'] = false;
            $result['message'] = $ws_message;
            echo json_encode($result);
        }
    }

    function pop_send_cfm_audit_to_cps($ids = null) {
        $this->set('title_for_layout', '邀请客户回签确认书');

        global $g_Commons;
        global $g_BizId;

        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_AttrDics->AttrDic->recursive = -1;
        $g_Account = $g_Commons->GlobalModel('Account');
        $g_Contact = $g_Commons->GlobalModel('Contact');

        $this->Req->recursive = -1;

        $ids = explode(',', $ids);

        $reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'LEFT',
                    'conditions' => 'Contract.id=Req.rel_obj_id'
                ),
            ),
            'conditions' => array(
                'Req.id' => $ids,
                'Req.audit_stage' => OCS_PRODMODEL_REL_AUDIT_USER_STAGE_DONE,
                'Req.model_def_id' => Contract
            ),
            'fields' => 'Req.id, Req.account_id, Req.product_id, Req.quantity, Contract.account_cno, Contract.account_mno, Contract.cps_cfm_audit_status'
        ));

        $reqs = $g_AttrDics->formatAllModelData($reqs);
        $this->set('reqs', $reqs);

        $account_ids = array();
        foreach ($reqs as $req) {
            $account_ids[] = $req['Req']['account_id']['value'];
        }

        $account_names = $g_Account->find('list', array(
            'conditions' => array(
                'Account.id' => $account_ids
            ),
            'fields' => 'Account.id, Account.name'
        ));

        $contacts = $g_Contact->find('all', array(
            'joins' => array(
                array(
                    'table' => 'accounts',
                    'alias' => 'Account',
                    'type' => 'LEFT',
                    'conditions' => 'Account.id=Contact.account_id'
                ),
            ),
            'conditions' => array(
                'Account.name' => $account_names,
                'Contact.email IS NOT NULL',
                'Contact.email !=' => '',
                'Contact.is_stop' => 0
            ),
            'fields' => 'Contact.id, Contact.name, Contact.email, Account.name'
        ));

        $contact_list = array();
        foreach ($contacts as $contact) {
            $contact_list[$contact['Account']['name']][] = $contact['Contact'];
        }

        $account_contacts = array();
        foreach ($account_names as $account_id => $account_name) {
            if (empty($contact_list[$account_name])) {
                continue;
            }
            $account_contacts[$account_id] = $contact_list[$account_name];
        }
        $this->set('account_contacts', $account_contacts);
    }

    //获取确认书通过率，通过率=(总数-被打回总数)/总数
    function get_cfm_pass_rate_json() {
        global $g_Commons;

        $this->autoRender = false;
        $result = $g_Commons->initResult();

        if (!isset($_POST['conds']) || empty($_POST['conds'])) {
            $result['success'] = false;
            $result['message'] = '请先设置过滤条件，一次统计全部？';
            echo json_encode($result);
            return;
        }

        $options = $_POST;

        $datas = $this->Req->getCfmPassRateByConditions($options); //获取通过率

        $result['success'] = true;
        $result['datas'] =$datas;

        echo json_encode($result);
        return;
    }

    //关键信息变更单，填写备注
    function pop_batch_edit_primary_owner_remark($req_ids = null) {
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $this->Req->recursive = -1;

        $req_ids = explode(',', $req_ids);
        $reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ),
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'left',
                    'conditions' => 'RelReq.req_id = Req.id'
                ),
            ),
            'conditions' => array(
                'Req.id' => $req_ids,
            ),
            'fields' => array(
                'Req.id,Req.account_id,Req.product_id,Req.ebs_order_number,Req.name,Req.owner_user_id,Req.quantity',
                'Contract.ebs_stage,Contract.account_mno,Contract.account_cno',
                'RelReq.id,RelReq.primary_alter_owner_remark',
            )
        ));

        $reqs = $g_AttrDics->formatAllModelData($reqs);

        $this->set('reqs', $reqs);

        $this->set('save_complete', 0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submit_data = $this->request->data;
            foreach ($submit_data as $idx => $temp) {
                $req_id = preg_replace('/idx_/', '', $idx);
                if (empty($req_id)) {
                    continue;
                }
                $primary_alter_owner_remark = $temp['primary_alter_owner_remark'];

                $g_RelReq->saveRelFields($req_id, array('primary_alter_owner_remark' => $primary_alter_owner_remark));
            }
            $this->set('save_complete', 1);
        }
    }

    //设置是否紧急订单状态
    function set_is_urgentt_order_json($req_id = null, $is_urgent = null) {
        global $g_Commons;
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $this->autoRender = false;

        $result = $g_Commons->initResult();
        if (empty($req_id) || null == $is_urgent) {
            $result['message'] = 'req_id or is_urgent can not be null.';
            echo json_encode($result);
            return;
        }

        $is_urgent_rel_req_ids = array();
        $is_urgent_rel_req_ids[$is_urgent] = $req_id;
        $g_RelReq->setIsUrgentOrder($is_urgent_rel_req_ids); //设置紧急订单状态

        $result['success'] = true;
        echo json_encode($result);
        return;
    }

    //查看最新确认书
    function pub_download_lastest_cfm($ebs_order_number = null, $lot_number = null) {
        global $g_Commons;
        $result = $g_Commons->initResult();
        $this->autoRender = false;

        $g_ErpMfInfo = $g_Commons->GlobalModel('ErpMfInfo');
        $g_Req = $g_Commons->GlobalModel('Req');

        $req = $g_Req->find('first', array(
            'conditions' => array(
                'Req.ebs_order_number' => $ebs_order_number,
            ),
            'fields' => array(
                'Req.id'
            )
        ));

        if (empty($req)) {
            $result['success'] = false;
            $result['message'] = '订单不存在，#' . $ebs_order_number;
            echo json_encode($result);
            return;
        }

        $req_id = $req['Req']['id'];

        //验证批号与订单，如果不是同一个，不允许查看（避免人为人任意修改参数）
        $erp_mf_info = $g_ErpMfInfo->find('first', array(
            'conditions' => array(
                'ErpMfInfo.req_id' => $req_id,
                'ErpMfInfo.erp_batch_no' => $lot_number,
            ),
        ));
        if (empty($erp_mf_info)) {
            $result['success'] = false;
            $result['message'] = '批号与订单编号匹配失败。';
            echo json_encode($result);
            return;
        }

        //获取对应的确认书
        $cfm_attachment = $this->Req->getSignatureCfmAttachmentsByReqId($req_id);
        if (!empty($cfm_attachment) && !empty($cfm_attachment['Attachment']['es_url'])) {
            $datas = array();
            $datas['es_url'] = $cfm_attachment['Attachment']['es_url'];
            $result['success'] = true;
            $result['datas'] = $datas;
            echo json_encode($result);
            return;
        } else {
            $result['success'] = false;
            $result['message'] = '回签确认书不存在，#' . $ebs_order_number;
            echo json_encode($result);
            return;
        }
    }

    //自动设置紧急订单状态
    function sync_urgent_order() {
        $this->Req->setUrgentOrderStatus();
    }

    //批量维护样品单相关信息
    function pop_sample_order_rel_info($req_ids = null) {
        global $g_Commons;
        global $g_UserId;
        $g_Task = $g_Commons->GlobalModel('Task');
        $g_SampleOrder = $g_Commons->GlobalModel('SampleOrder');
        $g_DeliveryInfo = $g_Commons->GlobalModel('DeliveryInfo');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_Dic = $g_Commons->GlobalModel('Dic');
        $g_User = $g_Commons->GlobalModel('User');
        $this->Req->recursive = -1;

        $req_ids = explode(',', $req_ids);

        $model_datas = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'tasks',
                    'alias' => 'Task',
                    'type' => 'inner',
                    'conditions' => array(
                        'Task.model_def_id' => Req,
                        'Task.rel_obj_id = Req.id'
                    )
                ),
                array(
                    'table' => 'sample_orders',
                    'alias' => 'SampleOrder',
                    'type' => 'inner',
                    'conditions' => 'SampleOrder.id = Req.rel_obj_id and Req.model_def_id=' . SampleOrder
                ),
            ),
            'conditions' => array(
                'Req.id' => $req_ids,
            ),
            'fields' => array(
                'Task.id',
                'Task.status',
                'Task.subject',
                'Req.id',
                'Req.name',
                'SampleOrder.id',
                'SampleOrder.modify_users',
                'SampleOrder.test_user_id',
                'SampleOrder.delay_reason',
            )
        ));
        $this->set('model_datas', $model_datas);

        //task status
        $task_status_list = $g_Enum->getEnumListByDictName('Task.status');
        $task_status_values = $g_Task->getNextStatus(OCS_TASK_SAMPLE_ORDER_NOT_PRINT);
        foreach ($task_status_list as $value => $label) {
            if (!in_array($value, $task_status_values)) {
                unset($task_status_list[$value]);
            }
        }
        $this->set('task_status_list', $task_status_list);

        //delay reason list
        $delay_reason_list = $g_Enum->getEnumListByDictName('SampleOrder.delay_reason');
        $this->set('delay_reason_list', $delay_reason_list);

        //delivery companys
        $delivery_companys = $g_Enum->getEnumListByDictName('DeliveryInfo.delivery_company');
        $this->set('delivery_companys', $delivery_companys);

        //attach types 固定这几种类型
        $attach_type_list = $g_Dic->find('list', array(
            'conditions' => array(
                'Dic.type' => 'attach_type',
                'Dic.value' => array(
                    OCS_ATTACH_TYPE_SPECIFICATION, //规格书
                    OCS_ATTACH_TYPE_INSTRUCTIONS, //说明书
                    OCS_ATTACH_TYPE_SAMPLE_ORDER_IMG,  //样品图片
                    OCS_ATTACH_TYPE_OTHER, //其他
                ),
            ),
            'fields' => array('value', 'label'),
            'order' => 'Dic.value asc'
        ));
        $this->set('attach_type_list', $attach_type_list);

        $delivery_infos = array();
        foreach ($model_datas as $model_data) {
            $sample_order_id = $model_data['SampleOrder']['id'];
            $delivery_info = $g_DeliveryInfo->find('first', array(
                'conditions' => array(
                    'DeliveryInfo.model_def_id' => SampleOrder,
                    'DeliveryInfo.rel_obj_id' => $sample_order_id,
                ),
                'fields' => array(
                    'DeliveryInfo.id',
                    'DeliveryInfo.delivery_time',
                    'DeliveryInfo.delivery_user_id',
                    'DeliveryInfo.delivery_company',
                    'DeliveryInfo.delivery_express_no',
                    'DeliveryInfo.quantity',
                    'DeliveryInfo.remark',
                ),
                'order' => array(
                    'DeliveryInfo.id asc'
                )
            ));
            if (!empty($delivery_info)) {
                $delivery_info['DeliveryInfo']['delivery_user'] = $g_User->findMainField($delivery_info['DeliveryInfo']['delivery_user_id']);
            }
            $delivery_infos[$sample_order_id] = $delivery_info;
        }
        $this->set('delivery_infos', $delivery_infos);

        //submit
        $this->set('save_complete', 0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submit_data = $this->request->data;
            // pr($submit_data);return;
            //保存任务相关
            foreach ($submit_data['task'] as $idx => $temp) {
                $task_id = str_replace('idx_', '', $idx);
                $task = $g_Task->find('first', array(
                    'conditions' => array(
                        'Task.id' => $task_id,
                    ),
                    'fields' => array(
                        'Task.id',
                        'Task.status',
                    )
                ));
                if (!empty($task)) {
                    $g_Tasks = $g_Commons->GlobalController('Tasks');
                    $g_Tasks->change_status_json($task['Task']['id'], $temp['status']); //会输出json返回值

                    //上传附件
                    if (!empty($temp['attach_file'])) {
                        global $g_UserRealName;
                        global $g_UserEmail;
                        $g_Attachments = $g_Commons->GlobalController('Attachments');
                        $g_AttachmentComments = $g_Commons->GlobalController('AttachmentComments');
                        $g_QueueJobs = $g_Commons->GlobalController('QueueJobs');
                        $g_Tasks = $g_Commons->GlobalController('Tasks');

                        $attachment_id  = $g_Attachments->upload_attachment($temp['attach_file'], Task, $task_id, $temp['attach']['attach_type'], $temp['attach']['attach_comment']);
                        $g_Tasks->updateTaskAttachNum($task_id, 'add');
                        if (!empty($temp['attach']['attach_comment'])) {
                            $note_html = str_replace("\n", '<br />', $temp['attach']['attach_comment']);
                            $g_AttachmentComments->addAttachmentComment($attachment_id, $note_html, $temp['attach']['attach_comment']); // 添加软件包评论
                        }

                        // 发邮件通知相应人员
                        global $g_BizUrl;
                        global $g_OCS_options;

                        $options = array();
                        $options['Field']['Task__attachment_name'] = $temp['attach_file']['name'];
                        $options['Field']['login_user_realname'] = $g_UserRealName;
                        $options['Field']['login_user_email'] = $g_UserEmail;
                        $options['Field']['ocs_biz_url'] = $g_OCS_options['url'] . $g_BizUrl;
                        $g_QueueJobs->AddNoticeJob(array('Email'), Task, $task_id, 'UploadAttachment', $options);
                    }
                }
            }

            //保存样品单
            foreach ($submit_data['sample_order'] as $idx => $temp) {
                $sample_order_id = str_replace('idx_', '', $idx);
                if (empty($sample_order_id)) {
                    continue;
                }
                $sample_order = $g_SampleOrder->find('first', array(
                    'conditions' => array(
                        'SampleOrder.id' => $sample_order_id,
                    ),
                    'fields' => array(
                        'SampleOrder.id',
                        'SampleOrder.modify_users',
                        'SampleOrder.test_user_id',
                        'SampleOrder.delay_reason',
                    )
                ));
                if (!empty($sample_order)) {
                    $sample_order['SampleOrder']['modify_users'] = $temp['modify_users'];
                    $sample_order['SampleOrder']['test_user_id'] = $temp['test_user_id'];
                    $sample_order['SampleOrder']['delay_reason'] = $temp['delay_reason'];
                    $g_SampleOrder->save($sample_order['SampleOrder']);
                }

                //保存快递 单
                foreach ($temp['delivery_info'] as $key => $delivery_temp) {
                    $delivery_info_id = str_replace('idx_', '', $key);
                    $delivery_info = $g_DeliveryInfo->find('first', array(
                        'conditions' => array(
                            'DeliveryInfo.id' => $delivery_info_id
                        ),
                        'fields' => array(
                            'DeliveryInfo.id',
                            'DeliveryInfo.name',
                            'DeliveryInfo.delivery_time',
                            'DeliveryInfo.delivery_user_id',
                            'DeliveryInfo.delivery_company',
                            'DeliveryInfo.delivery_express_no',
                            'DeliveryInfo.quantity',
                            'DeliveryInfo.remark',
                            'DeliveryInfo.update_user_id',
                            'DeliveryInfo.update_time',
                        )
                    ));

                    $delivery_user_id = $g_User->getUserIdByRealname($delivery_temp['delivery_user']);
                    if (!empty($delivery_info)) { //编辑
                        $delivery_info = $delivery_info['DeliveryInfo'];
                        $delivery_info['update_user_id'] = $g_UserId;
                        $delivery_info['update_time'] = date('Y-m-d H:i:s');
                    } else { //新建
                        $delivery_info['model_def_id'] = SampleOrder;
                        $delivery_info['rel_obj_id'] = $sample_order_id;
                        $delivery_info['create_user_id'] = $g_UserId;
                        $delivery_info['create_time'] = date('Y-m-d H:i:s');
                    }
                    $delivery_info['delivery_time'] = $delivery_temp['delivery_time'];
                    $delivery_info['delivery_user_id'] = $delivery_user_id;
                    $delivery_info['delivery_company'] = $delivery_temp['delivery_company'];
                    $delivery_info['delivery_express_no'] = $delivery_temp['delivery_express_no'];
                    $delivery_info['quantity'] = $delivery_temp['quantity'];
                    $delivery_info['remark'] = $delivery_temp['remark'];
                    $company = isset($delivery_companys[$delivery_info['delivery_company']]) ? $delivery_companys[$delivery_info['delivery_company']] : '';
                    $delivery_info['name'] = $company . '-'
                            . $delivery_info['delivery_express_no'] . '-' . $delivery_info['quantity'] . 'PCS-'
                            . $delivery_info['delivery_time'];
                    if (!isset($delivery_info['id'])) { //新建
                        $g_DeliveryInfo->create();
                    }
                    $g_DeliveryInfo->save($delivery_info);

                    //新建后，关联对应字段
                    if (!isset($delivery_info['id'])) {
                        $g_Reqs = $g_Commons->GlobalController('Reqs');
                        $req = $g_Reqs->Req->find('first', array(
                            'conditions' => array(
                                'Req.model_def_id' => SampleOrder,
                                'Req.rel_obj_id' => $sample_order_id,
                            ),
                            'fields' => array(
                                'Req.id',
                                'Req.delivery_info_id',
                            )
                        ));
                        if (!empty($req)) {
                            $req['Req']['delivery_info_id'] = $g_DeliveryInfo->id;
                            $g_Reqs->Req->save($req['Req']);
                            $g_Reqs->saveReqVersion($g_Reqs->Req->id);
                        }
                    }
                }
            }
            $this->set('save_complete', 1);
        }
    }

    /**
     * 设置合同客户是否盖章
     *
     * @Author   lishirong
     *
     * @DateTime 2015-08-14T10:53:14+0800
     */
    function set_contract_account_signature_json($contract_no = null, $is_signature = null) {
        global $g_Commons;
        $result = $g_Commons->initResult();
        $this->autoRender = false;
        if (empty($contract_no) || empty($is_signature) || !in_array($is_signature, array('Y', 'N'))) {
            $result['message'] = '参数错误';
            echo json_encode($result);
            return;
        }
        $this->Req->setContractSignatureByContractNo($contract_no, $is_signature);

        $result['success'] = true;
        echo json_encode($result);
        return;
    }

    /**
     * 打印invoice合同
     *
     * @Author   lishirong
     *
     * @DateTime 2015-08-14T16:39:53+0800
     *
     * @param    [type]                   $contract_no [合同号]
     *
     * @return   [type]                                [description]
     */
    function pop_print_invoice_contract($contract_no = null) {
        global $g_Commons;
        $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');
        $this->layout = 'pdf';

        if (empty($contract_no)) {
            $this->set('set_flash', 1);
            $this->Session->setFlash('参数错误，合同号不能为空。');
            return;
        }
        $result = $this->Req->getInvoiceContractByContractNo($contract_no);
        if (!$result['success']) {
            $this->set('set_flash', 1);
            $this->Session->setFlash($result['message']);
            return;
        }
        // pr($result);
        $this->set('datas', $result['datas']['datas']);
        $this->set('sum', $result['datas']['sum']);

        // 获取用户签名
        global $g_UserId;
        global $g_FS_options;
        $FsFileInfoPaths = array();
        $g_UserPrefImage = $g_Commons->GlobalModel('UserPrefImage');

        $contract_rel_tmpl = $g_ContractRelTmpl->find('first', array(
            'conditions' => array(
                'ContractRelTmpl.contract_no' => $contract_no,
            ),
            'fields' => array(
                'ContractRelTmpl.audit_user_id'
            )
        ));
        $fs_signature_url = '';
        if (!empty($contract_rel_tmpl) && !empty($contract_rel_tmpl['ContractRelTmpl']['audit_user_id'])) {
            $user_pref_image = $g_UserPrefImage->find('first',array(
                'conditions' => array(
                    'UserPrefImage.type' => OCS_USER_PREF_IMAGE_TYPE_EN,
                    'UserPrefImage.status' => OCS_USER_PREF_IMAGE_STATUS_AUDIT_PASSED,
                    'UserPrefImage.user_id' => $contract_rel_tmpl['ContractRelTmpl']['audit_user_id'],
                ),
                'fields' => array(
                    'UserPrefImage.attachment_id',
                )
            ));
            // $fs_signature_url = $g_FS_options['url'] . 'getFile.php?uuid=' . $user_pref_image['UserPrefImage']['fs_file_id'];
            $fs_signature_url = '/Attachments/download_attachment/' . $user_pref_image['UserPrefImage']['attachment_id'];
        }
        $this->set('fs_signature_url', $fs_signature_url);
    }

    /**
     * 将CPS回签的确认书，关联回Req Model，并执行回签确认书的系列动作
     *
     * @Author   lishirong
     *
     * @DateTime 2015-09-12T16:37:44+0800
     *
     * @return   [type]                   [description]
     */
    function pop_convert_cfm_rel_model($req_ids = null) {
        $this->set('title_for_layout', '内勤确认回签确认书');
        global $g_Commons;
        $g_Attachment = $g_Commons->GlobalModel('Attachment');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_CpsContract = $g_Commons->GlobalModel('CpsContract');
        $this->recursive = -1;
        $req_ids = explode(',', $req_ids);

        //submit
        $error_msg = array();
        $this->set('save_complete', 0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submit_data = $this->request->data;
            foreach ($submit_data as $req_idx => $data) {
                $req_id = $data['req_id'];
                if (empty($req_id)) {
                    $error_msg[$req_id] = 'error params.';
                    continue;
                }
                // 确认前 需验证发运日期是否符合条件
                $result = $this->Req->isDelivetyTimeOk($req_id); //验证是否条件发货日期条件
                if (!$result['success']) {
                    $error_msg[$req_id] = $result['message'];
                    continue;
                }

                $cfm_attach_ids = array(); //转换的确认书附件ids

                //获取cps_contract_ids
                $cps_contract_ids = $g_CpsContract->getIdsByReqId($req_id);
                if (empty($cps_contract_ids)) {
                    $error_msg[$req_id] = '客户未提交CPS选配。';
                    continue;
                }
                // 将确认书附件改为关联 Req model
                $cfm_attachments = $g_Attachment->find('all', array(
                    'conditions' => array(
                        'Attachment.model_def_id' => CpsContract,
                        'Attachment.obj_id' => $cps_contract_ids,
                        'Attachment.is_delete' => 0,
                        'Attachment.is_lock' => 0,
                        'Attachment.attach_type' => OCS_ATTACH_TYPE_CPS_CONFIRMATION
                    ),
                    'fields' => array(
                        'Attachment.id',
                        'Attachment.model_def_id',
                        'Attachment.obj_id',
                        'Attachment.attach_type',
                        'Attachment.attach_note',
                    )
                ));
                if (empty($cfm_attachments)) {
                    $error_msg[$req_id] = '客户未回签确认书或已处理。';
                    continue;
                }
                foreach ($cfm_attachments as $cfm_attachment) {
                    $rel_obj_id = $cfm_attachment['Attachment']['obj_id'];
                    $cfm_attachment['Attachment']['model_def_id'] = Req;
                    $cfm_attachment['Attachment']['obj_id'] = $req_id;
                    $cfm_attachment['Attachment']['attach_type'] = OCS_ATTACH_TYPE_CONFIRMATION; //改为“已回签”
                    $cfm_attachment['Attachment']['attach_note'] = 'CPS客户回签';

                    $g_Attachment->save($cfm_attachment['Attachment']);
                    $cfm_attach_ids[] = $g_Attachment->id;

                    $g_Logs->write_log('Reqs', $req_id, 'info', '内勤确认CPS客户回签需求，转为“已回签”确认书。(cps_contract_id:' . $rel_obj_id . ')');
                }

                // 执行“回签确认书”系列操作
                if (!empty($cfm_attach_ids)) {
                    $po_status = $this->Req->cfmSignedRelActions($req_id, $cfm_attach_ids);
                    if (!$po_status) {
                        $msg = '设置CPS关联确认书成功，但执行“回签确认书”系列操作失败。';
                        $error_msg[$req_id] = $msg;
                        $g_Logs->write_log('Reqs', $req_id, 'info', $msg);
                    }
                }
            }
            $this->set('save_complete', 1);
        }
        $this->set('error_msg', $error_msg);

        $reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ),
            ),
            'conditions' => array(
                'Req.model_def_id' => Contract,
                'Req.parent_id' => 0,
                'Req.id' => $req_ids,
            ),
            'fields' => array(
                'Req.id',
                'Req.name',
                'Req.product_id',
                'Req.account_id',
                'Req.quantity',
                'Req.owner_user_id',
                'Req.remark',
                'Contract.contract_no',
                'Contract.account_cno',
                'Contract.account_mno',
            )
        ));
        $reqs = $g_AttrDics->formatAllModelData($reqs);
        $this->set('reqs', $reqs);

        // 获取CPS回签的确认书
        $cps_cfms = $g_Attachment->getCpsCfmByReqIds($req_ids);
        $this->set('cps_cfms', $cps_cfms);

    }

    /**
     * [pdf_print_reqs 显示确认书页面用于生成PDF]
     *
     * @Author   zhangguocai
     *
     * @DateTime 2015-09-11T11:52:40+0800
     *
     * @param    [type]                   $encrypt_keys      [description]
     *
     * @return   [type]                                      [description]
     */
    public function pdf_print_reqs($encrypt_keys = null) {
        global $g_UserId;
        global $g_UserCid;
        global $g_Commons;
        $pdf = $g_Commons->Components->load('Pdf');

        $this->autoRender = false;

        // 解密密文,如果不成功,则抛出错误提示
        $decrypt = $pdf->decryptToken($encrypt_keys);
        if (!isset($decrypt['success']) || true != $decrypt['success'] || empty($decrypt['datas'])) {
            throw new Exception($decrypt['message'], 1);
        }

        // 获取传递的参数
        $params = $decrypt['datas'];
        $req_id = !empty($params['req_id']) ? $params['req_id'] : '';

        // 区分页面类型
        $this->set('page_type', 'pdf');

        // 模拟传入参数
        $this->params->params['named']['P'] = 'action=print_cfm&tmpl_path=cfm_print_new&ReqIds=' . $req_id;

        // 返回确认书页面信息
        $this->pop_print_reqs();
        $this->render('pop_print_reqs');
    }

    /**
     * [auto_check_delivery_date_quanity 检测样品单当天发货量]
     *
     * @Author          Zhuziying
     *
     * @DateTime        2015-10-12T14:24:04+0800
     *
     *
     * @param           [timestamp]                   $date [需求发样日期]
     *
     * @return          [int]                         [发货数量]
     */
    function auto_check_delivery_date_quanity() {
        $this->autoRender = false;
        $date = isset($_POST['require_delivery_date']) ? $_POST['require_delivery_date'] : null;
        if (empty($date)) {
            echo '';
            return;
        }
        $sum_quantity = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'sample_orders',
                    'alias' => 'SampleOrder',
                    'type' => 'LEFT',
                    'conditions' => 'SampleOrder.id=Req.rel_obj_id'
                )
            ),
            'conditions' => array(
                'Req.model_def_id' => SampleOrder,
                'SampleOrder.require_delivery_date =' => $date,
                //'SampleOrder.status >' => OCS_SAMPLE_ORDER_AUDITED,
                'SampleOrder.close_reason' => 0
            ),
            'fields' => 'sum(Req.quantity) as total'
        ));
        $sum_quantity = $sum_quantity[0][0]['total'];
        if (empty($sum_quantity)) {
            $sum_quantity = 0;
        }
        echo $sum_quantity;
    }

    /**
     * 批量设置EBS订单行attribute13（是否已开工单）字段
     *
     * @Author   lishirong
     *
     * @DateTime 2015-10-30T16:53:55+0800
     *
     * @param    [type]                   $req_ids [description]
     *
     * @return   [type]                            [description]
     */
    function pop_batch_modify_ool_attribute13($req_ids = null) {
        $this->set('title_for_layout', '修改订单行是否已开工单');
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_EbsModel = $g_Commons->GlobalModel('EbsModel');

        if (empty($req_ids)) {
            throw new Exception("Error Parameters.", 1);
        }
        $req_ids = explode(',', $req_ids);
        $reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'inner',
                    'conditions' => 'Product.id = Req.product_id'
                ),
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'left',
                    'conditions' => 'RelReq.req_id = Req.id'
                ),
            ),
            'conditions' => array(
                'Req.id' => $req_ids,
                'Req.model_def_id' => Contract,
                'Req.parent_id' => 0,
            ),
            'fields' => array(
                'Req.id',
                'Req.name',
                'Req.ebs_order_number',
                'Req.owner_user_id',
                'Req.account_id',
                'Product.code',
                'Product.prod_model_id',
                'RelReq.is_split_order',
            )
        ));
        if (empty($reqs)) {
            throw new Exception("所选订单不满足相关条件.", 1);
        }
        $reqs = $g_AttrDics->formatAllModelData($reqs);
        $this->set('reqs', $reqs);

        //获取所有订单行
        $order_lines = $this->Req->GetOrderLinesByReqIds($req_ids);
        $this->set('order_lines', $order_lines);

        //get bool option list
        $bool_list = $g_Commons->getBoolOptions();
        $this->set('bool_list', $bool_list);

        $this->set('save_complete', 0);
        //submit
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submit_data = $this->request->data;
            foreach ($submit_data as $req_idx => $lines) {
                $req_id = str_replace('req_', '', $req_idx);
                if (empty($req_id)) {
                    continue;
                }
                foreach ($lines as $line_idx => $is_has_wip) {
                    $line_id = str_replace('line_', '', $line_idx);
                    if (empty($line_id)) {
                        continue;
                    }
                    $attribute13 = (1 == $is_has_wip) ? 'Y' : 'N';
                    $sql = "
                        UPDATE Apps.Oe_Order_Lines_All Ool
                           SET Ool.Attribute13  = '" . $attribute13 . "'
                         WHERE Ool.Header_Id =
                               (SELECT Ooh.Header_Id
                                  FROM Apps.Oe_Order_Headers_All Ooh
                                 WHERE Ooh.Attribute8 = '" . $req_id . "')
                                AND Ool.Line_Id = " . $line_id . "
                    ";
                    $exe_result = $g_EbsModel->exeSql($sql);
                    if ($exe_result) {
                        $log_content = '修改是否已开工单字段，成功。设置为' . $attribute13 . '，执行sql#' . $sql;
                        $g_Logs->write_log('Reqs', $req_id, 'info', $log_content);
                    } else {
                        $log_content = '修改是否已开工单字段，失败。设置为' . $attribute13 . '，执行sql#' . $sql;
                        $g_Logs->write_log('Reqs', $req_id, 'info', $log_content);
                    }
                }
            }
            $this->set('save_complete', 1);
        }

        //获取关联工单
        $rel_wip_infos = $this->Req->relWipInfos($req_ids);
        $this->set('rel_wip_infos', $rel_wip_infos);
    }

    /**
     * 暂挂或者取消暂挂销售订单
     *
     * @Author   lishirong
     *
     * @DateTime 2015-11-19T20:43:53+0800
     *
     * @param    [type]                   $req_id    [订单ID]
     * @param    [type]                   $hold_flag [Y:暂挂，N：取消暂挂]
     *
     * @return   [type]                              [description]
     */
    function hold_on_sales_order_json($req_id = null, $hold_flag = null) {
        $this->autoRender = false;
        global $g_Commons;
        $result = $g_Commons->initResult();

        if (empty($req_id) || !in_array($hold_flag, array('Y', 'N'))) {
            $result['message'] = 'error params.';
            echo json_encode($result);
            return;
        }
        $g_OrderCancel = $g_Commons->GlobalModel('OrderCancel');
        $result = $g_OrderCancel->holdSalesOrderByReqId($req_id, $hold_flag);

        echo json_encode($result);
        return;
    }

    /**
     * 导入销售订单（excel）
     *
     * @Author   lishirong
     *
     * @DateTime 2015-12-24T15:06:27+0800
     *
     * @param    [type]                   $index_key [索引key，当前界面url+用户id]
     *
     * @return   [type]                              [description]
     */
    function pop_import_sales_order($index_key = null) {
        global $g_Commons;
        if (empty($index_key)) {
            $this->set('error_msg' , '参数错误');
            return;
        }
        $this->set('title_for_layout', '导入订单');

        //获取导入订单模板
        $g_PrintTmpl = $g_Commons->GlobalModel('PrintTmpl');
        $sales_order_tmpl = $g_PrintTmpl->getPrintTmplByModelDefIdAndAlias(Req, 'ImportSalesOrder');
        $this->set('sales_order_tmpl', $sales_order_tmpl);

        //submit
        $this->set('save_complete', 0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submit_data = $this->request->data;
            if (!empty($submit_data['file']['error']) || empty($submit_data['file']['size'])) {
                $this->set('error_msg', '上传附件出错，请重新上传');
                return;
            }
            $file = $submit_data['file'];
            $extension = pathinfo($file['name'], PATHINFO_EXTENSION);
            if (!in_array($extension, array('xlsx', 'xls'))) {
                $this->set('warning_msg', '不支持此文件类型，请重新上传');
                return;
            }
            $server_path = '../Attachment/files/' . date("Ym") . '/';
            $g_Commons->CreateDir($server_path);

            $hash_name = md5(microtime()) . '.' . $extension;
            $file_name = $server_path . $hash_name;
            if (file_exists($file['tmp_name'])) {
                copy($file['tmp_name'], $file_name);
                unlink($file['tmp_name']);
            }
            //获取导入的excel数据
            try {
                $result = $this->Req->parseOrderTmplDatas($file_name);
                if (!$result['success']) {
                    $this->set('error_msg', implode('<br/>', $result['message']));
                    return;
                }
                $order_datas = $result['datas'];
            } catch (Exception $e) {
                $this->set('error_msg', $e->getMessage());
                return;
            }

            //写入缓存
            $g_Commons->setRedisCache($index_key, json_encode($order_datas));

            $this->set('save_complete', 1);
        }
    }

    /**
     * [check_delivety_date_json 检测发运日期]
     *
     * @Author          Zhuziying
     *
     * @DateTime        2015-12-24T20:15:39+0800
     *
     * @param           [int]                   $req_id [req id]
     *
     * @return          [array]                 $result[检查结果]
     */
    function check_delivety_date_json($req_id = null) {
        global $g_Commons;

        $this->autoRender = false;
        $result = $g_Commons->initResult();

        if (!empty($req_id)) {
            $result = $this->Req->isDelivetyTimeOk($req_id);
        }
        echo json_encode($result);
        return;
    }

    /**
     * 发起 新产品订单项目管理审核 流程
     *
     * @Author   lishirong
     *
     * @DateTime 2016-01-11T17:51:14+0800
     *
     * @param    [type]                   $req_id [description]
     * @param    string                   $type   [prod_review:新产品订单评审，pm_audit:新产品订单项目管理审核]
     *
     * @return   [type]                           [description]
     */
    function start_oa_prod_pm_audit_json($req_id = null, $type = 'prod_review') {
        global $g_Commons;
        $this->autoRender = false;
        $result = $g_Commons->initResult();
        if (empty($req_id)) {
            $result['message'] = 'Error Parameters.';
            echo json_encode($result);
            return;
        }

        //发起流程
        switch ($type) {
            case 'prod_review':
                    $result = $this->Req->createNewOaFlowProdReview($req_id);
                break;

            case 'pm_audit':
                    $result = $this->Req->createNewOaFlowProdPmAudit($req_id);
                break;

            default:
                $result['message'] = '类型匹配失败';
                echo json_encode($result);
                return;
                break;
        }
        echo json_encode($result);
        return;
    }

    /**
     * 订单与报价单对比界面
     *
     * @Author   lishirong
     *
     * @DateTime 2016-01-27T21:55:10+0800
     *
     * @param    [type]                   $req_id [description]
     *
     * @return   [type]                           [description]
     */
    function pop_diff_req_rel_quote($req_id = null) {
        if (empty($req_id)) {
            $this->set('error_msg', '参数错误');
            return;
        }
        global $g_Commons;
        global $g_BizId;
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_QuoteLine = $g_Commons->GlobalModel('QuoteLine');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_ProdAttr = $g_Commons->GlobalModel('ProdAttr');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_QuoteRelAudit = $g_Commons->GlobalModel('QuoteRelAudit');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_Enum = $g_Commons->GlobalModel('Enum');
        $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');

        $this->set('title_for_layout', '报价单与销售订单对比');

        if (!$g_RolePrivs->get_priv_level($this->name, 'can_edit')) {
            $this->set('error_msg', __('No Permission'));
            return;
        }

        // 获取当前的Url
        $all_params = $g_Commons->getUrlParams($this->params->params);
        // 替换url参数,界面切换的时候使用
        $switch_url = preg_replace("/(sel_quote_line_id=)(\d+?)/U", "$1{sel_quote_line_id}", $this->params->url);
        $this->set('switch_url', $switch_url);

        //获取各个事业部的主方案属性别名
        $main_chip_attr_alias = $g_Commons->getChipsetKeys();
        $this->set('main_chip_attr_alias', $main_chip_attr_alias);

        //不显示“硬件备注”的属性
        $hide_special_note_attr_alias = array(
            'HW_PowerType',
            'HW_Power_Backlight',
            'HW_BacklightDriver',
            'HW_SpecialDemand',
            'HW_AmplifierSpecifications',
        );
        $this->set('hide_special_note_attr_alias', $hide_special_note_attr_alias);

        // 销售订单
        $req = $this->Req->find('first', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'INNER',
                    'conditions' => array('Req.model_def_id' => Contract, 'Req.rel_obj_id = Contract.id'),
                ),
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'inner',
                    'conditions' => 'Product.id = Req.product_id'
                ),
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'LEFT',
                    'conditions' => 'RelReq.req_id = Req.id'
                ),
                array(
                    'table' => 'enums',
                    'alias' => 'ReqQuoteAudit',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'ReqQuoteAudit.value = RelReq.req_quote_audit_status',
                        'ReqQuoteAudit.dict_name' => 'RelReq.req_quote_audit_status',
                    ),
                ),
                array(
                    'table' => 'contract_rel_tmpls',
                    'alias' => 'ContractRelTmpl',
                    'type' => 'LEFT',
                    'conditions' => 'ContractRelTmpl.contract_no = Contract.contract_no'
                ),
            ),
            'conditions' => array('Req.id' => $req_id),
            'fields' => array(
                'Req.id',
                'Req.product_id',
                'Req.currency_id',
                'Req.account_id',
                'Req.ebs_order_number',
                'Req.price',
                'Req.foreign_price',
                'Req.sw_atom_ids_json',
                'Req.remark',
                'Contract.mid_account_id',
                'Contract.contract_no',
                'Product.id',
                'Product.name',
                'Product.code',
                'Product.is_ckd',
                'Product.prod_model_id',
                'RelReq.quote_line_id',
                'RelReq.req_quote_audit_line_id',
                'RelReq.req_quote_audit_status',
                'RelReq.req_quote_audit_remark',
                'ReqQuoteAudit.label',
                'ContractRelTmpl.pd_audit_user_id',
            )
        ));
        if (empty($req)) {
            $this->set('error_msg', '没找到对应的订单 #req_id = ' . $req_id);
            return;
        }

        // @linfangjie 2017.05.03 ocs-2461 合同备注信息显示在对比页面
        $contract_rel_tmpl = $g_ContractRelTmpl->findByContractNo($req['Contract']['contract_no'], 'remark');
        $this->set('contract_rel_tmpl_remark', $contract_rel_tmpl['ContractRelTmpl']['remark']);

        // 根据订单上的客户、第三方支付平台、产品、币种获取相似报价
        $params = array(
            'account_id' => $req['Req']['account_id'],
            'mid_account_id' => $req['Contract']['mid_account_id'],
            'currency_id' => $req['Req']['currency_id'],
            'product_id' => $req['Req']['product_id'],
        );
        $data_result = $g_QuoteLine->getSimilarQuoteLineParams($params);
        if (empty($data_result['success'])) {
            $this->set('error_msg', $data_result['message']);
            return;
        } elseif (!empty($data_result['message'])) {
            $this->set('error_tip', $data_result['message']);
        }

        // 将参数转换成变量
        // 包括用于查询相似报价单的$account_id、$mid_account_id、$currency_id、$product_id
        // 注意:这里的 $account_id不一定等于 $req['Req']['account_id']
        extract($data_result['datas']);

        // 获取需要进行合同、报价单价差的事业部
        $result_data = $this->Req->getReqQuoteDiffAuditBizs();
        $req_quote_diff_audit_bizs = !empty($result_data['success']) ? $result_data['datas'] : array();
        $this->set('req_quote_diff_audit_bizs', $req_quote_diff_audit_bizs);

        // 获取相似报价单
        $similar_quote_lines = array();
        if (in_array($g_BizId, $req_quote_diff_audit_bizs)) {
            // 查相似报价单
            $similar_quote_lines = $g_QuoteLine->getSimilarQuoteLines($account_id, $mid_account_id, $currency_id, $product_id, OCS_QUOTE_HEADER_TYPE_PRODUCT);
            $similar_quote_lines = $g_AttrDics->formatAllModelData($similar_quote_lines);

            // 获取报价单套打单号,并根据套打单号获取审核信息
            $group_bill_nos = array();
            foreach ($similar_quote_lines as $similar_line) {
                $group_bill_nos[$similar_line['QuoteHeader']['group_bill_no']] = $similar_line['QuoteHeader']['group_bill_no'];
            }
            $quote_rel_audits = $g_QuoteRelAudit->getFormatAuditInfoByGroupBillNos($group_bill_nos);
            // 获取已审批的数据
            foreach ($similar_quote_lines as $similar_index => $similar_line) {
                $group_bill_no = $similar_line['QuoteHeader']['group_bill_no'];
                $quote_audited = !empty($quote_rel_audits[$group_bill_no][OCS_QUOTE_REL_AUDIT_AUDIT_STAGE_APPROVE]) ? $quote_rel_audits[$group_bill_no][OCS_QUOTE_REL_AUDIT_AUDIT_STAGE_APPROVE] : array();
                // 记录报价单批准时间
                $similar_quote_lines[$similar_index]['QuoteHeader']['approve_time'] = !empty($quote_audited['QuoteRelAudit']['audit_time']) ? $quote_audited['QuoteRelAudit']['audit_time'] : null;
            }
            $this->set('similar_quote_lines', $similar_quote_lines);

            // 获取审核按钮
            $req_quote_audit_status = $g_Enum->getEnumListByDictName('RelReq.req_quote_audit_status');
            foreach ($req_quote_audit_status as $audit_status => $audit_label) {
                if (OCS_REL_REQ_QUOTE_AUDIT_STATUS_UNCHECK >= $audit_status) {//移除"未检查"项
                    unset($req_quote_audit_status[$audit_status]);
                }
            }
            $this->set('req_quote_audit_status', $req_quote_audit_status);
        }

        // 格式化订单信息,并获取数组的最后一项
        $req = $g_AttrDics->formatAllModelData(array($req));
        $req = end($req);

        $req['Req']['rel_account'] = $req['Req']['account_id']['label'];
        if (!empty($req['Contract']['mid_account_id']['label'])) {
            $req['Req']['rel_account'] .= '-' . $req['Contract']['mid_account_id']['label'];
        }
        $req['SwAtom'] = $g_ProdAttrs->getSwAttrsAtoms($req['Req']['sw_atom_ids_json']);
        $prod_detail = json_decode(json_encode(new ProdDetailsController($req['Product']['id'])), true); //统一转为数组
        $req['ProdDetail'] = $prod_detail;
        $hw_power_backlight = '';

        //将如下属性都拼接归到“电源及背光规格”
        $hw_power_backlight_same_alias = array(
            'HW_Power_Backlight',
            'HW_PowerType',
            'HW_BacklightDriver',
        );
        foreach ($hw_power_backlight_same_alias as $alias) {
            if (isset($req['ProdDetail']['details'][$alias])) {
                $hw_power_backlight .= $req['ProdDetail']['details'][$alias];
            }
        }
        $req['ProdDetail']['details']['HW_Power_Backlight'] = $hw_power_backlight;

        $this->set('req', $req);

        // 订单关联的报价行ID
        $rel_quote_line_id = (!empty($req['RelReq']['quote_line_id']) && is_numeric($req['RelReq']['quote_line_id'])) ? $req['RelReq']['quote_line_id'] : null;
        $this->set('rel_quote_line_id', $rel_quote_line_id);

        // 展示的报价行ID(默认展示切换选择的,否则显示用户关联的)
        $show_quote_line_id = null;
        if (!empty($all_params['P']['sel_quote_line_id']) && is_numeric($all_params['P']['sel_quote_line_id'])) {
            $show_quote_line_id = $all_params['P']['sel_quote_line_id'];
        } elseif (!empty($rel_quote_line_id)) {
            $show_quote_line_id = $rel_quote_line_id;
        } elseif (!empty($similar_quote_lines) && 1 == count($similar_quote_lines)) {
            $item_quote_line = end($similar_quote_lines);
            $show_quote_line_id = !empty($item_quote_line['QuoteLine']['id']) ? $item_quote_line['QuoteLine']['id'] : null;
        };
        $this->set('show_quote_line_id', $show_quote_line_id);

        // 获取当前展示的报价单数据
        $quote_line = $g_QuoteLine->getQuoteLineDataByLineId($show_quote_line_id);

        // 获取当前订单关联的报价单信息
        if (in_array($g_BizId, $req_quote_diff_audit_bizs)) {
            if (!empty($rel_quote_line_id)) {
                $is_has_line = false;
                foreach ($similar_quote_lines as $similar_quote_line) {
                    if ($rel_quote_line_id == $similar_quote_line['QuoteLine']['id']) {
                        $is_has_line = true;
                        break;
                    }
                }
                // 如果已存在于清单中,则不合并到原来的数据中
                if (!$is_has_line) {
                    // 如果关联报价单行ID等于当前展示的报价单行ID,那么直接获取数据,避免重复加载
                    if ($rel_quote_line_id == $show_quote_line_id) {
                        $rel_quote_line = $quote_line;
                    } else {
                        $rel_quote_line = $g_QuoteLine->getQuoteLineDataByLineId($rel_quote_line_id);
                    }
                    // 获取报价单套打单号,并根据套打单号获取审核信息
                    $rel_group_bill_no = !empty($rel_quote_line['QuoteHeader']['group_bill_no']) ? $rel_quote_line['QuoteHeader']['group_bill_no'] : null;
                    if (!empty($rel_group_bill_no)) {
                        // 获取已审批的数据并记录报价单批准时间
                        $quote_rel_audits = $g_QuoteRelAudit->getFormatAuditInfoByGroupBillNos($rel_group_bill_no);
                        $quote_audited = !empty($quote_rel_audits[$rel_group_bill_no][OCS_QUOTE_REL_AUDIT_AUDIT_STAGE_APPROVE]) ? $quote_rel_audits[$rel_group_bill_no][OCS_QUOTE_REL_AUDIT_AUDIT_STAGE_APPROVE] : array();
                        $rel_quote_line['QuoteHeader']['approve_time'] = !empty($quote_audited['QuoteRelAudit']['audit_time']) ? $quote_audited['QuoteRelAudit']['audit_time'] : null;

                        // 这里必须格式化,和$similar_quote_lines的数据保持一致
                        $rel_quote_lines = $g_AttrDics->formatAllModelData(array($rel_quote_line));

                        $similar_quote_lines = array_merge($similar_quote_lines, $rel_quote_lines);
                        $this->set('similar_quote_lines', $similar_quote_lines);
                    }
                }
            }
        }

        // 获取当前展示的报价单数据
        if (empty($quote_line)) {
            $this->set('quote_line', $quote_line);
            return;
        }
        $quote_line = $g_AttrDics->formatAllModelData(array($quote_line));
        $quote_line = isset($quote_line[0]) ? $quote_line[0] : array();

        $quote_line['QuoteHeader']['rel_account'] = $quote_line['QuoteHeader']['account_id']['label'];
        if (!empty($quote_line['QuoteHeader']['mid_account_id']['label'])) {
            $quote_line['QuoteHeader']['rel_account'] .= $quote_line['QuoteHeader']['mid_account_id']['label'];
        }
        if ($req['Product']['id'] == $quote_line['Product']['id']) {
            $quote_line['ProdDetail'] = $prod_detail;
        } else {
            $quote_line['ProdDetail'] = json_decode(json_encode(new ProdDetailsController($quote_line['Product']['id'])), true);
        }

        $hw_power_backlight = '';
        foreach ($hw_power_backlight_same_alias as $alias) {
            if (!empty($quote_line['QuoteLine'][$alias])) {
                $hw_power_backlight .= $quote_line['QuoteLine'][$alias];
            }
        }
        $quote_line['QuoteLine']['HW_Power_Backlight'] = $hw_power_backlight;

        $power_backlight = $g_Product->getPowerBacklightById($quote_line['Product']['id']);
        $this->set('quote_power_backlight', $power_backlight);
        switch ($g_BizId) {
            case OCS_BIZ_TYPE_SCS:
                $attr_alias_list = $g_ProdAttr->getAliasList(array($g_BizId, OCS_BIZ_TYPE_TV));
                break;
            default:
                $attr_alias_list = $g_ProdAttr->getAliasList();
                break;
        }
        $curr_map = array(
            OCS_CURRENCY_RMB => '￥', //RMB
            OCS_CURRENCY_USD => '$',
        );
        $this->set('curr_map', $curr_map);
        $op_map = array(
            0 => '+', //加价
            1 => '-',
        );

        //将各收费软件项，组织成以alias为下标，值为各alias对应的值
        $fee_alias_rel_label = array(
            'sw_authorize_names_json' => 'sw_authorize_label',
            'other_fee_item_names_json' => 'other_fee_item_label',
            'account_item_names_json' => 'account_item_label',
            'hw_other_power_atom_names_json' => 'other_power_label',
        );
        foreach ($fee_alias_rel_label as $field => $label_key) {
            if (!empty($quote_line['QuoteLine'][$field])) {
                $quote_line['QuoteLine'][$label_key] = array();
                foreach ($quote_line['QuoteLine'][$field] as $prod_attr_id => $items) {
                    $alias = isset($attr_alias_list[$prod_attr_id]) ? $attr_alias_list[$prod_attr_id] : '';
                    $quote_line['QuoteLine'][$label_key][$alias] =  array();
                    foreach ($items as $item) {
                        $quote_line['QuoteLine'][$label_key][$alias][] = $item['name'] . '<span class="no-diff">' .  $op_map[$item['op']] . $curr_map[$quote_line['QuoteHeader']['currency_id']['value']] . $item['price'] . '</span>';
                    }
                    $quote_line['QuoteLine'][$label_key][$alias] = implode(',', $quote_line['QuoteLine'][$label_key][$alias]);
                }
            }
        }
        $this->set('quote_line', $quote_line);

        //获取产品属性硬件属性
        $hw_prod_attr_alias = array();
        foreach ($quote_line['ProdDetail']['details'] as $key => $value) {
            if (preg_match('/^HW_.*/', $key)) {
                $hw_prod_attr_alias[] = $key;
            }
        }
        foreach ($req['ProdDetail']['details'] as $key => $value) {
            if (preg_match('/^HW_.*/', $key)) {
                $hw_prod_attr_alias[] = $key;
            }
        }
        $hw_prod_attr_alias = array_unique($hw_prod_attr_alias);

        $this->set('product_biz_id', $quote_line['ProdDetail']['product']['biz_id']);

        // 获取布局字段
        $layout_cols = $this->{$this->modelClass}->getQuoteDiffCols($quote_line['ProdDetail']['product']['biz_id'], $hw_prod_attr_alias);
        $this->set('layout_cols', $layout_cols);

        // 获取报价单产品、订单产品上的特殊备注和硬件备注
        $req_prod_details = !empty($req['Req']['product_id']['value']) ? $g_Product->getProductDetailInfo($req['Req']['product_id']['value']) : array();
        $quote_prod_details = !empty($quote_line['QuoteLine']['product_id']['value']) ? $g_Product->getProductDetailInfo($quote_line['QuoteLine']['product_id']['value']) : array();
        $this->set('req_prod_details', $req_prod_details);
        $this->set('quote_prod_details', $quote_prod_details);
    }


    /**
     * 导出下计划当前界面数据(所有的用户都可以“导出下计划审核时间清单”的数据)
     *
     * 这里不直接使用export_excel_action_query是因为
     * 1、下计划的列表界面是在Reqs下,但布局实际上是调用MfPlanBills的
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-03-04T18:02:56+0800
     *
     * @return   [type]                   [description]
     */
    public function export_planbill_excel_query() {
        set_time_limit(0);
        global $g_Commons;
        global $g_UserName;
        $g_MfPlanBill = $g_Commons->GlobalModel('MfPlanBill');
        $this->autoRender = false;
        $result = $g_Commons->initResult();

        if (!$this->request->is('post')) {
            $result['message'] = '非法请求';
            echo json_encode($result);
            return;
        }

        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');

        // if (OCS_PRIV_TYPE_ALL != $g_RolePrivs->get_priv_level($this->name, 'can_export')) {
        //     $result['message'] = '您无导出数据权限';
        //     echo json_encode($result);
        //     return;
        // }

        $this->{$this->modelClass}->recursive = -1;
        $plan_bills = $this->{$this->modelClass}->find('all', $_POST);

        if (empty($plan_bills)) {
            $result['message'] = '无数据';
            echo json_encode($result);
            return;
        }

        // 格式化数据,处理特殊字段,及获取BOM信息
        $plan_bills = $g_MfPlanBill->formatPlanBillDatas($plan_bills);

        $unknow_model = empty($this->{$this->modelClass}->unknow_model) ? array() : $this->{$this->modelClass}->unknow_model;
        $query_level = empty($this->{$this->modelClass}->level) ? 3 : $this->{$this->modelClass}->level;

        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $UserPrefData = $g_AttrDics->setUserPrefData($plan_bills, 'MfPlanBill', null, 3, 0);
        $excel_data = $this->{$this->modelClass}->processExcelData($UserPrefData);

        if (empty($excel_data)) {
            $result['message'] = '无数据导出';
            echo json_encode($result);
            return;
        }

        App::import('Vendor', 'PHPExcel/PHPExcel/IOFactory');
        App::import('Vendor', 'PHPExcel/PHPExcel');
        $objPHPExcel = new PHPExcel();
        $active = $objPHPExcel->getActiveSheet();
        $active->setTitle('导出数据');
        //设置标题
        $col = 0;
        foreach ($excel_data as $key => $data) {
            foreach ($data as $label => $value) {
               $active->setCellValueByColumnAndRow($col++,$key+1,$label);
            }
            break;
        }
        //设置内容
        foreach ($excel_data as $key => $data) {
            $col = 0;
            foreach ($data as $label => $value) {
               $active->setCellValueByColumnAndRow($col++,$key+2,$value);
            }
        }
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $FileName = 'cache/attach/'. $this->modelClass . '_' . date('YmdHis') . '_' . $g_UserName .'.xlsx';
        $objWriter->save($FileName);

        $result['success'] = true;
        $result['datas'] = $FileName;
        echo json_encode($result);
        return;
    }

    /**
     * 批量导入物料订单界面
     *
     * @Author   lishirong
     *
     * @DateTime 2016-04-18T17:18:35+0800
     *
     * @return   [type]                   [description]
     */
    function pop_import_ckd_order() {
        global $g_Commons;
        global $g_BizId;
        $g_Type = $g_Commons->GlobalModel('Type');
        $g_Dic = $g_Commons->GlobalModel('Dic');
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_Currency = $g_Commons->GlobalModel('Currency');
        $g_Req = $g_Commons->GlobalModel('Req');
        $g_Task = $g_Commons->GlobalModel('Task');
        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_RelProduct = $g_Commons->GlobalModel('RelProduct');
        $g_CkdMfPlanBill = $g_Commons->GlobalModel('CkdMfPlanBill');
        $g_CkdOrderSet = $g_Commons->GlobalModel('CkdOrderSet');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');

        $this->layout = 'newworld';
        $this->set('title_for_layout', '导入物料订单');

        $all_params = $g_Commons->getUrlParams($this->params->params);
        if (!isset($all_params['P']['currency_id']) && !empty($all_params['P']['currency_type'])) { //参数兼容
            $all_params['P']['currency_id'] = $all_params['P']['currency_type'];
        }
        $all_params['P']['currency_id'] = !isset($all_params['P']['currency_id']) ? OCS_CURRENCY_RMB : $all_params['P']['currency_id'];
        $this->set('all_params', $all_params);

        //检查url参数
        $po_result = $this->Req->checkImportCkdOrderParams($all_params);
        if (!$po_result['success']) {
            $this->set('error_msg', $po_result['message']);
            return;
        }

        extract($all_params['P']);

        //订单类型
        $type = $g_Type->findByCode($order_type);
        $this->set('order_type', $type['Type']['name']);

        //币种
        $currency_list = $g_Dic->getDicListByType('currency_id');
        $this->set('currency_list', $currency_list);

        $this->set('currency', $g_Currency->findById($currency_id));

        $default_exchange_ratio = 7.03; //默认USD的汇率
        $this->set('default_exchange_ratio', $default_exchange_ratio);

        //发货组织
        $org_list = $g_ObjRelObj->getAvailableOrgList();
        $this->set('org_list', $org_list);

        //公司实体ID
        $org_id = $this->Req->relOrgIdByTypeId($type['Type']['id']);
        $this->set('org_id', $org_id);

        //该事业部下默认的发货组织
        $ship_from_org_id = $this->Req->getDefaultOrganizationIdByTypeId($type['Type']['id']);
        $this->set('ship_from_org_id', $ship_from_org_id);

        //获取导入订单模板
        $g_PrintTmpl = $g_Commons->GlobalModel('PrintTmpl');
        $sales_order_tmpl = $g_PrintTmpl->getPrintTmplByModelDefIdAndAlias(Req, 'ImportCKDSalesOrder');
        $this->set('sales_order_tmpl', $sales_order_tmpl);

        //订单头信息
        $this->set('header', array());

        //submit
        $this->set('save_complete', 0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submit_data = $this->request->data;
            $this->set('header', $submit_data['header']);
            $this->set('ship_from_org_id', $submit_data['header']['ship_from_org_id']);
            $po_result = $this->{$this->modelClass}->verifyImportCkdData($submit_data, $all_params);
            if (!$po_result['success']) {
                $this->set('check_list_msg', $po_result['message']);
                return;
            }
            $save_datas = $po_result['datas'];

            $save_error_msg = array();
            $contract_no = '';
            $flash_req_ids = array();
            $is_sckd_order_type = false;
            foreach ($save_datas as $save_data) {

                //save contract
                try {
                    $g_Contract->query('begin');
                    $g_Contract->create();
                    $g_Contract->save($save_data['Contract']);
                    if (empty($g_Contract->id)) {
                        throw new Exception("保存contract失败", 1);
                    }
                    $contract_no = $save_data['Contract']['contract_no'];

                    $g_Contract->query('commit');
                    $contract_id = $g_Contract->id;
                } catch (Exception $e) {
                    $save_error_msg[] = $e->getMessage();
                    $g_Contract->query('rollback');
                }

                //save req
                try {
                    $g_Req->query('begin');
                    $save_data['Req']['rel_obj_id'] = $contract_id;

                    $g_Req->create();
                    $g_Req->save($save_data['Req']);
                    $req_id = $g_Req->id;

                    //“否”出库存，SCKD类别订单，且为FLASH物料订单
                    $is_sckd_order = $this->Req->isSCKDReqOrder($req_id);
                    if (empty($save_data['Contract']['is_has_stock']) && $is_sckd_order) {
                        $is_sckd_order_type = true;
                        $is_flash_mtl = $g_RelProduct->getFieldValue($save_data['Req']['product_id'], 'is_flash_mtl');
                        if ($is_flash_mtl) {
                            $flash_req_ids[] = $req_id;
                        }
                    }

                    // "研发订单" “生管承诺日期” = "计划发运日期"-3
                    // "物料订单"或者"SKD订单"订单 “生管承诺日期” = "计划发运日期"-2
                    $promise_date = $this->Req->getInitPromiseDate($save_data);
                    if (!empty($promise_date)) {
                        $field_values = array('req_id' => $req_id, 'mf_promise_date' => $promise_date);
                        $g_RelReq->saveRelFieldsAndLog($req_id, $field_values, '通过导入excel“创建订单”自动更新了以下信息:');
                    }

                    $g_Req->query('commit');
                } catch (Exception $e) {
                    $save_error_msg[] = $e->getMessage();
                    $g_Req->query('rollback');
                }
            }
            if (!empty($save_error_msg)) {
                $this->set('check_list_msg', $save_error_msg);
                return;
            }

            if (!empty($flash_req_ids)) {
                foreach ($flash_req_ids as $req_id) {
                    //自动创建软件任务
                    $g_Task->autoCreateTask($req_id);

                    //自动创建下计划记录
                    $g_CkdMfPlanBill->saveRelFields($req_id);
                }
            }

            //创建OCS配料清单记录
            if ($is_sckd_order_type) {
                $g_CkdOrderSet->saveRelFields($contract_no);
            }

            $this->set('save_complete', 1);
        }
    }

    /**
     * 根据合同号，订单与物料报价单进行对比
     * 规则：
     * 1)优先匹配物料报价单的，客户+第三方+币种+BOM号+CVTE料号+客户料号
     * 2)如果1)为空，则客户+第三方+币种+BOM号+客户料号
     * 3)如果2)为空，则客户+第三方+币种+BOM号+CVTE料号
     * 4)如有第三方但匹配为空，则客户+第三方（空）+币种+BOM号+CVTE料号
     * 5)如都为空，则返回空
     *
     * @Author   lishirong
     *
     * @DateTime 2016-05-31T17:06:31+0800
     *
     * @param    [type]                   $contract_no [合同号]
     *
     * @return   [type]                                [description]
     */
    function pop_diff_with_mtl_quote($contract_no = null) {
        global $g_Commons;
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $this->layout = 'newworld';
        $this->set('title_for_layout', '订单与报价单对比');
        if (empty($contract_no)) {
            $this->set('error_msg', '合同号为空');
            return;
        }
        $this->set('contract_no', $contract_no);

        $can_view_diff_mtl_quote = $g_RolePrivs->get_priv_level('Reqs', 'can_view_diff_mtl_quote');
        if (!$can_view_diff_mtl_quote) {
            $this->set('error_msg', '抱歉，你无权限查看');
            return;
        }

        //定义筛选条件字段
        $filter_opts = array(
            'Req.account_id' => '客户',
            'Contract.mid_account_id' => '第三方',
            'Req.currency_id' => '币种',
            'Product.code' => 'CVTE料号',
            'Contract.account_mno' => '客户料号',
            'Contract.other_board' => '成品BOM号',
        );
        $this->set('filter_opts', $filter_opts);

        //获取勾选的选项
        $default_opts = array_keys($filter_opts);
        $sel_filter_opts = $g_Commons->getRedisCache('diff_mtl_quote_' . $contract_no);
        $sel_filter_opts = !empty($sel_filter_opts) ? json_decode($sel_filter_opts, true) : $default_opts; //默认全选上
        $sel_filter_opts = empty($sel_filter_opts) ? array() : $sel_filter_opts;
        $this->set('sel_filter_opts', $sel_filter_opts);

        //获取订单和物料报价单信息
        $po_result = $this->Req->getDiffMtlQuoteDatas($contract_no, $sel_filter_opts);
        if (!$po_result['success']) {
            $this->set('error_msg', $po_result['message']);
            return;
        }
        $model_datas = $po_result['datas'];
        $this->set('model_datas', $model_datas);

        //匹配成功的报价信息
        $req_rel_match_quotes = isset($po_result['req_rel_match_quotes']) ? $po_result['req_rel_match_quotes'] : array();
        $this->set('req_rel_match_quotes', $req_rel_match_quotes);

        $header = current($model_datas);
        $this->set('header', $header);

        //定义显示字段
        $dis_tbl_fields = array(
            'Contract.other_board' => '成品BOM号',
            'Req.price' => '订单单价',
            'DataView.op' => '',
            'QuoteLine.price' => '报价单价',
            'DataView.diff_price' => '差价',
            'MatchQuote.match_count' => '匹配个数',
            'Product.code' => '[订单]物料编码',
            'Contract.account_mno' => '[订单]客户料号',
            'QuoteLine.cvte_bom_remark' => 'CVTE物料描述',
            'QuoteLine.cust_bom_code' => '客户物料编码',
            'QuoteLine.cvte_bom_name' => '物料名称',
            'QuoteLine.cust_bom_remark' => '客户物料描述',
            'Contract.account_cno' => '客户单号',
            'Req.id' => '订单ID',
        );
        $this->set('dis_tbl_fields', $dis_tbl_fields);
    }

    /**
     * 保存与物料报价单对比筛选条件
     *
     * @Author   lishirong
     *
     * @DateTime 2016-06-12T17:32:23+0800
     */
    function set_diff_mtl_quote_opt_item_json() {
        global $g_Commons;
        $result = $g_Commons->initResult();
        $this->autoRender = false;
        if (empty($_POST)) {
            $result['message'] = '参数为空';
            echo json_encode($result);
            return;
        }
        $sel_opts = !empty($_POST['opts']) ? $_POST['opts'] : array();
        $contract_no = $_POST['contract_no'];

        if (!in_array('Product.code', $sel_opts) && !in_array('Contract.account_mno', $sel_opts)) {
            $result['message'] = 'CVTE料号或者客户料号，必须选择一个';
            echo json_encode($result);
            return;
        }

        $redis_value = json_encode($sel_opts);
        $g_Commons->setRedisCache('diff_mtl_quote_' . $contract_no, $redis_value);

        $result['success'] = true;
        echo json_encode($result);
        return;
    }

    /**
     * 正式订单下推提醒备货信息
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-06-02T21:13:18+0800
     *
     * @param    boolean                  $action [当前的操作]
     *
     * @return   [type]                           [description]
     */
    function check_and_notice_stock_json($action = null) {
        global $g_BizId;
        global $g_Commons;
        $this->autoRender = false;

        $g_Product = $g_Commons->GlobalModel('Product');

        // 初始化结果
        $result = $g_Commons->initResult();

        // 定义各事件响应的条件
        $action_rel_actions = array(
            //分派合同,如果存在备货订单,那么弹出消息
            'contract_assign' => array(
                //'is_recommend_main' => true,
                'has_stock_order' => true,
            ),
            //订单下推,如果存在备货订单,那么弹出消息
            'order_to_purchased' => array(
                //'is_recommend_main' => false,
                'has_stock_order' => true,
            ),
        );

        if (!$this->request->is('post') || empty($this->request->data)) {
            $result['message'] = '操作异常.';
            echo json_encode($result);
            return;
        }

        // 模拟数据
        // $this->request->data = array();
        // $this->request->data['req_ids'] = array('509716', '2474');

        if (OCS_BIZ_TYPE_TV != $g_BizId) {//实现范围：TV事业部
            $result['success'] = true;
            $result['message'] = '非TV事业部,因此展示不需要验证';
            echo json_encode($result);
            return;
        }

        // 获取参数
        $post_data = $this->request->data;

        // 根据req_ids获取正式订单及产品信息
        $req_ids = !empty($post_data['req_ids']) ? $post_data['req_ids'] : array();
        $contract_nos = !empty($post_data['contract_nos']) ? $post_data['contract_nos'] : array();
        if (empty($req_ids) && empty($contract_nos)) {
            $result['message'] = '参数异常.';
            echo json_encode($result);
            return;
        }

        // 查询条件
        $conditions = array();
        $conditions[] = array(
            'Req.close_status NOT' => array(-1, OCS_ORDER_CLOSE_STATUS_CANCEL),//-1是辅助的,否则cakephp生成的sql会报错
            'Account.short_name NOT LIKE' => '%备货%',
        );
        if (!empty($req_ids)) {
            $conditions[] = array('Req.id' => $req_ids);
        }
        if (!empty($contract_nos)) {
            $conditions[] = array('Contract.contract_no' => $contract_nos);
        }

        $reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'INNER',
                    'conditions' => array('Req.model_def_id' => Contract, 'Req.rel_obj_id = Contract.id'),
                ),
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'INNER',
                    'conditions' => array('Product.id = Req.product_id')
                ),
                array(
                    'table' => 'prod_model_details',
                    'alias' => 'ProdModelDetail',
                    'type' => 'LEFT',
                    'conditions' => 'ProdModelDetail.id = Product.pcb_id'
                ),
                array(
                    'table' => 'accounts',
                    'alias' => 'Account',
                    'type' => 'INNER',
                    'conditions' => array('Account.id = Req.account_id')
                ),
            ),
            'conditions' => $conditions,
            'fields' => array('Req.id', 'Product.id', 'Product.code', 'ProdModelDetail.line_name', 'Account.short_name'),
        ));

        if (empty($reqs)) {
            $result['success'] = true;
            $result['message'] = '所选的订单,没有包含正式订单,因此不需要验证是否包含备货申请.';
            echo json_encode($result);
            return;
        }

        // 记录订单对应产品的产品全称，并根据产品全称获取对应主推信息
        $req_ids = array();//重新记录req_id
        $line_name_req_ids = array();
        foreach ($reqs as $key => $req) {
            $req_id = $req['Req']['id'];
            $req_ids[$req_id] = $req_id;
            $line_name_req_ids[$req['ProdModelDetail']['line_name']][$req_id] = $req_id;
        }

        // 获取产品全称并按req_id分组记录对应的是否是主推产品
        $line_names = array_keys($line_name_req_ids);
        $line_names_array = $g_Commons->ebsKeysToString($line_names, array('field' => 'xpls.line_name'));
        $sql = "SELECT xpls.* FROM XXCUS.xxom_prod_line_ship xpls WHERE (" . $line_names_array . ")";
        $stid = $g_Commons->ebsConnect($sql);
        while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
            $line_name = $row['LINE_NAME'];
            $line_req_ids = !empty($line_name_req_ids[$line_name]) ? $line_name_req_ids[$line_name] : array();

            $is_recommend_main = (!empty($row['IS_RECOMMEND_MAIN']) && '主推' == $row['IS_RECOMMEND_MAIN']) ? true : false;
            foreach ($line_req_ids as $line_req_id) {
                $result['conds'][$line_req_id]['is_recommend_main'] = $is_recommend_main;
            }
        }

        // 是否存在备货校验逻辑：正式订单上的“客户”和“产品型号”与备货订单上的“真实客户”和“产品型号”匹配
        // 备货订单定义：客户包含%备货%的订单，未审和已审的备货（不包含已作废的备货）
        $same_stock_orders = $this->Req->getSameStockOrdersByReqIds($req_ids);
        if (empty($same_stock_orders)) {
            $result['success'] = true;
            $result['message'] = '所选的订单,没匹配到相同产品型号+真实客户的备货订单,可直接提交.';
            echo json_encode($result);
            return;
        }

        foreach ($req_ids as $req_id) {
            if (!empty($same_stock_orders[$req_id])) {
                $result['conds'][$req_id]['has_stock_order'] = true;
            } else {
                $result['conds'][$req_id]['has_stock_order'] = false;
            }
        }

        // 根据不同的操作事件,做不同的验证
        if (!isset($action_rel_actions[$action])) {
            $result['message'] = '没找到#action ' . $action . ' 对应的配置.';
            echo json_encode($result);
            return;
        }

        $rel_actions = $action_rel_actions[$action];

        // 匹配是否存在符合条件的订单行,如果存在则返回提示
        $is_match = false;
        foreach ($result['conds'] as $req_id => $cond) {
            $match_count = 0;
            foreach ($rel_actions as $rel_action => $rel_value) {
                if ($cond[$rel_action] == $rel_value) $match_count++;
            }
            if ($match_count == count($rel_actions)) {
                $is_match = true;
            }
            if ($is_match) break;
        }

        $datas = array();
        if (!empty($same_stock_orders)) {
            foreach ($same_stock_orders as $key => $same_stock_order) {
                $datas = array_merge($datas, $same_stock_order);
            }
        }

        if ($is_match) {
            $result['success'] = false;
            $result['datas'] = $datas;
        } else {
            $result['success'] = true;
            $result['message'] = '符合提交规则,可直接提交';
        }

        echo json_encode($result);
        return;
    }

    /**
     * 自动将符合条件的备货订单的是否出库存设置为"是"
     *
     * 成品备货订单：取值订单类型（CVTE一部备货到CVTE五部备货）、客户（CVTE备货（成品）、CVT（三部备货）、CVT备货（CRT）、鑫翔备货（成品））
     *
     *   1、成品备货订单
     *   2、产品是CKD
     *   3、有效天数内已开工单
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-06-02T11:16:47+0800
     *
     * @return   [type]                   [description]
     */
    function auto_set_order_stock_json() {
        global $g_Commons;
        $this->autoRender = false;

        $result = $g_Commons->initResult();

        $stock_order_type_names = array(
            'CVTE一部备货', 'CVTE二部备货', 'CVTE三部备货', 'CVTE四部备货', 'CVTE五部备货',
            'CVTE-BT1备货', 'CVTE-BT2备货', 'CVTE-BT3备货', 'CVTE-BT4备货', 'CVTE-BT5备货', 'CVTE-BT6备货', 'CVTE-BT7备货', 'CVTE-BT8备货', 'CVTE-BT9备货',
        );

        // 查询数据
        $stock_reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'INNER',
                    'conditions' => array('Req.model_def_id' => Contract, 'Req.rel_obj_id = Contract.id'),
                ),
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'INNER',
                    'conditions' => array('Product.id = Req.product_id')
                ),
                array(
                    'table' => 'accounts',
                    'alias' => 'Account',
                    'type' => 'INNER',
                    'conditions' => array('Account.id = Req.account_id')
                ),
                array(
                    'table' => 'stock_apply_lines',
                    'alias' => 'StockApplyLine',
                    'type' => 'INNER',
                    'conditions' => array('StockApplyLine.req_id = Req.id'),
                ),
                array(
                    'table' => 'stock_apply_headers',
                    'alias' => 'StockApplyHeader',
                    'type' => 'INNER',
                    'conditions' => array('StockApplyLine.header_id = StockApplyHeader.id'),
                ),
                array(
                    'table' => 'types',
                    'alias' => 'Type',
                    'type' => 'INNER',
                    'conditions' => array('Type.id = Contract.type_id'),
                ),
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'LEFT',
                    'conditions' => array('RelReq.req_id = Req.id'),
                ),
            ),
            'conditions' => array(
                'Req.close_status NOT' => array(OCS_ORDER_CLOSE_STATUS_CANCEL, OCS_ORDER_CLOSE_STATUS_CLOSE),
                'Product.is_ckd' => 1,
                'Type.name' => $stock_order_type_names,
                'Account.short_name' => array('CVTE备货（成品）', 'CVT（三部备货）', 'CVT备货（CRT）', '鑫翔备货（成品）'),
                'Contract.is_has_stock' => 0,
                'StockApplyHeader.status !=' => OCS_STOCK_APPLY_HEADER_STATUS_CANCEL,
            ),
            'fields' => array(
                'Req.id',
                'Contract.id',
                'Contract.is_has_stock',
                'Type.name', 'Product.is_ckd', 'Account.short_name', 'RelReq.stock_limit_days',
                'StockApplyLine.id', 'StockApplyLine.status',
            ),
        ));

        if (empty($stock_reqs)) {
            $result['message'] = '没找到备货数据';
            echo json_encode($result);
            return;
        }

        $req_ids = array();
        foreach ($stock_reqs as $req) {
            $req_ids[$req['Req']['id']] = $req['Req']['id'];
        }

        $range_req_ids_array = $g_Commons->ebsKeysToString($req_ids, array('field' => 'Oh.Attribute8'));
        // 获取有效期内的订单对应的工单
        $sql = "SELECT Wr.Id,
                       Wr.Status,
                       Oh.Attribute8 req_id, -- OCS req_id
                       Wdj.Wip_Entity_Id,
                       Wdj.Lot_Number Lot_Number_Wip, -- 批号
                       Wr.Lot_Number, --- 小批次
                       Wdj.Organization_Id,
                       Wdj.Status_Type,
                       Wdj.Start_Quantity Job_Quantity, -- 工单数量
                       Wdj.Last_Update_Date,
                       Oh.Order_Number, -- 订单编号
                       To_Char(Wdj.Creation_Date, 'yyyy-mm-dd hh24:mi:ss') Creation_Date --制单日期
                  FROM Oe_Order_Lines_All Ol
                --采购订单头
                  JOIN Oe_Order_Headers_All Oh
                    ON Ol.Header_Id = Oh.Header_Id
                --小批次表
                  JOIN Xxapex.Xxmtl_Reservations Wr
                    ON Ol.Line_Id = Wr.Om_Line_Id
                --工单
                  JOIN Wip_Discrete_Jobs Wdj
                    ON Wdj.Wip_Entity_Id = Wr.Wip_Id
                 WHERE (" . $range_req_ids_array . ")";

        $req_wips = array();
        $stid = $g_Commons->ebsConnect($sql);
        while ($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) {
            $req_wips[$row['REQ_ID']][] = $row;
        }

        if (empty($req_wips)) {
            $result['message'] = '没找到关联的工单';
            echo json_encode($result);
            return;
        }

        // 将存在工单的成品备货订单刷成 “是”出库存
        $update_contracts = array();
        foreach ($stock_reqs as $req) {
            if (!isset($req_wips[$req['Req']['id']])) {
                continue;
            }
            $update_contract = $req['Contract'];
            $update_contract['is_has_stock'] = 1;
            $update_contracts[] = $update_contract;
        }

        if (empty($update_contracts)) {
            $result['message'] = '没找到需要更新的订单';
            echo json_encode($result);
            return;
        }

        $g_Contract = $g_Commons->GlobalModel('Contract');
        $g_Contract->saveAll($update_contracts);

        $result['success'] = true;
        $result['message'] = '更新成功';
        echo json_encode($result);
        return;
    }

    /**
     * 批量维护订单关联
     * OCS-1718 HCKD关联控制功能
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-06-08T15:46:12+0800
     *
     * @return   [type]                   [description]
     */
    function pop_hckd_rel_order_numbers() {
        global $g_BizId;
        global $g_BizName;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');

        $this->set('title_for_layout', '批量维护HCKD关联单号');

        // 获取并验证url参数
        $all_params = $g_Commons->getUrlParams($this->params->params);
        $this->set('all_params', $all_params);

        if (!isset($all_params['P']['req_ids']) || empty($all_params['P']['req_ids'])) {
            $this->set('error_msg', '参数异常: #req_ids=' . $all_params['P']['req_ids']);
            return;
        } elseif ($g_BizId != OCS_BIZ_TYPE_TV) {
            $this->set('error_msg', '操作异常: #BizId=' . OCS_BIZ_TYPE_TV);
            return;
        }

        // 根据订单ID查询对应的订单并格式化
        $req_ids = explode(',', $all_params['P']['req_ids']);

        // 找出所选订单中已设置HCKD关联单号的订单ID
        $same_rel_req_ids = $this->Req->find('list', array(
            'joins' => array(
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'left',
                    'conditions' => 'RelReq.req_id = Req.id',
                ),
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'SameRelReq',
                    'type' => 'left',
                    'conditions' => 'RelReq.hckd_rel_order_number = SameRelReq.hckd_rel_order_number',
                ),
            ),
            'conditions' => array(
                'Req.id' => $req_ids,
                'SameRelReq.hckd_rel_order_number !=' => '',
                'SameRelReq.hckd_rel_order_number IS NOT NULL',
            ),
            'fields' => array('SameRelReq.req_id', 'SameRelReq.req_id'),
        ));
        $same_rel_req_ids = array_filter($same_rel_req_ids);

        // 找出所选的订单ID和相同HCKD关联单号的订单
        $all_req_ids = array_merge($req_ids, $same_rel_req_ids);
        $reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id',
                ),
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'left',
                    'conditions' => 'RelReq.req_id = Req.id',
                ),
            ),
            'conditions' => array('Req.id' => $all_req_ids),
            'fields' => array(
                'Req.id,Req.name,Req.ebs_order_number,Req.account_id,Req.quantity,Req.product_id,Req.remark,Req.mf_remark,Req.owner_remark,Req.close_status',
                'Contract.contract_no,Contract.account_mno,Contract.account_cno,Contract.account_bno,Contract.delivety_time,Contract.change_delivety_time_reason',
                'RelReq.hckd_rel_order_number',
            ),
            'order' => array('RelReq.hckd_rel_order_number' => 'DESC'),
        ));
        $reqs = $g_AttrDics->formatAllModelData($reqs);

        // 记录异常消息
        $error_messages = array();

        // 验证所选的单据是否符合创建规则
        $hckd_rel_order_numbers = array();
        foreach ($reqs as $key => $req) {
            if (!empty($req['RelReq']['hckd_rel_order_number'])) {
                $hckd_rel_order_numbers[$req['RelReq']['hckd_rel_order_number']] = $req['RelReq']['hckd_rel_order_number'];
            }
        }
        // 等于0表示全部都维护为空
        // 等于1表示全部都维护成相同的单号
        $hckd_rel_number = count($hckd_rel_order_numbers);
        if (0 !== $hckd_rel_number && 1 !== $hckd_rel_number) {
            $error_message = '所选的数据中，同时包含 ' . $hckd_rel_number . '个关联单号 “' . implode('、', $hckd_rel_order_numbers) . '”（因此无法设置关联单号）';
            $error_messages['所选的订单同时包含多个关联单号'][] = $error_message;
        }

        // 处于“已关闭”或“已取消”的单据不允许修改
        $not_allow = array(
            OCS_ORDER_CLOSE_STATUS_CLOSE,
            OCS_ORDER_CLOSE_STATUS_CANCEL
        );
        // 找出不符合设置批次的单据
        foreach ($reqs as $key => $req) {
            $error_title = '#req_id:' . $req['Req']['id'] . ' <a href="/' . $g_BizName . '/Reqs/view/' . $req['Req']['id'] . '" target="_blank">' . $req['Req']['name'] . '</a>';
            try {
                if (empty($req['Req']['ebs_order_number'])) {
                    throw new Exception('订单还没同步到EBS', 1);
                }
                if (!empty($req['Req']['close_status']['value']) && in_array($req['Req']['close_status']['value'], $not_allow)) {
                    throw new Exception('订单“' . $req['Req']['close_status']['label'] . '”不允许修改', 1);
                }
            } catch (Exception $e) {
                unset($reqs[$key]);//不符合的单据需要排除掉
                $error_messages[$error_title][] = $e->getMessage();
            }
        }
        $this->set('error_messages', $error_messages);


        // 定义界面布局配置
        $table_config['layout_cols'] = array();
        $table_config['layout_cols'][] = array('label_field' => 'Req.ebs_order_number', 'label' => 'EBS订单编号');
        $table_config['layout_cols'][] = array(
            'label' => '关联单号',
            'label_field' => 'RelReq.hckd_rel_order_number',
            'title_html' => '<th>{label}
                                <a class="btn btn-mini act-dup" act="copy" title="不覆盖复制" rel="hckd_rel_order_number"><i class="icon-arrow-down"></i></a>
                             </th>',
            'label_html' => '<td title="#{Req.ebs_order_number}" label="{label}" class="{class}">
                                <input type="hidden" name="data[req_#{Req.id}][req_id]" value="#{Req.id}" />
                                <input type="text" name="data[req_#{Req.id}][hckd_rel_order_number]"
                                    class="span3 hckd_rel_order_number" value="#{RelReq.hckd_rel_order_number}" />
                             </td>',
        );
        $table_config['layout_cols'][] = array('label_field' => 'Req.product_id.label', 'label' => '产品名称');
        $table_config['layout_cols'][] = array('label_field' => 'Req.name', 'label' => '订单主题');
        $table_config['layout_cols'][] = array('label_field' => 'Contract.contract_no', 'label' => '合同编号');
        $table_config['layout_cols'][] = array('label_field' => 'Contract.account_cno', 'label' => '客户单号');
        $table_config['layout_cols'][] = array('label_field' => 'Contract.account_mno', 'label' => '客户料号');
        // 布局所用到的数据
        $table_config['layout_datas'] = $reqs;
        $this->set('table_config', $table_config);
    }

    /**
     * 根据产品ID，同步设置风险物料个数
     *
     * @Author   lishirong
     *
     * @DateTime 2016-06-12T09:52:29+0800
     *
     * @return   [type]                   [description]
     */
    function sync_risk_mtl_count_by_product_ids_json() {
        global $g_Commons;
        $g_ProdModelDetail = $g_Commons->GlobalModel('ProdModelDetail');
        $result = $g_Commons->initResult();
        $this->autoRender = false;
        if (empty($_POST) || empty($_POST['req_ids'])) {
            $result['message'] = __FUNCTION__ . '参数为空';
            echo json_encode($result);
            return;
        }

        $req_ids = $_POST['req_ids'];
        $prod_model_detail_ids = $this->Req->find('list', array(
            'joins' => array(
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'inner',
                    'conditions' => 'Product.id = Req.product_id',
                ),
                array(
                    'table' => 'prod_model_details',
                    'alias' => 'ProdModelDetail',
                    'type' => 'inner',
                    'conditions' => 'ProdModelDetail.id = Product.pcb_id',
                ),
            ),
            'conditions' => array(
                'Req.id' => $req_ids,
            ),
            'fields' => array(
                'ProdModelDetail.id',
            )
        ));
        if (empty($prod_model_detail_ids)) {
            $result['message'] = __FUNCTION__ . '查询数据为空';
            echo json_encode($result);
            return;
        }
        $prod_model_detail_ids = array_unique($prod_model_detail_ids);
        $g_ProdModelDetail->syncRiskMtlCountByIds($prod_model_detail_ids);

        $result['success'] = true;
        echo json_encode($result);
        return;
    }

    /**
     * 定时同步进行中订单的风险物料个数
     *
     * @Author   lishirong
     *
     * @DateTime 2016-07-19T15:10:58+0800
     *
     * @return   [type]                   [description]
     */
    function sync_risk_mtl_count() {
        set_time_limit(0);
        global $g_Commons;
        $g_ProdModelDetail = $g_Commons->GlobalModel('ProdModelDetail');
        $this->autoRender = false;

        $req_ids = $this->Req->getRunningOrder(); //获取进行中订单req_ids
        $prod_model_detail_ids = $this->Req->find('list', array(
            'joins' => array(
                array(
                    'table' => 'products',
                    'alias' => 'Product',
                    'type' => 'inner',
                    'conditions' => 'Product.id = Req.product_id',
                ),
                array(
                    'table' => 'prod_model_details',
                    'alias' => 'ProdModelDetail',
                    'type' => 'inner',
                    'conditions' => 'ProdModelDetail.id = Product.pcb_id',
                ),
            ),
            'conditions' => array(
                'Req.id' => $req_ids,
            ),
            'fields' => array(
                'ProdModelDetail.id',
            )
        ));
        if (empty($prod_model_detail_ids)) {
            return;
        }
        $prod_model_detail_ids = array_unique($prod_model_detail_ids);
        $g_ProdModelDetail->syncRiskMtlCountByIds($prod_model_detail_ids);

        return;
    }

    /**
     * 保存HCKD关联单号
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-06-13T21:48:21+0800
     *
     * @return   [type]                   [description]
     */
    function save_hckd_rel_order_numbers_json() {
        global $g_BizId;
        global $g_BizName;
        global $g_Commons;
        $g_ERPWsClients = $g_Commons->GlobalController('ERPWsClients');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');

        $this->autoRender = false;
        $result = $g_Commons->initResult();

        try {
            if (!$this->request->is('post')) {
                throw new Exception('操作异常.', 1);
            } elseif (empty($this->request->data)) {
                throw new Exception('提交的数据为空.', 1);
            }

            $submit_datas = $this->request->data;

            // 验证本次提交关联的单号,除了空值外,是否全部相同
            $hckd_req_ids = array();
            $hckd_rel_order_numbers = array();
            foreach ($submit_datas as $idx => $submit_data) {
                $hckd_req_ids[$submit_data['req_id']] = $submit_data['req_id'];
                if (!empty($submit_data['hckd_rel_order_number'])) {
                    $hckd_rel_order_numbers[$submit_data['hckd_rel_order_number']] = $submit_data['hckd_rel_order_number'];
                }
            }

            $error_messages = array();
            // 等于0表示全部都维护为空
            // 等于1表示全部都维护成相同的单号
            $hckd_rel_count = count($hckd_rel_order_numbers);
            if (0 !== $hckd_rel_count && 1 !== $hckd_rel_count) {
                $error_message = '本次提交的数据中，同时关联了 ' . $hckd_rel_count . '个单号 “' . implode('、', $hckd_rel_order_numbers) . '”（因此无法保存）';
                $error_messages['不能同时关联多个不同的单号'][] = $error_message;
            }
            $hckd_rel_order_number = end($hckd_rel_order_numbers);

            // 判断当前所选的订单设置的HCKD关联单号是否已经存在,如果已经存在,那么不允许修改
            $hckd_reqs = $g_RelReq->find('all', array(
                'joins' => array(
                    array(
                        'table' => 'reqs',
                        'alias' => 'Req',
                        'type' => 'INNER',
                        'conditions' => 'Req.id = RelReq.req_id',
                    ),
                ),
                'conditions' => array(
                    'RelReq.req_id NOT' => array_merge(array(-1), $hckd_req_ids),//这里的-1是为了解决,如果数组$hckd_req_ids只有一项,CAKEPHP生成的SQL会报错
                    'RelReq.hckd_rel_order_number' => $hckd_rel_order_number,
                ),
                'fields' => array('Req.id', 'Req.ebs_order_number', 'Req.name'),
            ));
            if (!empty($hckd_reqs)) {
                foreach ($hckd_reqs as $hckd_req) {
                    $error_message = '#req_id:' . $hckd_req['Req']['id'] . ' <a href="/' . $g_BizName . '/Reqs/view/' . $hckd_req['Req']['id'] . '" target="_blank">' . $hckd_req['Req']['name'] . '</a>';
                    $error_messages['以下订单已经使用了 “' . $hckd_rel_order_number . '”创建了HCKD关联单号'][] = $error_message;
                }
            }

            // 只有前面没出现报错的情况,才允许进入保存
            if (empty($error_messages)) {
                foreach ($submit_datas as $idx => $submit_data) {
                    if (!isset($submit_data['req_id']) || empty($submit_data['req_id']) || !isset($submit_data['hckd_rel_order_number'])) {
                        $error_messages['参数异常'][] = '没找到提交的req_id 或 hckd_rel_order_number';
                        continue;
                    }

                    $req_id = $submit_data['req_id'];
                    $rel_req = $g_RelReq->findByReqId($req_id);
                    if (!empty($rel_req['RelReq'])) {
                        $old_hckd_rel_order_number = $rel_req['RelReq']['hckd_rel_order_number'];
                        $submit_data['id'] = $rel_req['RelReq']['id'];
                    } else {
                        $submit_data['id'] = null;
                    }

                    // 记录新旧 hckd_rel_order_number
                    $new_hckd_rel_order_number = $submit_data['hckd_rel_order_number'];
                    $old_hckd_rel_order_number = !empty($old_hckd_rel_order_number) ? $old_hckd_rel_order_number : '';

                    // 数据产生变化才更新数据库
                    if ($new_hckd_rel_order_number == $old_hckd_rel_order_number) {
                        continue;
                    }

                    // 记录日志
                    $log_message = '“HCKD关联单号”更新: ' . $old_hckd_rel_order_number . ' → ' . $new_hckd_rel_order_number;
                    try {
                        //保存数据到OCS
                        $ok = $g_RelReq->save($submit_data);
                        if (empty($ok)) {
                            throw new Exception("保存OCS数据失败", 1);
                        }
                        //保存数据到EBS
                        $update_result = $g_ERPWsClients->updateHckdRelOrderNumberReqId($req_id, $new_hckd_rel_order_number);
                        if (empty($update_result['success'])) {
                            throw new Exception($update_result['message'], 1);
                        }
                        $log_message.= '(' . $update_result['message'] . ')';
                    } catch (Exception $e) {
                        $log_message.= '(失败:' . $e->getMessage() . ')';
                        $error_messages['保存失败'][] = $log_message;
                    }
                    $g_Logs->write_log($this->name, $req_id, 'info', $log_message);
                }
            }

            // 返回错误提示
            if (!empty($error_messages)) {
                $error_htmls = array();
                foreach ($error_messages as $error_title => $errors) {
                    $error_html = '<b class="label label-important">' . $error_title . '</b>';
                    foreach ($errors as $error) {
                        $error_html.= '<li class="">' . $error . '</li>';
                    }
                    $error_htmls[] = $error_html;
                }
                $error_htmls = implode('<br/>', $error_htmls);
                throw new Exception($error_htmls, 1);
            }

            $result['success'] = true;
            $result['message'] = '保存成功';
            echo json_encode($result);
        } catch (Exception $e) {
            $result['message'] = $e->getMessage();
            echo json_encode($result);
        }
    }

    /**
     * 合同检查界面
     *
     * OCS-1742增加合同检查功能
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-06-14T19:26:22+0800
     *
     * @return   [type]                   [description]
     */
    function pop_contract_check() {
        global $g_BizId;
        global $g_BizName;
        global $g_Commons;
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_Enum = $g_Commons->GlobalModel('Enum');

        $this->set('title_for_layout', '合同检查');

        // 获取并验证url参数
        $all_params = $g_Commons->getUrlParams($this->params->params);
        $this->set('all_params', $all_params);

        if (!isset($all_params['P']['req_ids']) || empty($all_params['P']['req_ids'])) {
            $this->set('error_msg', '参数异常: #req_ids=');
            return;
        }

        // 判断是否有权限编辑合同检查状态
        $can_set_contract_check_info = $g_RolePrivs->get_priv_level($this->name, 'can_set_contract_check_info');
        $this->set('can_set_contract_check_info', $can_set_contract_check_info);
        if (!in_array($can_set_contract_check_info, array(OCS_PRIV_TYPE_RESP_DEPT, OCS_PRIV_TYPE_ALL))) {
            $this->set('error_msg', '您没有“合同检查专员”权限，暂时无法编辑，如有需要请联系运维配置相应的权限(标签：' . $this->name . '.can_set_contract_check_info，级别：' . $can_set_contract_check_info . ').');
            return;
        }

        // 获取已配置的订单类型
        $result_data = $this->Req->contractCheckOrderType();
        $result_data = !empty($result_data['datas']) ? $result_data['datas'] : array();
        $order_types = !empty($result_data['contract_check_order_types']) ? $result_data['contract_check_order_types'] : array();
        $this->set('order_types', $order_types);
        if (empty($order_types)) {
            $this->set('error_msg', '请先联系系统运维人员，配置需要检查合同的订单类型.');
            return;
        }

        // 根据订单ID查询对应的订单并格式化
        $req_ids = explode(',', $all_params['P']['req_ids']);
        $reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'rel_reqs',
                    'alias' => 'RelReq',
                    'type' => 'left',
                    'conditions' => 'RelReq.req_id = Req.id',
                ),
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'LEFT',
                    'conditions' => array('Req.model_def_id' => Contract, 'Req.rel_obj_id = Contract.id'),
                ),
                array(
                    'table' => 'types',
                    'alias' => 'Type',
                    'type' => 'LEFT',
                    'conditions' => array('Type.id = Contract.type_id'),
                ),
            ),
            'conditions' => array('Req.id' => $req_ids),
            'fields' => array(
                'Req.id', 'Req.name', 'Req.ebs_order_number',
                'RelReq.contract_check_status', 'RelReq.contract_check_remark', 'RelReq.contract_check_reason',
                'Contract.type_id', 'Contract.contract_no', 'Type.name',
            ),
        ));

        // 订单类型
        $not_allow_order_types = array();
        foreach ($reqs as $key => $req) {
            if (!in_array($req['Contract']['type_id'], $order_types)) {
                $not_allow_order_types[$req['Contract']['type_id']] = $req['Type']['name'];
            }
        }
        if (!empty($not_allow_order_types)) {
            $this->set('error_msg', '所选的订单包含以下订单类型不需要进行合同检查：' . implode(', ', $not_allow_order_types) . '，请确认.');
            return;
        }

        $reqs = $g_AttrDics->formatAllModelData($reqs);
        $this->set('reqs', $reqs);

        // 根据订单ID获取相同合同号的订单信息
        $contract_reqs = $this->Req->getContractReqsByReqId($req_ids);
        $this->set('contract_reqs', $contract_reqs);

        // 获取当前订单对应的合同附件
        $contract_attachments = $this->Req->getReqContractAttachmentsByReqId($req_ids);
        $this->set('contract_attachments', $contract_attachments);

        // 审核选项按钮
        $contract_check_status = array(
            array('value' => OCS_REL_REQ_CONTRACT_CHECK_STATUS_PASSED, 'label' => '通过', 'btn-icon' => 'btn-success', 'icon' => 'icon-ok'),
            array('value' => OCS_REL_REQ_CONTRACT_CHECK_STATUS_NOT_PASSED, 'label' => '不通过', 'btn-icon' => 'btn-danger', 'icon' => 'icon-remove'),
        );
        $this->set('contract_check_status', $contract_check_status);

        // 打回原因
        $contract_check_reasons = $g_Enum->getEnumListByDictName('RelReq.contract_check_reason');
        $this->set('contract_check_reasons', $contract_check_reasons);
    }

    /**
     * 保存合同检测信息
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-06-15T09:32:48+0800
     *
     * @return   [type]                   [description]
     */
    function save_contract_check_json() {
        global $g_BizId;
        global $g_BizName;
        global $g_Commons;
        global $g_UserId;
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');

        $this->autoRender = false;
        $result = $g_Commons->initResult();

        try {
            if (!$this->request->is('post')) {
                throw new Exception('操作异常', 1);
            } elseif (empty($this->request->data)) {
                throw new Exception('提交的数据为空', 1);
            }

            $submit_data = $this->request->data;
            if (!isset($submit_data['req_id']) || empty($submit_data['req_id'])) {
                throw new Exception('没找到提交的req_id', 1);
            }

            // 检测合同是否已经审核
            $req_id = $submit_data['req_id'];
            $reqs = $this->Req->find('all', array(
                'joins' => array(
                     array(
                        'table' => 'contracts',
                        'alias' => 'Contract',
                        'type' => 'INNER',
                        'conditions' => array('Req.model_def_id' => Contract, 'Req.rel_obj_id = Contract.id'),
                     ),
                     array(
                        'table' => 'contract_rel_tmpls',
                        'alias' => 'ContractRelTmpl',
                        'type' => 'LEFT',
                        'conditions' => array('ContractRelTmpl.contract_no = Contract.contract_no'),
                     ),
                ),
                'conditions' => array('Req.id' => $req_id),
                'fields' => array('Req.id', 'Req.name', 'Contract.contract_no', 'ContractRelTmpl.contract_no', 'ContractRelTmpl.status'),
            ));
            $reqs = $g_AttrDics->formatAllModelData($reqs);
            if (empty($reqs)) {
                throw new Exception('没找到对应的订单信息', 1);
            }

            $req = end($reqs);
            if (empty($req['ContractRelTmpl']['contract_no'])) {
                throw new Exception('该合同还没分派合同', 1);
            }
            $contract_no = $req['ContractRelTmpl']['contract_no'];

            if (!isset($req['ContractRelTmpl']['status']['value'])) {
                throw new Exception('未知审核状态', 1);
            } elseif (OCS_CONTRACT_REL_TMPL_STATUS_DONE != $req['ContractRelTmpl']['status']['value']) {
                throw new Exception('合同#' . $contract_no . ' 处于 “' . $req['ContractRelTmpl']['status']['label'] . '”', 1);
            }

            // 检测合同是否已经存在合同附件
            $contract_attachments = $this->Req->getReqContractAttachmentsByReqId($req_id);
            if (!isset($contract_attachments[$req_id]) || empty($contract_attachments[$req_id])) {
                throw new Exception('合同#' . $contract_no . ', 没有上传合同附件或合同附件为失效状态', 1);
            }

            // 保存数据
            $submit_data['contract_check_user_id'] = $g_UserId;
            $save_result = $this->Req->setContractCheckDatas($req_id, $submit_data);
            if (empty($save_result['success'])) {
                throw new Exception($save_result['message'], 1);
            }

            $result['success'] = true;
            $result['message'] = $save_result['message'];
            echo json_encode($result);
        } catch (Exception $e) {

            $log_message = $e->getMessage() . '，请确认后再使用合同检查功能。';

            if (!empty($req_id)) {
                $g_Logs->write_log($this->name, $req_id, 'info', $log_message);
            }

            $result['message'] = $log_message;
            echo json_encode($result);
        }
    }

    /**
     * 保存合同报价单差异数据审核信息
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-06-19T11:16:34+0800
     *
     * @return   [type]                   [description]
     */
    function save_diff_req_rel_quote_audit_json() {
        global $g_BizId;
        global $g_BizName;
        global $g_Commons;
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_RelReq = $g_Commons->GlobalModel('RelReq');

        $this->autoRender = false;
        $result = $g_Commons->initResult();

        try {
            if (!$this->request->is('post')) {
                throw new Exception('操作异常', 1);
            } elseif (empty($this->request->data)) {
                throw new Exception('提交的数据为空', 1);
            }

            $submit_data = $this->request->data;
            if (!isset($submit_data['req_id']) || empty($submit_data['req_id'])) {
                throw new Exception('没找到提交的req_id', 1);
            }

            $req_id = $submit_data['req_id'];
            // 比较数据是否产生变化,如果没变化则不保存,否则每次操作都保持,会造成大量操作日志
            $log_datas = $g_RelReq->getChangeLogByReqId($req_id, $submit_data);
            if (!empty($submit_data) && !empty($log_datas)) {
                $g_RelReq->saveRelFields($req_id, $submit_data);
                $log_message = '报价单与销售订单对比审核变更 #' . $req_id . ' <br/>' . implode('<br/>', $log_datas);
                $g_Logs->write_log('Reqs', $req_id, 'info', $log_message);
            }

            $result['success'] = true;
            $result['message'] = '保存成功';
            $result['datas'] = $submit_data;
            echo json_encode($result);
        } catch (Exception $e) {

            $log_message = '报价单与销售订单对比审核变更失败 #' . $req_id . '，' . $e->getMessage();

            if (!empty($req_id)) {
                $g_Logs->write_log($this->name, $req_id, 'info', $log_message);
            }

            $result['message'] = $log_message;
            echo json_encode($result);
        }
    }

    /**
     * 定时执行，同步设置所有进行中订单对应同产品的可用数量、以及同产品型号的可用数量（大于2个月）
     *
     * @Author   lishirong
     *
     * @DateTime 2016-07-04T11:35:30+0800
     *
     * @return   [type]                   [description]
     */
    function sync_product_available_qty($req_ids = null) {
        return; //已改成另外实现方式,列表界面异步实时取数 modify by shavene 2017-03-22
        set_time_limit(0);
        global $g_BizId;
        global $g_Commons;
        $this->autoRender = false;
        $g_RelReq = $g_Commons->GlobalModel('RelReq');

        $conds = array(
            'Req.biz_id' => OCS_BIZ_TYPE_TV,
            'Req.model_def_id' => Contract,
            'Req.dest_type' => 'EBS',
            'Req.parent_id' => 0,
            'Req.req_type NOT ' => $this->Req->getDefMtlTypes(), //排除物料订单
            'Req.close_status NOT ' => array(
                OCS_ORDER_CLOSE_STATUS_CLOSE,
                OCS_ORDER_CLOSE_STATUS_CANCEL,
            ),
        );
        if (!empty($req_ids)) {
            $conds['Req.id'] = explode(',', $req_ids);
        }

        $reqs = $this->Req->find('all', array(
            'conditions' => $conds,
            'fields' => array(
                'Req.id',
            )
        ));
        if (empty($reqs)) {
            return;
        }

        foreach ($reqs as $req) {
            $result = $this->Req->getProductStockInfoByReqId($req['Req']['id']);
            if (empty($result)) {
                continue;
            }
            $product_available_qty = isset($result['product_available_qty']) ? $result['product_available_qty'] : 0;
            $prod_model_available_qty = isset($result['prod_model_available_qty']) ? $result['prod_model_available_qty'] : 0;

            $rel_fields = array();
            $rel_fields['product_available_qty'] = $product_available_qty;
            $rel_fields['prod_model_available_qty'] = $prod_model_available_qty;
            $g_RelReq->saveRelFields($req['Req']['id'], $rel_fields);
        }
    }

    /**
     * 交接负责内勤、负责销售
     *
     * @Author   lishirong
     *
     * @DateTime 2016-07-06T09:49:44+0800
     *
     * @param    [type]                   $req_ids [订单req_id]
     * @param    [type]                   $type    [交接类型]
     *
     * @return   [type]                            [description]
     */
    function pop_take_over_charge_user($req_ids = null, $type = OCS_ACCOUNT_REL_USER_TYPE_OWNER) {
        global $g_Commons;
        global $g_UserId;
        $g_User = $g_Commons->GlobalModel('User');
        $g_EbsDbo = $g_Commons->GlobalModel('EbsDbo');
        $g_OrderCancel = $g_Commons->GlobalModel('OrderCancel');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $can_modify_charge_user = $g_RolePrivs->get_priv_level($this->name, 'can_modify_charge_user');
        $this->Req->recursive = -1;
        if (!$can_modify_charge_user) {
            $this->set('error_msg', '抱歉，你无权进行此操作，请联系系统管理员。');
            return;
        }

        $this->set('title_for_layout', '交接订单负责人');
        if (empty($req_ids)) {
            $this->set('error_msg', '参数错误，请联系管理员处理');
            return;
        }
        $req_ids = explode(',', $req_ids);
        $this->set('req_ids', $req_ids);
        $this->set('type', $type);

        $reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                )
            ),
            'conditions' => array(
                'Req.id' => $req_ids,
                'Req.model_def_id' => Contract,
                'Req.dest_type' => 'EBS',
                'Req.parent_id' => 0,
            ),
            'fields' => array(
                'Req.id',
                'Req.ebs_order_number',
                'Req.owner_user_id',
                'Req.sales_user_id',
                'Contract.type_id',
            )
        ));
        if (empty($reqs)) {
            $this->set('error_msg', '查询数据为空');
            return;
        }

        //交接类型
        $switch_type_list = array(
            OCS_ACCOUNT_REL_USER_TYPE_OWNER => '负责内勤',
            OCS_ACCOUNT_REL_USER_TYPE_SALES => '负责销售',
        );
        $this->set('switch_type_list', $switch_type_list);

        switch ($type) {
            case OCS_ACCOUNT_REL_USER_TYPE_OWNER:
                $user_list = $g_User->getOwnerUserList();
            break;
            case OCS_ACCOUNT_REL_USER_TYPE_SALES:
                $user_list = $g_User->getSalesUserList();
            break;
            default:
                $user_list = array();
            break;
        }
        $this->set('user_list', $user_list);

        //submit
        $this->set('save_complete', 0);
        if ($this->request->is('post') && !empty($this->request->data)) {
            $submit_data = $this->request->data;
            extract($submit_data);
            if (empty($switch_type)) {
                $this->set('warning_msg', '请选择交接类型');
                return;
            }
            if (empty($charge_user)) {
                $this->set('warning_msg', '请选择交接用户');
                return;
            }

            switch ($switch_type) {
                case OCS_ACCOUNT_REL_USER_TYPE_OWNER: //交接内勤
                    //校验内勤是否可用 在EBS
                    $po_result = $this->Req->checkOwnerUserInEbs($charge_user);
                    if (!$po_result['success']) {
                        $this->set('warning_msg', $po_result['message']);
                        return;
                    }
                    foreach ($reqs as $req) {
                        if ($req['Req']['owner_user_id'] != $charge_user) {
                            $old_user_id = $req['Req']['owner_user_id'];
                            $old_user_name = $g_User->findMainField($old_user_id);
                            $new_user_name = $g_User->findMainField($charge_user);
                            $req['Req']['owner_user_id'] = $charge_user;
                            $req['Req']['update_user_id'] = $g_UserId;
                            $req['Req']['update_time'] = date('Y-m-d H:i:s');
                            $this->Req->save($req['Req']);

                            $g_Logs->write_log('Reqs', $req['Req']['id'], 'info', '交接内勤：' . $old_user_name . '=>' . $new_user_name);

                            //同步更新EBS
                            if (!empty($req['Req']['ebs_order_number'])) {
                                $field_values = array(
                                    'ATTRIBUTE2' => $new_user_name,
                                );
                                $g_EbsDbo->update('apps.oe_order_headers_all',
                                    $field_values,
                                    array(
                                        'ORDER_NUMBER' => $req['Req']['ebs_order_number']
                                    )
                                );
                            }

                            //同步更新取消订单审核人
                            $g_OrderCancel->updateAuditStageInfo($req['Req']['id'], OCS_ORDER_CANCEL_AUDIT_STAGE_DEAL, $old_user_id, $req['Req']['owner_user_id']);
                        }
                    }
                break;
                case OCS_ACCOUNT_REL_USER_TYPE_SALES: //交接销售
                    $type_rel_org_ids = array();
                    foreach ($reqs as $req) {
                        if ($req['Req']['sales_user_id'] != $charge_user) {
                            if (isset($type_rel_org_ids[$req['Contract']['type_id']])) {
                                $org_id = $type_rel_org_ids[$req['Contract']['type_id']];
                            } else {
                                $org_id = $this->Req->getOrgIdByOrderTypeId($req['Contract']['type_id']);
                                $type_rel_org_ids[$req['Contract']['type_id']] = $org_id;
                            }
                            //校验负责销售是否可用 在EBS
                            $po_result = $this->Req->checkSalesUserInEbs($charge_user, $org_id);
                            if (!$po_result['success']) {
                                $this->set('warning_msg', $po_result['message']);
                                return;
                            }
                            $EMAIL = $po_result['datas']['EMAIL'];
                            $SALESREP_ID = $po_result['datas']['SALESREP_ID'];

                            $old_user_id = $req['Req']['sales_user_id'];
                            $old_user_name = $g_User->findMainField($old_user_id);
                            $new_user_name = $g_User->findMainField($charge_user);
                            $req['Req']['sales_user_id'] = $charge_user;
                            $req['Req']['update_user_id'] = $g_UserId;
                            $req['Req']['update_time'] = date('Y-m-d H:i:s');
                            $this->Req->save($req['Req']);

                            $g_Logs->write_log('Reqs', $req['Req']['id'], 'info', '交接销售：' . $old_user_name . '=>' . $new_user_name);

                            //同步更新EBS
                            if (!empty($req['Req']['ebs_order_number'])) {
                                $field_values = array(
                                    'SALESREP_ID' => $SALESREP_ID,
                                );
                                $g_EbsDbo->update('apps.oe_order_headers_all',
                                    $field_values,
                                    array(
                                        'ORDER_NUMBER' => $req['Req']['ebs_order_number']
                                    )
                                );
                            }

                            //同步更新取消订单审核人
                            $g_OrderCancel->updateAuditStageInfo($req['Req']['id'], OCS_ORDER_CANCEL_AUDIT_STAGE_DEAL, $old_user_id, $req['Req']['sales_user_id']);
                        }
                    }
                break;
                default:
                    $this->set('warning_msg', '该交接类型未定义');
                    return;
                break;
            }
            $this->set('save_complete', 1);
        }
    }

    /**
     * 定时请求刷新订单的承诺日期
     * 系统做定时请求，每天凌晨自动回写OCS订单的承诺日期，并同步至EBS
     *
     * 取数条件：
     *    1、TV事业部,已同步到EBS
     *    2、订单类别为研发订单、正常订单
     *    3、订单未开立工单、是否出库存为否、排除取消中、已取消、已关闭的订单
     * 修改的逻辑：
     *    1、研发订单：如果承诺日期小于等于当天+1天，则自动更新订单的承诺日期=系统当前日期+1；
     *    2、正常订单：如果承诺日期小于等于当天+3天，则自动更新订单的承诺日期=系统当前日期+3；
     *    3、更新订单的承诺日期之后，需要同步修改软件任务的计划完成日期=订单的承诺日期-1天；
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-08-19T11:23:45+0800
     *
     * @param    [type]          $req_ids [指定需要更新的订单ID]
     *
     * @return   [type]                   [description]
     */
    function sync_mf_promise_dates_json($req_ids = null) {
        $this->autoRender = false;
        return;
        $result = $this->Req->upDatePromiseDateAndRelActions($req_ids, '执行定时刷新订单的承诺日期请求');

        return !empty($result['success']) ? $result['success'] : false;
    }

    /**
     * 唛头信息配置界面
     *
     * OCS-2119 唛头模板做成可配置
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-10-29T09:48:40+0800
     *
     * @return   [type]                   [description]
     */
    function pop_shipping_mark_config() {
        global $g_UserId;
        global $g_Commons;
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_ReqTmplSet = $g_Commons->GlobalModel('ReqTmplSet');
        $g_ReqTmplField = $g_Commons->GlobalModel('ReqTmplField');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_ErpMfInfos = $g_Commons->GlobalController('ErpMfInfos');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_ObjRelObj->recursive = -1;
        $this->Req->recursive = -1;

        // 获取参数
        $all_params = $g_Commons->getUrlParams($this->params->params);
        if (empty($all_params['P']['req_ids'])) {
            throw new Exception('订单req_ids异常.', 1);
        }
        $this->set('url_querys', $this->params->query);

        // 获取当前所选唛头模板,如果没有选择则默认为通用模板
        $common_alias = $g_ReqTmplSet->getCommonTmplAlias();//通用模板
        $sel_group_key = isset($all_params['P']['tmpl']) ? $all_params['P']['tmpl'] : current($common_alias);
        $req_ids = !empty($all_params['P']['req_ids']) ? explode(',', $all_params['P']['req_ids']) : array();
        $all_params['P']['tmpl'] = $sel_group_key;//记录参数,提供给界面使用
        $this->set('sel_group_key', $sel_group_key);

        // 当前的url 参数
        $params_base64 = base64_encode(json_encode($all_params));
        $this->set('params_base64', $params_base64);

        // 获取唛头信息
        $mark_result = $this->{$this->modelClass}->getShippingMarkDatas($req_ids);
        if (true != $mark_result['success']) {
            throw new Exception($mark_result['message'], 1);
        }
        $reqs = !empty($mark_result['datas']) ? $mark_result['datas'] : array();

        // 读取用户通过数据模板导入的数据，并替换原值
        $tmpl_data_redis_key = 'mark_tmpl_data_' . md5($params_base64) . '_' . $g_UserId;
        $cache_tmpl_datas = $g_Commons->getRedisCache($tmpl_data_redis_key);
        $cache_tmpl_datas = json_decode($cache_tmpl_datas, true);
        if (!empty($cache_tmpl_datas)) {
            foreach ($reqs as $req_index => $req) {
                if (empty($cache_tmpl_datas[$req['Req']['id']])) {
                    continue;
                }
                $cache_tmpl_data = $cache_tmpl_datas[$req['Req']['id']];
                foreach ($cache_tmpl_data as $data_model => $data_tmpl_items) {
                    if (!array_key_exists($data_model, $req)) {
                        continue;
                    }
                    foreach ($data_tmpl_items as $data_tmpl_field => $data_tmpl_item) {
                        if (!array_key_exists('new_value', $data_tmpl_item)) {
                            continue;
                        }
                        $req[$data_model][$data_tmpl_field] = $data_tmpl_item['new_value'];
                    }
                }
                $reqs[$req_index] = $req;
            }
            $g_Commons->clearRedisCache($tmpl_data_redis_key);
        }

        // 记录当前所选数据包含的客户ID
        $tmpl_account_ids = array();
        foreach ($reqs as $req_index => $req) {
            $tmpl_account_ids[] = $req['Req']['account_id']['value'];
        }

        // 显示订单唛头数据
        $this->set('reqs', $reqs);

        // 获取唛头模板(含组合模板)
        $mark_tmpls = $g_ReqTmplSet->getSelActiveTmplsHasGroups($tmpl_account_ids);
        $this->set('mark_tmpls', $mark_tmpls);

        // 获取当前选中的组合模板信息
        $tmpl_aliases = array();
        foreach ($mark_tmpls as $mark_tmpl_key => $mark_tmpl) {
            if (false !== strpos($mark_tmpl_key, $sel_group_key)) {
                $tmpl_aliases = !empty($mark_tmpl['alias']) ? $mark_tmpl['alias'] : array();
                break;
            }
        }

        // 获取模板对应的字段
        $mark_tmpl_fields = $g_ReqTmplField->getActiveTmplFieldsByAlias($tmpl_aliases);
        $this->set('mark_tmpl_fields', $mark_tmpl_fields);

        // 物品名称
        $inv_types = $g_Enums->getEnumListByDictName('ObjRelObj.inv_type');
        $this->set('inv_types', $inv_types);
    }

    /**
     * 保存用户维护的唛头信息
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-10-31T20:20:38+0800
     *
     * @return   [type]                   [description]
     */
    function save_shipping_mark_config_json() {
        global $g_Commons;
        $g_ReqTmplSet = $g_Commons->GlobalModel('ReqTmplSet');
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_Logs = $g_Commons->GlobalController('Logs');
        $g_Logs->Log->recursive = -1;
        $this->autoRender = false;

        $result = $g_Commons->initResult();

        // 如果有设置以下字段,并选中为on,则自动设置该字段的值
        $on_check_fields = array(
            'Contract.account_mno',
            'Contract.account_cno',
            'SwAttr.SW_Panel',
            'Product.HW_Power_Backlight',
        );

        try {
            if (!$this->request->is('post') || empty($this->request->data)) {
                throw new Exception('操作异常', 1);
            }

            $submit_datas = $this->request->data;
            foreach ($submit_datas as $idx => $submit_data) {
                if (empty($submit_data['req_id']) || !is_numeric($submit_data['req_id'])) {
                    throw new Exception('订单ID必须为不为空的数字.(' . json_encode($submit_data) . ')', 1);
                } elseif (empty($submit_data['DiyData'])) {
                    throw new Exception('缺少用户定义的数据.(' . json_encode($submit_data) . ')', 1);
                } elseif (empty($submit_data['tmpl'])) {
                    throw new Exception('未知模板.(' . json_encode($submit_data) . ')', 1);
                }
                $tmpl = $submit_data['tmpl'];//当前模板
                $req_id = $submit_data['req_id'];//对应的订单ID
                $diy_data = $submit_data['DiyData'];//用户提交的自定义数据集

                // 清理多余空格
                foreach ($diy_data as $diy_data_field => $diy_data_value) {
                    $diy_data[$diy_data_field] = trim($diy_data_value);
                }

                $meta_values = array();
                $meta_values['prod_tag'] = isset($diy_data['prod_tag']) ? $diy_data['prod_tag'] : '';
                $meta_values['release_quantity'] = isset($diy_data['release_quantity']) ? $diy_data['release_quantity'] : '';
                $meta_values['remark'] = isset($diy_data['remark']) ? $diy_data['remark'] : '';
                // 合并表单提交的数据
                $meta_values = array_merge($meta_values, $diy_data);

                // 如果字段是checkbox类型,那么需要设置对应的值为字段本身
                foreach ($on_check_fields as $on_check_field) {
                    if (!isset($diy_data[$on_check_field]) || 'on' != $diy_data[$on_check_field]) {
                        continue;
                    }
                    $meta_values[$on_check_field] = $on_check_field;
                }

                // 订单关联对象的查询条件
                // 注意,由于umc唛头每次都会新增,因此这里需要取最新的关联数据
                $obj_rel_obj = $this->Req->getShippingMarkRelData($req_id);
                $obj_rel_obj = !empty($obj_rel_obj['ObjRelObj']) ? $obj_rel_obj['ObjRelObj'] : array();

                // 保存数据
                // UMC唛头特殊处理,都是新建 或 原数据不存在,也是新建
                $is_umc_group = $g_ReqTmplSet->isUmcGroup($tmpl);
                if (!empty($is_umc_group) || empty($obj_rel_obj)) {
                    $g_ObjRelObj->create();
                    $obj_rel_obj = $this->Req->getShippingMarkRelConds($req_id);//新建时需要的基础字段
                }

                // 以替换的方式保存
                $old_meta_value = !empty($obj_rel_obj['meta_value']) ? json_decode($obj_rel_obj['meta_value'], true) : array();
                $new_meta_value = array_merge($old_meta_value, $meta_values);

                // 将数据转为json保存
                $obj_rel_obj['meta_value'] = json_encode($new_meta_value);
                $g_ObjRelObj->save($obj_rel_obj);

                // 整理并更新日志
                $log_contents = array();
                foreach ($meta_values as $meta_field => $meta_value) {
                    $log_contents[] = $meta_field . '=>' . $meta_value;
                }
                $log_contents_string = implode(';<br/>', $log_contents);
                $g_Logs->write_log('ObjRelObjs', $g_ObjRelObj->id, 'info', $log_contents_string);

                // 触发发送邮件通知生管、工厂
                $this->Req->checkWipFieldAndNotify(null, $req_id);
            }

            $result['success'] = true;
            $result['message'] = '保存成功';
        } catch (Exception $e) {
            $result['message'] = $e->getMessage();
        }

        echo json_encode($result);
    }

    /**
     * 唛头模板下载功能
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-11-02T11:32:05+0800
     *
     * @param    [type]                   $encry_order_number     [description]
     * @param    [type]                   $encry_req_id           [description]
     * @param    [type]                   $encry_print_tmpl_alias [description]
     * @param    [type]                   $encry_extend_key       [description]
     * @param    string                   $action                 [description]
     * @param    [type]                   $batch_no               [description]
     *
     * @return   [type]                                           [description]
     */
    function pub_shipping_mark_download($encry_order_number = null, $encry_req_id = null, $encry_print_tmpl_alias = null, $encry_extend_key = null, $action = 'without_download', $batch_no = null) {
        global $g_BizId;
        global $g_Commons;
        $this->autoRender = false;
        $g_Excels = $g_Commons->GlobalController('Excels');
        $g_PrintTmpl = $g_Commons->GlobalModel('PrintTmpl');
        $g_AttrDics = $g_Commons->GlobalController('AttrDics');
        $g_ErpMfInfos = $g_Commons->GlobalController('ErpMfInfos');
        $g_WipRelObj = $g_Commons->GlobalModel('WipRelObj');
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_ProdModelDetails = $g_Commons->GlobalController('ProdModelDetails');
        $g_Accounts = $g_Commons->GlobalController('Accounts');
        $g_Enums = $g_Commons->GlobalController('Enums');
        $g_Products = $g_Commons->GlobalController('Products');
        $g_ProdAttrs = $g_Commons->GlobalController('ProdAttrs');
        $g_Accounts->Account->recursive = -1;
        $g_ProdModelDetails->ProdModelDetail->recursive = -1;
        $this->Req->recursive = -1;
        $g_ReqTmplSet = $g_Commons->GlobalModel('ReqTmplSet');

        $logics = array(
            '普通模板',
            '   下载或发放文件名：{生产批次/发放批次}-{订单数量}-唛头',
            'UMC唛头',
            '    UMC必须维护“货物类型”',
            '       小唛头,根据“货物类型”下载不同背景颜色的唛头模板',
            '        -> 生产备品-绿',
            '        -> 售后备品-绿',
            '        -> 未完订单-黄',
            '        -> 其他类型-白',
            '       大唛头,根据“货物类型”下载不同选项的唛头模板',
            '        -> 生产备品-生产备品',
            '        -> 售后备品-售后备品',
            '        -> 未完订单-未完订单',
            '        -> 其他类型-其他类型',
            '    下载或发放文件名',
            '       小唛头,{生产批次/发放批次}-{订单数量}-{货物类型}-小{颜色}唛头[(高频头)|-S2]',
            '       大唛头,{生产批次/发放批次}-{订单数量}-{货物类型}-大白唛头[(高频头)|-S2]',
        );
        $g_Commons->setFunctionLogic(__FUNCTION__, '唛头模板下载功能', $logics);
        /***************************/

        $req_id = $g_Commons->decrypt($encry_req_id);
        $print_tmpl_alias = $g_Commons->decrypt($encry_print_tmpl_alias);
        $extend_key = $g_Commons->decrypt($encry_extend_key);

        try {
            // 获取模板
            $print_tmpl = $g_PrintTmpl->getPrintTmplByAlias(Req, $print_tmpl_alias);
            if (empty($print_tmpl)) {
                throw new Exception('未找到模板' . $print_tmpl_alias, 1);
            }
            $print_tmpl_name = !empty($print_tmpl['PrintTmpl']['name']) ? $print_tmpl['PrintTmpl']['name'] : '';
            // 是否UMC唛头
            $umc_mark_type = $g_ReqTmplSet->umcMarkTmplType($print_tmpl_alias);

            // 是否UMC唛头(旧版)
            $umc_mark_type_old = $g_ReqTmplSet->umcMarkTmplTypeOld($print_tmpl_alias);

            // 获取模板配置
            $tmpl_set = $g_ReqTmplSet->findByAlias($print_tmpl_alias);
            if (empty($tmpl_set['ReqTmplSet'])) {
                throw new Exception('未找到模板配置' . $print_tmpl_alias, 1);
            }

            // 获取唛头数据
            $mark_result = $this->Req->getShippingMarkDatas($req_id);
            if (true != $mark_result['success']) {
                throw new Exception($mark_result['message'], 1);
            }
            $req = !empty($mark_result['datas'][$req_id]) ? $mark_result['datas'][$req_id] : array();

            // UMC唛头特殊处理
            // 如果有指定关联的对象ID,获取直接获取关联的对象数据
            if (!empty($umc_mark_type) || !empty($umc_mark_type_old)) {
                if ($extend_key > 0) {
                    $obj_rel_obj = $g_ObjRelObj->findById($extend_key);
                } else {
                    $obj_rel_obj = $g_ObjRelObj->getTopOneRelObjData(Req, $req['Req']['id'], OCS_OBJ_REL_OBJ_TYPE_MARK, 'Req.shipping_mark');
                }
                $req['ObjRelObj'] = !empty($obj_rel_obj['ObjRelObj']) ? $obj_rel_obj['ObjRelObj'] : array();
            }
            // 对关联信息的通用处理
            if (!empty($req['ObjRelObj']) && !empty($req['ObjRelObj']['meta_value']) && !is_array($req['ObjRelObj']['meta_value'])) {
                $req['ObjRelObj']['meta_value'] = json_decode($req['ObjRelObj']['meta_value'], true);
            }

            // 货物类型处理
            $inv_type = !empty($req['ObjRelObj']['meta_value']['inv_type']) ? $req['ObjRelObj']['meta_value']['inv_type'] : null;
            $req['ObjRelObj']['meta_value']['inv_type'] = array();
            $req['ObjRelObj']['meta_value']['inv_type']['value'] = $inv_type;
            $req['ObjRelObj']['meta_value']['inv_type']['label'] = $g_Enums->getLabelByDictNameAndValue('ObjRelObj.inv_type', $inv_type);

            // 如果通过url指定批号,那么获取指定批号的信息
            if (!empty($batch_no)) {
                $erp_mf_infos = $g_ErpMfInfos->ErpMfInfo->getErpMfInfoByReqIdAndLotNumber($req_id, $batch_no);
                $erp_mf_info = !empty($req['ErpMfInfo']) ? $req['ErpMfInfo'] : array();
                $rel_mf_info = $this->Req->getShippingMarkRelMfInfo($erp_mf_infos);
                $req['ErpMfInfo'] = array_merge($erp_mf_info, $rel_mf_info);
            }

            // 如果订单未关联批号，则使用维护的批号
            if (empty($req['ErpMfInfo']['erp_batch_nos']) && !empty($req['ObjRelObj']['meta_value']['release_batch_no'])) {
                $req['ErpMfInfo']['erp_batch_nos'] = $req['ObjRelObj']['meta_value']['release_batch_no'];
            }

            // OCS-431 歌尔唛头特殊处理 add by ziying 2015-9-9
            // 特殊处理金品唛头 add by ziying 2015-12-8
            switch ($print_tmpl_alias) {
                case 'Goertek_Mark':
                    $req['Contract']['account_mno_and_bno'] = $req['Contract']['account_mno'] . '-' . $req['Contract']['account_bno'];
                    break;
                case 'JP_Special_Mark':
                    $req['Product']['prod_model_id']['label'] = 'Mainboard ' . $req['Product']['prod_model_id']['label'];
                    break;
            }

            // 默认文件名
            $file_name = $req['ErpMfInfo']['erp_batch_nos'] . '-' . $req['Req']['quantity'] . '-' . '唛头';
            // // 解析用户定义的文件名
            // if (!empty($print_tmpl['PrintTmpl']['output_file_name'])) {
            //     $output_file_name = $print_tmpl['PrintTmpl']['output_file_name'];
            //     $g_Excels = $g_Commons->GlobalController('Excels');
            //     $output_file_name = $g_Excels->matchDataField("/##{(.*?)}/", $output_file_name, $req);
            //     if (!empty($output_file_name)) {
            //         $file_name = $output_file_name;
            //     }
            // }


            // 获取批次
            $erp_batch_nos = !empty($req['ErpMfInfo']['erp_batch_nos']) ? $req['ErpMfInfo']['erp_batch_nos'] : '';
            if (isset($req['ObjRelObj']['meta_value']['release_batch_no']) && !empty($req['ObjRelObj']['meta_value']['release_batch_no'])) {
                $erp_batch_nos = $req['ObjRelObj']['meta_value']['release_batch_no'];
            }
            // 发放数量
            $release_quantity = !empty($req['ObjRelObj']['meta_value']['release_quantity']) ? $req['ObjRelObj']['meta_value']['release_quantity'] : $req['Req']['quantity'];
            $inv_type_label = !empty($req['ObjRelObj']['meta_value']['inv_type']['label']) ? $req['ObjRelObj']['meta_value']['inv_type']['label'] : '';

            // 获取发放信息
            $params = array(
                'inv_type' => $inv_type,
                'inv_type_label' => $inv_type_label,
                'print_tmpl_alias' => $print_tmpl_alias,
                'erp_batch_nos' => $erp_batch_nos,
                'release_quantity' => $release_quantity,
            );
            $get_umc_result =$this->{$this->modelClass}->getUmcShippingMarkSets($params);
            if (empty($get_umc_result['success'])) {
                throw new Exception($get_umc_result['message'], 1);
            } elseif (!empty($get_umc_result['datas'])) {

                $umc_mark_type_new = !empty($get_umc_result['datas']['umc_mark_type_new']) ? $get_umc_result['datas']['umc_mark_type_new'] : '';
                $umc_mark_type_old = !empty($get_umc_result['datas']['umc_mark_type_old']) ? $get_umc_result['datas']['umc_mark_type_old'] : '';

                // 根据不同的类型,选择不同的颜色
                $umc_tmpl_set = !empty($get_umc_result['datas']['umc_tmpl_set']) ? $get_umc_result['datas']['umc_tmpl_set'] : array();

                // 华数唛头文件名特殊处理(新版)
                if (!empty($umc_mark_type_new)) {
                    if (isset($req['ObjRelObj']) && $req['ObjRelObj']['id'] > 0) {
                        $req['render_configs'] = !empty($umc_tmpl_set['render_configs']) ? $umc_tmpl_set['render_configs'] : array();
                    }
                }

                // 华数唛头文件名特殊处理(旧版)
                // 根据当前选择的模板及货物类型,重定向到相应颜色的模板
                if (!empty($umc_mark_type_old)) {
                    // 如果是S2高频头唛头,那么需要对关联字段特殊处理
                    $is_s2_mark = !empty($get_umc_result['datas']['is_s2_mark']) ? $get_umc_result['datas']['is_s2_mark'] : array();
                    if ($is_s2_mark) {
                        $req['ObjRelObj']['meta_value']['tunner_account_mno'] = $req['ObjRelObj']['meta_value']['tunner_account_mno_s2'];
                        $req['ObjRelObj']['meta_value']['big_account_prod_model_tunner'] = $req['ObjRelObj']['meta_value']['big_account_prod_model_tunner_s2'];
                        $req['ObjRelObj']['meta_value']['part_name_tunner'] = $req['ObjRelObj']['meta_value']['part_name_tunner_s2'];
                    }
                    $print_tmpl = !empty($get_umc_result['datas']['print_tmpl']) ? $get_umc_result['datas']['print_tmpl'] : array();
                }

                // 获取新的文件名
                if (!empty($get_umc_result['datas']['file_name'])) {
                    $file_name = $get_umc_result['datas']['file_name'];
                }

                // 获取工单信息并替换特定字段(延用原逻辑)
                $wip_rel_obj = $g_WipRelObj->getWipRelData($req_id, OCS_WIP_REL_OBJ_TYPE_MARK);
                if (!empty($wip_rel_obj['WipRelObj']['release_time']) && strtotime($wip_rel_obj['WipRelObj']['release_time']) < strtotime('2014-12-06 10:00:00')) {
                    $req['ObjRelObj']['meta_value']['big_account_prod_model_tunner'] = $req['ObjRelObj']['meta_value']['big_account_prod_model'];
                    $req['ObjRelObj']['meta_value']['part_name_tunner'] = $req['ObjRelObj']['meta_value']['part_name'];
                }
            }

            // // 华数唛头文件名特殊处理(新版)
            // if (!empty($umc_mark_type)) {

            //     if (empty($inv_type) || $inv_type <= 0) {
            //         throw new Exception('请先给模板“' . $print_tmpl_alias . '”配置字段 “inv_type”', 1);
            //     }

            //     // 判断是否是大唛头
            //     $is_large_tmpl = ('large' == $umc_mark_type) ? true : false;

            //     // 根据不同的类型,选择不同的颜色
            //     $umc_tmpl_set = array();
            //     if (isset($req['ObjRelObj']) && $req['ObjRelObj']['id'] > 0) {
            //         switch ($inv_type) {
            //             case 20://生产备品
            //                 $umc_tmpl_set['color'] = '绿';

            //                 // 设置背景颜色
            //                 if ($is_large_tmpl) {
            //                     $umc_tmpl_set['render_configs'] = array('bgcolors' => array('L9' => '000000'));
            //                 } else {
            //                     $umc_tmpl_set['render_configs'] = array('bgcolors' => array('A2:B5' => '92d050'));
            //                 }
            //                 break;
            //             case 30://售后备品
            //                 $umc_tmpl_set['color'] = '黄';

            //                 // 设置背景颜色
            //                 if ($is_large_tmpl) {
            //                     $umc_tmpl_set['render_configs'] = array('bgcolors' => array('X9' => '000000'));
            //                 } else {
            //                     $umc_tmpl_set['render_configs'] = array('bgcolors' => array('A2:B5' => 'ffff00'));
            //                 }
            //                 break;
            //             case 40://未完订单
            //                 $umc_tmpl_set['color'] = '红';

            //                 // 设置背景颜色
            //                 if ($is_large_tmpl) {
            //                     $umc_tmpl_set['render_configs'] = array('bgcolors' => array('C11' => '000000'));
            //                 } else {
            //                     $umc_tmpl_set['render_configs'] = array('bgcolors' => array('A2:B5' => 'ff66cc'));
            //                 }
            //                 break;
            //             case 50://样品
            //                 $umc_tmpl_set['color'] = '白';

            //                 // 设置背景颜色
            //                 if ($is_large_tmpl) {
            //                     $umc_tmpl_set['render_configs'] = array('bgcolors' => array('L11' => '000000'));
            //                 } else {
            //                     $umc_tmpl_set['render_configs'] = array('bgcolors' => array('A2:B5' => 'ffffff'));
            //                 }
            //                 break;
            //             default://默认用白色
            //                 $umc_tmpl_set['color'] = '白';

            //                 // 设置背景颜色
            //                 if ($is_large_tmpl) {
            //                     $umc_tmpl_set['render_configs'] = array('bgcolors' => array('C9' => '000000'));
            //                 } else {
            //                     $umc_tmpl_set['render_configs'] = array('bgcolors' => array('A2:B5' => 'ffffff'));
            //                 }
            //                 break;
            //         }

            //         $req['render_configs'] = $umc_tmpl_set['render_configs'];
            //     }

            //     // 根据工单信息获取批次及数量
            //     $wip_rel_obj = $g_WipRelObj->getWipRelData($req_id, OCS_WIP_REL_OBJ_TYPE_MARK);
            //     if(!empty($wip_rel_obj['WipRelObj']['release_time']) && strtotime($wip_rel_obj['WipRelObj']['release_time']) < strtotime('2014-12-06 10:00:00')){
            //         $req['ObjRelObj']['meta_value']['big_account_prod_model_tunner'] = $req['ObjRelObj']['meta_value']['big_account_prod_model'];
            //         $req['ObjRelObj']['meta_value']['part_name_tunner'] = $req['ObjRelObj']['meta_value']['part_name'];
            //     }
            //     $erp_batch_nos = $req['ErpMfInfo']['erp_batch_nos'];
            //     if (isset($req['ObjRelObj']['meta_value']['release_batch_no']) && !empty($req['ObjRelObj']['meta_value']['release_batch_no'])) {
            //         $erp_batch_nos = $req['ObjRelObj']['meta_value']['release_batch_no'];
            //     }
            //     $quantity = !empty($req['ObjRelObj']['meta_value']['release_quantity']) ? $req['ObjRelObj']['meta_value']['release_quantity'] : $req['Req']['quantity'];
            //     $inv_type_label = !empty($req['ObjRelObj']['meta_value']['inv_type']['label']) ? $req['ObjRelObj']['meta_value']['inv_type']['label'] : '';
            //     $color = !empty($umc_tmpl_set['color']) ? $umc_tmpl_set['color'] : null;

            //     // 输出的文件名
            //     $name_replaces = array(
            //         'batch_nos' =>  $erp_batch_nos,
            //         'quantity' =>  $quantity,
            //         'inv_type_label' => $inv_type_label,
            //         'color' => $color,
            //     );
            //     // 解析用户定义的文件名
            //     if (!empty($tmpl_set['ReqTmplSet']['output_file_name']) && !empty($name_replaces)) {
            //         $output_file_name = $tmpl_set['ReqTmplSet']['output_file_name'];
            //         foreach ($name_replaces as $replace_key => $replace_value) {
            //             $output_file_name = str_replace('${' . $replace_key . '}', $replace_value, $output_file_name);
            //         }
            //         $file_name = $output_file_name;
            //     }
            // }

            // // 旧版的UMC唛头处理
            // if (!empty($umc_mark_type_old)) {

            //     if (empty($inv_type) || $inv_type <= 0) {
            //         throw new Exception('请先给模板“' . $print_tmpl_alias . '”配置字段 “inv_type”', 1);
            //     }

            //     $umc_tmpl_alias = null;
            //     if (isset($req['ObjRelObj']) && $req['ObjRelObj']['id'] > 0) {
            //         // 根据不同的类型,选择不同的颜色
            //         $umc_tmpl_set = array();
            //         switch ($inv_type) {
            //             case 20://生产备品
            //                 $umc_tmpl_set['color'] = '绿';
            //                 $umc_tmpl_set['alias'] = 'GREEN';
            //                 break;
            //             case 30://售后备品
            //                 $umc_tmpl_set['color'] = '黄';
            //                 $umc_tmpl_set['alias'] = 'YELLOW';
            //                 break;
            //             case 40://未完订单
            //                 $umc_tmpl_set['color'] = '红';
            //                 $umc_tmpl_set['alias'] = 'RED';
            //                 break;
            //             default://默认用白色
            //                 $umc_tmpl_set['color'] = '白';
            //                 $umc_tmpl_set['alias'] = 'WHITE';
            //                 break;
            //         }
            //         // 根据不同的货物类型使用不同的模板
            //         $is_s2_mark = false;
            //         if ('large' == $umc_mark_type_old) {//大唛头
            //             if ('UMC_LG_S2_Mark_Tunner' == $print_tmpl_alias) {//特殊处理S2高频头的情况 add by ziying
            //                 $print_tmpl_alias = 'UMC_LG_Mark_Tunner';
            //                 $is_s2_mark = true;
            //             }
            //             $umc_tmpl_alias = $print_tmpl_alias . '_' . $inv_type;
            //         } else {//小唛头
            //             if ('UMC_SM_S2_Mark_Tunner' == $print_tmpl_alias) {//特殊处理小唛头S2高频头的情况 add by ziying
            //                 $print_tmpl_alias = 'UMC_SM_Mark_Tunner';
            //                 $is_s2_mark = true;
            //             }
            //             $umc_tmpl_alias = $print_tmpl_alias . '_' . $umc_tmpl_set['alias'];
            //         }
            //         // 如果是S2高频头唛头,那么需要对关联字段特殊处理
            //         if ($is_s2_mark) {
            //             $req['ObjRelObj']['meta_value']['tunner_account_mno'] = $req['ObjRelObj']['meta_value']['tunner_account_mno_s2'];
            //             $req['ObjRelObj']['meta_value']['big_account_prod_model_tunner'] = $req['ObjRelObj']['meta_value']['big_account_prod_model_tunner_s2'];
            //             $req['ObjRelObj']['meta_value']['part_name_tunner'] = $req['ObjRelObj']['meta_value']['part_name_tunner_s2'];
            //         }
            //     }
            //     $print_tmpl = $g_PrintTmpl->getPrintTmplByAlias(Req, $umc_tmpl_alias);
            //     if (empty($print_tmpl)) {
            //         throw new Exception('未找到模板,umc_tmpl_alias=' . $umc_tmpl_alias, 1);
            //     }

            //     $wip_rel_obj = $g_WipRelObj->getWipRelData($req_id, OCS_WIP_REL_OBJ_TYPE_MARK);
            //     if(!empty($wip_rel_obj['WipRelObj']['release_time']) && strtotime($wip_rel_obj['WipRelObj']['release_time']) < strtotime('2014-12-06 10:00:00')){
            //         $req['ObjRelObj']['meta_value']['big_account_prod_model_tunner'] = $req['ObjRelObj']['meta_value']['big_account_prod_model'];
            //         $req['ObjRelObj']['meta_value']['part_name_tunner'] = $req['ObjRelObj']['meta_value']['part_name'];
            //     }
            //     $erp_batch_nos = $req['ErpMfInfo']['erp_batch_nos'];
            //     if (isset($req['ObjRelObj']['meta_value']['release_batch_no']) && !empty($req['ObjRelObj']['meta_value']['release_batch_no'])) {
            //         $erp_batch_nos = $req['ObjRelObj']['meta_value']['release_batch_no'];
            //     }
            //     $quantity = !empty($req['ObjRelObj']['meta_value']['release_quantity']) ? $req['ObjRelObj']['meta_value']['release_quantity'] : $req['Req']['quantity'];

            //     // 输出的文件名
            //     $file_name_keys = array();
            //     $file_name_keys[] = $erp_batch_nos . '-' . $quantity . '-' . $req['ObjRelObj']['meta_value']['inv_type']['label'] . '-';
            //     if ('large' == $umc_mark_type_old) {//大唛头
            //         $file_name_keys[] = '大白唛头';
            //     } else {//小唛头
            //         $color = !empty($umc_tmpl_set['color']) ? $umc_tmpl_set['color'] : null;
            //         $file_name_keys[] = '小' . $color . '唛头';
            //     }
            //     if(substr_count($print_tmpl_alias, '_Tunner') > 0){//带高频头模板
            //         $file_name_keys[] = '(高频头)';
            //     }
            //     if (!empty($is_s2_mark)) {
            //         $file_name_keys[] = '-S2';
            //     }
            //     $file_name = implode('', $file_name_keys);
            // }

            // 这里只记录从委外单上点击通过cps链接进来的
            if (empty($this->params->query['norecord'])) {
                $g_ShippingMarkDownloadLog = $g_Commons->GlobalModel('ShippingMarkDownloadLog');
                $g_ShippingMarkDownloadLog->saveVersion($req_id, $batch_no, $print_tmpl_alias);
            }

            // 下载Excel
            $g_Excels->export($print_tmpl['Attachment']['id'], $file_name, 'Reqs', $action, null, array($req));
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    }

    /**
     * 导出唛头数据模板
     *
     * OCS-2119 唛头模板做成可配置
     *
     * @Author   zhangguocai
     *
     * @DateTime 2016-12-07T21:46:23+0800
     *
     * @param    string                   $params_base64 [description]
     *
     * @return   [type]                                  [description]
     */
    function expect_shipping_mark_data_tmpl($params_base64 = '') {
        global $g_UserId;
        global $g_Commons;
        $g_ReqTmplSet = $g_Commons->GlobalModel('ReqTmplSet');
        $g_ReqTmplField = $g_Commons->GlobalModel('ReqTmplField');
        $g_Enums = $g_Commons->GlobalController('Enums');

        // 获取参数
        $all_params = json_decode(base64_decode($params_base64), true);
        if (empty($all_params['P']['req_ids'])) {
            throw new Exception('异常：缺少订单req_ids.', 1);
        } elseif (empty($all_params['P']['tmpl'])) {
            throw new Exception('异常：缺少模板别名.', 1);
        }
        $tmpl_alias = $all_params['P']['tmpl'];
        $req_ids = explode(',', $all_params['P']['req_ids']);

        // 模板数据及布局
        $tmpl_datas = $this->{$this->modelClass}->getShippingMarkTmplDatas($req_ids, $tmpl_alias);

        // 下载模板的标题
        $tmpl = $g_ReqTmplSet->findByAlias($tmpl_alias);
        $down_title = '唛头数据模板' . date('His');

        // 执行下载
        $g_Excels = $g_Commons->GlobalController('Excels');
        $g_Excels->datasToExcels($tmpl_datas, $down_title);
    }

    /**
     * 通过模板导入唛头数据（excel）
     *
     * @Author   lishirong
     *
     * @DateTime 2015-12-24T15:06:27+0800
     *
     * @param    string                   $params_base64 [description]
     *
     * @return   [type]                                  [description]
     */
    function import_shipping_mark_data_json($params_base64 = '') {
        global $g_UserId;
        global $g_Commons;
        $g_ReqTmplSet = $g_Commons->GlobalModel('ReqTmplSet');
        $g_ReqTmplField = $g_Commons->GlobalModel('ReqTmplField');
        $this->autoRender = false;
        $result = $g_Commons->initResult();

        // 缓存数据的唯一键
        $tmpl_data_redis_key = 'mark_tmpl_data_' . md5($params_base64) . '_' . $g_UserId;

        try {

            // 验证上传的文件是否符合
            $upload_file = !empty($_FILES['file']) ? $_FILES['file'] : array();
            if (empty($_SERVER['REQUEST_METHOD']) || 'POST' != $_SERVER['REQUEST_METHOD']) {
                throw new Exception('操作异常.', 1);
            } elseif (empty($upload_file)) {
                throw new Exception('没找到上传的文件.', 1);
            } elseif (!empty($upload_file['error']) || empty($upload_file['size'])) {
                throw new Exception('上传附件出错，请重新上传.', 1);
            }
            // 获取并验证上传的文件信息
            $extension = pathinfo($upload_file['name'], PATHINFO_EXTENSION);
            if (!in_array($extension, array('xlsx', 'xls'))) {
                throw new Exception('不支持此文件类型，请重新上传.', 1);
            }

            // 获取参数
            $all_params = json_decode(base64_decode($params_base64), true);
            if (empty($all_params['P']['req_ids'])) {
                throw new Exception('异常：缺少订单req_ids.', 1);
            } elseif (empty($all_params['P']['tmpl'])) {
                throw new Exception('异常：缺少模板别名.', 1);
            }
            $tmpl_alias = $all_params['P']['tmpl'];
            $req_ids = explode(',', $all_params['P']['req_ids']);

            // 模板数据及布局
            $tmpl_datas = $this->{$this->modelClass}->getShippingMarkTmplDatas($req_ids, $tmpl_alias);
            $layout_cols = !empty($tmpl_datas['layout_cols']) ? $tmpl_datas['layout_cols'] : array();//布局字段
            $layout_datas = !empty($tmpl_datas['layout_datas']) ? $tmpl_datas['layout_datas'] : array();//布局用到的数据

            // 解析模板
            App::import('Vendor', 'PHPExcel/PHPExcel/IOFactory');
            App::import('Vendor', 'PHPExcel/PHPExcel');
            switch ($extension) {
                case 'xls':
                    $reader_type = 'Excel5';
                break;
                case 'xlsx':
                    $reader_type = 'Excel2007';
                break;
                default:
                    throw new Exception('文件类型不支持#' . $extension, 1);
                break;
            }
            $objReader = PHPExcel_IOFactory::createReader($reader_type);
            $objPHPExcel = $objReader->load($upload_file['tmp_name']); //载入文件
            $objWorksheet = $objPHPExcel->getActiveSheet(); //获取当前工作簿
            // 模板数据最大行数
            $max_row = $objWorksheet->getHighestRow();
            $tmpl_data_row = $max_row - 1;//由于Excel的第一行是标题
            // 数据实际行数
            $data_max_row = count($layout_datas);

            // 验证导入的模板是否符合
            if (empty($max_row)) {
                throw new Exception('唛头数据模板导入数据异常.', 1);
            } elseif ($tmpl_data_row != $data_max_row) {
                throw new Exception('导入的唛头数据有' . $tmpl_data_row . '行和原来的' . $data_max_row . '行不一致.', 1);
            }

            // 匹配并缓存数据
            $redis_req_datas = array();
            $row_num = 1;//由于Excel的第一行是标题
            foreach ($layout_datas as $data_index => $layout_data) {
                $row_num++;
                $cell_index = -1;
                foreach ($layout_cols as $col_field => $layout_col) {
                    $cell_index++;

                    // 只有是用户自定义字段,才进行数据替换
                    if (empty($layout_col['type']) || OCS_REQ_TMPL_FIELD_TYPE_CUSTOMIZED != $layout_col['type']) {
                        continue;
                    }
                    // 只支持导入自定义字段的值 DiyData.xxx
                    $field_set = explode('.', $col_field);
                    if (2 != count($field_set)) {
                        continue;
                    }
                    list($model, $field) = $field_set;

                    // 获取当前单元格的原数据值
                    $item_value = isset($layout_data[$model][$field]) ? $layout_data[$model][$field] : null;

                    // 单元格的坐标
                    $columnLetter = PHPExcel_Cell::stringFromColumnIndex($cell_index);
                    $coordinate = $columnLetter . $row_num;//单元格的坐标

                    //获取单元格值
                    $tmpl_value = $objWorksheet->getCell($coordinate)->getValue();
                    $tmpl_value = trim($tmpl_value);

                    // 记录用到导入的值
                    $redis_req_data = array();
                    $redis_req_data['old_value'] = $item_value;
                    $redis_req_data['new_value'] = $tmpl_value;
                    $redis_req_datas[$layout_data['Req']['id']][$model][$field] = $redis_req_data;
                }
            }
            $g_Commons->setRedisCache($tmpl_data_redis_key, json_encode($redis_req_datas));

            $result['success'] = true;
            $result['message'] = '解析缓存成功';
            $result['datas'] = $redis_req_datas;
        } catch (Exception $e) {
            $result['message'] = $e->getMessage();
        }

        echo json_encode($result);
    }

    /**
     * 获取OA流程状态相关数据
     *
     * @Author   lishirong
     *
     * @DateTime 2017-01-19T15:34:34+0800
     *
     * @return   [type]                   [description]
     */
    function get_oa_prod_review_info_json() {
        global $g_Commons;
        $g_RelReq = $g_Commons->GlobalModel('RelReq');
        $result = $g_Commons->initResult();
        $this->autoRender = false;
        $this->recursive = -1;
        $this->header('Content-Type: application/json');

        if (empty($_GET) || empty($_GET['req_ids'])) {
            return $this->response->body(json_encode($result));
        }
        $req_ids = $_GET['req_ids'];

        $fd_ids = $g_RelReq->find('list', array(
            'conditions' => array(
                'RelReq.req_id' => $req_ids,
                'RelReq.oa_prod_review_fd_id IS NOT NULL',
                "RelReq.oa_prod_review_fd_id != ''",
            ),
            'fields' => array(
                'RelReq.req_id',
                'RelReq.oa_prod_review_fd_id',
            )
        ));
        if (empty($fd_ids)) { //这些订单未发起OA流程，不需处理
            $result['success'] = true;
            return $this->response->body(json_encode($result));
        }
        $datas = array();
        foreach ($fd_ids as $req_id => $fd_id) {
            $po_result = $g_Commons->getOaWorkFlowData($fd_id);
            if (!$po_result['success']) { //暂不需处理
                continue;
            }
            $datas[$req_id] = !empty($po_result['datas']['reviewInfo']) ? $po_result['datas']['reviewInfo'] : array();
        }

        $result['success'] = true;
        $result['datas'] = $datas;
        return $this->response->body(json_encode($result));
    }

    /**
     * 获取产品\产品型号库存数据
     *
     * @Author   lishirong
     *
     * @DateTime 2017-03-22T11:00:05+0800
     *
     * @return   [type]                   [description]
     */
    function get_stock_qty_ajax() {
        global $g_Commons;
        $result = $g_Commons->initResult();
        $this->autoRender = false;
        $this->header('Content-Type: application/json');

        if (empty($_GET)) {
            $result['message'] = '参数为空';
            return $this->response->body(json_encode($result));
        }
        extract($_GET);
        if (empty($req_ids)) {
            $result['message'] = '参数req_ids为空';
            return $this->response->body(json_encode($result));
        }

        $datas = array();
        foreach ($req_ids as $req_id) {
            $stock = $this->{$this->modelClass}->getProductStockInfoByReqId($req_id);

            $datas[$req_id] = $stock;
        }

        $result['success'] = true;
        $result['datas'] = $datas;

        return $this->response->body(json_encode($result));
    }

    /**
     * 查看\选择关联的备货订单
     *
     * @Author   lishirong
     *
     * @DateTime 2017-04-13T10:45:09+0800
     *
     * @param    [type]                   $account_id       [收货客户]
     * @param    [type]                   $real_account_id  [真实客户]
     * @param    [type]                   $product_id       [产品ID]
     * @param    [type]                   $target_req_ids   [对该订单进行关联\取消关联 备货的操作]
     * @param    [type]                   $req_ids          [查询req_ids关联的所有备货订单]
     *
     * @return   [type]                       [description]
     */
    function pop_view_rel_stock_order() {
        global $g_Commons;
        $g_ReqRelStockOrder = $g_Commons->GlobalModel('ReqRelStockOrder');
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_RelProduct = $g_Commons->GlobalModel('RelProduct');
        $g_RolePrivs = $g_Commons->GlobalController('RolePrivs');
        $this->set('title_for_layout', '关联备货订单');

        if (!$g_RolePrivs->get_priv_level('Reqs', 'common_owner_priv')) {
            $this->set('error_msg', '抱歉，你无权进行此操作，请联系系统管理员。');
            return;
        }

        // extract($this->params->params['named']);
        $account_id = isset($this->params->params['named']['account_id']) ? $this->params->params['named']['account_id'] : 0;
        $product_id = isset($this->params->params['named']['product_id']) ? $this->params->params['named']['product_id'] : 0;
        $real_account_id = isset($this->params->params['named']['real_account_id']) ? $this->params->params['named']['real_account_id'] : 0;
        $real_account_id = isset($this->params->params['named']['real_account_id']) ? $this->params->params['named']['real_account_id'] : 0;
        $target_req_ids = isset($this->params->params['named']['target_req_ids']) ? explode(',', $this->params->params['named']['target_req_ids']) : 0;
        // $req_ids = isset($this->params->params['named']['req_ids']) ? explode(',', $this->params->params['named']['req_ids']) : 0;

        $this->set('target_req_ids', $target_req_ids);

        // if (!empty($req_ids)) { //指定订单，则查找该订单对应的备货订单
        //     $req_ids = explode(',', $req_ids);
        //     $conds['Req.id'] = $req_ids;
        // }

        $orders = array();
        if (!empty($target_req_ids)) {//指定需要关联的订单
            $target_reqs = $this->Req->find('all', array(
                    'conditions' => array(
                    'Req.id' => $target_req_ids,
                    ),
                    'fields' => array(
                        'Req.id',
                        'Req.name',
                        'Req.ebs_order_number',
                        'Req.account_id',
                        'Req.stock_account_id',
                        'Req.product_id',
                    'Req.quantity',
                    )
                ));
            if (empty($target_reqs)) {
                $this->set('error_msg', '指定不存在，target_req_ids=' . implode(',', $target_req_ids));
                    return;
                }
            $index_target_reqs = array();

            foreach ($target_reqs as $target_req) {
                $target_req_id = $target_req['Req']['id'];
                $index_target_reqs[$target_req_id] = $target_req;

                $account_id = $target_req['Req']['account_id'];
                $real_account_id = $target_req['Req']['stock_account_id'];
                $product_id = $target_req['Req']['product_id'];
                if (empty($account_id) || empty($product_id)) {
                    $this->set('error_msg', '必须参数为空，加载数据失败，请联系管理员处理');
                    return;
                }

                //获取可关联备货订单，方法内有缓存
                $tmp_orders = $this->Req->getRelStockOrders($account_id, $product_id, $real_account_id);

                $orders[$target_req_id] = $tmp_orders;
            }
            $this->set('target_reqs', $index_target_reqs);
        } else {
            if (empty($account_id) || empty($product_id)) {
                $this->set('error_msg', '必须参数为空，加载数据失败，请联系管理员处理');
                return;
            }

            $orders[] = $this->Req->getRelStockOrders($account_id, $product_id, $real_account_id);
        }

        $this->set('orders', $orders);
    }

    /**
     * 关联\取消关联 订单对应的备货订单
     *
     * @Author   lishirong
     *
     * @DateTime 2017-04-17T17:34:44+0800
     *
     * @param    [type]                   $req_id           [当前订单]
     * @param    [type]                   $rel_stock_req_id [需要关联的备货订单]
     * @param    [type]                   $action           [link:关联  || unlink:取消关联]
     */
    function set_req_rel_stock_order_ajax() {
        global $g_Commons;
        global $g_UserId;
        $g_ReqRelStockOrder = $g_Commons->GlobalModel('ReqRelStockOrder');
        $result = $g_Commons->initResult();

        extract($this->params->params['named']);
        if (empty($req_id) || empty($rel_stock_req_id) || empty($action) || !in_array($action, array('link', 'unlink', 'admin_link'))) {
            $result['message'] = '参数错误，请联系管理员处理';
            return $this->responseJsonBody($result);
        }

        //保存关联关系
        $po_result = $g_ReqRelStockOrder->saveReqRelStockOrder($req_id, $rel_stock_req_id, $action);
        if (!$po_result['success']) {
            return $this->responseJsonBody($po_result);
        }

        $result['success'] = true;
        return $this->responseJsonBody($result);
    }

    /**
     * 检查订单是否需要审核关联的备货订单
     *
     * @Author   lishirong
     *
     * @DateTime 2017-04-24T20:06:43+0800
     *
     * @return   [type]                   [description]
     */
    function check_is_need_audit_rel_stock_order_ajax() {
        global $g_Commons;
        global $g_UserId;
        $result = $g_Commons->initResult();

        $target_req_ids = !empty($_GET['req_ids']) ? $_GET['req_ids'] : array();
        if (empty($target_req_ids)) {
            $result['message'] = '参数错误，req_ids为空';
            return $this->responseJsonBody($result);
        }
        $datas = array(
            'is_need_audit' => false, //默认不需要审核
        );
        $result['datas'] = $datas;

        $target_reqs = $this->Req->find('all', array(
            'joins' => array(
                array(
                    'table' => 'contracts',
                    'alias' => 'Contract',
                    'type' => 'inner',
                    'conditions' => 'Contract.id = Req.rel_obj_id'
                ),
            ),
            'conditions' => array(
                'Req.id' => $target_req_ids,
                'Contract.ebs_stage < ' . OCS_CONTRACT_EBS_STAGE_ADVANCE_PURCHASE, //订单阶段>=3.1的不需要关联处理
            ),
            'fields' => array(
                'Req.id',
                'Req.name',
                'Req.ebs_order_number',
                'Req.account_id',
                'Req.stock_account_id',
                'Req.product_id',
                'Req.quantity',
            )
        ));
        if (empty($target_reqs)) {
            $result['success'] = true;
            return $this->responseJsonBody($result);
        }
        $index_target_reqs = array();

        foreach ($target_reqs as $target_req) {
            $target_req_id = $target_req['Req']['id'];

            $account_id = $target_req['Req']['account_id'];
            $real_account_id = $target_req['Req']['stock_account_id'];
            $product_id = $target_req['Req']['product_id'];

            //获取可关联备货订单，方法内有缓存
            $orders = $this->Req->getRelStockOrders($account_id, $product_id, $real_account_id);
            if (!empty($orders)) { //存在可关联备货，则直接返回
                $datas['is_need_audit'] = true;

                $result['success'] = true;
                $result['datas'] = $datas;
                return $this->responseJsonBody($result);
            }
        }

        $result['success'] = true;
        return $this->responseJsonBody($result);
    }

    /**
     * 调用ＯＡ新产品更新接口，将最新的订单信息更新至ＯＡ
     *
     * @Author   lishirong
     *
     * @DateTime 2017-04-28T15:44:30+0800
     *
     * @param    [type]                   $req_id [description]
     *
     * @return   [type]                           [description]
     */
    function update_oa_product_review_json($req_id = null) {
        global $g_Commons;
        $result = $g_Commons->initResult();

        if (empty($req_id)) {
            $result['message'] = '参数错误，req_ids为空';
            return $this->responseJsonBody($result);
        }
        $result = $this->Req->addCallOaNewProdFlowJob($req_id);
        return $this->responseJsonBody($result);
    }

    /**
     * 展示合同关联页面
     *
     * @Author   zhangguocai
     *
     * @DateTime 2017-05-04T15:50:01+0800
     *
     * @param    string                   $contract_no       [description]
     * @param    string                   $type              [description]
     * @param    string                   $tmpl_names_string [description]
     *
     * @return   [type]                                      [description]
     */
    function view_contract_rel_page($contract_no = '', $type = 'print', $tmpl_names_string = '') {
        global $g_Commons;
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');

        $this->layout = 'pdf';

        // 接收参数并重构
        if (empty($contract_no)) {
            $this->set('error_message', '缺少合同号');
            return;
        } elseif (empty($tmpl_names_string)) {
            $this->set('error_message', '缺少模板名称');
            return;
        }
        $tmpl_names = explode(',', $tmpl_names_string);
        $this->set('tmpl_names', $tmpl_names);

        // 获取合同数据
        $post_data = array('contract_no' => $contract_no, 'type' => $type);
        $result = $this->Req->getContractReqDatas($post_data);
        if (empty($result['success'])) {
            $this->set('error_message', $result['message']);
            return;
        }

        // 格式化合同数据
        $format_contract = $this->Req->formatContractForPrint($result['set']['Contract'], $result['set']['Opt']);
        if (!isset($format_contract['success']) || true != $format_contract['success']) {
            $this->set('error_message', $format_contract['message']);
            return;
        }

        // 验证是否已经分派
        $contract_rel_tmpl = $g_ContractRelTmpl->findByContractNo($contract_no);
        if (empty($contract_rel_tmpl['ContractRelTmpl']['id'])) {
            $this->set('error_message', '请先分派合同');
            return;
        }
        $contract_rel_tmpl_id = $contract_rel_tmpl['ContractRelTmpl']['id'];

        // 获取界面关联数据
        $obj_rel_obj = $g_ObjRelObj->getTopOneRelObjData(ContractRelTmpl, $contract_rel_tmpl_id, 0, 'ContractRelTmpl.page_rel_data');
        $meta_values = !empty($obj_rel_obj['ObjRelObj']['meta_value']) ? json_decode($obj_rel_obj['ObjRelObj']['meta_value'], true) : array();

        global $g_ContractOptsJson;
        $result['ContractOptsJson']['edit_opts'] = $meta_values;
        $g_ContractOptsJson = $result['ContractOptsJson'];
        $this->set('FsFileInfoPath', $result['FsFileInfoPath']);

        $this->set('Money', $result['Money']);
        $this->set('contract_signature', $result['contract_signature']);

        $this->set('opts', $format_contract['datas']['opts']);
        $this->set('contract_head', $format_contract['datas']['contract_head']);
        $this->set('contracts', $format_contract['datas']['contracts']);

        $account_cno = !empty($format_contract['datas']['contract_head']['account_cno']) ? $format_contract['datas']['contract_head']['account_cno'] : $contract_no;
        $this->set('title_for_layout', $account_cno);
    }

    /**
     * 保存合同关联页面的数据
     *
     * @Author   zhangguocai
     *
     * @DateTime 2017-04-28T21:29:57+0800
     */
    public function set_contract_rel_page_data_json() {
        global $g_Commons;
        $g_ObjRelObj = $g_Commons->GlobalModel('ObjRelObj');
        $g_ContractRelTmpl = $g_Commons->GlobalModel('ContractRelTmpl');

        $result = $g_Commons->initResult();

        try {

            // 获取提交的参数
            $params = array(
                'contract_no' => '',
                'datas' => array(),
            );
            $params = $g_Commons->getPostDatas($this, $params);
            extract($params);//将提交的参数转成变量

            if (empty($contract_no)) {
                throw new Exception("缺少合同号", 1);
            } elseif (empty($datas)) {
                throw new Exception("缺少需要保存的数据", 1);
            }

            // 验证是否已经分派
            $contract_rel_tmpl = $g_ContractRelTmpl->findByContractNo($contract_no);
            if (empty($contract_rel_tmpl['ContractRelTmpl'])) {
                throw new Exception('请先分派合同.', 1);
            } elseif (OCS_CONTRACT_REL_TMPL_STATUS_DONE == $contract_rel_tmpl['ContractRelTmpl']['status']) {
                throw new Exception('合同已审核完成, 不允许编辑.', 1);
            }
            $contract_rel_tmpl = $contract_rel_tmpl['ContractRelTmpl'];

            // 如果有入参,那么保存设置
            $conds = array(
                'model_def_id' => ContractRelTmpl,
                'rel_obj_id' => $contract_rel_tmpl['id'],
                'meta_type' => 0,
                'meta_key' => 'ContractRelTmpl.page_rel_data',
            );
            $result = $g_ObjRelObj->setRelValuesByParmas($conds, $datas, false);
        } catch (Exception $e) {
            $result['message'] = $e->getMessage();
        }

        return $this->responseJsonBody($result);
    }

    function test() {
        pr('xxxx');
    }

    /**
     * 检测产品的适用范围
     *
     * @Author   linfangjie
     *
     * @DateTime 2017-05-15T15:58:07+0800
     *
     * @param unknown $product_id 产品id
     * @param string $allow_prod_bizs 产品所属的事业部
     * @param number $is_has_stock 是否出库存  否=0，是=1
     * @param string $quantity 订单数量
     * @param number $contract_type_id 订单类型id
     * @param string $req_stock_account_id 订单真实客户id
     * @param string $req_account_id 订单客户id
     * @return string|Ambigous <string, unknown>|unknown
     */
    function vertifyReqProduct($product_id, $allow_prod_bizs = null, $is_has_stock = 0, $quantity = null, $contract_type_id = 0, $req_stock_account_id = null, $req_account_id = null){
        global $g_BizId;
        global $g_Commons;
        $g_Product = $g_Commons->GlobalModel('Product');
        $g_Type = $g_Commons->GlobalModel('Type');
        $g_AccountRelObj = $g_Commons->GlobalModel('AccountRelObj');
        $result = $g_Commons->initResult(true);
        $this->autoRender = false;

        if (empty($product_id) || empty($contract_type_id)) {
            $result['success'] = false;
            $result['message'] = '产品id或订单类型id不能为空。';
            return $result;
        }

        $conds = array(
            'Product.id' => $product_id,
            'Product.is_delete' => 0
        );
        if (! empty($allow_prod_bizs)) {
            $conds['Product.biz_id'] = $allow_prod_bizs;
        }

        // 查找产品的相关信息
        $product = $g_Product->find('first', array(
            'joins' => array(
                array(
                    'table' => 'prod_model_details',
                    'alias' => 'ProdModelDetail',
                    'type' => 'LEFT',
                    'conditions' => 'ProdModelDetail.id = Product.pcb_id'
                ),
                array(
                    'table' => 'prod_models',
                    'alias' => 'ProdModel',
                    'type' => 'LEFT',
                    'conditions' => 'ProdModel.id = Product.prod_model_id'
                )
            ),
            'conditions' => $conds,
            'fields' => array(
                'Product.*',
                'ProdModelDetail.id,ProdModelDetail.use_state',
                'ProdModel.name, ProdModel.prod_folder_id'
            )
        ));

        if (empty($product['Product']['id'])) {
            $result['success'] = false;
            $result['message'] = '产品不存在或者是无效产品.';
            return $result;
        }

        $ProdFolder = $g_Commons->GlobalModel('ProdFolder');
        $prod_folder_ids = $ProdFolder->find('first', array(
            'conditions' => array('id' => $product['ProdModel']['prod_folder_id']),
            'fields' => 'ProdFolder.parents_tree'
        ));
        $prod_folder_ids = explode(',', $prod_folder_ids['ProdFolder']['parents_tree']);
        $prod_folder_ids[] = $product['ProdModel']['prod_folder_id'];
        $parent_folder = $ProdFolder->find('first', array(
            'conditions' => array(
                'id' => $prod_folder_ids,
                'parent_id' => 0
            ),
            'fields' => 'ProdFolder.name'
        ));
        $parent_folder = $parent_folder['ProdFolder']['name'];

        // 获取当前订单类型
        $OrderType = $g_Type->find('first', array(
            'conditions' => array('Type.id' => $contract_type_id),
            'fields' => array('Type.id', 'Type.name', 'Type.code')
        ));
        $is_dev_order = false === strpos($OrderType['Type']['name'], '研发') ? 0 : 1;

        $disable_states = array('已终止', '已作废'); //这些状态的产品不可用 '已退市'默认出库存可用
        $old_disable_states = array('禁用'); //老产品型号的pcb状态
        $disable_states = array_merge($disable_states, $old_disable_states);
        if (1 != $is_dev_order) {
            // 非研发订单，这些阶段不可录单
            $disable_states[] = '未承认';
        } else {
            $disable_states[] = '初始';
            $disable_states[] = '概设';
            $disable_states[] = '详设';
            $disable_states[] = '样机';
        }
        if (! $is_has_stock) {
            $disable_states[] = '已退市';
        }

        $limit_quantity_states = array(
            '未承认',
            '客户试用'
        );
        // 可录单，但需限定数量的状态
        if (OCS_BIZ_TYPE_TV == $product['Product']['biz_id'] && !empty($product['ProdModelDetail']['use_state']) && in_array($product['ProdModelDetail']['use_state'], $disable_states)) {
            $result['success'] = false;
            $result['message'] = '保存失败，产品 ' . $product['Product']['name'] . ' 的产品全称（PCB周期）生命周期状态为#' . $product['ProdModelDetail']['use_state'];
            $result['datas'] = $product['ProdModelDetail'];

            if ('已退市' == $product['ProdModelDetail']['use_state']) {
                $result['message'] = '保存失败，产品 ' . $product['Product']['name'] . ' 的产品全称是“已退市”状态，只允许出库存。';
            }
            return $result;
        }
        if (OCS_BIZ_TYPE_TV == $product['Product']['biz_id'] && !empty($product['ProdModelDetail']['use_state']) && in_array($product['ProdModelDetail']['use_state'], $limit_quantity_states) && !empty($quantity) && $quantity > 300) {
            $result['success'] = false;
            $result['message'] = '保存失败，产品 ' . $product['Product']['name'] . ' 的产品全称（PCB周期）生命周期状态为#' . $product['ProdModelDetail']['use_state'] . ',订单数量不能大于 300 pcs.';

            if ('已退市' == $product['ProdModelDetail']['use_state']) {
                $result['message'] = '保存失败，产品 ' . $product['Product']['name'] . ' 的产品全称是“已退市”状态，只允许出库存。';
            }
            $result['datas'] = $product['ProdModelDetail'];
            return $result;
        }

        if (OCS_BIZ_TYPE_MID == $product['Product']['biz_id'] && 'PCBA' == $parent_folder) {
            // MID 板卡的订单产品全称状态限制
            $disable_states_mid = array();
            $disable_states_mid[] = '初始化';
            $disable_states_mid[] = '概设';
            $disable_states_mid[] = '详设';
            $disable_states_mid[] = '已退市';
            $disable_states_mid[] = '已终止';
            $disable_states_mid[] = '已作废';
            if (!empty($product['ProdModelDetail']['use_state']) && in_array($product['ProdModelDetail']['use_state'], $disable_states_mid)) {
                $result['success'] = false;
                $result['message'] = '保存失败，产品 ' . $product['Product']['name'] . ' 的产品全称（PCB周期）生命周期状态为#' . $product['ProdModelDetail']['use_state'] . ', 不可录单.';

                if ('已退市' == $product['ProdModelDetail']['use_state']) {
                    $result['message'] = '保存失败，产品 ' . $product['Product']['name'] . ' 的产品全称是“已退市”状态，只允许出库存。';
                }
                $result['datas'] = $product['ProdModelDetail'];
                return $result;
            }

            $limit_quantity_states_mid = array();
            $limit_quantity_states_mid['样机'] = 50;
            // $limit_quantity_states_mid['中试'] = 100;
            $limit_quantity_states_mid['小批量'] = 300;
            if (!empty($product['ProdModelDetail']['use_state']) && !empty($limit_quantity_states_mid[$product['ProdModelDetail']['use_state']]) && $quantity > $limit_quantity_states_mid[$product['ProdModelDetail']['use_state']]) {
                $result['success'] = false;
                $result['message'] = '保存失败，产品 ' . $product['Product']['name'] . ' 的产品全称（PCB周期）生命周期状态为#' . $product['ProdModelDetail']['use_state'] . ', 订单数量不能大于 ' . $limit_quantity_states_mid[$product['ProdModelDetail']['use_state']] . ' pcs.';

                if ('已退市' == $product['ProdModelDetail']['use_state']) {
                    $result['message'] = '保存失败，产品 ' . $product['Product']['name'] . ' 的产品全称是“已退市”状态，只允许出库存。';
                }
                $result['datas'] = $product['ProdModelDetail'];
                return $result;
            }
        }

        //     // 验证真实客户
        //     if (isset($TempReq['stock_account_id']) && ! empty($TempReq['stock_account_id'])) {
        //         $stock_account_id = $g_Accounts->getAccountIdByShortNameAndSourceType($TempReq['stock_account_id'], 'EBS');
        //         if (empty($stock_account_id)) {
        //             $result['success'] = false;
        //             $result['message'] = '真实客户 #' . $TempReq['stock_account_id'] . '不存在';
        //             return $result;
        //         }
        //         $Req['stock_account_id'] = $stock_account_id;
        //     }

        // 状态为“逐步退市”且是A客户专用的产品，除A客户外，其他客户只能录 “是” 出库存的单
        $available_account_ids = $g_AccountRelObj->getAccountIdsByProdModelId($product['Product']['prod_model_id']);
        if ('逐步退市' == $product['ProdModelDetail']['use_state'] && ! $is_has_stock && ! empty($available_account_ids)) {
            $g_Account = $g_Commons->GlobalModel('Account');

            $account_names = $g_Account->find('list', array(
                'conditions' => array(
                    'Account.id' => $available_account_ids
                ),
                'fields' => array(
                    'Account.short_name'
                )
            ));

            if (!empty($req_stock_account_id) && !in_array($req_stock_account_id, $available_account_ids)) { // 如有真实客户，则以真实客户为优先判断
                $account_names = implode(',', $account_names);
                $result['success'] = false;
                $result['message'] = '客户#' . $account_names . ' 专用且 逐步退市 产品，真实客户不在可用客户范围只能录“是”出库存订单，如有疑问可与OCS选项配置人员沟通。';
                $result['datas'] = $product['ProdModelDetail'];
                return $result;
            }

            if (!in_array($req_account_id, $available_account_ids) && empty($req_stock_account_id)) {
                $account_names = implode(',', $account_names);
                $result['success'] = false;
                $result['message'] = '客户#' . $account_names . ' 专用且 逐步退市 产品，非可用客户只能录“是”出库存订单，如有疑问可与OCS选项配置人员沟通。';
                $result['datas'] = $product['ProdModelDetail'];
                return $result;
            }
        }

        // 只要是禁用的产品且“否”出库存都不可录单
        if (! $is_has_stock && OCS_STATUS_STOP == $product['Product']['status']) {
            $result['success'] = false;
            $result['message'] = '保存失败，已禁用产品只能在出库存时使用: ' . $product['Product']['name'];
            $result['datas'] = $product['Product'];
            return $result;
        }
        return $result;
    }
}